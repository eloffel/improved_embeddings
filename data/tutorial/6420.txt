   #[1]github [2]recent commits to pyfasttext:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]10
     * [35]star [36]221
     * [37]fork [38]29

[39]vrasneur/[40]pyfasttext

   [41]code [42]issues 18 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   yet another python binding for fasttext
   [47]fasttext [48]machine-learning [49]python [50]numpy
   [51]python-bindings [52]word-vectors [53]nlp
     * [54]153 commits
     * [55]1 branch
     * [56]12 releases
     * [57]fetching contributors
     * [58]gpl-3.0

    1. [59]python 64.6%
    2. [60]c++ 33.9%
    3. [61]makefile 1.5%

   (button) python c++ makefile
   branch: master (button) new pull request
   [62]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/v
   [63]download zip

downloading...

   want to be notified of new releases in vrasneur/pyfasttext?
   [64]sign in [65]sign up

launching github desktop...

   if nothing happens, [66]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [67]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [68]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [69]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [70]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [71]examples [72]add an example of bayesian optimization search for the
   hyperparameters nov 4, 2017
   [73]src [74]fix [75]#43[76]: parse boolean quantization arguments aug
   11, 2018
   [77]test [78]get access to the subword vectors oct 14, 2017
   [79].gitignore
   [80].gitmodules
   [81].travis.yml
   [82]license
   [83]manifest.in
   [84]readme.md [85]library is no longer maintained. dec 8, 2018
   [86]readme.rst
   [87]requirements.txt
   [88]setup.py

readme.md

pyfasttext

   warning! pyfasttext is no longer maintained: use the official python
   binding from the fasttext repository:
   [89]https://github.com/facebookresearch/fasttext/tree/master/python

   yet another python binding for [90]fasttext.

   the binding supports python 2.6, 2.7 and python 3. it requires
   [91]cython.

   [92]numpy and [93]cysignals are also dependencies, but are optional.

   pyfasttext has been tested successfully on linux and mac os x.
   warning: if you want to compile pyfasttext on windows, do not compile
   with the cysignals module because it does not support this platform.

table of contents

     * [94]pyfasttext
     * [95]table of contents
          + [96]installation
               o [97]simplest way to install pyfasttext: use pip
                    # [98]possible compilation error
               o [99]cloning
               o [100]requirements for python 2.7
               o [101]building and installing manually
                    # [102]building and installing without optional
                      dependencies
          + [103]usage
               o [104]how to load the library?
               o [105]how to load an existing model?
               o [106]word representation learning
                    # [107]training using skipgram
                    # [108]training using cbow
               o [109]word vectors
                    # [110]word vectors access
                         @ [111]vector for a given word
                              - [112]numpy ndarray
                         @ [113]words for a given vector
                         @ [114]get the number of words in the model
                         @ [115]get all the word vectors in a model
                              - [116]numpy ndarray
                    # [117]misc operations with word vectors
                         @ [118]word similarity
                         @ [119]most similar words
                         @ [120]analogies
               o [121]text classification
                    # [122]supervised learning
                    # [123]get all the labels
                    # [124]get the number of labels
                    # [125]prediction
                         @ [126]labels and probabilities
                              - [127]normalized probabilities
                         @ [128]labels only
                    # [129]quantization
                         @ [130]is a model quantized?
               o [131]subwords
                    # [132]get the subwords
                    # [133]get the subword vectors
               o [134]sentence and text vectors
                    # [135]unsupervised models
                    # [136]supervised models
               o [137]misc utilities
                    # [138]show the module version
                    # [139]show fasttext version
                    # [140]show the model (hyper)parameters
                    # [141]show the model version number
                    # [142]extract labels or classes from a dataset
                         @ [143]extract labels
                         @ [144]extract classes
               o [145]exceptions
               o [146]interruptible operations

installation

   to compile pyfasttext, make sure you have the following compiler:
     * gcc (g++) with c++11 support.
     * llvm (clang++) with (at least) partial c++17 support.

simplest way to install pyfasttext: use pip

   just type these lines:
pip install cython
pip install pyfasttext

possible compilation error

   if you have a compilation error, you can try to install cysignals
   manually:
pip install cysignals

   then, retry to install pyfasttext with the already mentioned pip
   command.

cloning

   pyfasttext uses git [147]submodules.
   so, you need to add the --recursive option when you clone the
   repository.
git clone --recursive https://github.com/vrasneur/pyfasttext.git
cd pyfasttext

requirements for python 2.7

   python 2.7 support relies on the [148]future module: pyfasttext needs
   bytes objects, which are not available natively in python2.
   you can install the future module with pip.
pip install future

building and installing manually

   first, install all the requirements:
pip install -r requirements.txt

   then, build and install with setup.py:
python setup.py install

building and installing without optional dependencies

   pyfasttext can export word vectors as numpy ndarrays, however this
   feature can be disabled at compile time.

   to compile without numpy, pyfasttext has a use_numpy environment
   variable. set this variable to 0 (or empty), like this:
use_numpy=0 python setup.py install

   if you want to compile without cysignals, likewise, you can set the
   use_cysignals environment variable to 0 (or empty).

usage

how to load the library?

>>> from pyfasttext import fasttext

how to load an existing model?

>>> model = fasttext('/path/to/model.bin')

   or
>>> model = fasttext()
>>> model.load_model('/path/to/model.bin')

word representation learning

   you can use all the options provided by the fasttext binary (input,
   output, epoch, lr, ...).
   just use keyword arguments in the training methods of the fasttext
   object.

training using skipgram

>>> model = fasttext()
>>> model.skipgram(input='data.txt', output='model', epoch=100, lr=0.7)

training using cbow

>>> model = fasttext()
>>> model.cbow(input='data.txt', output='model', epoch=100, lr=0.7)

word vectors

word vectors access

vector for a given word

   by default, a single word vector is returned as a regular python array
   of floats.
>>> model['dog']
array('f', [-1.308749794960022, -1.8326224088668823, ...])

numpy ndarray

   the model.get_numpy_vector(word) method returns the word vector as a
   numpy ndarray.
>>> model.get_numpy_vector('dog')
array([-1.30874979, -1.83262241, ...], dtype=float32)

   if you want a normalized vector (i.e. the vector divided by its norm),
   there is an optional boolean parameter named normalized.
>>> model.get_numpy_vector('dog', normalized=true)
array([-0.07084749, -0.09920666, ...], dtype=float32)

words for a given vector

   the inverse operation of model[word] or model.get_numpy_vector(word) is
   model.words_for_vector(vector, k).
   it returns a list of the k words closest to the provided vector. the
   default value for k is 1.
>>> king = model.get_numpy_vector('king')
>>> man = model.get_numpy_vector('man')
>>> woman = model.get_numpy_vector('woman')
>>> model.words_for_vector(king + woman - man, k=1)
[('queen', 0.77121970653533936)]

get the number of words in the model

>>> model.nwords
500000

get all the word vectors in a model

>>> for word in model.words:
...   print(word, model[word])

numpy ndarray

   if you want all the word vectors as a big numpy ndarray, you can use
   the numpy_normalized_vectors member. note that all these vectors are
   normalized.
>>> model.nwords
500000
>>> model.numpy_normalized_vectors
array([[-0.07549749, -0.09407753, ...],
       [ 0.00635979, -0.17272158, ...],
       ...,
       [-0.01009259,  0.14604086, ...],
       [ 0.12467574, -0.0609326 , ...]], dtype=float32)
>>> model.numpy_normalized_vectors.shape
(500000, 100) # (number of words, dimension)

misc operations with word vectors

word similarity

>>> model.similarity('dog', 'cat')
0.75596606254577637

most similar words

>>> model.nearest_neighbors('dog', k=2)
[('dogs', 0.7843924736976624), ('cat', 75596606254577637)]

analogies

   the model.most_similar() method works similarly as the one in
   [149]gensim.
>>> model.most_similar(positive=['woman', 'king'], negative=['man'], k=1)
[('queen', 0.77121970653533936)]

text classification

supervised learning

>>> model = fasttext()
>>> model.supervised(input='/path/to/input.txt', output='/path/to/model', epoch=
100, lr=0.7)

get all the labels

>>> model.labels
['label1', 'label2', ...]

get the number of labels

>>> model.nlabels
100

prediction

   to obtain the k most likely labels from test sentences, there are
   multiple model.predict_*() methods.
   the default value for k is 1. if you want to obtain all the possible
   labels, use none for k.

labels and probabilities

   if you have a list of strings (or an iterable object), use this:
>>> model.predict_proba(['first sentence\n', 'second sentence\n'], k=2)
[[('label1', 0.99609375), ('label3', 1.953126549381068e-08)], [('label2', 1.0),
('label3', 1.953126549381068e-08)]]

   if you want to test a single string, use this:
>>> model.predict_proba_single('first sentence\n', k=2)
[('label1', 0.99609375), ('label3', 1.953126549381068e-08)]

   warning: in order to get the same probabilities as the fasttext binary,
   you have to add a newline (\n) at the end of each string.

   if your test data is stored inside a file, use this:
>>> model.predict_proba_file('/path/to/test.txt', k=2)
[[('label1', 0.99609375), ('label3', 1.953126549381068e-08)], [('label2', 1.0),
('label3', 1.953126549381068e-08)]]

normalized probabilities

   for performance reasons, fasttext probabilities often do not sum up to
   1.0.

   if you want normalized probabilities (where the sum is closer to 1.0
   than the original probabilities), you can use the normalized=true
   parameter in all the methods that output probabilities
   (model.predict_proba(), model.predict_proba_file() and
   model.predict_proba_single()).
>>> sum(proba for label, proba in model.predict_proba_single('this is a sentence
 that needs to be classified\n', k=none))
0.9785203068801335
>>> sum(proba for label, proba in model.predict_proba_single('this is a sentence
 that needs to be classified\n', k=none, normalized=true))
0.9999999999999898

labels only

   if you have a list of strings (or an iterable object), use this:
>>> model.predict(['first sentence\n', 'second sentence\n'], k=2)
[['label1', 'label3'], ['label2', 'label3']]

   if you want to test a single string, use this:
>>> model.predict_single('first sentence\n', k=2)
['label1', 'label3']

   warning: in order to get the same probabilities as the fasttext binary,
   you have to add a newline (\n) at the end of each string.

   if your test data is stored inside a file, use this:
>>> model.predict_file('/path/to/test.txt', k=2)
[['label1', 'label3'], ['label2', 'label3']]

quantization

   use keyword arguments in the model.quantize() method.
>>> model.quantize(input='/path/to/input.txt', output='/path/to/model')

   you can load quantized models using the fasttext constructor or the
   model.load_model() method.

is a model quantized?

   if you want to know if a model has been quantized before, use the
   model.quantized attribute.
>>> model = fasttext('/path/to/model.bin')
>>> model.quantized
false
>>> model = fasttext('/path/to/model.ftz')
>>> model.quantized
true

subwords

   fasttext can use subwords (i.e. character ngrams) when doing
   unsupervised or supervised learning.

   you can access the subwords, and their associated vectors, using
   pyfasttext.

get the subwords

   fasttext's id27s can be augmented with subword-level
   information. it is possible to retrieve the subwords and their
   associated vectors from a model using pyfasttext.

   to retrieve all the subwords for a given word, use the
   model.get_all_subwords(word) method.
>>> model.args.get('minn'), model.args.get('maxn')
(2, 4)
>>> model.get_all_subwords('hello') # word + subwords from 2 to 4 characters
['hello', '<h', '<he', '<hel', 'he', 'hel', 'hell', 'el', 'ell', 'ello', 'll', '
llo', 'llo>', 'lo', 'lo>', 'o>']

   for fasttext, < means "beginning of a word" and > means "end of a
   word".

   as you can see, fasttext includes the full word. you can omit it using
   the omit_word=true keyword argument.
>>> model.get_all_subwords('hello', omit_word=true)
['<h', '<he', '<hel', 'he', 'hel', 'hell', 'el', 'ell', 'ello', 'll', 'llo', 'll
o>', 'lo', 'lo>', 'o>']

   when a model is quantized, fasttext may prune some subwords. if you
   want to see only the subwords that are really used when computing a
   word vector, you should use the model.get_subwords(word) method.
>>> model.quantized
true
>>> model.get_subwords('beautiful')
['eau', 'aut', 'ful', 'ul']
>>> model.get_subwords('hello')
['hello'] # fasttext will not use any subwords when computing the word vector, o
nly the full word

get the subword vectors

   to get the individual vectors given the subwords, use the
   model.get_numpy_subword_vectors(word) method.
>>> model.get_numpy_subword_vectors('beautiful') # 4 vectors, so 4 rows
array([[ 0.49022141,  0.13586822,  ..., -0.14065443,  0.89617103], # subword "ea
u"
       [-0.42594951,  0.06260503,  ..., -0.18182631,  0.34219387], # subword "au
t"
       [ 0.49958718,  2.93831301,  ..., -1.97498322, -1.16815805], # subword "fu
l"
       [-0.4368791 , -1.92924356,  ...,  1.62921488, 1.90240896]], dtype=float32
) # subword "ul"

   in fasttext, the final word vector is the average of these individual
   vectors.
>>> import numpy as np
>>> vec1 = model.get_numpy_vector('beautiful')
>>> vecs2 = model.get_numpy_subword_vectors('beautiful')
>>> np.allclose(vec1, np.average(vecs2, axis=0))
true

sentence and text vectors

   to compute the vector of a sequence of words (i.e. a sentence),
   fasttext uses two different methods:
     * one for unsupervised models
     * another one for supervised models

   when fasttext computes a word vector, recall that it uses the average
   of the following vectors: the word itself and its subwords.

unsupervised models

   for unsupervised models, the representation of a sentence for fasttext
   is the average of the normalized word vectors.

   to get the resulting vector as a regular python array, use the
   model.get_sentence_vector(line) method.
   to get the resulting vector as a numpy ndarray, use the
   model.get_numpy_sentence_vector(line) method.
>>> vec = model.get_numpy_sentence_vector('beautiful cats')
>>> vec1 = model.get_numpy_vector('beautiful', normalized=true)
>>> vec2 = model.get_numpy_vector('cats', normalized=true)
>>> np.allclose(vec, np.average([vec1, vec2], axis=0)
true

supervised models

   for supervised models, fasttext uses the regular word vectors, as well
   as vectors computed using word ngrams (i.e. shorter sequences of words
   from the sentence). when computing the average, these vectors are not
   normalized.

   to get the resulting vector as a regular python array, use the
   model.get_text_vector(line) method.
   to get the resulting vector as a numpy ndarray, use the
   model.get_numpy_text_vector(line) method.
>>> model.get_numpy_sentence_vector('beautiful cats') # for an unsupervised mode
l
array([-0.20266785,  0.3407566 ,  ...,  0.03044436,  0.39055538], dtype=float32)
>>> model.get_numpy_text_vector('beautiful cats') # for a supervised model
array([-0.20840774,  0.4289546 ,  ..., -0.00457615,  0.52417743], dtype=float32)

misc utilities

show the module version

>>> import pyfasttext
>>> pyfasttext.__version__
'0.4.3'

show fasttext version

   as there is no version number in fasttext, we use the latest fasttext
   commit hash (from head) as a substitute.
>>> import pyfasttext
>>> pyfasttext.__fasttext_version__
'431c9e2a9b5149369cc60fb9f5beba58dcf8ca17'

show the model (hyper)parameters

>>> model.args
{'bucket': 11000000,
 'cutoff': 0,
 'dim': 100,
 'dsub': 2,
 'epoch': 100,
...
}

show the model version number

   fasttext uses a versioning scheme for its generated models. you can
   retrieve the model version number using the model.version attribute.
   version number description
   -1 for really old models with no version number
   11 first version number added by fasttext
   12 for models generated after fasttext added support for subwords in
   supervised learning
>>> model.version
12

extract labels or classes from a dataset

   you can use the fasttext object to extract labels or classes from a
   dataset. the label prefix (which is __label__ by default) is set using
   the label parameter in the constructor.

   if you load an existing model, the label prefix will be the one defined
   in the model.
>>> model = fasttext(label='__my_prefix__')

extract labels

   there can be multiple labels per line.
>>> model.extract_labels('/path/to/dataset1.txt')
[['label2', 'label5'], ['label1'], ...]

extract classes

   there can be only one class per line.
>>> model.extract_classes('/path/to/dataset2.txt')
['label3', 'label1', 'label2', ...]

exceptions

   the fasttext source code directly calls exit() when something wrong
   happens (e.g. a model file does not exist, ...).

   instead of exiting, pyfasttext raises a python exception
   (runtimeerror).
>>> import pyfasttext
>>> model = pyfasttext.fasttext('/path/to/non-existing_model.bin')
model file cannot be opened for loading!
traceback (most recent call last):
  file "<stdin>", line 1, in <module>
  file "src/pyfasttext.pyx", line 124, in pyfasttext.fasttext.__cinit__ (src/pyf
asttext.cpp:1800)
  file "src/pyfasttext.pyx", line 348, in pyfasttext.fasttext.load_model (src/py
fasttext.cpp:5947)
runtimeerror: fastext tried to exit: 1

interruptible operations

   pyfasttext uses cysignals to make all the computationally intensive
   operations (e.g. training) interruptible.

   to easily interrupt such an operation, just type ctrl-c in your python
   shell.
>>> model.skipgram(input='/path/to/input.txt', output='/path/to/mymodel')
read 12m words
number of words:  60237
number of labels: 0
... # type ctrl-c during training
traceback (most recent call last):
  file "<stdin>", line 1, in <module>
  file "src/pyfasttext.pyx", line 680, in pyfasttext.fasttext.skipgram (src/pyfa
sttext.cpp:11125)
  file "src/pyfasttext.pyx", line 674, in pyfasttext.fasttext.train (src/pyfastt
ext.cpp:11009)
  file "src/pyfasttext.pyx", line 668, in pyfasttext.fasttext.train (src/pyfastt
ext.cpp:10926)
  file "src/cysignals/signals.pyx", line 94, in cysignals.signals.sig_raise_exce
ption (build/src/cysignals/signals.c:1328)
keyboardinterrupt
>>> # you can have your shell back!

     *    2019 github, inc.
     * [150]terms
     * [151]privacy
     * [152]security
     * [153]status
     * [154]help

     * [155]contact github
     * [156]pricing
     * [157]api
     * [158]training
     * [159]blog
     * [160]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [161]reload to refresh your
   session. you signed out in another tab or window. [162]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/vrasneur/pyfasttext/commits/master.atom
   3. https://github.com/vrasneur/pyfasttext#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/vrasneur/pyfasttext
  32. https://github.com/join
  33. https://github.com/login?return_to=/vrasneur/pyfasttext
  34. https://github.com/vrasneur/pyfasttext/watchers
  35. https://github.com/login?return_to=/vrasneur/pyfasttext
  36. https://github.com/vrasneur/pyfasttext/stargazers
  37. https://github.com/login?return_to=/vrasneur/pyfasttext
  38. https://github.com/vrasneur/pyfasttext/network/members
  39. https://github.com/vrasneur
  40. https://github.com/vrasneur/pyfasttext
  41. https://github.com/vrasneur/pyfasttext
  42. https://github.com/vrasneur/pyfasttext/issues
  43. https://github.com/vrasneur/pyfasttext/pulls
  44. https://github.com/vrasneur/pyfasttext/projects
  45. https://github.com/vrasneur/pyfasttext/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/topics/fasttext
  48. https://github.com/topics/machine-learning
  49. https://github.com/topics/python
  50. https://github.com/topics/numpy
  51. https://github.com/topics/python-bindings
  52. https://github.com/topics/word-vectors
  53. https://github.com/topics/nlp
  54. https://github.com/vrasneur/pyfasttext/commits/master
  55. https://github.com/vrasneur/pyfasttext/branches
  56. https://github.com/vrasneur/pyfasttext/releases
  57. https://github.com/vrasneur/pyfasttext/graphs/contributors
  58. https://github.com/vrasneur/pyfasttext/blob/master/license
  59. https://github.com/vrasneur/pyfasttext/search?l=python
  60. https://github.com/vrasneur/pyfasttext/search?l=c++
  61. https://github.com/vrasneur/pyfasttext/search?l=makefile
  62. https://github.com/vrasneur/pyfasttext/find/master
  63. https://github.com/vrasneur/pyfasttext/archive/master.zip
  64. https://github.com/login?return_to=https://github.com/vrasneur/pyfasttext
  65. https://github.com/join?return_to=/vrasneur/pyfasttext
  66. https://desktop.github.com/
  67. https://desktop.github.com/
  68. https://developer.apple.com/xcode/
  69. https://visualstudio.github.com/
  70. https://github.com/vrasneur/pyfasttext/tree/7c0a14e7fd4c4841847223853f8cf6676cd064bb
  71. https://github.com/vrasneur/pyfasttext/tree/master/examples
  72. https://github.com/vrasneur/pyfasttext/commit/614b4d4d361b615a5b774a715b993433f012a820
  73. https://github.com/vrasneur/pyfasttext/tree/master/src
  74. https://github.com/vrasneur/pyfasttext/commit/f97af7ccbf2b6cea5f003e8dec2cc2886be47439
  75. https://github.com/vrasneur/pyfasttext/issues/43
  76. https://github.com/vrasneur/pyfasttext/commit/f97af7ccbf2b6cea5f003e8dec2cc2886be47439
  77. https://github.com/vrasneur/pyfasttext/tree/master/test
  78. https://github.com/vrasneur/pyfasttext/commit/f0e4f0f7c907dd894e7ad410fe677a13fa845a53
  79. https://github.com/vrasneur/pyfasttext/blob/master/.gitignore
  80. https://github.com/vrasneur/pyfasttext/blob/master/.gitmodules
  81. https://github.com/vrasneur/pyfasttext/blob/master/.travis.yml
  82. https://github.com/vrasneur/pyfasttext/blob/master/license
  83. https://github.com/vrasneur/pyfasttext/blob/master/manifest.in
  84. https://github.com/vrasneur/pyfasttext/blob/master/readme.md
  85. https://github.com/vrasneur/pyfasttext/commit/7c0a14e7fd4c4841847223853f8cf6676cd064bb
  86. https://github.com/vrasneur/pyfasttext/blob/master/readme.rst
  87. https://github.com/vrasneur/pyfasttext/blob/master/requirements.txt
  88. https://github.com/vrasneur/pyfasttext/blob/master/setup.py
  89. https://github.com/facebookresearch/fasttext/tree/master/python
  90. https://github.com/facebookresearch/fasttext
  91. http://cython.org/
  92. http://www.numpy.org/
  93. http://cysignals.readthedocs.io/en/latest/
  94. https://github.com/vrasneur/pyfasttext#pyfasttext
  95. https://github.com/vrasneur/pyfasttext#table-of-contents
  96. https://github.com/vrasneur/pyfasttext#installation
  97. https://github.com/vrasneur/pyfasttext#simplest-way-to-install-pyfasttext-use-pip
  98. https://github.com/vrasneur/pyfasttext#possible-compilation-error
  99. https://github.com/vrasneur/pyfasttext#cloning
 100. https://github.com/vrasneur/pyfasttext#requirements-for-python-27
 101. https://github.com/vrasneur/pyfasttext#building-and-installing-manually
 102. https://github.com/vrasneur/pyfasttext#building-and-installing-without-optional-dependencies
 103. https://github.com/vrasneur/pyfasttext#usage
 104. https://github.com/vrasneur/pyfasttext#how-to-load-the-library
 105. https://github.com/vrasneur/pyfasttext#how-to-load-an-existing-model
 106. https://github.com/vrasneur/pyfasttext#word-representation-learning
 107. https://github.com/vrasneur/pyfasttext#training-using-skipgram
 108. https://github.com/vrasneur/pyfasttext#training-using-cbow
 109. https://github.com/vrasneur/pyfasttext#word-vectors
 110. https://github.com/vrasneur/pyfasttext#word-vectors-access
 111. https://github.com/vrasneur/pyfasttext#vector-for-a-given-word
 112. https://github.com/vrasneur/pyfasttext#numpy-ndarray
 113. https://github.com/vrasneur/pyfasttext#words-for-a-given-vector
 114. https://github.com/vrasneur/pyfasttext#get-the-number-of-words-in-the-model
 115. https://github.com/vrasneur/pyfasttext#get-all-the-word-vectors-in-a-model
 116. https://github.com/vrasneur/pyfasttext#numpy-ndarray-1
 117. https://github.com/vrasneur/pyfasttext#misc-operations-with-word-vectors
 118. https://github.com/vrasneur/pyfasttext#word-similarity
 119. https://github.com/vrasneur/pyfasttext#most-similar-words
 120. https://github.com/vrasneur/pyfasttext#analogies
 121. https://github.com/vrasneur/pyfasttext#text-classification
 122. https://github.com/vrasneur/pyfasttext#supervised-learning
 123. https://github.com/vrasneur/pyfasttext#get-all-the-labels
 124. https://github.com/vrasneur/pyfasttext#get-the-number-of-labels
 125. https://github.com/vrasneur/pyfasttext#prediction
 126. https://github.com/vrasneur/pyfasttext#labels-and-probabilities
 127. https://github.com/vrasneur/pyfasttext#normalized-probabilities
 128. https://github.com/vrasneur/pyfasttext#labels-only
 129. https://github.com/vrasneur/pyfasttext#quantization
 130. https://github.com/vrasneur/pyfasttext#is-a-model-quantized
 131. https://github.com/vrasneur/pyfasttext#subwords
 132. https://github.com/vrasneur/pyfasttext#get-the-subwords
 133. https://github.com/vrasneur/pyfasttext#get-the-subword-vectors
 134. https://github.com/vrasneur/pyfasttext#sentence-and-text-vectors
 135. https://github.com/vrasneur/pyfasttext#unsupervised-models
 136. https://github.com/vrasneur/pyfasttext#supervised-models
 137. https://github.com/vrasneur/pyfasttext#misc-utilities
 138. https://github.com/vrasneur/pyfasttext#show-the-module-version
 139. https://github.com/vrasneur/pyfasttext#show-fasttext-version
 140. https://github.com/vrasneur/pyfasttext#show-the-model-hyperparameters
 141. https://github.com/vrasneur/pyfasttext#show-the-model-version-number
 142. https://github.com/vrasneur/pyfasttext#extract-labels-or-classes-from-a-dataset
 143. https://github.com/vrasneur/pyfasttext#extract-labels
 144. https://github.com/vrasneur/pyfasttext#extract-classes
 145. https://github.com/vrasneur/pyfasttext#exceptions
 146. https://github.com/vrasneur/pyfasttext#interruptible-operations
 147. https://git-scm.com/book/en/v2/git-tools-submodules
 148. http://python-future.org/
 149. https://radimrehurek.com/gensim/models/keyedvectors.html
 150. https://github.com/site/terms
 151. https://github.com/site/privacy
 152. https://github.com/security
 153. https://githubstatus.com/
 154. https://help.github.com/
 155. https://github.com/contact
 156. https://github.com/pricing
 157. https://developer.github.com/
 158. https://training.github.com/
 159. https://github.blog/
 160. https://github.com/about
 161. https://github.com/vrasneur/pyfasttext
 162. https://github.com/vrasneur/pyfasttext

   hidden links:
 164. https://github.com/
 165. https://github.com/vrasneur/pyfasttext
 166. https://github.com/vrasneur/pyfasttext
 167. https://github.com/vrasneur/pyfasttext
 168. https://help.github.com/articles/which-remote-url-should-i-use
 169. https://github.com/vrasneur/pyfasttext#pyfasttext
 170. https://github.com/vrasneur/pyfasttext#table-of-contents
 171. https://github.com/vrasneur/pyfasttext#installation
 172. https://github.com/vrasneur/pyfasttext#simplest-way-to-install-pyfasttext-use-pip
 173. https://github.com/vrasneur/pyfasttext#possible-compilation-error
 174. https://github.com/vrasneur/pyfasttext#cloning
 175. https://github.com/vrasneur/pyfasttext#requirements-for-python-27
 176. https://github.com/vrasneur/pyfasttext#building-and-installing-manually
 177. https://github.com/vrasneur/pyfasttext#building-and-installing-without-optional-dependencies
 178. https://github.com/vrasneur/pyfasttext#usage
 179. https://github.com/vrasneur/pyfasttext#how-to-load-the-library
 180. https://github.com/vrasneur/pyfasttext#how-to-load-an-existing-model
 181. https://github.com/vrasneur/pyfasttext#word-representation-learning
 182. https://github.com/vrasneur/pyfasttext#training-using-skipgram
 183. https://github.com/vrasneur/pyfasttext#training-using-cbow
 184. https://github.com/vrasneur/pyfasttext#word-vectors
 185. https://github.com/vrasneur/pyfasttext#word-vectors-access
 186. https://github.com/vrasneur/pyfasttext#vector-for-a-given-word
 187. https://github.com/vrasneur/pyfasttext#numpy-ndarray
 188. https://github.com/vrasneur/pyfasttext#words-for-a-given-vector
 189. https://github.com/vrasneur/pyfasttext#get-the-number-of-words-in-the-model
 190. https://github.com/vrasneur/pyfasttext#get-all-the-word-vectors-in-a-model
 191. https://github.com/vrasneur/pyfasttext#numpy-ndarray-1
 192. https://github.com/vrasneur/pyfasttext#misc-operations-with-word-vectors
 193. https://github.com/vrasneur/pyfasttext#word-similarity
 194. https://github.com/vrasneur/pyfasttext#most-similar-words
 195. https://github.com/vrasneur/pyfasttext#analogies
 196. https://github.com/vrasneur/pyfasttext#text-classification
 197. https://github.com/vrasneur/pyfasttext#supervised-learning
 198. https://github.com/vrasneur/pyfasttext#get-all-the-labels
 199. https://github.com/vrasneur/pyfasttext#get-the-number-of-labels
 200. https://github.com/vrasneur/pyfasttext#prediction
 201. https://github.com/vrasneur/pyfasttext#labels-and-probabilities
 202. https://github.com/vrasneur/pyfasttext#normalized-probabilities
 203. https://github.com/vrasneur/pyfasttext#labels-only
 204. https://github.com/vrasneur/pyfasttext#quantization
 205. https://github.com/vrasneur/pyfasttext#is-a-model-quantized
 206. https://github.com/vrasneur/pyfasttext#subwords
 207. https://github.com/vrasneur/pyfasttext#get-the-subwords
 208. https://github.com/vrasneur/pyfasttext#get-the-subword-vectors
 209. https://github.com/vrasneur/pyfasttext#sentence-and-text-vectors
 210. https://github.com/vrasneur/pyfasttext#unsupervised-models
 211. https://github.com/vrasneur/pyfasttext#supervised-models
 212. https://github.com/vrasneur/pyfasttext#misc-utilities
 213. https://github.com/vrasneur/pyfasttext#show-the-module-version
 214. https://github.com/vrasneur/pyfasttext#show-fasttext-version
 215. https://github.com/vrasneur/pyfasttext#show-the-model-hyperparameters
 216. https://github.com/vrasneur/pyfasttext#show-the-model-version-number
 217. https://github.com/vrasneur/pyfasttext#extract-labels-or-classes-from-a-dataset
 218. https://github.com/vrasneur/pyfasttext#extract-labels
 219. https://github.com/vrasneur/pyfasttext#extract-classes
 220. https://github.com/vrasneur/pyfasttext#exceptions
 221. https://github.com/vrasneur/pyfasttext#interruptible-operations
 222. https://github.com/
