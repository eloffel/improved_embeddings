   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]towards data science
     * [9]data science
     * [10]machine learning
     * [11]programming
     * [12]visualization
     * [13]ai
     * [14]data journalism
     * [15]contribute
     __________________________________________________________________

how did we build book recommender systems in an hour part 1         the
fundamentals

   [16]go to the profile of susan li
   [17]susan li (button) blockedunblock (button) followfollowing
   sep 17, 2017
   [1*be61ks1izdxmv2mniksh1g.png]

   virtually everyone has had an online experience where a website makes
   personalized recommendations in hopes of future sales or ongoing
   traffic. amazon tells you    customers who bought this item also bought   ,
   udemy tells you    students who viewed this course also viewed   . and
   netflix awarded a $1 million prize to a developer team in 2009, for an
   algorithm that increased the accuracy of the company   s recommendation
   system by 10 percent.

   building recommender systems today requires specialized expertise in
   analytics, machine learning and software engineering, and learning new
   skills and tools is difficult and time-consuming. in this post, we will
   start from scratch, covering some basic fundamental techniques and
   implementations in python. in the future posts, we will cover more
   sophisticated methods such as content-based filtering and collaborative
   based filtering.

   so, if you want to learn how to build a recommender system from
   scratch, let   s get started.

data

   [18]book-crossings is a book ratings dataset compiled by cai-nicolas
   ziegler. it contains 1.1 million ratings of 270,000 books by 90,000
   users. the ratings are on a scale from 1 to 10.

   the data consists of three tables: ratings, books info, and users info.
   i downloaded these three tables from [19]here.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
books = pd.read_csv('bx-books.csv', sep=';', error_bad_lines=false, encoding="la
tin-1")
books.columns = ['isbn', 'booktitle', 'bookauthor', 'yearofpublication', 'publis
her', 'imageurls', 'imageurlm', 'imageurll']
users = pd.read_csv('bx-users.csv', sep=';', error_bad_lines=false, encoding="la
tin-1")
users.columns = ['userid', 'location', 'age']
ratings = pd.read_csv('bx-book-ratings.csv', sep=';', error_bad_lines=false, enc
oding="latin-1")
ratings.columns = ['userid', 'isbn', 'bookrating']

ratings data

   the ratings data set provides a list of ratings that users have given
   to books. it includes 1,149,780 records and 3 fields: userid, isbn, and
   bookrating.
   [1*-jy1qqzseivlsy6oqgk8fw.png]

ratings distribution

   the ratings are very unevenly distributed, and the vast majority of
   ratings are 0.
   [1*tp8n6pkfgxybtqwhxoppcq.png]

books data

   the books data set provides book details. it includes 271,360 records
   and 8 fields: isbn, book title, book author, publisher and so on.
   [1*wyswo6ebiyxxyagdnfeang.png]

users data

   this dataset provides the user demographic information. it includes
   278,858 records and 3 fields: user id, location and age.
   [1*asmsa5rhon1frsjxesvcfq.png]

age distribution

   the most active users are among those in their 20   30s.
   [1*pngjzeotyytnnotkrtvcxa.png]

recommendations based on rating counts

   [1*5kcff46x1_mcbwjowr0rfw.png]

   the book with isbn    0971880107    received the most rating counts. let   s
   find out what book it is, and what books are in the top 5.
   [1*gyqakjlj1ayz453fatm2xq.png]

   the book that received the most rating counts in this data set is rich
   shapero   s    wild animus   . and there is something in common among these
   five books that received the most rating counts         they are all novels.
   the recommender suggests that novels are popular and likely receive
   more ratings. and if someone likes    the lovely bones: a novel   , we
   should probably also recommend to him(or her)    wild animus   .

recommendations based on correlations

   we use pearsons   r correlation coefficient to measure linear correlation
   between two variables, in our case, the ratings for two books.

   first, we need to find out the average rating, and the number of
   ratings each book received.
   [1*i88itwar7vhk0icqn5tlya.png]

   observations:

   in this data set, the book that received the most rating counts was not
   highly rated at all. as a result, if we were to use recommendations
   based on rating counts, we would definitely make mistakes here. so, we
   need to have a better system.

to ensure statistical significance, users with less than 200 ratings, and
books with less than 100 ratings are excluded.

   [1*rcvexmanm9idb8ldohkt2w.png]

rating matrix

   we convert the ratings table to a 2d matrix. the matrix will be sparse
   because not every user rated every book.
   [1*lt5fxzpf_b6tqjkksm2new.png]

   let   s find out which books are correlated with the 2nd most rated book
      the lovely bones: a novel   .

   to quote from the [20]wikipedia:    it is the story of a teenage girl
   who, after being raped and murdered, watches from her personal heaven
   as her family and friends struggle to move on with their lives while
   she comes to terms with her own death   .
   [1*p-y_q3xbc_5pz2z1gcf9qg.png]

   we obtained the books    isbns, but we need to find out the titles of the
   books to see whether they make sense.
   [1*jizdejwry2ur8dq5kfpjfa.png]

   let   s select three books from the above highly correlated list to
   examine:    the nanny diaries: a novel   ,    the pilot   s wife: a novel    and
      where the heart is   .

      the nanny diaries    satirizes upper class manhattan society as seen
   through the eyes of their children   s caregivers.

   written by the same author as    the lovely bones   ,    the pilot   s wife    is
   the third novel in shreve   s informal trilogy to be set in a large beach
   house on the new hampshire coast that used to be a convent.

      where the heart is    dramatizes in detail the tribulations of
   lower-income and foster children in the united states.

   these three books sound like they would be highly correlated with    the
   lovely bones   . it seems our correlation recommender system is working.

summary

   in this post, we have learned about how to design simple recommender
   systems that you can implement and test it in an hour. the jupyter
   notebook version for this blog post can be found [21]here. if you want
   to learn more, [22]xavier amatriain   s lecture is a good place to start.

   in a future post, we will cover more sophisticated methods such as
   content-based filtering, [23]k-nearest neighbors, collaborate filtering
   as well as how to provide recommendations and how to test the
   recommender system. until then, enjoy recommendations!

     * [24]data science
     * [25]machine learning
     * [26]id126
     * [27]python
     * [28]pandas

   (button)
   (button)
   (button) 1.5k claps
   (button) (button) (button) 4 (button) (button)

     (button) blockedunblock (button) followfollowing
   [29]go to the profile of susan li

[30]susan li

   becoming an expert in ml, nlp, data story telling and encouraging
   others to do the same. sr data scientist, toronto canada.
   [31]https://www.linkedin.com/in/susanli/

     (button) follow
   [32]towards data science

[33]towards data science

   sharing concepts, ideas, and codes.

     * (button)
       (button) 1.5k
     * (button)
     *
     *

   [34]towards data science
   never miss a story from towards data science, when you sign up for
   medium. [35]learn more
   never miss a story from towards data science
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://towardsdatascience.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/dfee054f978e
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://towardsdatascience.com/how-did-we-build-book-recommender-systems-in-an-hour-the-fundamentals-dfee054f978e&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://towardsdatascience.com/how-did-we-build-book-recommender-systems-in-an-hour-the-fundamentals-dfee054f978e&source=--------------------------nav_reg&operation=register
   8. https://towardsdatascience.com/?source=logo-lo_yjv3wdcu2px0---7f60cf5620c9
   9. https://towardsdatascience.com/data-science/home
  10. https://towardsdatascience.com/machine-learning/home
  11. https://towardsdatascience.com/programming/home
  12. https://towardsdatascience.com/data-visualization/home
  13. https://towardsdatascience.com/artificial-intelligence/home
  14. https://towardsdatascience.com/data-journalism/home
  15. https://towardsdatascience.com/contribute/home
  16. https://towardsdatascience.com/@actsusanli?source=post_header_lockup
  17. https://towardsdatascience.com/@actsusanli
  18. http://www2.informatik.uni-freiburg.de/~cziegler/bx/
  19. http://www2.informatik.uni-freiburg.de/~cziegler/bx/
  20. https://en.wikipedia.org/wiki/the_lovely_bones
  21. https://github.com/susanli2016/machine-learning-with-python/blob/master/recommender systems - the fundamentals.ipynb
  22. https://www.youtube.com/watch?time_continue=83&v=blhq63ygou8
  23. https://medium.com/towards-data-science/how-did-we-build-book-recommender-systems-in-an-hour-part-2-k-nearest-neighbors-and-matrix-c04b3c2ef55c
  24. https://towardsdatascience.com/tagged/data-science?source=post
  25. https://towardsdatascience.com/tagged/machine-learning?source=post
  26. https://towardsdatascience.com/tagged/recommendation-system?source=post
  27. https://towardsdatascience.com/tagged/python?source=post
  28. https://towardsdatascience.com/tagged/pandas?source=post
  29. https://towardsdatascience.com/@actsusanli?source=footer_card
  30. https://towardsdatascience.com/@actsusanli
  31. https://www.linkedin.com/in/susanli/
  32. https://towardsdatascience.com/?source=footer_card
  33. https://towardsdatascience.com/?source=footer_card
  34. https://towardsdatascience.com/
  35. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  37. https://medium.com/p/dfee054f978e/share/twitter
  38. https://medium.com/p/dfee054f978e/share/facebook
  39. https://medium.com/p/dfee054f978e/share/twitter
  40. https://medium.com/p/dfee054f978e/share/facebook
