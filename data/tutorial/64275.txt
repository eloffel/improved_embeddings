   #[1]github [2]recent commits to split-and-rephrase:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]6
     * [35]star [36]31
     * [37]fork [38]5

[39]shashiongithub/[40]split-and-rephrase

   [41]code [42]issues 2 [43]pull requests 1 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   the websplit benchmark introducing "split and rephrase" task
     * [47]28 commits
     * [48]2 branches
     * [49]0 releases
     * [50]fetching contributors
     * [51]mit

    1. [52]python 100.0%

   (button) python
   branch: master (button) new pull request
   [53]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/s
   [54]download zip

downloading...

   want to be notified of new releases in
   shashiongithub/split-and-rephrase?
   [55]sign in [56]sign up

launching github desktop...

   if nothing happens, [57]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [59]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [60]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [61]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [62]license
   [63]readme.md [64]roee's split for benchmark v0.1 apr 26, 2018
   [65]benchmark-v0.1.tar.gz
   [66]benchmark-v1.0.tar.gz
   [67]extract-modtriple-linearized-tokenized-forafile.py
   [68]prepare-baseline-data.py
   [69]prepare-evaluation-directories.py
   [70]prepare-learn-to-generation.py [71]first full split and rephrase
   commit nov 3, 2017
   [72]prepare-learn-to-partition.py

readme.md

split and rephrase

   this repository contains the split-and-rephrase benchmark and scripts
   from our [73]emnlp 2017 paper.

   if you use our datasets, please cite the following paper:

   split and rephrase, shashi narayan, claire gardent, shay b. cohen and
   anastasia shimorina, in the 2017 conference on empirical methods on
   natural language processing (emnlp), copenhagen, denmark [74](bib)

   if you have any issue using this repository, please contact me at
   [75]shashi.narayan@ed.ac.uk.

the split and rephrase benchmark

version 1.0 ("benchmark-v1.0")

   we have extracted this dataset from the complete version of the
   [76]webid86 data. it consists of following files:
     * final-complexsimple-meanpreserve-intreeorder-full.txt: complex and
       simple sentences with their semantic identifiers.
     * webid86-corpus-release: rdf triples related to each semantic
       identifier.
     * split-train-dev-test.benchmark-v1.0.json: train, development and
       test splits.

improvements over version 0.1

the webid86 categories

     * benchmark-v0.1: it was extracted from an incomplete version of the
       [77]webid86 corpus with 8 dbpedia categories (airport, astronaut,
       building, food, monument, sportsteam, university, writtenwork).
     * benchmark-v1.0: it is extracted from the final version of the
       [78]webid86 corpus with 15 dbpedia categories (airport, building,
       food, sportsteam, artist, celestialbody, meanoftransportation,
       university, astronaut, city, monument, writtenwork, athlete,
       comicscharacter, politician).

number of meaning preserving (complex-simple) pairs

   version # distinct complex sentences # complex-simple pairs with
   partitions # complex-simple pairs without partitions
   benchmark-v0.1 5546 1098221 1945
   benchmark-v1.0 18830 1445159 6951

splitting method

     * benchmark-v0.1: in this version, we followed standard practice in
       the simplification literature. we ensured that complex sentences in
       validation and test sets are not seen during training by splitting
       the 5,546 distinct complex sentences into three subsets: training
       set (4,438, 80%), validation set (554, 10%) and test set (554,
       10%). this way of splitting does not guarantee that the rdf triples
       seen in the validation and test sets won't occur in the training
       set. as a result, it leads to a large id165 overlaps between the
       training, validation and test sets.
     * benchmark-v1.0: in this version, we ensured that if an rdf triple
       t: (e1, r, e2) is seen in the validation or test set, it does not
       occur in the training set. however, e1 or r or e2 may have occurred
       in the training set with some other rdf triples. this automatically
       guarantees that the complex sentences in the validation and test
       sets are not seen in the training set.

final numbers of distinct complex sentences

      version     training validation test
   benchmark-v0.1 4438     554        554
   benchmark-v1.0 16946    954        930

overlap statistics w.r.t. rdf triples, entities and properties

             version            benchmark-v0.1    benchmark-v1.0
   rdfs (train vs test)        672 (1025 vs 676) 0 (3162 vs 352)
   rdfs (train vs valid)       671 (1025 vs 675) 0 (3162 vs 356)
   rdfs (test vs valid)        501 (676 vs 675)  338 (352 vs 356)
   entities (train vs test)    642 (908 vs 644)  56 (2665 vs 357)
   entities (train vs valid)   634 (908 vs 636)  56 (2665 vs 360)
   entities (test vs valid)    505 (644 vs 636)  345 (357 vs 360)
   properties (train vs test)  139 (168 vs 140)  122 (346 vs 138)
   properties (train vs valid) 132 (168 vs 133)  119 (346 vs 137)
   properties (test vs valid)  120 (140 vs 133)  134 (138 vs 137)

overlap statistics w.r.t. simple sentences

          version         benchmark-v0.1 benchmark-v1.0
   total simple sentences 9552           31159
   train                  8840           28150
   validation             3765           2464
   test                   4015           2466
   train vs test          3606           3
   train vs val           3425           2
   test vs val            2210           1918
   train vs test vs val   2173           2

version 0.1 ("benchmark-v0.1", deprecated)

   this is the version of the dataset reported in our emnlp paper. it was
   extracted from an incomplete version (then available) of the [79]webid86
   data.

   in this version, we had followed a standard practice in simplification
   literature and split our dataset into the training, validation and test
   subsets such that complex sentences in validation and test sets were
   not seen during training.

   recently (feb 18), jan botha and jason baldridge (google), informed us
   that this way of splitting led to a large id165 overlap between
   training, development and test sets. we found that this overlap
   appeared due to the shared rdf triples in our dataset. as a result, we
   have decided to deprecate the split used in the paper. instead, we
   encourage others to use an improved version (benchmark-v1.0) of this
   dataset.

   in case you would like to work with this version, we suggest you to use
   the split of [80]aharoni and goldberg.

   benchmark-v0.1 consists of following files:
     * final-complexsimple-meanpreserve-intreeorder-full.txt: complex and
       simple sentences with their semantic identifiers.
     * benchmark_verified_simplifcation: rdf triples related to each
       semantic identifier.
     * split-train-dev-test.dont-change.json: train, development and test
       splits. (removed)

   and two additional directories:
     * "complex-sents" directory: train, development and test complex
       sentences used as input during testing. (removed)
     * "modtripleset-linealization" directory: semantic identifier
       associated with their linearized rdf representation.

split and rephrase models

   our models use codes from [81]multiple source id4 toolkit, zoph_id56 and
   our [82]hybrid id11 system. to replicate all the
   models discussed in the paper, please make sure that you have these
   codes available.

baseline models

python prepare-baseline-data.py

   this parses "final-complexsimple-meanpreserve-intreeorder-full.txt" and
   "split-train-dev-test.dont-change.json" files and prepares data for
   three baseline models: baseline-id195, baseline-id195-multisrc and
   baseline-symbolic.
     * baseline-id195 (id195, c ==> s1, s2, s3): training and decoding
       with zoph_id56.

./zoph_id56 -t baseline-id195/train.complex baseline-id195/train.simple model
.nn -n 3 -h 500 -m 64 -d 0.8 -l 0.5 --attention-model true --feed-input true -a
baseline-id195/validation.complex baseline-id195/validation.simple -a 0.5 --
tmp-dir-location baseline-id195/fullvocab/ --logfile baseline-id195/fullvoca
b/logfile.txt -b best.nn -m 1 1 1 1

./zoph_id56 -k 1 baseline-id195/fullvocab/best.nn  baseline-id195/fullvocab/t
est.1best.txt --decode-main-data-files benchmark/complex-sents/test.complex

     * baseline-id195-multisrc (multiid195, c t_c ==> s1, s2, s3)

./zoph_id56 -n 30 -t baseline-id195-multisrc/train.complex baseline-id195-mul
tisrc/train.simple baseline-id195-multisrc/fullvocab/model.nn -n 3 -h 500 -m 6
4 -d 0.8 -l 0.5 --multi-source baseline-id195-multisrc/train.complex-semantics
.linearized baseline-id195-multisrc/fullvocab/src.nn --attention-model 1 --fee
d-input 1 --multi-attention 1 -a baseline-id195-multisrc/validation.complex ba
seline-id195-multisrc/validation.simple baseline-id195-multisrc/validation.c
omplex-semantics.linearized -a 0.5 --tmp-dir-location baseline-id195-multisrc/
fullvocab/ --logfile baseline-id195-multisrc/fullvocab/logfile.txt -b baseline
-id195-multisrc/fullvocab/best.nn -m 1 1 1 1

./zoph_id56 -k 1 baseline-id195-multisrc/fullvocab/best.nn baseline-id195-mul
tisrc/fullvocab/test.1best.txt --decode-main-data-files benchmark/complex-sents/
test.complex --decode-multi-source-data-files complex-sents/test.semantics.linea
rized --decode-multi-source-vocab-mappings baseline-id195-multisrc/fullvocab/s
rc.nn

   please use "extract-modtriple-linearized-tokenized-forafile.py" to
   generate ".linearized" file.
     * baseline-symbolic (hybridsimpl, c ==> s1, s2, s3 using boxer and
       smt)

   please follow instructions from our [83]hybrid id11
   system. please contact me at [84]shashi.narayan@ed.ac.uk if you have
   any issue.

semantically motivated split and rephrase models (split-multiid195 and
split-id195)

learn to partition

python prepare-learn-to-partition.py

   it generates a directory called "mymodel/partition-module." please have
   a look at our paper to use this data to learn a probabilistic model to
   learn to partition.

learn to generate

python prepare-learn-to-generation.py

   it generates a directory called "mymodel/generation-module." please use
   zoph_id56 codes (as in baseline models) to implement multiid195 or
   id195 followed by the split step.

evaluation scripts: prepare reference directory and evaluation

python prepare-evaluation-directories.py

   this parses final-complexsimple-meanpreserve-intreeorder-full.txt and
   build evaluation directories for train, test and validation using
   split-train-dev-test.dont-change.json.

   follows:
   [85]https://github.com/moses-smt/mosesdecoder/blob/master/scripts/gener
   ic/multi-id7.perl usage: multi-id7.pl [-lc] reference <
   hypothesis\n"; reads the references from reference or reference0,
   reference1, ...\n";

   if more than one reference sentence, it generates multiple reference
   files in "evaluation-directories."

   finally use multi-id7.perl to estimate id7 scores.

     *    2019 github, inc.
     * [86]terms
     * [87]privacy
     * [88]security
     * [89]status
     * [90]help

     * [91]contact github
     * [92]pricing
     * [93]api
     * [94]training
     * [95]blog
     * [96]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [97]reload to refresh your
   session. you signed out in another tab or window. [98]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/shashiongithub/split-and-rephrase/commits/master.atom
   3. https://github.com/shashiongithub/split-and-rephrase#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/shashiongithub/split-and-rephrase
  32. https://github.com/join
  33. https://github.com/login?return_to=/shashiongithub/split-and-rephrase
  34. https://github.com/shashiongithub/split-and-rephrase/watchers
  35. https://github.com/login?return_to=/shashiongithub/split-and-rephrase
  36. https://github.com/shashiongithub/split-and-rephrase/stargazers
  37. https://github.com/login?return_to=/shashiongithub/split-and-rephrase
  38. https://github.com/shashiongithub/split-and-rephrase/network/members
  39. https://github.com/shashiongithub
  40. https://github.com/shashiongithub/split-and-rephrase
  41. https://github.com/shashiongithub/split-and-rephrase
  42. https://github.com/shashiongithub/split-and-rephrase/issues
  43. https://github.com/shashiongithub/split-and-rephrase/pulls
  44. https://github.com/shashiongithub/split-and-rephrase/projects
  45. https://github.com/shashiongithub/split-and-rephrase/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/shashiongithub/split-and-rephrase/commits/master
  48. https://github.com/shashiongithub/split-and-rephrase/branches
  49. https://github.com/shashiongithub/split-and-rephrase/releases
  50. https://github.com/shashiongithub/split-and-rephrase/graphs/contributors
  51. https://github.com/shashiongithub/split-and-rephrase/blob/master/license
  52. https://github.com/shashiongithub/split-and-rephrase/search?l=python
  53. https://github.com/shashiongithub/split-and-rephrase/find/master
  54. https://github.com/shashiongithub/split-and-rephrase/archive/master.zip
  55. https://github.com/login?return_to=https://github.com/shashiongithub/split-and-rephrase
  56. https://github.com/join?return_to=/shashiongithub/split-and-rephrase
  57. https://desktop.github.com/
  58. https://desktop.github.com/
  59. https://developer.apple.com/xcode/
  60. https://visualstudio.github.com/
  61. https://github.com/shashiongithub/split-and-rephrase/tree/2b62647cc834f8443000fe9d5ed497f8cea28a49
  62. https://github.com/shashiongithub/split-and-rephrase/blob/master/license
  63. https://github.com/shashiongithub/split-and-rephrase/blob/master/readme.md
  64. https://github.com/shashiongithub/split-and-rephrase/commit/1fbdaf5073b7a81779345c58ab61cce219e7f437
  65. https://github.com/shashiongithub/split-and-rephrase/blob/master/benchmark-v0.1.tar.gz
  66. https://github.com/shashiongithub/split-and-rephrase/blob/master/benchmark-v1.0.tar.gz
  67. https://github.com/shashiongithub/split-and-rephrase/blob/master/extract-modtriple-linearized-tokenized-forafile.py
  68. https://github.com/shashiongithub/split-and-rephrase/blob/master/prepare-baseline-data.py
  69. https://github.com/shashiongithub/split-and-rephrase/blob/master/prepare-evaluation-directories.py
  70. https://github.com/shashiongithub/split-and-rephrase/blob/master/prepare-learn-to-generation.py
  71. https://github.com/shashiongithub/split-and-rephrase/commit/58f3a83f37feaa9a5c4d94df3f2a23351837afed
  72. https://github.com/shashiongithub/split-and-rephrase/blob/master/prepare-learn-to-partition.py
  73. http://aclweb.org/anthology/d/d17/d17-1064.pdf
  74. http://aclweb.org/anthology/d/d17/d17-1064.bib
  75. mailto:shashi.narayan@ed.ac.uk
  76. http://webid86.loria.fr/pages/challenge.html
  77. http://webid86.loria.fr/pages/challenge.html
  78. http://webid86.loria.fr/pages/challenge.html
  79. http://webid86.loria.fr/pages/challenge.html
  80. https://github.com/roeeaharoni/sprp-acl2018
  81. https://github.com/isi-nlp/zoph_id56
  82. https://github.com/shashiongithub/sentence-simplification-acl14
  83. https://github.com/shashiongithub/sentence-simplification-acl14
  84. mailto:shashi.narayan@ed.ac.uk
  85. https://github.com/moses-smt/mosesdecoder/blob/master/scripts/generic/multi-id7.perl
  86. https://github.com/site/terms
  87. https://github.com/site/privacy
  88. https://github.com/security
  89. https://githubstatus.com/
  90. https://help.github.com/
  91. https://github.com/contact
  92. https://github.com/pricing
  93. https://developer.github.com/
  94. https://training.github.com/
  95. https://github.blog/
  96. https://github.com/about
  97. https://github.com/shashiongithub/split-and-rephrase
  98. https://github.com/shashiongithub/split-and-rephrase

   hidden links:
 100. https://github.com/
 101. https://github.com/shashiongithub/split-and-rephrase
 102. https://github.com/shashiongithub/split-and-rephrase
 103. https://github.com/shashiongithub/split-and-rephrase
 104. https://help.github.com/articles/which-remote-url-should-i-use
 105. https://github.com/shashiongithub/split-and-rephrase#split-and-rephrase
 106. https://github.com/shashiongithub/split-and-rephrase#the-split-and-rephrase-benchmark
 107. https://github.com/shashiongithub/split-and-rephrase#version-10-benchmark-v10
 108. https://github.com/shashiongithub/split-and-rephrase#improvements-over-version-01
 109. https://github.com/shashiongithub/split-and-rephrase#the-webid86-categories
 110. https://github.com/shashiongithub/split-and-rephrase#number-of-meaning-preserving-complex-simple-pairs
 111. https://github.com/shashiongithub/split-and-rephrase#splitting-method
 112. https://github.com/shashiongithub/split-and-rephrase#final-numbers-of-distinct-complex-sentences
 113. https://github.com/shashiongithub/split-and-rephrase#overlap-statistics-wrt-rdf-triples-entities-and-properties
 114. https://github.com/shashiongithub/split-and-rephrase#overlap-statistics-wrt-simple-sentences
 115. https://github.com/shashiongithub/split-and-rephrase#version-01-benchmark-v01-deprecated
 116. https://github.com/shashiongithub/split-and-rephrase#split-and-rephrase-models
 117. https://github.com/shashiongithub/split-and-rephrase#baseline-models
 118. https://github.com/shashiongithub/split-and-rephrase#semantically-motivated-split-and-rephrase-models-split-multiid195-and-split-id195
 119. https://github.com/shashiongithub/split-and-rephrase#learn-to-partition
 120. https://github.com/shashiongithub/split-and-rephrase#learn-to-generate
 121. https://github.com/shashiongithub/split-and-rephrase#evaluation-scripts-prepare-reference-directory-and-evaluation
 122. https://github.com/
