   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]towards data science
     * [9]data science
     * [10]machine learning
     * [11]programming
     * [12]visualization
     * [13]ai
     * [14]data journalism
     * [15]contribute
     __________________________________________________________________

a quick introduction to the numpy library

   [16]go to the profile of adi bronshtein
   [17]adi bronshtein (button) blockedunblock (button) followfollowing
   apr 26, 2017
   [1*mc5yin7jvo5uwuqboudw7q.jpeg]

   after my [18]last blog post about pandas, i thought it might be a good
   idea to take a step back and write a post about the [19]numpy library.
   numpy (short for numerical python) is    the fundamental package for
   scientific computing with python    and it is the library pandas,
   matplotlib and scikit-learn builds on top off. you might think    what   s
   the point of using numpy when i could be using these libraries?    but i
   think that numpy is often underrated and when used right, it could be
   quite a powerful tool for numerical operations in python.
     __________________________________________________________________

installation and getting started

   numpy does not come with python by default so it needs to be installed.
   as i recommended for the [20]pandas installation, the easiest way to
   get numpy (along with a ton of other packages) is to install
   [21]anaconda. if you don   t want to install all these packages and just
   install numpy, you can download the version for your operating system
   from [22]this page.

   after you   ve downloaded and install numpy, you need to import it every
   time you want to use it in your python ide ([23]integrated development
   environment) like [24]jupyter notebook or [25]spyder (both of them come
   with anaconda by default). as a reminder, importing a library means
   loading it into the memory and then it   s there for you to work with. to
   import numpy you need to write the following code:
import numpy as np

   and you   re ready to go! usually you will add the second part (   as np   )
   so you can use numpy by writing    np.command    instead of having to write
      numpy.command    every time you want to use it. it   s not a huge
   difference but hey, every key stroke counts! remember, you will need to
   do it every time you start a new jupyter notebook, a spyder file etc.
     __________________________________________________________________

working with numpy

creating numpy arrays, loading and saving files

   numpy works with python objects called multi-dimensional arrays. arrays
   are basically collections of values, and they have one or more
   dimensions. numpy array data structure is also called ndarray, short
   for n-dimensional array. an array with one dimension is called a vector
   and an array with two dimensions is called a matrix. datasets are
   usually built as matrices and it is much easier to open those with
   numpy instead of working with list of lists, for example.

   turning a list to a numpy array is pretty simple:
numpy_array = np.array(list)

   and printing/displaying the array will look like this:
array([[  7.4  ,   0.7  ,   0.   , ...,   0.56 ,   9.4  ,   5.   ],
       [  7.8  ,   0.88 ,   0.   , ...,   0.68 ,   9.8  ,   5.   ],
       [  7.8  ,   0.76 ,   0.04 , ...,   0.65 ,   9.8  ,   5.   ],
       ...,
       [  6.3  ,   0.51 ,   0.13 , ...,   0.75 ,  11.   ,   6.   ],
       [  5.9  ,   0.645,   0.12 , ...,   0.71 ,  10.2  ,   5.   ],
       [  6.   ,   0.31 ,   0.47 , ...,   0.66 ,  11.   ,   6.   ]])

   another option is to open a csv file using the [26]np.genfromtxt()
   function:
numpy_array = np.genfromtxt("file.csv", delimiter=";", skip_header=1)

   the argument inside the brackets are the file name (and path, if
   needed), the delimiter set to    ;    to make sure it   s parsed
   correctly         you can use different characters to parse (like    ,    for
   example); and skip_header set to    1    will make the csv load to an array
   without the header row. you can just not include it if you do want the
   headers (as the default is zero).

   you can also save numpy arrays to files by using np.savetxt(). for
   example, np.savetxt('file.txt',arr,delimiter=' ') will save to a text
   file and np.savetxt('file.csv',arr,delimiter=',') will save to a csv
   file.

   another cool feature is the ability to create different arrays like
   random arrays: np.random.rand(3,4) will create a 3x4 array of random
   numbers between 0 and 1 while np.random.rand(7,6)*100 will create a 7x6
   array of random numbers between 0 to 100; you can also define the size
   of the array in a different way: np.random.randint(10,size=(3,2))
   creates an array the size of 3x2 with random numbers between 0 and 9.
   remember that the last digit (10) is not included in the range when you
   use this syntax.

   it   s also possible to create an array of all zeros: np.zeros(4,3) (4x3
   array of all zeros) or ones np.ones((4)) (4x1 array of ones); you can
   the command np.full((3,2),8) to create a 3x2 array full of 8. you can,
   of course, change each and every one of these numbers to get the array
   you want.

working and inspecting arrays

   now that you have your array loaded, you can check its size (number of
   elements) by typing array.size and its shape (the dimensions         rows and
   columns) by typing array.shape. you can use array.dtype to get the data
   types of the array (floats, integers etc         see more in the [27]numpy
   documentation) and if you need to convert the datatype you can use the
   array.astype(dtype) command. if you need to convert a numpy array to a
   python list, there is a command for that too: array.tolist().

indexing and slicing

   indexing and slicing numpy arrays works very similarly to working with
   python lists: array[5] will return the element in the 5th index, and
   array[2,5] will return the element in index[2][5]. you can also select
   the first five elements, for example, by using a colon (:). array[0:5]
   will return the first five elements (index 0   4) and array[0:5,4] will
   return the first five elements in column 4. you can use array[:2] to
   get elements from the beginning until index 2 (not including index 2)
   or array[2:] to return from the 2nd index until the end of the array.
   array[:,1] will return the elements at index 1 on all rows.

   assigning values to a numpy array is, again, very similar to doing so
   in python lists: array[1]=4 will assign the value 4 to the element on
   index 1; you can do it to multiple values: array[1,5]=10 or use slicing
   when assigning values: array[:,10]=10 will change the entire 11th
   column to the value 10.

sorting and reshaping

   array.sort() can be used to sort your numpy array         you can pass
   different arguments inside the brackets to define what you want to sort
   on (by using the argument    order=string/list of strings   , for example.
   see more examples in the [28]documentation). array.sort(axis=0) will
   sort specific axis of the array         rows or columns. two_d_arr.flatten()
   will flatten a 2 dimensional array to a 1 dimensional array. array.t
   will transpose an array         meaning columns will become rows and vice
   versa. array.reshape(x,y) would reshape your array to the size you set
   with x and y. array.resize((x,y)) will change the array shape to x and
   y and fill new values with zeros.

combining and splitting

   you can use np.concatenate((array1,array2),axis=0) to combine two numpy
   arrays         this will add array 2 as rows to the end of array 1 while
   np.concatenate((array1,array2),axis=1) will add array 2 as columns to
   the end of array 1. np.split(array,2) will spilt the array into two
   sub-arrays and np.hsplit(array,5) will split the array horizontally on
   the 5th index.

adding and removing elements

   there are, of course, commands to add and remove elements from numpy
   arrays:
     * np.append(array,values) will append values to end of array.
     * np.insert(array, 3, values)will insert values into array before
       index 3
     * np.delete(array, 4, axis=0)will delete row on index 4 of array
     * np.delete(array, 5, axis=1) will delete column on index 5 of array

descriptive statistics

   you can use numpy methods to get descriptive statistics on numpy
   arrays:
     * np.mean(array,axis=0) will return mean along specific axis (0 or 1)
     * array.sum() will return the sum of the array
     * array.min()will return the minimum value of the array
     * array.max(axis=0)will return the maximum value of specific axis
     * np.var(array)will return the variance of the array
     * np.std(array,axis=1)will return the standard deviation of specific
       axis
     * array.corrcoef()will return the correlation coefficient of the
       array
     * numpy.median(array) will return the median of the array elements

doing math with numpy

   any tutorial to numpy would not be complete without the numerical and
   mathematical operations you can do with numpy! let   s go over them:

   np.add(array ,1) will add 1 to each element in the array and
   np.add(array1,array2) will add array 2 to array 1. the same is true to
   np.subtract(), np.multiply(), np.divide() and np.power()         all these
   commands would work in exactly the same way as described above.

   you can also get numpy to return different values from the array, like:
     * np.sqrt(array) will return the square root of each element in the
       array
     * np.sin(array) will return the sine of each element in the array
     * np.log(array) will return the natural log of each element in the
       array
     * np.abs(arr) will return the absolute value of each element in the
       array
     * np.array_equal(arr1,arr2) will return true if the arrays have the
       same elements and shape

   it is possible to round different values in array: np.ceil(array) will
   round up to the nearest integer, np.floor(array) will round down to the
   nearest integer and np.round(array) will round to the nearest integer.
     __________________________________________________________________

   this is just the tip of the iceberg when it comes to what you can do
   with numpy! i do hope that this blog post did help you see the
   possibilities and how powerful numpy can be when working on data with
   python. if you liked this tutorial, feel free to check out my
   [29]pandas tutorial (shamelessly promoting myself :-p). as always,
   thank you for reading! i would appreciate any comments, notes,
   corrections, questions or suggestions         if there   s anything you   d like
   me to write about, please don   t hesitate to let me know. see you on the
   next blog post!

     * [30]python
     * [31]data science
     * [32]numpy
     * [33]data analysis

   (button)
   (button)
   (button) 539 claps
   (button) (button) (button) 4 (button) (button)

     (button) blockedunblock (button) followfollowing
   [34]go to the profile of adi bronshtein

[35]adi bronshtein

   data scientist

     (button) follow
   [36]towards data science

[37]towards data science

   sharing concepts, ideas, and codes.

     * (button)
       (button) 539
     * (button)
     *
     *

   [38]towards data science
   never miss a story from towards data science, when you sign up for
   medium. [39]learn more
   never miss a story from towards data science
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://towardsdatascience.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/6f61b7dee4db
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://towardsdatascience.com/a-quick-introduction-to-the-numpy-library-6f61b7dee4db&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://towardsdatascience.com/a-quick-introduction-to-the-numpy-library-6f61b7dee4db&source=--------------------------nav_reg&operation=register
   8. https://towardsdatascience.com/?source=logo-lo_pm0rrcpfievx---7f60cf5620c9
   9. https://towardsdatascience.com/data-science/home
  10. https://towardsdatascience.com/machine-learning/home
  11. https://towardsdatascience.com/programming/home
  12. https://towardsdatascience.com/data-visualization/home
  13. https://towardsdatascience.com/artificial-intelligence/home
  14. https://towardsdatascience.com/data-journalism/home
  15. https://towardsdatascience.com/contribute/home
  16. https://towardsdatascience.com/@adi.bronshtein?source=post_header_lockup
  17. https://towardsdatascience.com/@adi.bronshtein
  18. https://medium.com/@adi.bronshtein/a-quick-introduction-to-the-pandas-python-library-f1b678f34673
  19. http://www.numpy.org/
  20. https://medium.com/@adi.bronshtein/a-quick-introduction-to-the-pandas-python-library-f1b678f34673
  21. https://www.continuum.io/downloads
  22. https://pypi.python.org/pypi/numpy
  23. https://en.wikipedia.org/wiki/integrated_development_environment
  24. http://jupyter.org/
  25. https://pythonhosted.org/spyder/
  26. https://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html
  27. https://docs.scipy.org/doc/numpy/user/basics.types.html
  28. https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.sort.html#numpy.ndarray.sort
  29. https://medium.com/@adi.bronshtein/a-quick-introduction-to-the-pandas-python-library-f1b678f34673
  30. https://towardsdatascience.com/tagged/python?source=post
  31. https://towardsdatascience.com/tagged/data-science?source=post
  32. https://towardsdatascience.com/tagged/numpy?source=post
  33. https://towardsdatascience.com/tagged/data-analysis?source=post
  34. https://towardsdatascience.com/@adi.bronshtein?source=footer_card
  35. https://towardsdatascience.com/@adi.bronshtein
  36. https://towardsdatascience.com/?source=footer_card
  37. https://towardsdatascience.com/?source=footer_card
  38. https://towardsdatascience.com/
  39. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  41. https://medium.com/p/6f61b7dee4db/share/twitter
  42. https://medium.com/p/6f61b7dee4db/share/facebook
  43. https://medium.com/p/6f61b7dee4db/share/twitter
  44. https://medium.com/p/6f61b7dee4db/share/facebook
