chapter 6

r programming

6.1 r, matlab, and python

r is a programming language especially designed for data analysis and data
visualization. in some cases it is more convenient to use r than c++ or java,
making r an important data analysis tool. we describe below similarities and
di   erences between r and its close relatives matlab and python.

r is similar to matlab and python in the following ways:
    they run inside an interactive shell in their default setting. in some cases

this shell is a complete graphical user interface (gui).

    they emphasize storing and manipulating data as multidimensional arrays.
    they interface packages featuring functionalities, both generic, such as ma-
trix operations, svd, eigenvalues solvers, random number generators, and
optimization routines; and specialized, such as kernel smoothing and sup-
port vector machines.

    they exhibit execution time slower than that of c, c++, and fortran, and

are thus poorly suited for analyzing massive1 data.

    they can interface with native c++ code, supporting large scale data

analysis by implementing computational bottlenecks in c or c++.

the three languages di   er in the following ways:
    r and python are open-source and freely available for windows, linux,

and mac, while matlab requires an expensive license.

    r, unlike matlab, features ease in extending the core language by writing

new packages, as well as in installing packages contributed by others.

1the slowdown can be marginal or signi   cant, depending on the program   s implementation.
vectorized code may improve computational e ciency by performing basic operations on entire
arrays rather than on individual array elements inside nested loops.

223

224

chapter 6. r programming

    r features a large group of motivated contributors who enhance the lan-

guage by implementing high-quality packages2.

    developers designed r for statistics, yielding a syntax much better suited

for computational data analysis, statistics, and data visualization.

    creating high quality graphs in r requires less e   ort than it does in matlab

and python.

    r is the primary programming language in the statistics, biostatistics, and
social sciences communities, while matlab is the main programming lan-
guage in engineering and applied math, and python is a popular general
purpose scripting and web development language.

6.2 getting started

the    rst step is to download and install a copy of r on your computer. r is avail-
able freely for windows, linux, and mac at the r project website http://cran.r-
project.org.

the two most common ways to run r are

    in a terminal prompt, by typing r in a linux or mac terminal, and

    inside a gui, by double clicking the r icon on windows or mac or by

typing r -g tk & on linux.

other ways to run r include

    using the emacs speaks statistics (ess) package from within emacs,

    using a third party gui such as r-studio (freely available from

http://www.rstudio.org; see figure 6.2 for a screen shot), and

    running r from a client that accesses an r server application.

the easiest way to quit r is to type q() at the r prompt or to close the corre-
sponding gui window.

like other programming languages, r code consists of a sequence of com-
mands. often, every command in r is typed in its own line. alternatively,
one line may contain multiple commands, separated by semicolons. comments
require a hash sign # and occupy the remainder of the current line.

# this is a comment
a = 4
a = 4; b = 3; c = b

# single statement

# multiple statements

2figure 6.1 demonstrates the rapid growth in the number of packages (see also [5]). all
contributed packages go through a quality control process, and enforcement of standards, and
have common documentation format.

6.2. getting started

225

10000

1000

near exponential growth in contributed packages

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

100

2002

2004

2006

2008

2010

2012

2014

figure 6.1: an almost linear growth on the log scale of the number of contributed
r packages indicates a growth rate that is close to exponential. see [5] for more
details and an interesting description of the open source social movement behind
r. the straight line shows id75    t. at the time of writing the number
of current packages exceeds 8000.

226

chapter 6. r programming

figure 6.2: screenshot of the r development environment r-studio available
from http://www.rstudio.org.

r is a functional object oriented language in that everything that happens
is a function call and everything that exists is an object. for example, a = b
is equivalent to the function call    =   (a, b), and accessing an array element
a[3] is equivalent to the function call    [   (a, 3). r features lazy evalution in
that function arguments or other expressions are only evaluated when (and if)
they are actually used.

since r, unlike c++ or java, is not strongly typed, we can de   ne a variable
without expressing a type and can even change a variable   s type within the same
session. thus, the following is quite legal.

a = 3.2
a = "string"

we can display the value of any variable using the print() function or by
simply typing its name. below, we use a double hash symbol ## to pre   x any
output printed by the r program.

a = 4
print(a)
## [1] 4
a
## [1] 4
cat(a)

# same thing

# same thing

6.2. getting started

227

## 4
# cat can print multiple variables one after the other
cat("the value of the variable a is: ", a)
## the value of the variable a is:

4

as shown above, we set variables with the assignment operator =. an al-
ternative is the operator <-, as in a <- 4 or 4 -> a. we use the classical =
operator since it is more similar to assignment operators in other languages.

strings in r are sequences of case sensitive characters surrounded by single or
double quotes. to get help on a speci   c function, operator, or data object, type
help(x) where x is the corresponding string. similarly, example(x) shows
an example of the use of the function x. the function help.start(x) starts
an html-based documentation within a browser, which is sometimes easier to
navigate. searching the help documentation using help.search(x) is useful
if you cannot recall the precise string on which you want to seek help. in addition
to the commands above, searching the web using a search engine often provides
useful results.

in r, periods can be used to delimit words within a variable name; for ex-
ample, my.parallel.id91 is a legitimate name for a variable or a
function. the $ operator in r has a similar role to the period operation in c++
and java.

here are some important commands with short explanations.

# assign value 3 to variable x

# list variable names in workspace memory

# basic variable assignment and arithmetic

x = 3
y = 3*x + 2
ratio.of.x.and.y = x / y # divide x by y and assign result
ls()
ls(all.names = true)
ls.str()
save.image(file = "fname") # save all variables to a file
save(x, y, file = "fname") # save specified variables
rm(x, y)
rm(list = ls())
load(varfile)
history(15)

# clear all variables in workspace memory

# print annotated list of variable names

# clear variables x and y from memory

# display 15 most recent commands

# load variables from file back to the workspace

# list all variables including hidden ones

the precise interaction of the command line or r ide tool (like r-studio)
depends on the operating system and ide program. in general, pressing the up
arrow key and down arrow key allows browsing through the command history
for previous commands. this can be very useful for    xing typos or for executing
slight modi   cations of long commands. in the linux and mac terminal, control-
r takes a text pattern and returns the most recent command containing that
pattern.

upon exiting r with the q() function, the command line prompts the user
to save the workspace memory. saving the workspace memory places all cur-
rent variables in a    le named .rdata in the current directory. launching r
automatically uploads that    le if it exists in the current directory, retrieving

228

chapter 6. r programming

inside r, the
the set of variables from the previous session in that directory.
user can change directories or view the current directory using setwd(x) and
getwd() respectively (x denotes a string containing a directory path). the
function system(x) executes the shell command x.

# change directory to home directory
setwd("  ")
# display all files in current directory
dir(path = ".", all.files = true)
# execute bash command ls -al (in linux)
system("ls -al")

as stated earlier, r features easy installation of both core r and third party
packages. the function install.packages(x) installs the functions and
datasets in the package x from the internet. after installation the function
library(x) brings the package into scope, thus making the functions and
variables in the package x available to the programmer. this two-stage pro-
cess mitigates potential overlap in the namespaces of libraries. typically, an r
programmer would install many packages3 on his or her computer, but have
only a limited number in scope at any particular time. a list of available
packages, their implementation and documentation is available at http://cran.r-
project.org/web/packages/. these packages often contain interesting and demon-
strative datasets. the function data lists the available datasets in a particular
package.

# install package ggplot2
install.packages("ggplot2")
# install package from a particular mirror site
install.packages("ggplot2", repos="http://cran.r-project.org")
# install a package from source, rather than binary
install.packages("ggplot2", type = "source")
library('ggplot2')
# display all datasets in the package ggplot2
data(package = 'ggplot2')
installed.packages()
update.packages()

# display a list of installed packages

# update currently installed packages

# bring package into scope

r attempts to match a variable or function name by searching the current
working environment followed by the packages that are in scope (loaded using the
library function) with the earliest match used if there are multiple matches.
the function search displays the list of packages that are being searched for
a match and the search order with the    rst entry defaulting to the working
environment, represented by .globalenv. as a result, the working environment
may mask variables or functions that are found further down the search path.

3the number of available packages is over 8000 in the year 2015; see figure 6.1 for the

growth trajectory.

6.3. scalar data types

229

the code below demonstrates masking the variable pi by a global environ-
ment variable with the value 3, and retrieving the original value after clearing
it.

pi
## [1] 3.141593
pi = 3
pi
## [1] 3
rm(pi)
pi
## [1] 3.141593

# redefines variable pi

# .globalenv match

# removes masking variables

the function sink(outputfile) records the output to the    le outputfile
instead of the display, which is useful for creating a log-   le for later examination.
to print the output both to screen and to a    le, use the following variation.

sink(file = 'outputfile', split = true)

we have concentrated thus far on executing r code interactively. to execute
r code written in a text    le foo.r (.r is the conventional    lename extension
for r code) use either

    the r function source("foo.r"),

    the command r cmd batch foo.r from a linux or mac terminal, or

    the command rscript foo.r from a linux or r terminal.

it is also possible to save the r code as a shell script    le whose    rst line
corresponds to the location of the rscript executable program, which in most
cases is the following line.

#!/usr/bin/rscript

the    le can then be executed by typing its name in the linux or mac os ter-
minal (assuming it has executable permission). this option has the advantage
of allowing linux style input and output redirecting via foo.r < infile >
outfile and other shell tricks.

the last three options permit passing parameters to the script, for example us-
ing r cmd batch --args arg1 arg2 foo.r or rscript foo.r arg1
arg2. calling commandargs(true) inside a script retrieves the command
line arguments as a list of strings.

6.3 scalar data types

as we saw in the case of c++ and java, a variable may refer to a scalar or
a collection. scalar types include numeric, integer, logical, string, dates, and

230

chapter 6. r programming

factors. numeric and integer variables represent real numbers and integers, re-
spectively. a logical or binary variable is a single bit whose value in r is true
or false. strings are ordered sequences of characters. dates represent calendar
dates. factor variables represent values from an ordered or unordered    nite set.
some operations can trigger casting between the various types. functions such
as as.numeric can perform explicit casting.

# function returns type of object

# cast to integer type

# alternative to casting: l specifies integer

# casting to numeric

# double types

a = 3.2; b = 3
b
## [1] 3
typeof(b)
## [1] "double"
c = as.integer(b)
c
## [1] 3
typeof(c)
## [1] "integer"
c = 3l
d = true
d
## [1] true
e = as.numeric(d)
e
## [1] 1
f = "this is a string" # string
f
## [1] "this is a string"
ls.str()
## a :
## b :
## c :
## d :
## e :
## f :

num 3.2
num 3
int 3
logi true
num 1
chr "this is a string"

# show variables and their types

factor variables assume values in a prede   ned set of possible values. the

code below demonstrates the use of factors in r.

current.season = factor("summer",

levels = c("summer", "fall", "winter", "spring"),
ordered = true)

# ordered factor

current.season
## [1] summer
## 4 levels: summer < fall < ... < spring
levels(current.season) # display factor levels
## [1] "summer" "fall"
my.eye.color = factor("brown", levels = c("brown", "blue", "green"),

"winter" "spring"

ordered = false)

# unordered factor

my.eye.color

6.4. vectors, arrays, lists, and dataframes

231

## [1] brown
## levels: brown blue green

the value na (meaning not available) denotes missing values. when de-
signing data analysis functions, na values should be carefully handled. many
functions feature the argument na.rm which, if true, operates on the data
after removing any na values.

6.4 vectors, arrays, lists, and dataframes

vectors, arrays, lists, and dataframes are collections that hold multiple scalar
values4. a vector is a one-dimensional ordered collection of variables of the same
type. an array is a multidimensional generalization of vectors of which a matrix
is a two-dimensional special case. lists are ordered collections of variables of
potentially di   erent types. the list signature is the ordered list of variable types
in the list. a dataframe is an ordered collection of lists having identical same
signature.

to refer to speci   c array elements use integers inside square brackets. for
example a[3] refers to the third element and a[c(1, 2)] refers to the    rst two
elements. negative integers inside the square bracket corresponds to a selection
of all elements except for the speci   ed positions, for example a[-3] refers to
all elements but the third one. it is also possible to refer to array elements by
passing a vector of boolean values with the selected elements corresponding to
the true values. for example a[c(true, true, false)] corresponds to
the third element. if the boolean vector is shorter than the array length it will
be recycled to be of the same length.

below are some examples of creating and handling vectors and arrays.

# element-wise arithmetic

# c() concatenates arguments to create a vector
x=c(4, 3, 3, 4, 3, 1)
x
## [1] 4 3 3 4 3 1
length(x)
## [1] 6
2*x+1
## [1] 9 7 7 9 7 3
# boolean vector (default is false)
y = vector(mode = "logical", length = 4)
y
## [1] false false false false
# numeric vector (default is 0)
z = vector(length = 3, mode = "numeric")
z
## [1] 0 0 0

4formally, a numeric scalar in r is a vector of size 1 and thus it is not fundamentally di   erent

from a vector.

232

chapter 6. r programming

# values in [0,1] in 0.1 increments

[1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9

[1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9

[1] 3.2 3.2 3.2 3.2 3.2 3.2 3.2 3.2 3.2 3.2

q = rep(3.2, times = 10) # repeat value multiple times
q
##
w=seq(0, 1, by = 0.1)
w
##
## [11] 1.0
# 11 evenly spaced numbers between 0 and 1
w=seq(0, 1, length.out = 11)
w
##
## [11] 1.0
# create an array with true/false reflecting whether condition holds
w <= 0.5
##
##
any(w <= 0.5)
## [1] true
all(w <= 0.5)
## [1] false
which(w <= 0.5)
## [1] 1 2 3 4 5 6
w[w <= 0.5]
## [1] 0.0 0.1 0.2 0.3 0.4 0.5
subset(w, w <= 0.5)
## [1] 0.0 0.1 0.2 0.3 0.4 0.5
w[w <= 0.5] = 0
w
##
## [11] 1.0

[1]
true
[7] false false false false false

# zero out all components smaller or equal to 0.5

# extracting from w entries for which w<=0.5

[1] 0.0 0.0 0.0 0.0 0.0 0.0 0.6 0.7 0.8 0.9

# an alternative with the subset function

# for which elements is it true?

# is it true for some elements?

# is it true for all elements?

true true

true

true

true

arrays are multidimensional generalizations of vectors; the dim attribute
speci   es the dimension. matrices correspond to two dimensional arrays. refer-
ring to a speci   c array elements can be done by including the coordinates inside
the square brackets (separated by commas), for example a[1,2] correspond to
the element at the    rst row and second column of a. leaving a speci   c dimen-
sion selection blank inside the square brackets corresponds to selecting the entire
dimension. for example a[1,] corresponds to the    rst row of a. as in the
case of vectors, negative integers correspond to a selection of all but the selected
coordinate.

z = seq(1, 20,length.out = 20)
x = array(data = z, dim = c(4, 5))
x
##
## [1,]
## [2,]
## [3,]

[,1] [,2] [,3] [,4] [,5]
17
18
19

9
10
11

13
14
15

1
2
3

5
6
7

# create a vector 1,2,..,20

# create a 2-d array

6.4. vectors, arrays, lists, and dataframes

233

8

4

20

12

16

3
5

6
7
8

2
3
4

11
14

10
11
12

14
15
16

[,1]
565

6 10 14 18

# element-wise operation

# 2x2 top left sub-matrix

[,1] [,2]
35
46

[,1] [,2]
11
13

# refer to the entire second row

# refer to the second row and third column

# matrix product (both arguments are matrices)

2
# all but the first row - same as x[c(2,3,4),]
[,1] [,2] [,3] [,4] [,5]
18
19
20

## [4,]
x[2,3]
## [1] 10
x[2,]
## [1]
x[-1,]
##
## [1,]
## [2,]
## [3,]
y = x[c(1,2),c(1,2)]
2 * y + 1
##
## [1,]
## [2,]
y %*% y
##
## [1,]
## [2,]
# inner product (both vectors have the same dimensions)
x[1,] %*% x[1,]
##
## [1,]
t(x)
##
## [1,]
## [2,]
## [3,]
## [4,]
## [5,]
outer(x[,1], x[,1])
##
## [1,]
## [2,]
## [3,]
## [4,]
rbind(x[1,], x[1,])
##
## [1,]
## [2,]
cbind(x[1,], x[1,])
##
## [1,]
## [2,]
## [3,]
## [4,]
## [5,]

[,1] [,2] [,3] [,4]
4
8
12
16
20

[,1] [,2] [,3] [,4]
4
8
12
16

9
9
# horizontal concatenation

[,1] [,2] [,3] [,4] [,5]
17
17

[,1] [,2]
1
5
9
13
17

# vertical concatenation

# matrix transpose

# outer product

1
5
9
13
17

1
5
9
13
17

2
6
10
14
18

3
7
11
15
19

3
6
9
12

1
2
3
4

2
4
6
8

13
13

1
1

5
5

we can access multidimensional array elements using a single index. the

234

chapter 6. r programming

single index counts elements by traversing the array by columns, then rows, then
other dimensions where appropriate.

a = matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
a
##
## [1,]
## [2,]
a[3]
## [1] 3

# counting by columns a[3]=a[1,2]

[,1] [,2]
3
4

1
2

lists are ordered collections which permit positions to hold variables of dif-
ferent types. for example, a list may hold a    oating point in its    rst position,
an integer in its second position, and a 3-d array in its third position. lists can
also be elements of other lists. if l is a list, l[[i]] is the i-element, and l[i]
is a list containing the i element.

to ease the tracking of the semantics of variables in lists or vectors, we typ-
ically assign names to the di   erent positions. this is a form of self-describing
data representation: there is no need to keep meta data describing what each
position holds since that information is kept in the object itself.

l=list(name = 'john', age = 55,

no.children = 2, children.ages = c(15, 18))

# displays all position names

"age"
"children.ages"

# second element

# list containing second element

names(l)
## [1] "name"
## [3] "no.children"
l[[2]]
## [1] 55
l[2]
## $age
## [1] 55
l$name
## [1] "john"
l['name']
## $name
## [1] "john"
l$children.ages[2]
## [1] 18

# same thing

# same as l[[4]][2]

# value in list corresponding to name

the function uname(x) removes names. existing names can be changed by

assigning a vector of strings to names(x).

when using arithmetic operations between arrays of di   erent sizes, the smaller
array is extended as needed, with new elements created by recycling old ones.
similarly, storing a value in a non-existing element expands the array as needed,
padding with na values.

6.4. vectors, arrays, lists, and dataframes

235

a = c(1, 2)
b = c(10, 20, 30, 40, 50)
a + b
## [1] 11 22 31 42 51
b[7] = 70
b
## [1] 10 20 30 40 50 na 70

a dataframe is an ordered sequence of lists sharing the same signature. a
dataframe often serves as a table whose rows correspond to data examples (sam-
ples from a multivariate distribution) and whose columns correspond to dimen-
sions or features.

vecn = c("john smith","jane doe")
veca = c(42, 45)
vecs = c(50000, 55000)
r = data.frame(name = vecn, age = veca, salary = vecs)
r
##
## 1 john smith
## 2
jane doe
names(r) = c("name", "age", "salary")
r
##
## 1 john smith
## 2
jane doe

name age salary
50000
55000

name age salary
50000
55000

42
45

42
45

# modify column names

the core r package datasets contains many interesting and demonstrative
datasets, such as the iris dataset, whose    rst four dimensions are numeric
measurements describing    ower geometry, and whose last dimension is a string
describing the    ower species.

# lists the dimension (column) names

# show first four rows

sepal.length sepal.width petal.length
1.4
1.4
1.3
1.5

names(iris)
## [1] "sepal.length" "sepal.width"
## [3] "petal.length" "petal.width"
## [5] "species"
head(iris, 4)
##
## 1
## 2
## 3
## 4
##
## 1
## 2
## 3
## 4
iris[1,]

petal.width species
setosa
setosa
setosa
setosa

0.2
0.2
0.2
0.2

5.1
4.9
4.7
4.6

3.5
3.0
3.2
3.1

# first row

236

chapter 6. r programming

0.2

5.1

3.5

petal.width species
setosa

[1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9

sepal.length sepal.width petal.length
1.4

##
## 1
##
## 1
iris$sepal.length[1:10] # sepal length of first ten samples
##
# allow replacing iris$sepal.length with the shorter sepal.length
attach(iris, warn.conflicts = false)
mean(sepal.length)
## [1] 5.843333
colmeans(iris[,1:4])
## sepal.length
##
5.843333
petal.width
##
1.199333
##

sepal.width petal.length
3.758000

# average of sepal.length across all rows

# means of all four numeric columns

3.057333

the subset function is useful for extracting subsets of a dataframe.

sepal.length sepal.width petal.length
3.3
4.5

# extract all rows whose sepal.length variable is less than 5
# and whose species is not setosa
subset(iris, sepal.length < 5 & species != "setosa")
##
## 58
## 107
##
## 58
## 107
# count number of rows corresponding to setosa species
dim(subset(iris, species == "setosa"))[1]
## [1] 50

species
1.0 versicolor
1.7
virginica

petal.width

2.4
2.5

4.9
4.9

the function summary provides a useful statistical summary of the di   erent
dataframe columns. r automatically determines whether the variables are nu-
meric, such as sepal.length, or factors, such as species. for numeric vari-
ables, the summary function displays the minimum, maximum, mean, median,
and the 25% and 75% percentiles. for factor variables, the summary function
displays the number of dataframe rows in each of the factor levels.

summary(iris)
##
##
##
##
##
##
##
##
##

sepal.length
min.
:4.300
1st qu.:5.100
median :5.800
mean
:5.843
3rd qu.:6.400
max.
:7.900
petal.length
:1.000

min.

sepal.width

min.
:2.000
1st qu.:2.800
median :3.000
mean
:3.057
3rd qu.:3.300
max.
:4.400

petal.width

min.

:0.100

6.5.

if-else, loops, and functions

237

1st qu.:0.300
median :1.300
mean
:1.199
3rd qu.:1.800
max.
:2.500

1st qu.:1.600
median :4.350
mean
:3.758
3rd qu.:5.100
:6.900
max.
species
setosa
:50
versicolor:50
virginica :50

##
##
##
##
##
##
##
##
##
##
##
##

with appropriate formatting, we can create a dataframe using a text    le. for
example, we can load the following text    le containing data into a dataframe in
r using the read.table(x, header=true) function (use header=false
if there is no header line containing column names).

sepal.length sepal.width petal.length petal.width
0.2
0.2

5.1
4.9

3.5
3.0

1.4
1.4

species
setosa
setosa

# read text file into dataframe
iris=read.table('irisfile.txt', header = true)
# same but from internet location
iris=read.table('http://www.exampleurl.com/irisfile.txt',

header = true)

we can examine and edit dataframes and other variables within a text editor

or a spreadsheet-like environment using the edit function.

edit(iris)
iris = edit(iris)
newiris = edit(iris)

# examine data as spreadsheet

# edit dataframe/variable

# edit dataframe/variable but keep original

6.5

if-else, loops, and functions

the    ow of control of r code is very similar to that of other programming lan-
guages. below are some examples of if-else, loops, function de   nitions, and func-
tion calls.

a = 10; b = 5; c = 1
if (a < b) {

d = 1

} else if (a == b) {

chapter 6. r programming

238

d = 2

} else {

d = 3

}
d
## [1] 3

the logical operators in r are similar to those in c++ and java. examples

include && for and, || for or, == for equality, and != for inequality.

for-loops repeat for a pre-speci   ed number of times, with each loop assigning
a di   erent component of a vector to the iteration variable. repeat-loops repeat
until a break statement occurs. while-loops repeat until a break statement
occurs or until the loop condition is not satis   ed. the next statement aborts
the current iteration and proceeds to the next iteration.

sm=0
# repeat for 100 iteration, with num taking values 1:100
for (num in seq(1, 100, by = 1)) {

sm = sm + num

# same as sum(1:100)

}
sm
## [1] 5050
repeat {

sm = sm - num
num = num - 1
if (sm == 0) break

# if sm == 0 then stop the loop

}
sm
## [1] 0
a = 1; b = 10
# continue the loop as long as b > a
while (b>a) {

sm = sm + 1
a = a + 1
b = b - 1

}
sm
## [1] 5

functions in r are similar to those in c++ and java. when calling a func-
tion the arguments    ow into the parameters according to their order at the call
site. alternatively, arguments can appear out of order if the calling environment
provides parameter names.

# parameter bindings by order
foo(10, 20, 30)
# (potentially) out of order parameter bindings
foo(y = 20, x = 10, z = 30)

6.5.

if-else, loops, and functions

239

omitting an argument assigns the default value of the corresponding param-

eter.

# passing 3 parameters
foo(x = 10, y = 20, z = 30)
# x and y are missing and are assigned default values
foo(z = 30)
# in-order parameter binding with last two parameters missing
foo(10)

out of order parameter bindings and default values simplify calling functions

with long lists of parameters, when many of parameters take default values.

# mypower(.,.) raises the first argument to the power of the
# second. the first argument is named bas and has default value 10.
# the second parameter is named pow and has default value 2.
mypower = function(bas = 10, pow = 2) {

res=bas    pow
return(res)

# raise base to a power

# 2 is bound to bas and 3 to pow (in-order)

}
mypower(2, 3)
## [1] 8
# same binding as above (out-of-order parameter names)
mypower(pow = 3, bas = 2)
## [1] 8
mypower(bas = 3)
## [1] 9

# default value of pow is used

since r passes variables by value, changing the passed arguments inside the
function does not modify their respective values in the calling environment. vari-
ables de   ned inside functions are local, and thus are unavailable after the function
completes its execution. the returned value is the last computed variable or the
one speci   ed in a return function call. returning multiple values can be done
by returning a list or a dataframe.

x = 2
mypower2 = function(x) {x = x  2; return(x)}
y = mypower2(x)
x
## [1] 2
y
## [1] 4

# does not change x outside the function

it is best to avoid loops when programming in r. there are two reasons
for this: simplifying code and computational speed-up. many mathematical
computations on lists, vectors, or arrays may be performed without loops using
component-wise arithmetic. the code example below demonstrates the compu-
tational speedup resulting from replacing a loop with vectorized code.

240

chapter 6. r programming

a = 1:10
# compute sum of squares using a for loops
c = 0
for (e in a) c = c + e  2
c
## [1] 385
# same operation using vector arithmetic
sum(a  2)
## [1] 385
# time comparison with a million elements
a = 1:1000000; c = 0
system.time(for (e in a) c = c+e  2)
##
##
system.time(sum(a  2))
##
##

system elapsed
0.522

system elapsed
0.008

user
0.515

user
0.006

0.007

0.002

another way to avoid loops is to use the function sapply, which applies a
function passed as a second argument to the list, data-frame, or vector that is
passed as a    rst argument. this leads to simpli   ed code, though the computa-
tional speed-up may not apply in the same way as it did above.

a = seq(0, 1 ,length.out = 10)
b = 0
c = 0
for (e in a) {

b = b + exp(e)

}
b
## [1] 17.33958
c = sum(sapply(a, exp))
c
## [1] 17.33958
# sapply with an anonymous function f(x)=exp(x  2)
sum(sapply(a, function(x) {return(exp(x  2))}))
## [1] 15.07324
# or more simply
sum(sapply(a, function(x) exp(x  2)))
## [1] 15.07324

6.6

interfacing with c++ code

r is inherently an interpreted language; that is, r compiles each command at
run time, resulting in many costly context switches and di culty in applying
standard compiler optimization techniques. thus, r programs likely will not

6.6.

interfacing with c++ code

241

execute as e ciently as compiled programs5 in c, c++, or fortran.

the computational slowdown described above typically increases with the
number of elementary function calls or commands. for example, r code that
generates two random matrices, multiplies them, and then computes eigenvalues
typically will not su   er a signi   cant slowdown compared to similar implementa-
tions in c, c++, or fortran. the reason is that that such r code calls routines
that are programmed in fortran or c++. on the other hand, r code contain-
ing many nested loops is likely to be substantially slower due to the interpreter
overhead.

for example, consider the code below, which compares two implementations
of id127. the    rst uses r   s internal id127 and
the second implements it through three nested loops, each containing a scalar
multiplication.

n = 100; nsq = n*n
# generate two random matrices
a = matrix(runif(nsq), nrow = n, ncol = n)
b = matrix(runif(nsq), nrow = n, ncol = n)
system.time(a%*%b)
##
##
matmult=function(a, b, n) {

system elapsed
0.001

user
0.001

0.000

# built-in id127

r=matrix(data = 0, nrow = n, ncol = n)
for (i in 1:n)

for (j in 1:n)

for (k in 1:n)

r[i,j]=r[i,j]+a[i,k]*b[k,j]

return(r)

}

# nested loops implementation
system.time(matmult(a, b, n))
##
##

system elapsed
0.044 398.295

user
2.725

the    rst id127 is faster by several orders of magnitude even
for a relatively small n = 100. the key di   erence is that the built-in matrix
multiplication runs compiled c code.

clearly, it is better, if possible, to write r code containing relatively few
loops and few elementary r functions. since core r contains a rich library of
elementary functions, one can often follow this strategy. in some cases, however,
this approach is not possible. a useful heuristic in this case is to identify com-
putational bottlenecks using a pro   ler, then re-implement the o   ending r code
in a compiled language such as c or c++. the remaining r code will interface
with the reimplemented bottleneck code via an external interface. assuming that
a small percent of the code is responsible for most of the computational ine -

5r does have a compiler that can compile r code to native code, but the resulting speedup

is not very high.

242

chapter 6. r programming

ciency (as is often the case), this strategy can produce substantial speedups with
relatively little e   ort.

we consider two techniques for calling compiled c/c++ code from r: the sim-
pler .c function and the more complex .call function. in both cases, we com-
pile c/c++ code using the terminal command r cmd shlib foo.c, which in-
vokes the c++ compiler and create a foo.so    le containing the compiled code.
the .so    le can be loaded within r using the function dynload(   foo.so   )
and then called using the functions .c(   foo   , ...) or .call(   foo   ,
...) (the remaining arguments contain r vectors, matrices, or dataframes that
will be converted to pointers within the c/c++ code.

for example, consider the task of computing pn

j=1(aj + i)bj for all i, j =
1, . . . , n given two vectors a and b of size n. the c code to compute the result
appears below. the    rst two pointers point to arrays containing the vectors a
and b, the third pointer points to the length of the arrays, and the last pointer
points to the area where the results should appear. note the presence of the
pre-processor directive include<r.h>.

#include <r.h>
#include <math.h>

void fooc(double* a, double* b, int* n, double* res) {

int i, j;
for (i = 0;i < (*n); i++) {

res[i] = 0;
for (j = 0;j < (*n); j++)

res[i] += pow(a[j] + i + 1, b[j]);

}

}

saving the code above as the    le fooc.c and compiling using the terminal
command below produces the    le fooc.so that can be linked to an r session
with the dynload function.

r cmd shlib fooc.c

# load the compiled c code

dyn.load("fooc.so")
a = seq(0, 1, length = 10)
b = seq(0, 1, length = 10)
c = rep(0, times = 10)
l = .c("fooc", a, b, as.integer(10), c)
resc=l[[4]]
resc
##
##
##
foor = function(a, b, n) {

[1] 13.34392 17.48322 21.21480 24.70637
[5] 28.03312 31.23688 34.34390 37.37199
[9] 40.33396 43.23936

# extract 4th list element containing result

res = rep(0, times = n)

6.6.

interfacing with c++ code

243

for (i in 1:n)

for (j in 1:n)

res[i] = res[i]+(a[j]+i)  (b[j])

return(res)

[1] 13.34392 17.48322 21.21480 24.70637
[5] 28.03312 31.23688 34.34390 37.37199
[9] 40.33396 43.23936

}
resr=foor(a, b, 10)
resr
##
##
##
sizes = seq(10, 1000, length = 10)
rtime = rep(0, 10)
ctime = rtime
i = 1
for (n in sizes) {

a = seq(0, 1,length = n)
b = seq(0, 1,length = n)
c = rep(0, times = n)
ctime[i] = system.time(.c("fooc", a, b, as.integer(n), c))
rtime[i] = system.time(foor(a, b, n))
i = i+1

}
df = stack(list(c = ctime, r = rtime))
names(df) = c("system.time", "language")
df$size = sizes
# plot run time as a function of array size for r and
# .c implementations
qplot(x = size,

y = system.time,
lty = language,

color = language,

data = df,
size = i(1.5),

geom = "line",

xlab = "array size",

ylab = "computation time (sec)")

244

chapter 6. r programming

)
c
e
s
(

e
m

i
t

n
o
i
t
a
t
u
p
m
o
c

2.0

1.5

1.0

0.5

0.0

language

c

r

0

250

500

array size

750

1000

the .call external interface o   ers a higher degree of    exibility than .c in
terms of passing and returning r arrays or dataframes. the example below shows
how to use .call to implement the same functionality as the .c example above.
the type sexp represents an r object. the real macro returns a pointer to the
corresponding memory for reading or writing to it. a simple example appears
below.

#include <r.h>
#include <rinternals.h>
#include <rmath.h>
#include <math.h>
sexp fooc2(sexp ar, sexp
{

br)

int i, j, n = length(ar);
double *a = real(ar), *b = real(br);
sexp rval = allocvector(realsxp, n);
for (i = 0; i < n; i++) {

real(rval)[i] = 0;
for (j = 0; j < n; j++)

real(rval)[i] += pow(a[j] + i + 1, b[j]);

}
return rval;

}

r cmd shlib fooc2.c

6.7. customization

245

dyn.load("fooc2.so")
a = seq(0, 1, length = 10)
b = seq(0, 1, length = 10)
.call("fooc2", a, b)

# load the compiled c code

6.7 customization

when r starts it executes the function .first in the .rprofile    le in the
user   s home directory (if it exists). this is a good place to put user preferred
options. similarly, r executes the function .last in the same    le at the end of
any r session. the function options adjust the behavior of r in many ways, for
example to include more digits when displaying the value of a numeric variable.

below are two very simple .first and .last functions.

.first = function() {

options(prompt = 'r >', digits = 6)
library('ggplot2')

}
.last = function() {

cat(date(), 'bye')

}

in linux or mac, we can execute r with    ags; for example, r -q starts r

without printing the initial welcome message.

6.8 notes

r programming books include free resources such as the o cial introduction
to r manual http://cran.r-project.org/doc/manuals/r-intro.html (replace html
with pdf for pdf version) and the language reference http://cran.r-project.org/
doc/manuals/r-lang.html (replace html with pdf for pdf version). additional
manuals on writing r extensions, importing data, and other topics are available
at http://cran.r-project.org/doc/manuals/. many additional books are available
via commercial publishers.

r packages are available from http://cran.r-project.org. each package fea-
tures a manual in a common documentation format; many packages feature ad-
ditional tutorial documents known as vignettes. navigating the increasing repos-
itory of packages can be overwhelming. the task views help to aggregate lists
of packages within a particular task or area. the list of task views is available at
http://cran.r-project.org/web/views/. another useful tool is http://crantastic.org
which shows recently contributed or updated packages, user reviews, and ratings.
finally, the freely available r-journal at http://journal.r-project.org/ contains
high quality refereed articles on the r language, including many descriptions of
contributed packages.

246

chapter 6. r programming

the writing r extensions manual (http://cran.r-project.org/doc/manuals/r-
exts.pdf) contains more information on the .c and .call external interfaces.
the rcpp package o   ers a higher degree of    exibility for interfacing c++ code
and enables using numeric c++ libraries such as gsl, eigen, and armadillo.

6.9 exercises

1. type the r code in this chapter into an r session and observe the results.

2. implement a function that computes the log of the factorial value of an
integer using a for loop. note that implementing it using log(a) + log(b) +
       avoids over   ow while implementing it as log(a    b           ) creates an
over   ow early on.

3. implement a function that computes the log of the factorial value of an

integer using recursion.

4. using your two implementations of log-factorial in (2) and (3) above, com-
pute the sum of the log-factorials of the integers 1, 2, . . . , n for various n
values.

5. compare the execution times of your two implementations for (4) with an
implementation based on the o cial r function lfactorial(n). you
may use the function system.time() to measure execution time. what
are the growth rates of the three implementations as n increases? use the
command options(expressions=500000) to increase the number of
nested recursions allowed. compare the timing of the recursion implemen-
tation as much as possible, and continue beyond that for the other two
implementations.

