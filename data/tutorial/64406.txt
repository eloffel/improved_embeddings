end-to-end di   erentiable proving

tim rockt  aschel1 and sebastian riedel2,3

1university of oxford
whiteson research lab

2university college london

machine reading lab

3bloomsbury ai

http://rockt.github.com

twitter: @ rockt

tim.rocktaschel@cs.ox.ac.uk

nips 2017

6th of december 2017

combining deep and symbolic reasoning

neural networks

tim rockt  aschel

end-to-end di   erentiable proving

1/10

combining deep and symbolic reasoning

neural networks
    trained end-to-end
    strong generalization

tim rockt  aschel

end-to-end di   erentiable proving

1/10

combining deep and symbolic reasoning

neural networks
    trained end-to-end
    strong generalization
    needs a lot of training data
    not interpretable

tim rockt  aschel

end-to-end di   erentiable proving

1/10

combining deep and symbolic reasoning

neural networks
    trained end-to-end
    strong generalization
    needs a lot of training data
    not interpretable

id85 id109

tim rockt  aschel

end-to-end di   erentiable proving

1/10

combining deep and symbolic reasoning

neural networks
    trained end-to-end
    strong generalization
    needs a lot of training data
    not interpretable

id85 id109
    rules manually de   ned
    no generalization

tim rockt  aschel

end-to-end di   erentiable proving

1/10

combining deep and symbolic reasoning

neural networks
    trained end-to-end
    strong generalization
    needs a lot of training data
    not interpretable

id85 id109
    rules manually de   ned
    no generalization
    no/little training data
    interpretable

tim rockt  aschel

end-to-end di   erentiable proving

1/10

combining deep and symbolic reasoning

neural networks
    trained end-to-end
    strong generalization

id85 id109

    no/little training data
    interpretable

tim rockt  aschel

end-to-end di   erentiable proving

1/10

combining deep and symbolic reasoning

neural networks
    trained end-to-end
    strong generalization

aim

id85 id109

    no/little training data
    interpretable

neural network for proving queries to a knowledge base

tim rockt  aschel

end-to-end di   erentiable proving

1/10

combining deep and symbolic reasoning

neural networks
    trained end-to-end
    strong generalization

aim

id85 id109

    no/little training data
    interpretable

neural network for proving queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols

tim rockt  aschel

end-to-end di   erentiable proving

1/10

combining deep and symbolic reasoning

neural networks
    trained end-to-end
    strong generalization

aim

id85 id109

    no/little training data
    interpretable

neural network for proving queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
learn vector representations of symbols end-to-end from proof success

tim rockt  aschel

end-to-end di   erentiable proving

1/10

combining deep and symbolic reasoning

neural networks
    trained end-to-end
    strong generalization

aim

id85 id109

    no/little training data
    interpretable

neural network for proving queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
learn vector representations of symbols end-to-end from proof success
make use of provided rules in soft proofs

tim rockt  aschel

end-to-end di   erentiable proving

1/10

combining deep and symbolic reasoning

neural networks
    trained end-to-end
    strong generalization

aim

id85 id109

    no/little training data
    interpretable

neural network for proving queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
learn vector representations of symbols end-to-end from proof success
make use of provided rules in soft proofs
induce interpretable rules end-to-end from proof success

tim rockt  aschel

end-to-end di   erentiable proving

1/10

machine learning & logic

fuzzy logic (zadeh, 1965)

tim rockt  aschel

end-to-end di   erentiable proving

2/10

machine learning & logic

fuzzy logic (zadeh, 1965)
probabilistic logic programming, e.g.,

ibal (pfe   er, 2001), blog (milch et al., 2005), markov logic networks
(richardson and domingos, 2006), problog (de raedt et al., 2007) . . .

tim rockt  aschel

end-to-end di   erentiable proving

2/10

machine learning & logic

fuzzy logic (zadeh, 1965)
probabilistic logic programming, e.g.,

ibal (pfe   er, 2001), blog (milch et al., 2005), markov logic networks
(richardson and domingos, 2006), problog (de raedt et al., 2007) . . .

inductive logic programming, e.g.,

plotkin (1970), shapiro (1991), muggleton (1991), de raedt (1999) . . .
statistical predicate invention (kok and domingos, 2007)

tim rockt  aschel

end-to-end di   erentiable proving

2/10

machine learning & logic

fuzzy logic (zadeh, 1965)
probabilistic logic programming, e.g.,

ibal (pfe   er, 2001), blog (milch et al., 2005), markov logic networks
(richardson and domingos, 2006), problog (de raedt et al., 2007) . . .

inductive logic programming, e.g.,

plotkin (1970), shapiro (1991), muggleton (1991), de raedt (1999) . . .
statistical predicate invention (kok and domingos, 2007)

neural-symbolic connectionism

propositional rules: ebl-ann (shavlik and towell, 1989), kbann (towell
and shavlik, 1994), c-lip (garcez and zaverucha, 1999)
first-order id136 (no training of symbol representations): uni   cation
neural networks (holld  obler, 1990; komendantskaya 2011), shruti
(shastri, 1992), neural prolog (ding, 1995), clip++ (franca et al. 2014),
lifted relational networks (sourek et al. 2015)

tim rockt  aschel

end-to-end di   erentiable proving

2/10

approach

tim rockt  aschel

end-to-end di   erentiable proving

3/10

approach

tim rockt  aschel

end-to-end di   erentiable proving

3/10

approach

let   s neuralize prolog   s backward chaining using a radial basis function

kernel for unifying vector representations of symbols!

tim rockt  aschel

end-to-end di   erentiable proving

3/10

prolog   s backward chaining

example knowledge base:

1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

tim rockt  aschel

end-to-end di   erentiable proving

4/10

prolog   s backward chaining

example knowledge base:

1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

intuition:

backward chaining translates a query into subqueries via rules, e.g.,
grandfatherof(abe, bart)

fatherof(abe, z), parentof(z, bart)

3.

tim rockt  aschel

end-to-end di   erentiable proving

4/10

prolog   s backward chaining

example knowledge base:

1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

intuition:

backward chaining translates a query into subqueries via rules, e.g.,
grandfatherof(abe, bart)
fatherof(abe, z), parentof(z, bart)
it attempts this for all rules in the knowledge base and thus speci   es a
depth-   rst search

3.

tim rockt  aschel

end-to-end di   erentiable proving

4/10

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

query
grandfatherof abe

bart

tim rockt  aschel

end-to-end di   erentiable proving

5/10

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

query
grandfatherof abe

bart

1.

fatherof

abe

homer

tim rockt  aschel

end-to-end di   erentiable proving

5/10

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

1.

query
grandfatherof abe
?=
abe

fatherof

?=

bart
?=

homer

tim rockt  aschel

end-to-end di   erentiable proving

5/10

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

1.

query
grandfatherof abe
?=
abe

fatherof

?=

bart
?=

homer

fail

success

fail

tim rockt  aschel

end-to-end di   erentiable proving

5/10

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

state t
    success

1.

query
grandfatherof abe
?=
abe

fatherof

?=

bart
?=

homer

fail

success

fail

tim rockt  aschel

end-to-end di   erentiable proving

5/10

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

state t
    success

1.

query
grandfatherof abe
?=
abe

fatherof

?=

bart
?=

homer

state t + 1
    fail

fail

success

fail

tim rockt  aschel

end-to-end di   erentiable proving

5/10

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

query
grandfatherof abe
?=

?=

2.

parentof

homer

state t
    success

bart
?=
bart

state t + 1
    fail

fail

fail

success

tim rockt  aschel

end-to-end di   erentiable proving

5/10

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

state t
    success

3.

query
grandfatherof abe
?=
grandfatherof x

?=

bart
?=
y

success

x/abe

y/bart

state t + 1

x/abe
y/bart success

tim rockt  aschel

end-to-end di   erentiable proving

5/10

uni   cation failure

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

state t
    success

3.

grandpaof

query
abe
?=
grandfatherof x

?=

bart
?=
y

state t + 1

x/abe
y/bart

fail

fail

x/abe

y/bart

tim rockt  aschel

end-to-end di   erentiable proving

5/10

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

state t
   

1.0

3.

neural uni   cation

grandpaof

?=

query
abe

?=
x

bart

?=
y

x/abe

y/bart

state t + 1

x/abe
y/bart

tim rockt  aschel

end-to-end di   erentiable proving

5/10

neural uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

state t
   

1.0

3.

grandpaof

?=

query
abe

?=
x

bart

?=
y

state t + 1

x/abe
y/bart

(cid:18)

min

1.0, exp

x/abe

y/bart

(cid:18)   kvgrandpaof   vgrandfatherofk2

(cid:19)(cid:19)

2  2

tim rockt  aschel

end-to-end di   erentiable proving

5/10

di   erentiable prover

    1.0

grandpaof

abe

bart

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

tim rockt  aschel

end-to-end di   erentiable proving

6/10

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

di   erentiable prover

    1.0

grandpaof

abe

bart

1.

   

tim rockt  aschel

end-to-end di   erentiable proving

6/10

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

di   erentiable prover

    1.0

grandpaof

abe

bart

   

1.

2.

   

tim rockt  aschel

end-to-end di   erentiable proving

6/10

di   erentiable prover

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

    1.0

grandpaof

abe

bart

1.

2.

   

3.

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

tim rockt  aschel

end-to-end di   erentiable proving

6/10

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

di   erentiable prover

    1.0

grandpaof

abe

bart

1.

2.

   

3.

fatherof

abe

z

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

tim rockt  aschel

end-to-end di   erentiable proving

6/10

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

di   erentiable prover

    1.0

grandpaof

abe

bart

1.

2.

   

3.

fatherof

abe

z

3.

fail

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

tim rockt  aschel

end-to-end di   erentiable proving

6/10

di   erentiable prover

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

3.2 parentof(z, y)

x/abe
y/bart
z/homer

    1.0

grandpaof

abe

bart

1.

2.

   

3.

fatherof

abe

z

1.

3.

fail

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

tim rockt  aschel

end-to-end di   erentiable proving

6/10

di   erentiable prover

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

3.2 parentof(z, y)

x/abe
y/bart
z/homer

    1.0

grandpaof

abe

bart

1.

2.

   

3.

fatherof

abe

z

1.

3.

fail

parentof

homer

bart

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

tim rockt  aschel

end-to-end di   erentiable proving

6/10

di   erentiable prover

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

3.2 parentof(z, y)

x/abe
y/bart
z/homer

    1.0

grandpaof

abe

bart

1.

2.

   

3.

fatherof

abe

z

1.

3.

fail

parentof

homer

bart

1.

2.

3.

x/abe
y/bart
z/homer

fail

x/abe
y/bart
z/homer

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

tim rockt  aschel

end-to-end di   erentiable proving

6/10

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

3.2 parentof(z, y)

x/abe
y/bart
z/homer

di   erentiable prover

    1.0

grandpaof

abe

bart

1.

2.

   

fatherof

abe

1.

3.

fail

3.

z

2.

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

x/abe
y/bart
z/bart

3.2 parentof(z, y)

parentof

homer

bart

1.

2.

3.

x/abe
y/bart
z/homer

fail

x/abe
y/bart
z/homer

tim rockt  aschel

end-to-end di   erentiable proving

6/10

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

3.2 parentof(z, y)

x/abe
y/bart
z/homer

di   erentiable prover

    1.0

grandpaof

abe

bart

1.

2.

   

fatherof

abe

1.

3.

fail

3.

z

2.

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

x/abe
y/bart
z/bart

3.2 parentof(z, y)

parentof

homer

bart

parentof

bart

bart

1.

2.

3.

x/abe
y/bart
z/homer

fail

x/abe
y/bart
z/homer

tim rockt  aschel

end-to-end di   erentiable proving

6/10

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

3.2 parentof(z, y)

x/abe
y/bart
z/homer

di   erentiable prover

    1.0

grandpaof

abe

bart

1.

2.

   

fatherof

abe

1.

3.

fail

3.

z

2.

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

x/abe
y/bart
z/bart

3.2 parentof(z, y)

parentof

homer

bart

parentof

bart

bart

1.

2.

3.

1.

2.

3.

x/abe
y/bart
z/homer

fail

x/abe
y/bart
z/homer

x/abe
y/bart
z/bart

fail

x/abe
y/bart
z/bart

tim rockt  aschel

end-to-end di   erentiable proving

6/10

neural program induction

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

3.2 parentof(z, y)

x/abe
y/bart
z/homer

    1.0

grandpaof

abe

bart

1.

2.

   

fatherof

abe

1.

3.

fail

3.

z

2.

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

x/abe
y/bart
z/bart

3.2 parentof(z, y)

parentof

homer

bart

parentof

bart

bart

1.

2.

3.

1.

2.

3.

x/abe
y/bart
z/homer

fail

x/abe
y/bart
z/homer

x/abe
y/bart
z/bart

fail

x/abe
y/bart
z/bart

tim rockt  aschel

end-to-end di   erentiable proving

6/10

neural program induction

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3.   1(x, y) :   
  2(x, z),
  3(z, y).

   

3.2   3(z, y)

x/abe
y/bart
z/homer

    1.0

grandpaof

abe

bart

1.

  2

1.

2.

   

abe

3.

fail

3.

z

2.

x/abe
y/bart

3.1   2(x, z)
3.2   3(z, y)

x/abe
y/bart
z/bart

3.2   3(z, y)

  3

homer

bart

  3

bart

bart

1.

2.

3.

1.

2.

3.

x/abe
y/bart
z/homer

fail

x/abe
y/bart
z/homer

x/abe
y/bart
z/bart

fail

x/abe
y/bart
z/bart

tim rockt  aschel

end-to-end di   erentiable proving

6/10

training objective

grandpaof

abe

bart

3.

1.

1.

1.

1.

   

   

x/abe
y/bart
z/homer

3.

1.

2.

x/abe
y/bart
z/homer

3.

3.

2.

2.

1.

2.

x/abe
y/bart
z/bart

x/abe
y/bart
z/bart

tim rockt  aschel

end-to-end di   erentiable proving

7/10

training objective

grandpaof

abe

bart

3.

1.

1.

1.

1.

   

   

x/abe
y/bart
z/homer

3.

1.

2.

x/abe
y/bart
z/homer

3.

3.

2.

2.

1.

2.

x/abe
y/bart
z/bart

x/abe
y/bart
z/bart

max pooling

f  (grandpaof(abe, bart))

tim rockt  aschel

end-to-end di   erentiable proving

7/10

training objective

grandpaof

abe

bart

3.

1.

1.

1.

1.

   

   

x/abe
y/bart
z/homer

3.

1.

2.

x/abe
y/bart
z/homer

3.

3.

2.

2.

1.

2.

x/abe
y/bart
z/bart

x/abe
y/bart
z/bart

max pooling

f  (grandpaof(abe, bart))

loss: negative log-likelihood w.r.t. target proof success

tim rockt  aschel

end-to-end di   erentiable proving

7/10

training objective

grandpaof

abe

bart

3.

1.

1.

1.

1.

   

   

x/abe
y/bart
z/homer

3.

1.

2.

x/abe
y/bart
z/homer

3.

3.

2.

2.

1.

2.

x/abe
y/bart
z/bart

x/abe
y/bart
z/bart

max pooling

f  (grandpaof(abe, bart))

loss: negative log-likelihood w.r.t. target proof success
trained end-to-end using stochastic id119

tim rockt  aschel

end-to-end di   erentiable proving

7/10

training objective

grandpaof

abe

bart

3.

1.

1.

1.

1.

   

   

x/abe
y/bart
z/homer

3.

1.

2.

x/abe
y/bart
z/homer

3.

3.

2.

2.

1.

2.

x/abe
y/bart
z/bart

x/abe
y/bart
z/bart

max pooling

f  (grandpaof(abe, bart))

loss: negative log-likelihood w.r.t. target proof success
trained end-to-end using stochastic id119
vectors are learned such that proof success is high for known facts and
low for sampled negative facts

tim rockt  aschel

end-to-end di   erentiable proving

7/10

results

complex

87

82

82

77

70

76

57

48

48

62

62

59

countries s3 kinship

nations

umls

1
@
s
t
h
/

i

y
c
a
r
u
c
c
a

100

80

60

40

20

0

tim rockt  aschel

end-to-end di   erentiable proving

8/10

results

complex

prover

87

82

82

77

70

76

57

48

48

62

62

59

countries s3 kinship

nations

umls

1
@
s
t
h
/

i

y
c
a
r
u
c
c
a

100

80

60

40

20

0

tim rockt  aschel

end-to-end di   erentiable proving

8/10

results

complex

prover

prover  

87

82

82

77

70

76

57

48

48

62

62

59

countries s3 kinship

nations

umls

1
@
s
t
h
/

i

y
c
a
r
u
c
c
a

100

80

60

40

20

0

tim rockt  aschel

end-to-end di   erentiable proving

8/10

examples of induced rules

locatedin(x, y) :    locatedin(x, z), locatedin(z, y).
interacts with(x, y) :    interacts with(x, z), interacts with(z, y).
derivative of(x, y) :    derivative of(x, z), derivative of(z, y).

tim rockt  aschel

end-to-end di   erentiable proving

9/10

summary

we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base

tim rockt  aschel

end-to-end di   erentiable proving

10/10

summary

we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols

tim rockt  aschel

end-to-end di   erentiable proving

10/10

summary

we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
learns vector representations of symbols from data via id119

tim rockt  aschel

end-to-end di   erentiable proving

10/10

summary

we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
learns vector representations of symbols from data via id119
induces interpretable rules from data via id119

tim rockt  aschel

end-to-end di   erentiable proving

10/10

summary

we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
learns vector representations of symbols from data via id119
induces interpretable rules from data via id119
various computational optimizations: batch proving, tree pruning etc.
come to the poster!

tim rockt  aschel

end-to-end di   erentiable proving

10/10

summary

we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
learns vector representations of symbols from data via id119
induces interpretable rules from data via id119
various computational optimizations: batch proving, tree pruning etc.
come to the poster!
future research:

tim rockt  aschel

end-to-end di   erentiable proving

10/10

summary

we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
learns vector representations of symbols from data via id119
induces interpretable rules from data via id119
various computational optimizations: batch proving, tree pruning etc.
come to the poster!
future research:

scaling up to larger knowledge bases

tim rockt  aschel

end-to-end di   erentiable proving

10/10

summary

we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
learns vector representations of symbols from data via id119
induces interpretable rules from data via id119
various computational optimizations: batch proving, tree pruning etc.
come to the poster!
future research:

scaling up to larger knowledge bases
connecting to id56s for proving with natural language statements

tim rockt  aschel

end-to-end di   erentiable proving

10/10

poster: today 6:30-10:30pm, paci   c ballroom #128

thank you!

http://rockt.github.com

twitter: @ rockt

tim.rocktaschel@cs.ox.ac.uk

