   #[1]github [2]recent commits to recurrentjs:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]61
     * [35]star [36]819
     * [37]fork [38]175

[39]karpathy/[40]recurrentjs

   [41]code [42]issues 4 [43]pull requests 1 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   deep recurrent neural networks and lstms in javascript. more generally
   also arbitrary expression graphs with automatic differentiation.
     * [47]7 commits
     * [48]1 branch
     * [49]0 releases
     * [50]3 contributors

    1. [51]html 85.5%
    2. [52]javascript 14.5%

   (button) html javascript
   branch: master (button) new pull request
   [53]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/k
   [54]download zip

downloading...

   want to be notified of new releases in karpathy/recurrentjs?
   [55]sign in [56]sign up

launching github desktop...

   if nothing happens, [57]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [59]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [60]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [61]permalink
   type           name          latest commit message  commit time
        failed to load latest commit information.
        [62]external            [63]first commit      dec 18, 2014
        [64]src                 [65]first commit      dec 18, 2014
        [66]readme.md           [67]update readme.md  may 20, 2015
        [68]character_demo.html

readme.md

recurrentjs

   recurrentjs is a javascript library that implements:
     * deep recurrent neural networks (id56)
     * id137 (lstm)
     * in fact, the library is more general because it has functionality
       to construct arbitrary expression graphs over which the library can
       perform automatic differentiation similar to what you may find in
       theano for python, or in torch etc. currently, the code uses this
       very general functionality to implement id56/lstm, but one can build
       arbitrary neural networks and do automatic backprop.

online demo

   an online demo that memorizes character sequences can be found below.
   sentences are input data and the networks are trained to predict the
   next character in a sentence. thus, they learn english from scratch
   character by character and eventually after some training generate
   entirely new sentences that sometimes make some sense :)

   [69]character sequence memorization demo

example code

   the core of the library is a graph structure which maintains the links
   between matrices and how they are related through transformations.
   another important building block is the mat class which represents a
   2-dimensional n x d matrix, its values in field .w and its derivates in
   field .dw. here is how you would implement a simple neural network
   layer:
var w = new r.randmat(10, 4); // weights mat
var x = new r.randmat(4, 1); // random input mat
var b = new r.randmat(10, 1); // bias vector

// matrix multiply followed by bias offset. h is a mat
var g = new r.graph();
var h = g.add(g.mul(w, x), b);
// the graph structure keeps track of the connectivities between mats

// we can now set the loss on h
h.dw[0] = 1.0; // say we want the first value to be lower

// propagate all gradients backwards through the graph
// starting with h, all the way down to w,x,b
// i.e. this sets .dw field for w,x,b with the gradients
g.backward();

// do a parameter update on w,b:
var s = new r.solver(); // the solver uses rmsprop
// update w and b, use learning rate of 0.01,
// id173 strength of 0.0001 and clip gradient magnitudes at 5.0
var model = {'w':w, 'b':b};
s.step(model, 0.01, 0.0001, 5.0)

   to construct and train an lstm for example, you would proceed as
   follows:
// takes as input mat of 10x1, contains 2 hidden layers of
// 20 neurons each, and outputs a mat of size 2x1
var hidden_sizes = [20, 20];
var lstm_model = r.initlstm(10, hidden_sizes, 2);
var x1 = new r.randmat(10, 1); // example input #1
var x2 = new r.randmat(10, 1); // example input #2
var x3 = new r.randmat(10, 1); // example input #3

// pass 3 examples through the lstm
var g = new r.graph();
var out1 = r.forwardlstm(g, lstm_model, hidden_sizes, x1, {});
var out2 = r.forwardlstm(g, lstm_model, hidden_sizes, x2, out1);
var out3 = r.forwardlstm(g, lstm_model, hidden_sizes, x3, out2);

// the field .o contains the output mats:
// e.g. x1.o is a 2x1 mat
// for example lets assume we have binary classification problem
// so the output of the lstm are the log probabilities of the
// two classes. lets first get the probabilities:
var prob1 = r.softmax(out1.o);
var target1 = 0; // suppose first input has class 0
cost += -math.log(probs.w[ix_target]); // softmax cost function

// cross-id178 loss for softmax is simply the probabilities:
out1.dw = prob1.w;
// but the correct class gets an extra -1:
out1.dw[ix_target] -= 1;

// in real application you'd probably have a desired class
// for every input, so you'd iteratively se the .dw loss on each
// one. in the example provided demo we are, for example,
// predicting the index of the next letter in an input sentence.

// update the lstm parameters
g.backward();
var s = new r.solver();

// perform rmsprop update with
// step size of 0.01
// l2 id173 of 0.00001
// and clipping the gradients at 5.0 elementwise
s.step(lstm_model, 0.01, 0.00001, 5.0);

   you'll notice that the softmax and so on isn't folded very neatly into
   the library yet and you have to understand id26. i'll fix
   this soon.

warning: beta

   this code works fine, but it's a bit rough around the edges - you have
   to understand neural nets well if you want to use it and it isn't
   beautifully modularized. i thought i would still make the code
   available now and work on polishing it further later, since i hope that
   even in this state it can be useful to others who may want to browse
   around and get their feet wet with training these models or learning
   about them.

license

   mit

     *    2019 github, inc.
     * [70]terms
     * [71]privacy
     * [72]security
     * [73]status
     * [74]help

     * [75]contact github
     * [76]pricing
     * [77]api
     * [78]training
     * [79]blog
     * [80]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [81]reload to refresh your
   session. you signed out in another tab or window. [82]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/karpathy/recurrentjs/commits/master.atom
   3. https://github.com/karpathy/recurrentjs#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/karpathy/recurrentjs
  32. https://github.com/join
  33. https://github.com/login?return_to=/karpathy/recurrentjs
  34. https://github.com/karpathy/recurrentjs/watchers
  35. https://github.com/login?return_to=/karpathy/recurrentjs
  36. https://github.com/karpathy/recurrentjs/stargazers
  37. https://github.com/login?return_to=/karpathy/recurrentjs
  38. https://github.com/karpathy/recurrentjs/network/members
  39. https://github.com/karpathy
  40. https://github.com/karpathy/recurrentjs
  41. https://github.com/karpathy/recurrentjs
  42. https://github.com/karpathy/recurrentjs/issues
  43. https://github.com/karpathy/recurrentjs/pulls
  44. https://github.com/karpathy/recurrentjs/projects
  45. https://github.com/karpathy/recurrentjs/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/karpathy/recurrentjs/commits/master
  48. https://github.com/karpathy/recurrentjs/branches
  49. https://github.com/karpathy/recurrentjs/releases
  50. https://github.com/karpathy/recurrentjs/graphs/contributors
  51. https://github.com/karpathy/recurrentjs/search?l=html
  52. https://github.com/karpathy/recurrentjs/search?l=javascript
  53. https://github.com/karpathy/recurrentjs/find/master
  54. https://github.com/karpathy/recurrentjs/archive/master.zip
  55. https://github.com/login?return_to=https://github.com/karpathy/recurrentjs
  56. https://github.com/join?return_to=/karpathy/recurrentjs
  57. https://desktop.github.com/
  58. https://desktop.github.com/
  59. https://developer.apple.com/xcode/
  60. https://visualstudio.github.com/
  61. https://github.com/karpathy/recurrentjs/tree/84d69349c5412ddebd2b1cbc9b29861ddf3a8169
  62. https://github.com/karpathy/recurrentjs/tree/master/external
  63. https://github.com/karpathy/recurrentjs/commit/3e62bba15db6dbbc83514bfcbf6cb49f0b4fe2ec
  64. https://github.com/karpathy/recurrentjs/tree/master/src
  65. https://github.com/karpathy/recurrentjs/commit/3e62bba15db6dbbc83514bfcbf6cb49f0b4fe2ec
  66. https://github.com/karpathy/recurrentjs/blob/master/readme.md
  67. https://github.com/karpathy/recurrentjs/commit/986f39ecefd5ddec1ae6d6c52500ee8816634434
  68. https://github.com/karpathy/recurrentjs/blob/master/character_demo.html
  69. http://cs.stanford.edu/people/karpathy/recurrentjs
  70. https://github.com/site/terms
  71. https://github.com/site/privacy
  72. https://github.com/security
  73. https://githubstatus.com/
  74. https://help.github.com/
  75. https://github.com/contact
  76. https://github.com/pricing
  77. https://developer.github.com/
  78. https://training.github.com/
  79. https://github.blog/
  80. https://github.com/about
  81. https://github.com/karpathy/recurrentjs
  82. https://github.com/karpathy/recurrentjs

   hidden links:
  84. https://github.com/
  85. https://github.com/karpathy/recurrentjs
  86. https://github.com/karpathy/recurrentjs
  87. https://github.com/karpathy/recurrentjs
  88. https://help.github.com/articles/which-remote-url-should-i-use
  89. https://github.com/karpathy/recurrentjs#recurrentjs
  90. https://github.com/karpathy/recurrentjs#online-demo
  91. https://github.com/karpathy/recurrentjs#example-code
  92. https://github.com/karpathy/recurrentjs#warning-beta
  93. https://github.com/karpathy/recurrentjs#license
  94. https://github.com/
