additional exercises for id76

stephen boyd

lieven vandenberghe

february 27, 2019

this is a collection of additional exercises, meant to supplement those found in the book convex
optimization, by stephen boyd and lieven vandenberghe. these exercises were used in several
courses on id76, ee364a (stanford), ee236b (ucla), or 6.975 (mit), usually for
homework, but sometimes as exam questions. some of the exercises were originally written for the
book, but were removed at some point.

many of them include a computational component using one of the software packages for convex
optimization: cvx (matlab), cvxpy (python), or convex.jl (julia). we refer to these collectively
as cvx*. (some problems have not yet been updated for all three languages.) the    les required
for these exercises can be found at the book web site www.stanford.edu/~boyd/cvxbook/.

you are free to use these exercises any way you like (for example in a course you teach), provided
you acknowledge the source. in turn, we gratefully acknowledge the teaching assistants (and in
some cases, students) who have helped us develop and debug these exercises. pablo parrilo helped
develop some of the exercises that were originally used in mit 6.975, sanjay lall developed some
other problems when he taught ee364a, and the instructors of ee364a during summer quarters
developed others.

we   ll update this document as new exercises become available, so the exercise numbers and
sections will occasionally change. we have categorized the exercises into sections that follow the
book chapters, as well as various additional application areas. some exercises    t into more than
one section, or don   t    t well into any section, so we have just arbitrarily assigned these.

course instructors can obtain solutions to these exercises by email to us. please specify the

course you are teaching and give its url.

stephen boyd and lieven vandenberghe

1

3

5

16

35

53

71

85

101

108

115

116

124

136

144

167

178

186

199

contents

1 convex sets

2 convex functions

3 id76 problems

4 duality

5 approximation and    tting

6 statistical estimation

7 geometry

8 unconstrained and equality constrained minimization

9 interior point methods

10 mathematical background

11 circuit design

12 signal processing and communications

13 control and trajectory optimization

14 finance

15 mechanical and aerospace engineering

16 graphs and networks

17 energy and power

18 miscellaneous applications

2

1 convex sets

1.1 is the set {a     rk | p(0) = 1, |p(t)|     1 for        t       }, where

p(t) = a1 + a2t +        + aktk   1,

convex?

1.2 set distributive characterization of convexity [rockafellar]. show that c     rn is convex if and

only if (   +   )c =   c +   c for all nonnegative   ,   .

1.3 composition of linear-fractional functions. suppose    : rn     rm and    : rm     rp are the

linear-fractional functions

  (x) =

ax + b
ct x + d

,

  (y) =

ey + f
gt y + h

,

with domains dom    = {x | ct x + d > 0}, dom    = {y | gt x + h > 0}. we associate with    and
   the matrices

(cid:20) a b

(cid:21)

,

(cid:20) e f

gt h

(cid:21)

,

respectively.

ct

d

now consider the composition    of    and   , i.e.,   (x) =   (  (x)), with domain

dom    = {x     dom    |   (x)     dom   }.

show that    is linear-fractional, and that the matrix associated with it is the product

(cid:20) e f

(cid:21)(cid:20) a b

gt h

ct

d

(cid:21)

.

1.4 dual of exponential cone. the exponential cone kexp     r3 is de   ned as

kexp = {(x, y, z) | y > 0, yex/y     z}.

exp.

find the dual cone k   
we are not worried here about the    ne details of what happens on the boundaries of these cones,
so you really needn   t worry about it. but we make some comments here for those who do care
about such things.

the cone kexp as de   ned above is not closed. to obtain its closure, we need to add the points

{(x, y, z) | x     0, y = 0, z     0}.

(this makes no di   erence, since the dual of a cone is equal to the dual of its closure.)

1.5 dual of intersection of cones. let c and d be closed convex cones in rn. in this problem we will

show that

(c     d)    = c    + d   .

here, + denotes set addition: c    + d    is the set {u + v | u     c   , v     d   }. in other words, the
dual of the intersection of two closed convex cones is the sum of the dual cones.

3

(a) show that c     d and c    + d    are convex cones. (in fact, c     d and c    + d    are closed, but

we won   t ask you to show this.)
(b) show that (c     d)        c    + d   .
(c) now let   s show (c     d)        c    + d   . you can do this by    rst showing
(c     d)        c    + d           c     d     (c    + d   )   .

you can use the following result:

if k is a closed convex cone, then k       = k.

next, show that c     d     (c    + d   )    and conclude (c     d)    = c    + d   .

(d) show that the dual of the polyhedral cone v = {x | ax (cid:23) 0} can be expressed as

v     = {at v | v (cid:23) 0}.

1.6 polar of a set. the polar of c     rn is de   ned as the set

c    = {y     rn | yt x     1 for all x     c}.

(a) show that c    is convex (even if c is not).
(b) what is the polar of a cone?
(c) what is the polar of the unit ball for a norm (cid:107)    (cid:107)?
(d) what is the polar of the set c = {x | 1t x = 1, x (cid:23) 0}?
(e) show that if c is closed and convex, with 0     c, then (c   )    = c.

1.7 dual cones in r2. describe the dual cone for each of the following cones.

(a) k = {0}.
(b) k = r2.
(c) k = {(x1, x2) | |x1|     x2}.
(d) k = {(x1, x2) | x1 + x2 = 0}.

4

2 convex functions

2.1 maximum of a convex function over a polyhedron. show that the maximum of a convex function f

over the polyhedron p = conv{v1, . . . , vk} is achieved at one of its vertices, i.e.,

sup
x   p

f (x) = max
i=1,...,k

f (vi).

(a stronger statement is: the maximum of a convex function over a closed bounded convex set is
achieved at an extreme point, i.e., a point in the set that is not a convex combination of any other
points in the set.) hint. assume the statement is false, and use jensen   s inequality.

2.2 a general vector composition rule. suppose

where h : rk     r is convex, and gi : rn     r. suppose that for each i, one of the following holds:

f (x) = h(g1(x), g2(x), . . . , gk(x))

    h is nondecreasing in the ith argument, and gi is convex
    h is nonincreasing in the ith argument, and gi is concave
    gi is a   ne.

show that f is convex. (this composition rule subsumes all the ones given in the book, and is
the one used in software systems such as cvx.) you can assume that dom h = rk; the result
also holds in the general case when the monotonicity conditions listed above are imposed on   h, the
extended-valued extension of h.

2.3 logarithmic barrier for the second-order cone. the function f (x, t) =     log(t2   xt x), with dom f =
{(x, t)     rn    r | t > (cid:107)x(cid:107)2} (i.e., the second-order cone), is convex. (the function f is called the
logarithmic barrier function for the second-order cone.) this can be shown many ways, for example
by evaluating the hessian and demonstrating that it is positive semide   nite. in this exercise you
establish convexity of f using a relatively painless method, leveraging some composition rules and
known convexity of a few other functions.
(a) explain why t   (1/t)ut u is a concave function on dom f . hint. use convexity of the quadratic

over linear function.

(b) from this, show that     log(t     (1/t)ut u) is a convex function on dom f .
(c) from this, show that f is convex.

2.4 a quadratic-over-linear composition theorem. suppose that f : rn     r is nonnegative and convex,
and g : rn     r is positive and concave. show that the function f 2/g, with domain dom f   dom g,
is convex.

2.5 a perspective composition rule [mar  echal]. let f : rn     r be a convex function with f (0)     0.

(a) show that the perspective tf (x/t), with domain {(x, t) | t > 0, x/t     dom f}, is nonincreasing

as a function of t.

5

(b) let g be concave and positive on its domain. show that the function

h(x) = g(x)f (x/g(x)),

dom h = {x     dom g | x/g(x)     dom f}

is convex.

(c) as an example, show that

h(x) =

is convex.

((cid:81)n

xt x
k=1 xk)1/n

,

dom h = rn

++

2.6 perspective of log determinant. show that f (x, t) = nt log t   t log det x, with dom f = sn

++  r++,

is convex in (x, t). use this to show that

g(x) = n(tr x) log(tr x)     (tr x)(log det x)

(cid:32) n(cid:88)

(cid:33)(cid:32)

n(cid:88)

  i     n(cid:88)

= n

  i

log

log   i

,

(cid:33)

i=1

i=1

i=1

where   i are the eigenvalues of x, is convex on sn

++.

2.7 pre-composition with a linear fractional mapping. suppose f : rm     r is convex, and a     rm  n,

b     rm, c     rn, and d     r. show that g : rn     r, de   ned by

g(x) = (ct x + d)f ((ax + b)/(ct x + d)),

dom g = {x | ct x + d > 0},

is convex.

2.8 scalar valued linear fractional functions. a function f : rn     r is called linear fractional if it has
the form f (x) = (at x + b)/(ct x + d), with dom f = {x | ct x + d > 0}. when is a linear fractional
function convex? when is a linear fractional function quasiconvex?

k xk)1/n with dom f = rn

++ is concave,

2.9 show that the function

f (x) =

(cid:107)ax     b(cid:107)2
1     xt x

2

is convex on {x | (cid:107)x(cid:107)2 < 1}.

2.10 weighted geometric mean. the geometric mean f (x) = ((cid:81)

as shown on page 74. extend the proof to show that

n(cid:89)

is concave, where   k are nonnegative numbers with(cid:80)

f (x) =

k=1

x  k
k ,

dom f = rn

++

k   k     1.

2.11 suppose that f : rn     r is convex, and de   ne

g(x, t) = f (x/t), dom g = {(x, t) | x/t     dom f, t > 0}.

show that g is quasiconvex.

6

2.12 continued fraction function. show that the function

f (x) =

x1    

1

x2    

1

1

x3     1
x4

de   ned where every denominator is positive, is convex and decreasing. (there is nothing special
about n = 4 here; the same holds for any number of variables.)

2.13 circularly symmetric huber function. the scalar huber function is de   ned as

(cid:26) (1/2)x2

|x|     1
|x|     1/2 |x| > 1.

fhub(x) =

this convex function comes up in several applications, including robust estimation. this prob-
lem concerns generalizations of the huber function to rn. one generalization to rn is given
by fhub(x1) +        + fhub(xn), but this function is not circularly symmetric, i.e., invariant under
transformation of x by an orthogonal matrix. a generalization to rn that is circularly symmetric
is

fcshub(x) = fhub((cid:107)x(cid:107)) =

(cid:26) (1/2)(cid:107)x(cid:107)2

(cid:107)x(cid:107)2     1
(cid:107)x(cid:107)2     1/2 (cid:107)x(cid:107)2 > 1.

2

(the subscript stands for    circularly symmetric huber function   .) show that fcshub is convex. find
the conjugate function f   

cshub.

2.14 reverse jensen inequality. suppose f is convex,   1 > 0,   i     0, i = 2, . . . , k, and   1 +       +   n = 1,

and let x1, . . . , xn     dom f . show that the inequality

f (  1x1 +        +   nxn)       1f (x1) +        +   nf (xn)

always holds. hints. draw a picture for the n = 2 case    rst. for the general case, express x1 as a
convex combination of   1x1 +        +   nxn and x2, . . . , xn, and use jensen   s inequality.

2.15 monotone extension of a convex function. suppose f : rn     r is convex. recall that a function
h : rn     r is monotone nondecreasing if h(x)     h(y) whenever x (cid:23) y. the monotone extension
of f is de   ned as

g(x) = inf
z(cid:23)0

f (x + z).

(we will assume that g(x) >       .) show that g is convex and monotone nondecreasing, and
satis   es g(x)     f (x) for all x. show that if h is any other convex function that satis   es these
properties, then h(x)     g(x) for all x. thus, g is the maximum convex monotone underestimator
of f .
remark. for simple functions (say, on r) it is easy to work out what g is, given f . on rn, it
can be very di   cult to work out an explicit expression for g. however, systems such as cvx can
immediately handle functions such as g, de   ned by partial minimization.

7

2.16 circularly symmetric convex functions. suppose f : rn     r is convex and symmetric with respect
to rotations, i.e., f (x) depends only on (cid:107)x(cid:107)2. show that f must have the form f (x) =   ((cid:107)x(cid:107)2),
where    : r     r is nondecreasing and convex, with dom f = r. (conversely, any function of this
form is symmetric and convex, so this form characterizes such functions.)

2.17 in   mal convolution. let f1, . . . , fm be convex functions on rn. their in   mal convolution, denoted

g = f1 (cid:5)        (cid:5) fm (several other notations are also used), is de   ned as

g(x) = inf{f1(x1) +        + fm(xm) | x1 +        + xm = x},

with the natural domain (i.e., de   ned by g(x) <    ). in one simple interpretation, fi(xi) is the cost
for the ith    rm to produce a mix of products given by xi; g(x) is then the optimal cost obtained
if the    rms can freely exchange products to produce, all together, the mix given by x. (the name
   convolution    presumably comes from the observation that if we replace the sum above with the
product, and the in   mum above with integration, then we obtain the normal convolution.)

(a) show that g is convex.
(b) show that g    = f   

1 +        + f   

m. in other words, the conjugate of the in   mal convolution is the

sum of the conjugates.

2.18 conjugate of composition of convex and linear function. suppose a     rm  n with rank a = m,

and g is de   ned as g(x) = f (ax), where f : rm     r is convex. show that
dom(g   ) = at dom(f   ),

g   (y) = f   ((a   )t y),

where a    = (aat )   1a is the pseudo-inverse of a. (this generalizes the formula given on page 95
for the case when a is square and invertible.)

2.19 [roberts and varberg] suppose   1, . . . ,   n are positive. show that the function f : rn     r, given

by

is concave on

dom f =

hint. the hessian is given by

f (x) =

(1     e   xi)  i,

n(cid:89)

i=1

(cid:40)

(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) n(cid:88)

i=1

x     rn

++

  ie   xi     1

(cid:41)

.

   2f (x) = f (x)(yyt     diag(z))

where yi =   ie   xi/(1     e   xi) and zi = yi/(1     e   xi).

2.20 show that the following functions f : rn     r are convex.

(a) the di   erence between the maximum and minimum value of a polynomial on a given interval,

as a function of its coe   cients:
p(t)     inf
t   [a,b]

f (x) = sup
t   [a,b]

p(t) where p(t) = x1 + x2t + x3t2 +        + xntn   1.

a, b are real constants with a < b.

8

(b) the    exponential barrier    of a set of inequalities:

m(cid:88)

f (x) =

e   1/fi(x),

dom f = {x | fi(x) < 0, i = 1, . . . , m}.

i=1

the functions fi are convex.

(c) the function

g(y +   x)     g(y)

f (x) = inf
  >0

  

if g is convex and y     dom g. (it can be shown that this is the directional derivative of g at
y in the direction x.)

2.21 symmetric convex functions of eigenvalues. a function f : rn     r is said to be symmetric if it is
invariant with respect to a permutation of its arguments, i.e., f (x) = f (p x) for any permutation

matrix p . an example of a symmetric function is f (x) = log((cid:80)n

k=1 exp xk).

in this problem we show that if f : rn     r is convex and symmetric, then the function g : sn     r
de   ned as g(x) = f (  (x)) is convex, where   (x) = (  1(x),   2(x), . . . ,   n(x)) is the vector of
eigenvalues of x. this implies, for example, that the function

n(cid:88)

g(x) = log tr ex = log

e  k(x)

is convex on sn.

k=1

(a) a square matrix s is doubly stochastic if its elements are nonnegative and all row sums and
column sums are equal to one. it can be shown that every doubly stochastic matrix is a convex
combination of permutation matrices.
show that if f is convex and symmetric and s is doubly stochastic, then

f (sx)     f (x).

(b) let y = q diag(  )qt be an eigenvalue decomposition of y     sn with q orthogonal. show
ij is doubly stochastic and that diag(y ) = s  .
(c) use the results in parts (a) and (b) to show that if f is convex and symmetric and x     sn,

that the n   n matrix s with elements sij = q2

then

f (  (x)) = sup
v    v

f (diag(v t xv ))

where v is the set of n   n orthogonal matrices. show that this implies that f (  (x)) is convex
in x.

2.22 convexity of nonsymmetric matrix fractional function. consider the function f : rn  n    rn     r,

de   ned by

f (x, y) = yt x   1y,

dom f = {(x, y) | x + x t (cid:31) 0}.

when this function is restricted to x     sn, it is convex.
is f convex? if so, prove it. if not, give a (simple) counterexample.

9

2.23 show that the following functions f : rn     r are convex.

(a) f (x) =     exp(   g(x)) where g : rn     r has a convex domain and satis   es

(cid:20)    2g(x)    g(x)

(cid:21)

   g(x)t

1

(cid:23) 0

for x     dom g.
(b) the function

f (x) = max{(cid:107)ap x     b(cid:107) | p is a permutation matrix}

with a     rm  n, b     rm.

2.24 convex hull of functions. suppose g and h are convex functions, bounded below, with dom g =

dom h = rn. the convex hull function of g and h is de   ned as

f (x) = inf {  g(y) + (1       )h(z) |   y + (1       )z = x, 0            1} ,

where the in   mum is over   , y, z. show that the convex hull of h and g is convex. describe epi f
in terms of epi g and epi h.

2.25 show that a function f : r     r is convex if and only if dom f is convex and

       1

x

det

           0

1
y

1
z

for all x, y, z     dom f with x < y < z.

f (x) f (y) f (z)

2.26 generalization of the convexity of log det x   1. let p     rn  m have rank m. in this problem we

show that the function f : sn     r, with dom f = sn

++, and
f (x) = log det(p t x   1p )

is convex. to prove this, we assume (without loss of generality) that p has the form

(cid:20) i

0

(cid:21)

,

p =

where i. the matrix p t x   1p is then the leading m    m principal submatrix of x   1.
(a) let y and z be symmetric matrices with 0     y (cid:22) z. show that det y     det z.
(b) let x     sn

++, partitioned as

12 x22
with x11     sm. show that the optimization problem

(cid:21)

,

x =

x t

(cid:20) x11 x12
(cid:20) y 0

log det y    1
(cid:22)

(cid:21)

0

0

(cid:20) x11 x12

x t

12 x22

(cid:21)

,

10

minimize

subject to

with variable y     sm, has the solution

(as usual, we take sm
hint. use the schur complement characterization of positive de   nite block matrices (page 651
of the book): if c (cid:31) 0 then

22 x t
12.

y = x11     x12x   1
++ as the domain of log det y    1.)
(cid:21)

(cid:20) a b

(cid:23) 0

if and only if a     bc   1bt (cid:23) 0.

bt c

(c) combine the result in part (b) and the minimization property (page 3-19, lecture notes) to

show that the function

f (x) = log det(x11     x12x   1

22 x t

12)   1,

with dom f = sn

(d) show that (x11     x12x   1

++, is convex.
22 x t

12)   1 is the leading m    m principal submatrix of x   1, i.e.,
(x11     x12x   1

12)   1 = p t x   1p.

22 x t

hence, the convex function f de   ned in part (c) can also be expressed as f (x) = log det(p t x   1p ).
hint. use the formula for the inverse of a symmetric block matrix:

(cid:21)   1

(cid:20) a b

bt c

(cid:20) 0

=

0
0 c   1

(cid:21)

(cid:20)    i

+

c   1bt

(cid:21)

(a     bc   1bt )   1

(cid:21)t

(cid:20)    i

c   1bt

if c and a     bc   1bt are invertible.

2.27 functions of a random variable with log-concave density. suppose the random variable x on rn
has log-concave density, and let y = g(x), where g : rn     r. for each of the following statements,
either give a counterexample, or show that the statement is true.

(a) if g is a   ne and not constant, then y has log-concave density.
(b) if g is convex, then prob(y     a) is a log-concave function of a.
(c) if g is concave, then e ((y     a)+) is a convex and log-concave function of a. (this quantity is
called the tail expectation of y ; you can assume it exists. we de   ne (s)+ as (s)+ = max{s, 0}.)
2.28 majorization. de   ne c as the set of all permutations of a given n-vector a, i.e., the set of vectors

(a  1, a  2, . . . , a  n) where (  1,   2, . . . ,   n) is one of the n! permutations of (1, 2, . . . , n).

(a) the support function of c is de   ned as sc(y) = maxx   c yt x. show that

sc(y) = a[1]y[1] + a[2]y[2] +        + a[n]y[n].

(u[1], u[2], . . . , u[n] denote the components of an n-vector u in nonincreasing order.)
hint. to    nd the maximum of yt x over x     c, write the inner product as

yt x = (y1     y2)x1 + (y2     y3)(x1 + x2) + (y3     y4)(x1 + x2 + x3) +       
+ (yn   1     yn)(x1 + x2 +        + xn   1) + yn(x1 + x2 +        + xn)

and assume that the components of y are sorted in nonincreasing order.

11

(b) show that x satis   es xt y     sc(y) for all y if and only if

sk(x)     sk(a),

k = 1, . . . , n     1,

sn(x) = sn(a),

where sk denotes the function sk(x) = x[1] + x[2] +       + x[k]. when these inequalities hold, we
say the vector a majorizes the vector x.

(c) conclude from this that the conjugate of sc is given by

(cid:26) 0

s   
c(x) =

if x is majorized by a

+    otherwise.

since s   
x is a convex combination of the permutations of a if and only if a majorizes x.

c is the indicator function of the convex hull of c, this establishes the following result:

2.29 convexity of products of powers. this problem concerns the product of powers function f : rn

1        x  n

++    
n , where        rn is a vector of powers. we are interested in    nding
r given by f (x) = x  1
values of    for which f is convex or concave. you already know a few, for example when n = 2 and
   = (2,   1), f is convex (the quadratic-over-linear function), and when    = (1/n)1, f is concave
(geometric mean). of course, if n = 1, f is convex when        1 or        0, and concave when
0            1.
show each of the statements below. we will not read long or complicated proofs, or ones that
involve hessians. we are looking for short, snappy ones, that (where possible) use composition
rules, perspective, partial minimization, or other operations, together with known convex or concave
functions, such as the ones listed in the previous paragraph. feel free to use the results of earlier
statements in later ones.
(a) when n = 2,    (cid:23) 0, and 1t    = 1, f is concave.
(b) when    (cid:23) 0 and 1t    = 1, f is concave. (this is the same as part (a), but here it is for general

n.)

(c) when    (cid:23) 0 and 1t        1, f is concave.
(d) when    (cid:22) 0, f is convex.
(e) when 1t    = 1 and exactly one of the elements of    is positive, f is convex.
(f) when 1t        1 and exactly one of the elements of    is positive, f is convex.

remark. parts (c), (d), and (f) exactly characterize the cases when f is either convex or concave.
that is, if none of these conditions on    hold, f is neither convex nor concave. your teaching sta   
has, however, kindly refrained from asking you to show this.

2.30 huber penalty. the in   mal convolution of two functions f and g on rn is de   ned as

h(x) = inf
y

(f (y) + g(x     y))

(see exercise 2.17). show that the in   mal convolution of f (x) = (cid:107)x(cid:107)1 and g(x) = (1/2)(cid:107)x(cid:107)2
the function

2, i.e.,

h(x) = inf
y

(f (y) + g(x     y)) = inf

((cid:107)y(cid:107)1 +

y

(cid:107)x     y(cid:107)2
2),

1
2

12

2.31 suppose the function h : r     r is convex, nondecreasing, with dom h = r, and h(t) = h(0) for

is the huber penalty

n(cid:88)

i=1

h(x) =

  (xi),

  (u) =

(cid:26) u2/2

|u|     1
|u|     1/2 |u| > 1.

t     0.
(a) show that the function f (x) = h((cid:107)x(cid:107)2) is convex on rn.
(b) show that the conjugate of f is f   (y) = h   ((cid:107)y(cid:107)2).
(c) as an example, derive the conjugate of f (x) = (1/p)(cid:107)x(cid:107)p

part (b) with the function

h(t) =

1
p

max{0, t}p =

(cid:26) 1

p tp
0

t     0
t < 0.

2 for p > 1, by applying the result of

2.32 dcp rules. the function f (x, y) =    1/(xy) with dom f = r2

++ is concave. brie   y explain how to
v, u2,
represent it, using disciplined convex programming (dcp), limited to the atoms 1/u,
u2/v, addition, subtraction, and scalar multiplication. justify any statement about the curvature,
monotonicity, or other properties of the functions you use. assume these atoms take their usual
u has domain u     0), and that dcp is sign-sensitive (e.g., u2/v is increasing in u
domains (e.g.,
when u     0).

2.33 dcp rules. the function f (x, y) =(cid:112)1 + x4/y, with dom f = r   r++, is convex. use disciplined

   

   

   

uv,

convex programming (dcp) to express f so that it is dcp convex. you can use any of the following
atoms

inv_pos(u), which is 1/u, with domain r++
square(u), which is u2, with domain r
sqrt(u), which is
u, with domain r+

   

   

geo_mean(u,v), which is
quad_over_lin(u,v), which is u2/v, with domain r    r++
   
norm2(u,v), which is

u2 + v2, with domain r2.

uv, with domain r2
+

you may also use addition, subtraction, scalar multiplication, and any constant functions. assume
that dcp is sign-sensitive, e.g., square(u) increasing in u when u     0.

2.34 convexity of some sets. determine if each set is convex.

(a) {p     rn  n | xt p x     0 for all x (cid:23) 0}.
(b) {(c0, c1, c2)     r3 | c0 = 1, |c0 + c1t + c2t2|     1 for all     1     t     1}.
(c) {(u, v)     r2 | cos(u + v)        
2/2, u2 + v2       2/4}. hint: cos(  /4) =
(d) {x     rn | xt a   1x     0}, where a     0.

   

2/2.

2.35 let f, g : rn     r and    : r     r be given functions. determine if each statement is true or false.

13

(a) if f, g are convex, then h(x, y) = (f (x) + g(y))2 is convex.
(b) if f,    are convex, di   erentiable, and   (cid:48) > 0, then   (f (x)) is convex.

(c) if f, g are concave and positive, then(cid:112)f (x)g(x) is concave.

2.36 dcp compliance. determine if each expression below is (sign-sensitive) dcp compliant, and if it

is, state whether it is a   ne, convex, or concave.

(a) sqrt(1 + 4 * square(x) + 16 * square(y))

(b) min(x, log(y)) - max(y, z)

(c) log(exp(2 * x + 3) + exp(4 * y + 5))

2.37 curvature of some functions. determine the curvature of the functions below. your responses can

be: a   ne, convex, concave, and none (meaning, neither convex nor concave).

(a) f (u, v) = uv, with dom f = r2.
(b) f (x, u, v) = log(v     xt x/u), with dom f = {(x, u, v) | uv > xt x, u > 0}.
(c) the    exponential barrier    for a polyhedron,

m(cid:88)

i=1

(cid:18)

(cid:19)

,

1
bi     at
i x

f (x) =

exp

with dom f = {x | at

i x < bi, i = 1, . . . , m}, and ai     rn, b     rm.

2.38 curvature of some functions. determine the curvature of the functions below. your responses can

   

be: a   ne, convex, concave, and none (meaning, neither convex nor concave).
(a) f (x) = min{2, x,
(b) f (x) = x3, with dom f = r
(c) f (x) = x3, with dom f = r++

(d) f (x, y) =(cid:112)x min{y, 2}, with dom f = r2

x}, with dom f = r+

   
(e) f (x, y) = (
(f) f (  ) = log det        tr(s  ), with dom f = sn

y)2, with dom f = r2
+

x +

   

+

++, and where s (cid:31) 0

2.39 convexity of some sets. determine if each set below is convex.

(a) {(x, y)     r2
(b) {(x, y)     r2
(c) {(x, y)     r2
(d) {(x, y)     r2

++ | x/y     1}
++ | x/y     1}
+ | xy     1}
+ | xy     1}

2.40 correlation matrices. determine if the following subsets of sn are convex.
+ | cii = 1, i = 1, . . . , n}

(a) the set of correlation matrices, cn = {c     sn
(b) the set of nonnegative correlation matrices, {c     cn | cij     0, i, j = 1, . . . , n}

14

(c) the set of volume-constrained correlation matrices, {c     cn | det c     (1/2)n}
(d) the set of highly correlated correlation matrices, {c     cn | cij     0.8, i, j = 1, . . . , n}

2.41 fun with log concavity. let x be an rn-valued random variable, with log-concave id203 den-
sity function p. de   ne the scalar random variable y = maxi xi, which has cumulative distribution
function   (a) = prob(y     a). determine whether    must be a log-concave function, given only
the assumptions above. if it must be log-concave, give a brief justi   cation. otherwise, provide a
(very) simple counterexample. (we will deduct points for overly complicated solutions.) please
note. the coordinates xi need not be independent random variables.

2.42 fuel use as function of distance and speed. a vehicle uses fuel at a rate f (s), which is a function
of the vehicle speed s. we assume that f : r     r is a positive increasing convex function, with
dom f = r+. the physical units of s are m/s (meters per second), and the physical units of f (s)
are kg/s (kilograms per second).
(a) let g(d, t) be the total fuel used (in kg) when the vehicle moves a distance d     0 (in meters)

in time t > 0 (in seconds) at a constant speed. show that g is convex.

(b) let h(d) be the minimum fuel used (in kg) to move a distance d (in m) at a constant speed s

(in m/s). show that h is convex.

2.43 inverse of product. the function f (x, y) = 1/(xy) with x, y     r, dom f = r2

++, is convex. how do
u, u2,
we represent it using disciplined convex programming (dcp), and the functions 1/u,
u2/v, addition, subtraction, and scalar multiplication? (these functions have the obvious domains,
and you can assume a sign-sensitive version of dcp, e.g., u2/v increasing in u for u     0.) hint.
there are several ways to represent f using the atoms given above.

   

   

uv,

2.44 let h : rn     r be a convex function, nondecreasing in each of its n arguments, and with

domain rn.
(a) show that the function f (x) = h(|x1|, . . . ,|xn|) is convex.
(b) suppose h has the property that h(u) = h(u+
1 , . . . , u+

show that the conjugate of f (x) = h(|x1|, . . . ,|xn|) is

n ) for all u, where u+

k = max{uk, 0}.

f   (y) = h   (|y1|, . . . ,|yn|).

(c) as an example, take n = 1, h(u) = exp(u+), and f (x) = exp(|x|). find the conjugates of h

and f , and verify that f   (y) = h   (|y|).

15

3 id76 problems

3.1 minimizing a function over the id203 simplex. find simple necessary and su   cient conditions
for x     rn to minimize a di   erentiable convex function f over the id203 simplex, {x | 1t x =
1, x (cid:23) 0}.

3.2    hello world    in cvx*. use cvx, cvxpy, or convex.jl to verify the optimal values you obtained

(analytically) for exercise 4.1 in id76.

3.3 reformulating constraints in cvx*. each of the following cvx code fragments describes a convex
constraint on the scalar variables x, y, and z, but violates the cvx rule set, and so is invalid.
brie   y explain why each fragment is invalid. then, rewrite each one in an equivalent form that
conforms to the cvx rule set. in your reformulations, you can use linear equality and inequality
constraints, and inequalities constructed using cvx functions. you can also introduce additional
variables, or use lmis. be sure to explain (brie   y) why your reformulation is equivalent to the
original constraint, if it is not obvious.

check your reformulations by creating a small problem that includes these constraints, and solving
it using cvx. your test problem doesn   t have to be feasible;
it   s enough to verify that cvx
processes your constraints without error.

remark. this looks like a problem about    how to use cvx software   , or    tricks for using cvx   .
but it really checks whether you understand the various composition rules, convex analysis, and
constraint reformulation rules.

(a) norm([x + 2*y, x - y]) == 0

(b) square(square(x + y)) <= x - y

(c) 1/x + 1/y <= 1; x >= 0; y >= 0

(d) norm([max(x,1), max(y,2)]) <= 3*x + y

(e) x*y >= 1; x >= 0; y >= 0

(f) (x + y)^2/sqrt(y) <= x - y + 5

(g) x^3 + y^3 <= 1; x >= 0; y >= 0

(h) x + z <= 1 + sqrt(x*y - z^2); x >= 0; y >= 0

3.4 optimal activity levels. solve the optimal activity level problem described in exercise 4.17 in convex

optimization, for the instance with problem data

                  

1 2 0 1
0 0 3 1
0 3 1 1
2 1 2 5
1 0 3 2

                   ,

                   ,

                  

100
100
100
100
100

             ,

             3

2
7
6

             ,

             2

1
4
2

             .

             4

10
5
10

a =

cmax =

p =

pdisc =

q =

you can do this by forming the lp you found in your solution of exercise 4.17, or more directly,
using cvx*. give the optimal activity levels, the revenue generated by each one, and the total
revenue generated by the optimal solution. also, give the average price per unit for each activity
level, i.e., the ratio of the revenue associated with an activity, to the activity level. (these numbers

16

should be between the basic and discounted prices for each activity.) give a very brief story
explaining, or at least commenting on, the solution you    nd.

3.5 minimizing the ratio of convex and concave piecewise-linear functions. we consider the problem

maxi=1,...,m(at
mini=1,...,p(ct

i x + bi)
i x + di)

minimize
subject to f x (cid:22) g,

with variable x     rn. we assume that ct
i x+bi)     0 for all x satisfying
f x (cid:22) g, and that the feasible set is nonempty and bounded. this problem is quasiconvex, and can
be solved using bisection, with each iteration involving a feasibility lp. show how the problem can
be solved by solving one lp, using a trick similar to one described in   4.3.2.

i x+di > 0 and maxi=1,...,m(at

3.6 two problems involving two norms. we consider the problem

and the very closely related problem

minimize

minimize

(cid:107)ax     b(cid:107)1
1     (cid:107)x(cid:107)   

,

(cid:107)ax     b(cid:107)2
1     (cid:107)x(cid:107)   

1

.

(1)

(2)

in both problems, the variable is x     rn, and the data are a     rm  n and b     rm. note that
the only di   erence between problem (1) and (2) is the square in the numerator. in both problems,
the constraint (cid:107)x(cid:107)    < 1 is implicit. you can assume that b /    r(a), in which case the constraint
(cid:107)x(cid:107)    < 1 can be replaced with (cid:107)x(cid:107)        1.
answer the following two questions, for each of the two problems. (so you will answer four questions
all together.)

(a) is the problem, exactly as stated (and for all problem data), convex? if not, is it quasiconvex?

justify your answer.

(b) explain how to solve the problem. your method can involve an sdp solver, an socp solver,
an lp solver, or any combination. you can include a one-parameter bisection, if necessary.
(for example, you can solve the problem by bisection on a parameter, where each iteration
consists of solving an socp feasibility problem.)
give the best method you can. in judging best, we use the following rules:

    bisection methods are worse than    one-shot    methods. any method that solves the problem
above by solving one lp, socp, or sdp problem is better than any method that uses a
one-parameter bisection. in other words, use a bisection method only if you cannot    nd
a    one-shot    method.

    use the simplest solver needed to solve the problem. we consider an lp solver to be
simpler than an socp solver, which is considered simpler than an sdp solver. thus, a
method that uses an lp solver is better than a method that uses an socp solver, which
in turn is better than a method that uses an sdp solver.

17

3.7 the illumination problem. in lecture 1 we encountered the function

f (p) = max
i=1,...,n

| log at
where ai     rm, and ides > 0 are given, and p     rm
+ .
(a) show that exp f is convex on {p | at
(b) show that the constraint    no more than half of the total power is in any 10 lamps    is convex

i p > 0, i = 1, . . . , n }.

i p     log ides|

(i.e., the set of vectors p that satisfy the constraint is convex).

(c) show that the constraint    no more than half of the lamps are on    is (in general) not convex.
3.8 schur complements and lmi representation. recognizing schur complements (see   a5.5) often
helps to represent nonlinear convex constraints as linear matrix inequalities (lmis). consider the
function

f (x) = (ax + b)t (p0 + x1p1 +        + xnpn)   1(ax + b)

where a     rm  n, b     rm, and pi = p t

i     rm  m, with domain

dom f = {x     rn | p0 + x1p1 +        + xnpn (cid:31) 0}.

this is the composition of the matrix fractional function and an a   ne mapping, and so is convex.
give an lmi representation of epi f . that is,    nd a symmetric matrix f (x, t), a   ne in (x, t), for
which

x     dom f,

f (x)     t

      

f (x, t) (cid:23) 0.

remark. lmi representations, such as the one you found in this exercise, can be directly used in
software systems such as cvx.

3.9 complex least-norm problem. we consider the complex least (cid:96)p-norm problem

(cid:107)x(cid:107)p

minimize
subject to ax = b,

where a     cm  n, b     cm, and the variable is x     cn. here (cid:107)    (cid:107)p denotes the (cid:96)p-norm on cn,
de   ned as

(cid:32) n(cid:88)

(cid:33)1/p

(cid:107)x(cid:107)p =

|xi|p

for p     1, and (cid:107)x(cid:107)    = maxi=1,...,n |xi|. we assume a is full rank, and m < n.

i=1

(a) formulate the complex least (cid:96)2-norm problem as a least (cid:96)2-norm problem with real problem

data and variable. hint. use z = ((cid:60)x,(cid:61)x)     r2n as the variable.

(b) formulate the complex least (cid:96)   -norm problem as an socp.
(c) solve a random instance of both problems with m = 30 and n = 100. to generate the
matrix a, you can use the matlab command a = randn(m,n) + i*randn(m,n). similarly,
use b = randn(m,1) + i*randn(m,1) to generate the vector b. use the matlab command
scatter to plot the optimal solutions of the two problems on the complex plane, and comment
(brie   y) on what you observe. you can solve the problems using the cvx functions norm(x,2)

18

and norm(x,inf), which are overloaded to handle complex arguments. to utilize this feature,
you will need to declare variables to be complex in the variable statement. (in particular,
you do not have to manually form or solve the socp from part (b).)

3.10 id135 with random cost vector. we consider the linear program

minimize
subject to ax (cid:22) b.

ct x

here, however, the cost vector c is random, normally distributed with mean e c = c0 and covariance
e(c     c0)(c     c0)t =   . (a, b, and x are deterministic.) thus, for a given x     rn, the cost ct x is
a (scalar) gaussian variable.
we can attach several di   erent meanings to the goal    minimize ct x   ; we explore some of these
below.
(a) how would you minimize the expected cost e ct x subject to ax (cid:22) b?
(b) in general there is a tradeo    between small expected cost and small cost variance. one way

to take variance into account is to minimize a linear combination

e ct x +    var(ct x)

(3)
of the expected value e ct x and the variance var(ct x) = e(ct x)2     (e ct x)2. this is called
the    risk-sensitive cost   , and the parameter        0 is called the risk-aversion parameter, since
it sets the relative values of cost variance and expected value. (for    > 0, we are willing to
tradeo    an increase in expected cost for a decrease in cost variance). how would you minimize
the risk-sensitive cost? is this problem a id76 problem? be as speci   c as you
can.

(c) we can also minimize the risk-sensitive cost, but with    < 0. this is called    risk-seeking   . is

this problem a id76 problem?

(d) another way to deal with the randomness in the cost ct x is to formulate the problem as

minimize
subject to prob(ct x       )       

  
ax (cid:22) b.

here,    is a    xed parameter, which corresponds roughly to the reliability we require, and
might typically have a value of 0.01. is this problem a id76 problem? be as
speci   c as you can. can you obtain risk-seeking by choice of   ? explain.

3.11 formulate the following optimization problems as semide   nite programs. the variable is x     rn;

f (x) is de   ned as

f (x) = f0 + x1f1 + x2f2 +        + xnfn

with fi     sm. the domain of f in each subproblem is dom f = {x     rn | f (x) (cid:31) 0}.
(a) minimize f (x) = ct f (x)   1c where c     rm.
(b) minimize f (x) = maxi=1,...,k ct

i f (x)   1ci where ci     rm, i = 1, . . . , k.

19

(c) minimize f (x) = sup
(cid:107)c(cid:107)2   1
(d) minimize f (x) = e(ct f (x)   1c) where c is a random vector with mean e c =   c and covariance

ct f (x)   1c.

e(c       c)(c       c)t = s.

3.12 a matrix fractional function [ando] show that x = bt a   1b solves the sdp

minimize

subject to

(cid:21)

(cid:20) a b

tr x

bt x

(cid:23) 0,

with variable x     sn, where a     sm
conclude that tr(bt a   1b) is a convex function of (a, b), for a positive de   nite.

++ and b     rm  n are given.

3.13 trace of harmonic mean of matrices [ando]. the matrix h(a, b) = 2(a   1 + b   1)   1 is known as
the harmonic mean of positive de   nite matrices a and b. show that x = (1/2)h(a, b) solves the
sdp

maximize

subject to

tr(cid:0)(a   1 + b   1)   1(cid:1), with domain sn

with variable x     sn. the matrices a     sn
++    sn

hint. verify that the matrix

(cid:20) a 0

0 b

(cid:21)

,

(cid:20) x x

tr x

(cid:21)

(cid:22)
x x
++ and b     sn
(cid:21)
++, is concave.

(cid:20) a   1

i
b   1    i

r =

++ are given. conclude that the function

is nonsingular. then apply the congruence transformation de   ned by r to the two sides of matrix
inequality in the sdp, to obtain an equivalent inequality

rt

(cid:21)

(cid:20) x x
g(a, b) = a1/2(cid:16)

x x

maximize

r.

a1/2

(cid:21)

0 b

r (cid:22) rt

(cid:20) a 0
a   1/2ba   1/2(cid:17)1/2
(cid:20) a x

(cid:21)
++ and b     sn

(cid:23) 0.

tr x

is known as the geometric mean of positive de   nite matrices a and b. show that x = g(a, b)
solves the sdp

subject to
the variable is x     sn. the matrices a     sn
conclude that the function tr g(a, b) is concave, for a, b positive de   nite.

++ are given.

x b

hint. the symmetric matrix square root is monotone: if u and v are positive semide   nite with
u (cid:22) v then u 1/2 (cid:22) v 1/2.

20

3.14 trace of geometric mean of matrices [ando].

3.15 transforming a standard form convex problem to conic form. in this problem we show that any
convex problem can be cast in conic form, provided some technical conditions hold. we start with
a standard form convex problem with linear objective (without loss of generality):

ct x

minimize
subject to fi(x)     0,
ax = b,

i = 1, . . . , m,

where fi : rn     r are convex, and x     rn is the variable. for simplicity, we will assume that
dom fi = rn for each i.
now introduce a new scalar variable t     r and form the convex problem

minimize
subject to tfi(x/t)     0,

ct x

i = 1, . . . , m,

ax = b,

t = 1.

de   ne

k = cl{(x, t)     rn+1 | tfi(x/t)     0, i = 1, . . . , m, t > 0}.

then our original problem can be expressed as

minimize
subject to (x, t)     k,

ct x

ax = b,

t = 1.

this is a conic problem when k is proper.

you will relate some properties of the original problem to k.

(a) show that k is a convex cone. (it is closed by de   nition, since we take the closure.)

(b) suppose the original problem is strictly feasible, i.e., there exists a point   x with fi(x) < 0,

i = 1, . . . , m. (this is called slater   s condition.) show that k has nonempty interior.

(c) suppose that the inequalities de   ne a bounded set, i.e., {x | fi(x)     0, i = 1, . . . , m} is

bounded. show that k is pointed.

3.16 exploring nearly optimal points. an optimization algorithm will    nd an optimal point for a problem,
provided the problem is feasible. it is often useful to explore the set of nearly optimal points. when
a problem has a    strong minimum   , the set of nearly optimal points is small; all such points are close
to the original optimal point found. at the other extreme, a problem can have a    soft minimum   ,
which means that there are many points, some quite far from the original optimal point found, that
are feasible and have nearly optimal objective value. in this problem you will use a typical method
to explore the set of nearly optimal points.
we start by    nding the optimal value p(cid:63) of the given problem

f0(x)

minimize
subject to fi(x)     0,
hi(x) = 0,

i = 1, . . . , m
i = 1, . . . , p,

21

as well as an optimal point x(cid:63)     rn. we then pick a small positive number  , and a vector c     rn,
and solve the problem

ct x

minimize
subject to fi(x)     0,
hi(x) = 0,
f0(x)     p(cid:63) +  .

i = 1, . . . , m
i = 1, . . . , p

note that any feasible point for this problem is  -suboptimal for the original problem. solving this
problem multiple times, with di   erent c   s, will generate (perhaps di   erent)  -suboptimal points. if
the problem has a strong minimum, these points will all be close to each other; if the problem has
a weak minimum, they can be quite di   erent.

there are di   erent strategies for choosing c in these experiments. the simplest is to choose the
c   s randomly; another method is to choose c to have the form   ei, for i = 1, . . . , n. (this method
gives the    range    of each component of x, over the  -suboptimal set.)

you will carry out this method for the following problem, to determine whether it has a strong
minimum or a weak minimum. you can generate the vectors c randomly, with enough samples for
you to come to your conclusion. you can pick   = 0.01p(cid:63), which means that we are considering the
set of 1% suboptimal points.
the problem is a minimum fuel optimal control problem for a vehicle moving in r2. the position
at time kh is given by p(k)     r2, and the velocity by v(k)     r2, for k = 1, . . . , k. here h > 0 is
the sampling period. these are related by the equations

p(k + 1) = p(k) + hv(k),

v(k + 1) = (1       )v(k) + (h/m)f (k),

k = 1, . . . , k     1,

where f (k)     r2 is the force applied to the vehicle at time kh, m > 0 is the vehicle mass, and
       (0, 1) models drag on the vehicle; in the absense of any other force, the vehicle velocity decreases
by the factor 1        in each discretized time interval. (these formulas are approximations of more
accurate formulas that involve matrix exponentials.)

the force comes from two thrusters, and from gravity:

(cid:21)

(cid:20) cos   1

sin   1

(cid:21)

(cid:20) cos   2

sin   2

f (k) =

u1(k) +

u2(k) +

(cid:20)

(cid:21)

0
   mg

k = 1, . . . , k     1.

,

here u1(k)     r and u2(k)     r are the (nonnegative) thruster force magnitudes,   1 and   2 are the
directions of the thrust forces, and g = 10 is the constant acceleration due to gravity.

the total fuel use is

f =

(u1(k) + u2(k)) .

k   1(cid:88)

(recall that u1(k)     0, u2(k)     0.)
the problem is to minimize fuel use subject to the initial condition p(1) = 0, v(1) = 0, and the
way-point constraints

k=1

p(ki) = wi,

i = 1, . . . , m.

22

(these state that at the time hki, the vehicle must pass through the location wi     r2.) in addition,
we require that the vehicle should remain in a square operating region,

(cid:107)p(k)(cid:107)        p max,

k = 1, . . . , k.

both parts of this problem concern the speci   c problem instance with data given in thrusters_data.*.

(a) find an optimal trajectory, and the associated minimum fuel use p(cid:63). plot the trajectory p(k)

in r2 (i.e., in the p1, p2 plane). verify that it passes through the way-points.

(b) generate several 1% suboptimal trajectories using the general method described above, and
plot the associated trajectories in r2. would you say this problem has a strong minimum, or
a weak minimum?

3.17 minimum fuel optimal control. solve the minimum fuel optimal control problem described in

exercise 4.16 of id76, for the instance with problem data

          1 0.4 0.8

       ,

1
0

0
1

0
0

a =

       ,

       1

0
0.3

       ,

       7

2
   6

b =

xdes =

n = 30.

you can do this by forming the lp you found in your solution of exercise 4.16, or more directly
using cvx. plot the actuator signal u(t) as a function of time t.

3.18 heuristic suboptimal solution for boolean lp. this exercise builds on exercises 4.15 and 5.13 in

id76, which involve the boolean lp

minimize
subject to ax (cid:22) b

ct x
xi     {0, 1},

i = 1, . . . , n,

with optimal value p(cid:63). let xrlx be a solution of the lp relaxation

minimize
subject to ax (cid:22) b

ct x
0 (cid:22) x (cid:22) 1,

so l = ct xrlx is a lower bound on p(cid:63). the relaxed solution xrlx can also be used to guess a boolean
point   x, by rounding its entries, based on a threshold t     [0, 1]:

(cid:26) 1 xrlx

i     t

0 otherwise,

  xi =

for i = 1, . . . , n. evidently   x is boolean (i.e., has entries in {0, 1}). if it is feasible for the boolean
lp, i.e., if a  x (cid:22) b, then it can be considered a guess at a good, if not optimal, point for the boolean
lp. its objective value, u = ct   x, is an upper bound on p(cid:63). if u and l are close, then   x is nearly
optimal; speci   cally,   x cannot be more than (u     l)-suboptimal for the boolean lp.
this rounding need not work; indeed, it can happen that for all threshold values,   x is infeasible.
but for some problem instances, it can work well.

23

of course, there are many variations on this simple scheme for (possibly) constructing a feasible,
good point from xrlx.

finally, we get to the problem. generate problem data using one of the following.

matlab code:

rand(   state   ,0);
n=100;
m=300;
a=rand(m,n);
b=a*ones(n,1)/2;
c=-rand(n,1);

python code:

import numpy as np
np.random.seed(0)
(m, n) = (300, 100)
a = np.random.rand(m, n); a = np.asmatrix(a)
b = a.dot(np.ones((n, 1)))/2; b = np.asmatrix(b)
c = -np.random.rand(n, 1); c = np.asmatrix(c)

julia code:

srand(0);
n=100;
m=300;
a=rand(m,n);
b=a*ones(n,1)/2;
c=-rand(n,1);
you can think of xi as a job we either accept or decline, and    ci as the (positive) revenue we
generate if we accept job i. we can think of ax (cid:22) b as a set of limits on m resources. aij, which
is positive, is the amount of resource i consumed if we accept job j; bi, which is positive, is the
amount of resource i available.

find a solution of the relaxed lp and examine its entries. note the associated lower bound l.
carry out threshold rounding for (say) 100 values of t, uniformly spaced over [0, 1]. for each value
of t, note the objective value ct   x and the maximum constraint violation maxi(a  x     b)i. plot the
objective value and the maximum violation versus t. be sure to indicate on the plot the values of
t for which   x is feasible, and those for which it is not.

find a value of t for which   x is feasible, and gives minimum objective value, and note the associated
upper bound u . give the gap u     l between the upper bound on p(cid:63) and the lower bound on p(cid:63).
in matlab, if you de   ne vectors obj and maxviol, you can    nd the upper bound as u=min(obj(find(maxviol<=0))).

24

3.19 optimal operation of a hybrid vehicle. solve the instance of the hybrid vehicle operation problem de-

scribed in exercise 4.65 in id76, with problem data given in the    le hybrid_veh_data.*,
and fuel use function f (p) = p +   p2 (for p     0).
hint. you will actually formulate and solve a relaxation of the original problem. you may    nd that
some of the equality constraints you relaxed to inequality constraints do not hold for the solution
found. this is not an error: it just means that there is no incentive (in terms of the objective) for
the inequality to be tight. you can    x this in (at least) two ways. one is to go back and adjust
certain variables, without a   ecting the objective and maintaining feasibility, so that the relaxed
constraints hold with equality. another simple method is to add to the objective a term of the
form

t(cid:88)

 

max{0,   pmg(t)},

t=1

where   is small and positive. this makes it more attractive to use the brakes to extract power
from the wheels, even when the battery is (or will be) full (which removes any fuel incentive).

find the optimal fuel consumption, and compare to the fuel consumption with a non-hybrid ver-
sion of the same vehicle (i.e., one without a battery). plot the braking power, engine power,
motor/generator power, and battery energy versus time.
how would you use optimal dual variables for this problem to    nd    ftotal/   emax
batt , i.e., the partial
derivative of optimal fuel consumption with respect to battery capacity? (you can just assume
that this partial derivative exists.) you do not have to give a long derivation or proof; you can
just state how you would    nd this derivative from optimal dual variables for the problem. verify
your method numerically, by changing the battery capacity a small amount and re-running the
optimization, and comparing this to the prediction made using dual variables.

3.20 optimal vehicle speed scheduling. a vehicle (say, an airplane) travels along a    xed path of n
segments, between n + 1 waypoints labeled 0, . . . , n. segment i starts at waypoint i     1 and
terminates at waypoint i. the vehicle starts at time t = 0 at waypoint 0. it travels over each
segment at a constant (nonnegative) speed; si is the speed on segment i. we have lower and upper
limits on the speeds: smin (cid:22) s (cid:22) smax. the vehicle does not stop at the waypoints; it simply
proceeds to the next segment. the travel distance of segment i is di (which is positive), so the
travel time over segment i is di/si. we let   i, i = 1, . . . , n, denote the time at which the vehicle
arrives at waypoint i. the vehicle is required to arrive at waypoint i, for i = 1, . . . , n, between
times    min
, which are given. the vehicle consumes fuel over segment i at a rate that
depends on its speed,   (si), where    is positive, increasing, and convex, and has units of kg/s.
you are given the data d (segment travel distances), smin and smax (speed bounds),    min and    max
(waypoint arrival time bounds), and the fuel use function    : r     r. you are to choose the speeds
s1, . . . , sn so as to minimize the total fuel consumed in kg.

and    max

i

i

(a) show how to pose this as a id76 problem. if you introduce new variables, or
change variables, you must explain how to recover the optimal speeds from the solution of
your problem. if convexity of the objective or any constraint function in your formulation is
not obvious, explain why it is convex.

(b) carry out the method of part (a) on the problem instance with data in

veh_speed_sched_data.m. use the fuel use function   (si) = as2

i + bsi + c (the parameters

25

a, b, and c are de   ned in the data    le). what is the optimal fuel consumption? plot the
optimal speed versus segment, using the matlab command stairs or the function step from
matplotlib in python and julia to better show constant speed over the segments.

3.21 norm approximation via socp, for (cid:96)p-norms with rational p.

(a) use the observation at the beginning of exercise 4.26 in id76 to express the

constraint

y        

z1z2,

y, z1, z2     0,

with variables y, z1, z2, as a second-order cone constraint. then extend your result to the
constraint

y     (z1z2        zn)1/n,

y     0,

z (cid:23) 0,

where n is a positive integer, and the variables are y     r and z     rn. first assume that n is
a power of two, and then generalize your formulation to arbitrary positive integers.

(b) express the constraint

as a second-order cone constraint, for the following two convex functions f :

f (x)     t

(cid:26) x   x     0

0

x < 0,

f (x) =

where    is rational and greater than or equal to one, and

f (x) = x  ,

dom f = r++,

where    is rational and negative.

(c) formulate the norm approximation problem

minimize (cid:107)ax     b(cid:107)p

as a second-order cone program, where p is a rational number greater than or equal to one.
the variable in the optimization problem is x     rn. the matrix a     rm  n and the vector
b     rm are given. for an m-vector y, the norm (cid:107)y(cid:107)p is de   ned as

(cid:32) m(cid:88)

(cid:33)1/p

(cid:107)y(cid:107)p =

|yk|p

when p     1.

k=1

3.22 linear optimization over the complement of a convex set. suppose c     rn

convex set with 0     c, and c     rn

+. we de   ne

+ is a closed bounded

  c = cl(rn

+ \ c) = cl{x     rn

+ | x (cid:54)    c},

which is the closure of the complement of c in rn
+.
show that ct x has a minimizer over   c of the form   ek, where        0 and ek is the kth standard
unit vector. (if you have not had a course on analysis, you can give an intuitive argument.)
if follows that we can minimize ct x over   c by solving n one-dimensional optimization problems
(which, indeed, can each be solved by bisection, provided we can check whether a point is in c or
not).

26

3.23 jensen   s inequality for posynomials. suppose f : rn     r is a posynomial function, x, y     rn

and        [0, 1]. de   ne z     rn
interpretation. we can think of z as a   -weighted geometric mean between x and y. so the
statement above is that a posynomial, evaluated at a weighted geometric mean of two points, is no
more than the weighted geometric mean of the posynomial evaluated at the two points.

, i = 1, . . . , n. show that f (z)     f (x)  f (y)1     .

++ by zi = x  

i y1     

++,

i

3.24 cvx implementation of a concave function. consider the concave function f : r     r de   ned by

(cid:26) (x + 1)/2 x > 1

   

x

0     x     1,

f (x) =

with dom f = r+. give a cvx implementation of f , via a partially speci   ed optimization problem.
check your implementation by maximizing f (x) + f (a     x) for several interesting values of a (say,
a =    1, a = 1, and a = 3).

3.25 the following optimization problem arises in portfolio optimization:

maximize

subject to

rt x + d
(cid:107)rx + q(cid:107)2

n(cid:80)

fi(xi)     b

x (cid:23) c.
the variable is x     rn. the functions fi are de   ned as

i=1

fi(x) =   ixi +   i|xi| +   i|xi|3/2,

with   i > |  i|,   i > 0. we assume there exists a feasible x with rt x + d > 0.
show that this problem can be solved by solving an socp (if possible) or a sequence of socp
feasibility problems (otherwise).

3.26 positive nonconvex qcqp. we consider a (possibly nonconvex) qcqp, with nonnegative variable

x     rn,

minimize
subject to fi(x)     0,

f0(x)
x (cid:23) 0,

i = 1, . . . , m

where fi(x) = (1/2)xt pix + qt
not assume that pi (cid:23) 0, so this need not be a convex problem.
suppose that qi (cid:22) 0, and pi have nonpositive o   -diagonal entries, i.e., they satisfy

i x + ri, with pi     sn, qi     rn, and ri     r, for i = 0, . . . , m. we do

(pi)jk     0,

j (cid:54)= k,

j, k = 1, . . . , n,

for i = 0, . . . , m. (a matrix with nonpositive o   -diagonal entries is called a z-matrix.) explain
how to reformulate this problem as a convex problem.

hint. change variables using yj =   (xj), for some suitable function   .

27

3.27 a   ne policy. we consider a family of lps, parametrized by the random variable u, which is

uniformly distributed on u = [   1, 1]p,

minimize
subject to ax (cid:22) b(u),

ct x

where x     rn, a     rm  n, and b(u) = b0 + bu     rm is an a   ne function of u. you can think of
ui as representing a deviation of the ith parameter from its nominal value. the parameters might
represent (deviations in) levels of resources available, or other varying limits.

the problem is to be solved many times; in each time, the value of u (i.e., a sample) is given, and
then the decision variable x is chosen. the mapping from u into the decision variable x(u) is called
the policy, since it gives the decision variable value for each value of u. when enough time and
computing hardware is available, we can simply solve the lp for each new value of u; this is an
optimal policy, which we denote x(cid:63)(u).

in some applications, however, the decision x(u) must be made very quickly, so solving the lp is
not an option. instead we seek a suboptimal policy, which is a   ne: xa    (u) = x0 + ku, where x0 is
called the nominal decision and k     rn  p is called the feedback gain matrix. (roughly speaking,
x0 is our guess of x before the value of u has been revealed; ku is our modi   cation of this guess,
once we know u.) we determine the policy (i.e., suitable values for x0 and k) ahead of time; we
can then evaluate the policy (that is,    nd xa    (u) given u) very quickly, by id127
and addition.

we will choose x0 and k in order to minimize the expected value of the objective, while insisting
that for any value of u, feasibility is maintained:

minimize e ct xa    (u)
subject to axa    (u) (cid:22) b(u)    u     u.

the variables here are x0 and k. the expectation in the objective is over u, and the constraint
requires that axa    (u) (cid:22) b(u) hold almost surely.

(a) explain how to    nd optimal values of x0 and k by solving a standard explicit convex op-
timization problem (i.e., one that does not involve an expectation or an in   nite number of
constraints, as the one above does.) the numbers of variables or constraints in your formula-
tion should not grow exponentially with the problem dimensions n, p, or m.

(b) carry out your method on the data given in affine_pol_data.m. to evaluate your a   ne
policy, generate 100 independent samples of u, and for each value, compute the objective
value of the a   ne policy, ct xa    (u), and of the optimal policy, ct x(cid:63)(u). scatter plot the
objective value of the a   ne policy (y-axis) versus the objective value of the optimal policy
(x-axis), and include the line y = x on the plot. report the average values of ct xa    (u) and
ct x(cid:63)(u) over your samples.
(these are estimates of e ct xa    (u) and e ct x(cid:63)(u). the    rst
number, by the way, can be found exactly.)

3.28 id203 bounds. consider random variables x1, x2, x3, x4 that take values in {0, 1}. we are

28

given the following marginal and conditional probabilities:

prob(x1 = 1) = 0.9,
prob(x2 = 1) = 0.9,
prob(x3 = 1) = 0.1,
prob(x1 = 1, x4 = 0 | x3 = 1) = 0.7,
prob(x4 = 1 | x2 = 1, x3 = 0) = 0.6.

explain how to    nd the minimum and maximum possible values of prob(x4 = 1), over all (joint)
id203 distributions consistent with the given data. find these values and report them.

hints. (you should feel free to ignore these hints.)

    matlab:

    cvx supports multidimensional arrays; for example, variable p(2,2,2,2) declares a

4-dimensional array of variables, with each of the four indices taking the values 1 or 2.

    the function sum(p,i) sums a multidimensional array p along the ith index.
    the expression sum(a(:)) gives the sum of all entries of a multidimensional array a. you
might want to use the function de   nition sum_all = @(a) sum( a(:));, so sum_all(a)
gives the sum of all entries in the multidimensional array a.

    python:

    create a 1-d variable and manually index the entries. you should come up with a rea-

sonable scheme to avoid confusion.

    julia:

    you can create a multidimensional array of variables in convex.jl. for example, the
following creates a 4-dimensional array of variables, with each of the four indices taking
the values 1 or 2.

p = [variable() for i in 1:16];
p = reshape(p, 2, 2, 2, 2)

    you can use the function sum to sum over various indices in the multidimesional array.

sum(p[:,:,:,:]) # sum all entries
sum(p[1,:,2,:]) # fix first and third indices

    to create constraints with the variables in the array, you need to access each variable

independently. something like p >= 0 will not work.

3.29 robust quadratic programming. in this problem, we consider a robust variation of the (convex)

quadratic program

minimize
subject to ax (cid:22) b.

(1/2)xt p x + qt x + r

for simplicity we assume that only the matrix p is subject to errors, and the other parameters (q,
r, a, b) are exactly known. the robust quadratic program is de   ned as

minimize
subject to ax (cid:22) b

supp   e ((1/2)xt p x + qt x + r)

29

where e is the set of possible matrices p .
for each of the following sets e, express the robust qp as a tractable convex problem. be as speci   c
as you can. (here, tractable means that the problem can be reduced to an lp, qp, qcqp, socp,
or sdp. but you do not have to work out the reduction, if it is complicated; it is enough to argue
that it can be reduced to one of these.)
(a) a    nite set of matrices: e = {p1, . . . , pk}, where pi     sn
(b) a set speci   ed by a nominal value p0     sn

+ plus a bound on the eigenvalues of the deviation

+, i = 1, . . . , k.

p     p0:

e = {p     sn |      i (cid:22) p     p0 (cid:22)   i}

where        r and p0     sn
+.
(c) an ellipsoid of matrices:

(cid:40)

e =

p0 +

you can assume pi     sn

+, i = 0, . . . , k.

k(cid:88)

i=1

piui

(cid:41)

(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) (cid:107)u(cid:107)2     1

.

3.30 smallest con   dence ellipsoid. suppose the random variable x on rn has log-concave density p.
formulate the following problem as a id76 problem: find an ellipsoid e that satis   es
prob(x     e)     0.95 and is smallest, in the sense of minimizing the sum of the squares of its semi-
axis lengths. you do not need to worry about how to solve the resulting id76
problem; it is enough to formulate the smallest con   dence ellipsoid problem as the problem of
minimizing a convex function over a convex set involving the parameters that de   ne e.

3.31 stochastic optimization via monte carlo sampling. in (convex) stochastic optimization, the goal
is to minimize a cost function of the form f (x) = e f (x,   ), where    is a random variable on    ,
and f : rn            r is convex in its    rst argument for each           . (for simplicity we consider
the unconstrained problem; it is not hard to include constraints.) evidently f is convex. let p(cid:63)
denote the optimal value, i.e., p(cid:63) = inf x f (x) (which we assume is    nite).
in a few very simple cases we can work out what f is analytically, but in general this is not possible.
moreover in many applications, we do not know the distribution of   ; we only have access to an
oracle that can generate independent samples from the distribution.

a standard method for approximately solving the stochastic optimization problem is based on
monte carlo sampling. we    rst generate n independent samples,   1, . . . ,   n , and form the empir-
ical expectation

n(cid:88)

i=1

  f (x) =

1
n

f (x,   i).

this is a random function, since it depends on the particular samples drawn. for each x, we
have e   f (x) = f (x), and also e(   f (x)     f (x))2     1/n . roughly speaking, for n large enough,
  f (x)     f (x).
to (approximately) minimize f , we instead minimize   f (x). the minimizer,   x(cid:63), and the optimal
value   p(cid:63) =   f (  x(cid:63)), are also random variables. the hope is that for n large enough, we have   p(cid:63)     p(cid:63).

30

(in practice, stochastic optimization via monte carlo sampling works very well, even when n is
not that big.)

one way to check the result of monte carlo sampling is to carry it out multiple times. we repeatedly
generate di   erent batches of samples, and for each batch, we    nd   x(cid:63) and   p(cid:63). if the values of   p(cid:63) are
near each other, it   s reasonable to believe that we have (approximately) minimized f . if they are
not, it means our value of n is too small.
show that e   p(cid:63)     p(cid:63).
this inequality implies that if we repeatedly use monte carlo sampling and the values of   p(cid:63) that
we get are all very close, then they are (likely) close to p(cid:63).
hint. show that for any function g : rn            r (convex or not in its    rst argument), and any
random variable    on    , we have

e g(x,   )     e inf

x

inf
x

g(x,   ).

3.32 satisfying a minimum number of constraints. consider the problem

minimize
subject to fi(x)     0 holds for at least k values of i,

f0(x)

with variable x     rn, where the objective f0 and the constraint functions fi, i = 1, . . . , m (with
m     k), are convex. here we require that only k of the constraints hold, instead of all m of them.

in general this is a hard combinatorial problem; the brute force solution is to solve all(cid:0)m

(cid:1) convex

problems obtained by choosing subsets of k constraints to impose, and selecting one with smallest
objective value.

k

in this problem we explore a convex restriction that can be an e   ective heuristic for the problem.

(a) suppose    > 0. show that the constraint

m(cid:88)

(1 +   fi(x))+     m     k

i=1

guarantees that fi(x)     0 holds for at least k values of i. ((u)+ means max{u, 0}.)
hint. for each u     r, (1 +   u)+     1(u > 0), where 1(u > 0) = 1 for u > 0, and 1(u > 0) = 0
for u     0.

(b) consider the problem

subject to (cid:80)m

minimize

f0(x)

   > 0,

i=1(1 +   fi(x))+     m     k

with variables x and   . this is a restriction of the original problem: if (x,   ) are feasible for
it, then x is feasible for the original problem. show how to solve this problem using convex
optimization. (this may involve a change of variables.)

31

(c) apply the method of part (b) to the problem instance

minimize
subject to at

ct x
i x     bi holds for at least k values of i,

with m = 70, k = 58, and n = 12. the vectors b, c and the matrix a with rows at
in the    le satisfy_some_constraints_data.*.
report the optimal value of   , the objective value, and the actual number of constraints that
are satis   ed (which should be larger than or equal to k). to determine if a constraint is
satis   ed, you can use the tolerance at
a standard trick is to take this tentative solution, choose the k constraints with the smallest
values of fi(x), and then minimize f0(x) subject to these k constraints (i.e., ignoring the other
m    k constraints). this improves the objective value over the one found using the restriction.
carry this out for the problem instance, and report the objective value obtained.

i x     bi      feas, with  feas = 10   5.

i are given

3.33 [barvinok, pataki] a standard form semide   nite program is de   ned as

minimize
subject to tr(aix) = bi,

tr(cx)
x (cid:23) 0.

i = 1, . . . , m

(4)

the variable x and the coe   cients a1, . . . , am are symmetric n    n matrices.
a matrix   x is called an extreme point of the feasible set of (4) if   x is feasible and if the only matrix
v     sn that satis   es the conditions

tr (aiv ) = 0,

i = 1, . . . , m,

  x + v (cid:23) 0,

  x     v (cid:23) 0

(5)

is v = 0. in this problem we work out a bound on the rank of extreme points.

(a) suppose   x is feasible for (4) and has rank r. de   ne an eigenvalue decomposition

  x =(cid:2) q1 q2

(cid:3)(cid:20)   1 0

0

0

(cid:21)(cid:2) q1 q2

(cid:3)t ,

where [ q1 q2 ] is orthogonal, q1 has r columns, and   1 is a diagonal r    r matrix with
positive diagonal elements. show that v satis   es (5) if and only if it can be expressed as
v = q1y qt

1 where y     sr satis   es
tr (qt

  1 + y (cid:23) 0,
(b) show that if r(r + 1)/2 > m, then   x is not an extreme point.
(c) interpret the sdp (4) as a relaxation of the non-convex qcqp

1 aiq1y ) = 0,

i = 1, . . . , m,

  1     y (cid:23) 0.

minimize
subject to xt aix = bi,

xt cx

i = 1, . . . , m.

what are the implications of part b for the exactness of the relaxation? (you can assume
that the feasible set of (4) is non-empty and bounded. under this assumption, the sdp is
guaranteed to have optimal solutions that are extreme points of the feasible set.)

32

3.34 exact relaxation of a rank constrained problem. consider the following optimization problem, which

we shall call problem a.

tr(ap )
minimize
subject to rank(p ) = k,
  i(p )     {0, 1}

for all i = 1, . . . , n

here the variable p     sn, and   i(p ) is its ith largest eigenvalue. we are give a     rn  n and k     z
with k > 0. both of the constraints are not convex.

problem b is the following semide   nite program, with the same problem data.

tr(ap )
minimize
subject to tr(p ) = k,
0 (cid:22) p (cid:22) i,

(a) show that problem b is a relaxation of problem a. that is, show that if p is feasible for

problem a then it is also feasible for problem b.

(b) consider the problem

subject to (cid:80)

minimize

ct x
i xi = k
0     xi     1

where the variable is x     rn, and c     rn is given. explain why there always exists an optimal
x for which all components are integers.

(c) using the previous result, show that problem b is a tight relaxation of problem a. speci   cally,

show that there is an optimal solution p to problem b for which   i(p )     {0, 1} for all i.

3.35 a robust sdp. we consider the robust optimization problem

xi(ai + ui) (cid:22) b for all ui     sp with (cid:107)ui(cid:107)2     1, i = 1, . . . , n.

i=1

the optimization variable is an n-vector x. the n-vector c and the matrices ai, b     sp are given.
the norm (cid:107)ui(cid:107)2 is the matrix norm. (for symmetric matrices (cid:107)u(cid:107)2 = maxk |  k(u )|.)

(a) show that x satis   es the constraint in the problem if and only if

(cid:107)x(cid:107)1       min(b     n(cid:88)
the right-hand side is the smallest eigenvalue of b    (cid:80)

i=1

xiai).

i xiai.

(b) use the observation of part (a) to formulate the robust optimization problem as an sdp.

3.36 for a symmetric n    n matrix a we de   ne f (a) as the optimal value of the semide   nite program

minimize

subject to

ct x

n(cid:80)

minimize

subject to

with variables x     sn and y     sn.

(cid:21)

(cid:23) 0

(cid:20) x

tr x + tr y
a

a y + i

y (cid:23) 0,

33

(a) is f (a) a convex function of a?

(b) express f (a) as a function of the eigenvalues of a, i.e., in the form

n(cid:88)

f (a) =

  (  i(a)),

where   1(a), . . . ,   n(a) are the eigenvalues of a. give an explicit formula for   .

3.37 in this problem we generalize the optimality condition in   4.2.3 of id76 (page 4-9

of the slides). we consider an optimization problem

i=1

minimize

f (x) + g(x)

where f : rn     r is di   erentiable and g : rn     r is convex. we do not assume that f is
convex or that its domain is a convex set. (however, recall our convention that the domain of a
di   erentiable function is an open set.) the problem in   4.2.3 is a special case with g the indicator
function of a convex set. (the indicator function of a set c is the function with domain c, and
function value zero on c.)
the generalization of the optimality criterion in   4.2.3 is

  x     dom f     dom g,    f (  x)t (y       x) + g(y)     g(  x)     0 for all y     dom g.

(6)

(a) show that (6) is a necessary condition for   x to be locally optimal.

(b) assume f is convex. show that (6) is also su   cient for   x to be optimal.
(c) take g(x) = (cid:107)x(cid:107)1. show that (6) reduces to the following:   x     dom f and for each i = 1, . . . , n,

   f (  x)
   xi

=    1 if   xi > 0,

if   xi = 0,

   f (  x)
   xi

= 1

if   xi < 0.

(cid:12)(cid:12)(cid:12)(cid:12)    f (  x)

   xi

(cid:12)(cid:12)(cid:12)(cid:12)     1

34

4 duality

4.1 numerical perturbation analysis example. consider the quadratic program

2     x1x2     x1

x2
1 + 2x2
minimize
subject to x1 + 2x2     u1
x1     4x2     u2,
5x1 + 76x2     1,

with variables x1, x2, and parameters u1, u2.
(a) solve this qp, for parameter values u1 =    2, u2 =    3, to    nd optimal primal variable values
3. let p(cid:63) denote the optimal objective
x(cid:63)
1 and x(cid:63)
value. verify that the kkt conditions hold for the optimal primal and dual variables you
found (within reasonable numerical accuracy).
matlab hint: see   3.7 of the cvx users    guide to    nd out how to retrieve optimal dual
variables. to specify the quadratic objective, use quad_form().

2, and optimal dual variable values   (cid:63)

2 and   (cid:63)

1,   (cid:63)

(b) we will now solve some perturbed versions of the qp, with

u1 =    2 +   1,

u2 =    3 +   2,

where   1 and   2 each take values from {   0.1, 0, 0.1}. (there are a total of nine such combi-
nations, including the original problem with   1 =   2 = 0.) for each combination of   1 and   2,
make a prediction p(cid:63)
exact,
the exact optimal value of the perturbed qp (obtained by solving the perturbed qp). put
your results in the two righthand columns in a table with the form shown below. check that
the inequality p(cid:63)

pred of the optimal value of the perturbed qp, and compare it to p(cid:63)

exact holds.

pred     p(cid:63)

p(cid:63)
pred

p(cid:63)
exact

  1
  2
0
0
0    0.1
0
0.1
   0.1
0
   0.1    0.1
   0.1
0.1
0.1
0
0.1    0.1
0.1
0.1

4.2 a determinant maximization problem. we consider the problem

minimize
subject to at

log det x   1
i xai (cid:22) bi,

i = 1, . . . , m,

with variable x     sn, and problem data ai     rn  ki, bi     ski
x (cid:31) 0 is implicit.
we can give several interpretations of this problem. here is one, from statistics. let z be a random
variable in rn, with covariance matrix x, which is unknown. however, we do have (matrix) upper

++, i = 1, . . . , m. the constraint

35

bounds on the covariance of the random variables yi = at
i xai. the problem
is to    nd the covariance matrix for z, that is consistent with the known upper bounds on the
covariance of yi, that has the largest volume con   dence ellipsoid.

i z     rki, which is at

derive the lagrange dual of this problem. be sure to state what the dual variables are (e.g.,
vectors, scalars, matrices), any constraints they must satisfy, and what the dual function is.
if
the dual function has any implicit equality constraints, make them explicit. you can assume that

i (cid:31) 0, which implies the feasible set of the original problem is bounded.

(cid:80)m

i=1 aiat

what can you say about the optimal duality gap for this problem?

4.3 the relative id178 between two vectors x, y     rn

++ is de   ned as

n(cid:88)

k=1

xk log(xk/yk).

this is a convex function, jointly in x and y. in the following problem we calculate the vector x
that minimizes the relative id178 with a given vector y, subject to equality constraints on x:

n(cid:88)

minimize

xk log(xk/yk)

k=1

subject to ax = b
1t x = 1

the optimization variable is x     rn. the domain of the objective function is rn
y     rn
derive the lagrange dual of this problem and simplify it to get

++, a     rm  n, and b     rm are given.

++. the parameters

bt z     log(cid:80)n

k=1 ykeat
k z

(ak is the kth column of a).

maximize

4.4 source localization from range measurements [beck, stoica, and li]. a signal emitted by a source
at an unknown position x     rn (n = 2 or n = 3) is received by m sensors at known positions y1,
. . . , ym     rn. from the strength of the received signals, we can obtain noisy estimates dk of the
distances (cid:107)x     yk(cid:107)2. we are interested in estimating the source position x based on the measured
distances dk.
in the following problem the error between the squares of the actual and observed distances is
minimized:

(cid:0)(cid:107)x     yk(cid:107)2

2     d2

k

(cid:1)2

.

m(cid:88)

k=1

introducing a new variable t = xt x, we can express this as

k x + (cid:107)yk(cid:107)2

2     d2

k

(cid:1)2

(7)

minimize f0(x) =

m(cid:88)

(cid:0)t     2yt

minimize
subject to xt x     t = 0.

k=1

36

the variables are x     rn, t     r. although this problem is not convex, it can be shown that
strong duality holds. (it is a variation on the problem discussed on page 229 and in exercise 5.29
of id76.)

solve (7) for an example with m = 5,

(cid:21)

(cid:20) 2.0

1.7

(cid:21)

(cid:20) 1.5

1.5

(cid:21)

(cid:20) 1.5

2.0

,

y2 =

,

y3 =

,

y4 =

,

y5 =

(cid:20) 2.5

1.5

(cid:21)

,

(cid:21)

(cid:20) 1.8

2.5

y1 =

and

d = (2.00, 1.24, 0.59, 1.31, 1.44).

the    gure shows some contour lines of the cost function f0, with the positions yk indicated by
circles.

to solve the problem, you can note that x(cid:63) is easily obtained from the kkt conditions for (7) if
the optimal multiplier   (cid:63) for the equality constraint is known. you can use one of the following
two methods to    nd   (cid:63).

    derive the dual problem, express it as an sdp, and solve it using cvx.
    reduce the kkt conditions to a nonlinear equation in   , and pick the correct solution (simi-

larly as in exercise 5.29 of id76).

4.5 projection on the (cid:96)1 ball. consider the problem of projecting a point a     rn on the unit ball in

(cid:96)1-norm:

(1/2)(cid:107)x     a(cid:107)2

2

minimize
subject to (cid:107)x(cid:107)1     1.

derive the dual problem and describe an e   cient method for solving it. explain how you can
obtain the optimal x from the solution of the dual problem.

37

xy0.511.522.530.511.522.534.6 a nonconvex problem with strong duality. on page 229 of id76, we consider the

problem

minimize
subject to xt x     1

f (x) = xt ax + 2bt x

(8)
with variable x     rn, and data a     sn, b     rn. we do not assume that a is positive semide   nite,
and therefore the problem is not necessarily convex. in this exercise we show that x is (globally)
optimal if and only if there exists a    such that
a +   i (cid:23) 0,

(a +   i)x =    b,

  (1     (cid:107)x(cid:107)2

       0,

(cid:107)x(cid:107)2     1,

(9)

2) = 0.

from this we will develop an e   cient method for    nding the global solution. the conditions (9)
are the kkt conditions for (8) with the inequality a +   i (cid:23) 0 added.

(a) show that if x and    satisfy (9), then f (x) = inf   x l(  x,   ) = g(  ), where l is the lagrangian
of the problem and g is the dual function. therefore strong duality holds, and x is globally
optimal.

(b) next we show that the conditions (9) are also necessary. assume that x is globally optimal

for (8). we distinguish two cases.
(i) (cid:107)x(cid:107)2 < 1. show that (9) holds with    = 0.
(ii) (cid:107)x(cid:107)2 = 1. first prove that (a +   i)x =    b for some        0. (in other words, the negative
gradient    (ax + b) of the objective function is normal to the unit sphere at x, and point
away from the origin.) you can show this by contradiction:
if the condition does not
hold, then there exists a direction v with vt x < 0 and vt (ax + b) < 0. show that
f (x + tv) < f (x) for small positive t.
it remains to show that a +   i (cid:23) 0. if not, there exists a w with wt (a +   i)w < 0, and
without loss of generality we can assume that wt x (cid:54)= 0. show that the point y = x + tw
with t =    2wt x/wt w satis   es (cid:107)y(cid:107)2 = 1 and f (y) < f (x).

eigenvalue decomposition a = (cid:80)n

and write (8) as

(c) the optimality conditions (9) can be used to derive a simple algorithm for (8). using the
i x,

i , of a, we make a change of variables yi = qt

i=1   iqiqt

minimize (cid:80)n

subject to yt y     1

i=1   iy2

i + 2(cid:80)n

i=1   iyi

where   i = qt
(cid:107)y(cid:107)2     1,

i b. the transformed optimality conditions (9) are

            n,

(  i +   )yi =      i,

i = 1, . . . , n,

  (1     (cid:107)y(cid:107)2) = 0,

if we assume that   1       2                  n. give an algorithm for computing the solution y and   .

4.7 connection between perturbed optimal cost and lagrange dual functions. in this exercise we explore
the connection between the optimal cost, as a function of perturbations to the righthand sides of
the constraints,

p(cid:63)(u) = inf{f0(x) |    x     d, fi(x)     ui, i = 1, . . . , m},

(as in   5.6), and the lagrange dual function

g(  ) = inf
x

(f0(x) +   1f1(x) +        +   mfm(x)) ,

38

with domain restricted to    (cid:23) 0. we assume the problem is convex. we consider a problem with
inequality constraints only, for simplicity.
we have seen several connections between p(cid:63) and g:

    slater   s condition and strong duality. slater   s condition is: there exists u     0 for which
p(cid:63)(u) <    . strong duality (which follows) is: p(cid:63)(0) = sup   g(  ). (note that we include the
condition    (cid:23) 0 in the domain of g.)

    a global inequality. we have p(cid:63)(u)     p(cid:63)(0)       (cid:63)t u, for any u, where   (cid:63) maximizes g.
    local sensitivity analysis. if p(cid:63) is di   erentiable at 0, then we have    p(cid:63)(0) =      (cid:63), where   (cid:63)

maximizes g.

in fact the two functions are closely related by conjugation. show that

p(cid:63)(u) = (   g)   (   u).

here (   g)    is the conjugate of the function    g. you can show this for u     int dom p(cid:63).
hint. consider the problem

i = 1, . . . , m.
verify that slater   s condition holds for this problem, for u     int dom p(cid:63).

minimize
subject to

f0(x)
  fi(x) = fi(x)     ui     0,

4.8 exact penalty method for sdp. consider the pair of primal and dual sdps

(p) minimize

ct x

subject to f (x) (cid:22) 0

(d) maximize

subject to tr(fiz) + ci = 0,

i = 1, . . . , m

tr(f0z)
z (cid:23) 0,

where f (x) = f0 + x1f1 +        + xnfn and fi     sp for i = 0, . . . , n. let z(cid:63) be a solution of (d).
show that every solution x(cid:63) of the unconstrained problem

minimize

ct x + m max{0,   max(f (x))},

where m > tr z(cid:63), is a solution of (p).

4.9 quadratic penalty. consider the problem

minimize
subject to fi(x)     0,

f0(x)

i = 1, . . . , m,

(10)

where the functions fi : rn     r are di   erentiable and convex.
show that

m(cid:88)

  (x) = f0(x) +   

max{0, fi(x)}2,

where    > 0, is convex. suppose   x minimizes   . show how to    nd from   x a feasible point for the
dual of (10). find the corresponding lower bound on the optimal value of (10).

i=1

39

(11)

(12)

(13)

4.10 binary least-squares. we consider the non-convex least-squares approximation problem with binary

constraints

minimize
subject to x2

(cid:107)ax     b(cid:107)2
k = 1,

2
k = 1, . . . , n,

where a     rm  n and b     rm. we assume that rank(a) = n, i.e., at a is nonsingular.
one possible application of this problem is as follows. a signal   x     {   1, 1}n is sent over a noisy
channel, and received as b = a  x + v where v     n (0,   2i) is gaussian noise. the solution of (11)
is the maximum likelihood estimate of the input signal   x, based on the received signal b.

(a) derive the lagrange dual of (11) and express it as an sdp.

(b) derive the dual of the sdp in part (a) and show that it is equivalent to

interpret this problem as a relaxation of (11). show that if

tr(at az)     2bt az + bt b

minimize
subject to diag(z) = 1

(cid:20) z z
(cid:21)
(cid:20) z z

zt

1

zt

1

(cid:23) 0.

(cid:21)

rank(

) = 1

at the optimum of (12), then the relaxation is exact, i.e., the optimal values of problems (11)
and (12) are equal, and the optimal solution z of (12) is optimal for (11). this suggests a
heuristic for rounding the solution of the sdp (12) to a feasible solution of (11), if (13) does
not hold. we compute the eigenvalue decomposition

where vi     rn and ti     r, and approximate the matrix by a rank-one matrix

(cid:21)

zt

(cid:20) z z
(cid:20) z z

1

zt

1

=

(cid:21)

n+1(cid:88)

i=1

      1

,

(cid:21)t

  i

(cid:20) vi
(cid:21)(cid:20) vi
(cid:20) v1
(cid:21)(cid:20) v1
(cid:21)t

ti

ti

.

t1

t1

(here we assume the eigenvalues are sorted in decreasing order). then we take x = sign(v1)
as our guess of good solution of (11).

(c) we can also give a probabilistic interpretation of the relaxation (12). suppose we interpret z
and z as the    rst and second moments of a random vector v     rn (i.e., z = e v, z = e vvt ).
show that (12) is equivalent to the problem

minimize e(cid:107)av     b(cid:107)2
subject to e v2

k = 1,

2
k = 1, . . . , n,

where we minimize over all possible id203 distributions of v.
this interpretation suggests another heuristic method for computing suboptimal solutions
of (11) based on the result of (12). we choose a distribution with    rst and second moments

40

e v = z, e vvt = z (for example, the gaussian distribution n (z, z     zzt )). we generate a
number of samples   v from the distribution and round them to feasible solutions x = sign(  v).
we keep the solution with the lowest objective value as our guess of the optimal solution
of (11).

(d) solve the dual problem (12) using cvx. generate problem instances using the matlab code

randn(   state   ,0)
m = 50;
n = 40;
a = randn(m,n);
xhat = sign(randn(n,1));
b = a*xhat + s*randn(m,1);

for four values of the noise level s: s = 0.5, s = 1, s = 2, s = 3. for each problem instance,
compute suboptimal feasible solutions x using the the following heuristics and compare the
results.
(i) x(a) = sign(xls) where xls is the solution of the least-squares problem

minimize (cid:107)ax     b(cid:107)2
2.

(ii) x(b) = sign(z) where z is the optimal value of the variable z in the sdp (12).
(iii) x(c) is computed from a rank-one approximation of the optimal solution of (12), as ex-

plained in part (b) above.

(iv) x(d) is computed by rounding 100 samples of n (z, z   zzt ), as explained in part (c) above.

4.11 monotone transformation of the objective. consider the optimization problem

minimize
subject to fi(x)     0,

f0(x)

i = 1, . . . , m.

(14)

where fi : rn     r for i = 0, 1, . . . , m are convex. suppose    : r     r is increasing and convex.
then the problem

minimize
subject to fi(x)     0,

  f0(x) =   (f0(x))

i = 1, . . . , m

(15)

is convex and equivalent to it; in fact, it has the same optimal set as (14).

in this problem we explore the connections between the duals of the two problems (14) and (15).
we assume fi are di   erentiable, and to make things speci   c, we take   (a) = exp a.

(a) suppose    is feasible for the dual of (14), and   x minimizes

m(cid:88)
m(cid:88)

i=1

f0(x) +

show that   x also minimizes

  ifi(x).

exp f0(x) +

    ifi(x)

for appropriate choice of     . thus,      is dual feasible for (15).

i=1

41

m(cid:88)

(b) let p(cid:63) denote the optimal value of (14) (so the optimal value of (15) is exp p(cid:63)). from    we

obtain the bound

p(cid:63)     g(  ),

where g is the dual function for (14). from      we obtain the bound exp p(cid:63)       g(    ), where   g is
the dual function for (15). this can be expressed as
p(cid:63)     log   g(    ).

how do these bounds compare? are they the same, or is one better than the other?

4.12 variable bounds and dual feasibility. in many problems the constraints include variable bounds, as

in

minimize
subject to fi(x)     0,

f0(x)
li     xi     ui,

i = 1, . . . , n.

i = 1, . . . , m

(16)

let        rn
be the lagrange multipliers associated with the constraints li     xi. thus the lagrangian is

+ be the lagrange multipliers associated with the constraints xi     ui, and let        rn

+

l(x,   ,   ,   ) = f0(x) +

  ifi(x) +   t (x     u) +   t (l     x).

i=1

(a) show that for any x     rn and any   , we can choose    (cid:23) 0 and    (cid:23) 0 so that x minimizes

l(x,   ,   ,   ). in particular, it is very easy to    nd dual feasible points.

(b) construct a dual feasible point (  ,   ,   ) by applying the method you found in part (a) with
x = (l + u)/2 and    = 0. from this dual feasible point you get a lower bound on f (cid:63). show
that this lower bound can be expressed as

f (cid:63)     f0((l + u)/2)     ((u     l)/2)t |   f0((l + u)/2)|
where |    | means componentwise. can you prove this bound directly?

4.13 deducing costs from samples of optimal decision. a system (such as a    rm or an organism) chooses

a vector of values x as a solution of the lp

minimize
subject to ax (cid:23) b,

ct x

with variable x     rn. you can think of x     rn as a vector of activity levels, b     rm as a
vector of requirements, and c     rn as a vector of costs or prices for the activities. with this
interpretation, the lp above    nds the cheapest set of activity levels that meet all requirements.
(this interpretation is not needed to solve the problem.)

we suppose that a is known, along with a set of data

(b(1), x(1)),

. . . ,

(b(r), x(r)),

where x(j) is an optimal point for the lp, with b = b(j). (the solution of an lp need not be unique;
all we say here is that x(j) is an optimal solution.) roughly speaking, we have samples of optimal
decisions, for di   erent values of requirements.

42

you do not know the cost vector c. your job is to compute the tightest possible bounds on the
costs ci from the given data. more speci   cally, you are to    nd cmax
, the maximum and
minimum possible values for ci, consistent with the given data.

and cmin

i

i

note that if x is optimal for the lp for a given c, then it is also optimal if c is scaled by any positive
factor. to normalize c, then, we will assume that c1 = 1. thus, we can interpret ci as the relative
cost of activity i, compared to activity 1.

(a) explain how to    nd cmax

i

and cmin

i

. your method can involve the solution of a reasonable

number (not exponential in n, m or r) of convex or quasiid76 problems.

(b) carry out your method using the data found in deducing_costs_data.m. you may need
to determine whether individual inequality constraints are tight; to do so, use a tolerance
k x     bk     10   3, you can consider this inequality
threshold of   = 10   3. (in other words: if at
as tight.)
give the values of cmax

, and make a very brief comment on the results.

and cmin

i

i

4.14 kantorovich inequality.

(a) suppose a     rn with a1     a2                an > 0, and b     rn with bk = 1/ak.

derive the kkt conditions for the id76 problem
minimize     log(at x)     log(bt x)
subject to x (cid:23) 0,

1t x = 1.

show that x = (1/2, 0, . . . , 0, 1/2) is optimal.

(b) suppose a     sn

with ak =   k, to prove the kantorovich inequality:

++ with eigenvalues   k sorted in decreasing order. apply the result of part (a),

2(cid:0)ut au(cid:1)1/2(cid:0)ut a   1u(cid:1)1/2    

(cid:114)   1

  n

(cid:114)   n

  1

+

for all u with (cid:107)u(cid:107)2 = 1.

4.15 state and solve the optimality conditions for the problem

(cid:32)(cid:20) x1 x2

x t

2 x3

(cid:21)   1(cid:33)

minimize

log det

subject to tr x1 =   
tr x2 =   
tr x3 =   .

(cid:20) x1 x2

x t

2 x3

(cid:21)

,

43

the optimization variable is

x =

with x1     sn, x2     rn  n, x3     sn. the domain of the objective function is s2n
   > 0, and      >   2.

++. we assume

4.16 consider the optimization problem

minimize     log det x + tr(sx)
subject to x is tridiagonal

++ and variable x     sn. the matrix s     sn is given. show that the optimal xopt

4.17 we denote by f (a) the sum of the largest r eigenvalues of a symmetric matrix a     sn (with

with domain sn
satis   es

1     r     n), i.e.,

(x   1

opt)ij = sij,

|i     j|     1.

r(cid:88)

f (a) =

  k(a),

where   1(a), . . . ,   n(a) are the eigenvalues of a sorted in decreasing order.

k=1

(a) show that the optimal value of the sdp

tr(ax)
maximize
subject to tr x = r
0 (cid:22) x (cid:22) i,

with variable x     sn, is equal to f (a).

(b) show that f is a convex function.
(c) assume a(x) = a0 + x1a1 +        + xmam, with ak     sn. use the observation in part (a) to

formulate the optimization problem

with variable x     rm, as an sdp.

minimize f (a(x)),

4.18 an exact penalty function. suppose we are given a convex problem

with dual

minimize
subject to fi(x)     0, i = 1, . . . , m

f0(x)

maximize
g(  )
subject to    (cid:23) 0.

(17)

(18)

we assume that slater   s condition holds, so we have strong duality and the dual optimum is
attained. for simplicity we will assume that there is a unique dual optimal solution   (cid:63).

for    xed t > 0, consider the unconstrained minimization problem

minimize f0(x) + t max

i=1,...,m

fi(x)+,

(19)

where fi(x)+ = max{fi(x), 0}.

(a) show that the objective function in (19) is convex.

44

(b) we can express (19) as

f0(x) + ty
minimize
subject to fi(x)     y,
0     y

i = 1. . . . , m

(20)

where the variables are x and y     r.
find the lagrange dual problem of (20) and express it in terms of the lagrange dual function
g for problem (17).

(c) use the result in (b) to prove the following property. if t > 1t   (cid:63), then any minimizer of (19)

is also an optimal solution of (17).

(the second term in (19) is called a penalty function for the constraints in (17). it is zero if x is
feasible, and adds a penalty to the cost function when x is infeasible. the penalty function is called
exact because for t large enough, the solution of the unconstrained problem (19) is also a solution
of (17).)

4.19 in   mal convolution. let f1, . . . , fm be convex functions on rn. their in   mal convolution, denoted

g = f1 (cid:5)        (cid:5) fm (several other notations are also used), is de   ned as

g(x) = inf{f1(x1) +        + fm(xm) | x1 +        + xm = x},

with the natural domain (i.e., de   ned by g(x) <    ). in one simple interpretation, fi(xi) is the cost
for the ith    rm to produce a mix of products given by xi; g(x) is then the optimal cost obtained
if the    rms can freely exchange products to produce, all together, the mix given by x. (the name
   convolution    presumably comes from the observation that if we replace the sum above with the
product, and the in   mum above with integration, then we obtain the normal convolution.)

(a) show that g is convex.
(b) show that g    = f   

1 +        + f   

m. in other words, the conjugate of the in   mal convolution is the

sum of the conjugates.

(c) verify the identity in part (b) for the speci   c case of two strictly convex quadratic functions,

fi(x) = (1/2)xt pix, with pi     sn
++, i = 1, 2.
hint: depending on how you work out the conjugates, you might    nd the matrix identity
(x + y )   1y = x   1(x   1 + y    1)   1 useful.

4.20 derive the lagrange dual of the optimization problem

n(cid:88)

minimize

  (xi)

with variable x     rn, where

subject to ax = b

i=1

  (u) =

|u|
c     |u| =    1 +

c

c     |u| ,

dom    = (   c, c).

c is a positive parameter. the    gure shows    for c = 1.

45

4.21 robust lp with polyhedral cost uncertainty. we consider a robust id135 problem,

with polyhedral uncertainty in the cost:

minimize
subject to ax (cid:23) b,

supc   c ct x

with variable x     rn, where c = {c | f c (cid:22) g}. you can think of x as the quantities of n products
to buy (or sell, when xi < 0), ax (cid:23) b as constraints, requirements, or limits on the available
quantities, and c as giving our knowledge or assumptions about the product prices at the time
we place the order. the objective is then the worst possible (i.e., largest) possible cost, given the
quantities x, consistent with our knowledge of the prices.

in this exercise, you will work out a tractable method for solving this problem. you can assume
that c (cid:54)=    , and the inequalities ax (cid:23) b are feasible.

(a) let f (x) = supc   c ct x be the objective in the problem above. explain why f is convex.
(b) find the dual of the problem

maximize
subject to f c (cid:22) g,

ct x

with variable c. (the problem data are x, f , and g.) explain why the optimal value of the
dual is f (x).

(c) use the expression for f (x) found in part (b) in the original problem, to obtain a single lp

equivalent to the original robust lp.

(d) carry out the method found in part (c) to solve a robust lp with the data below.

in

matlab:

rand(   seed   ,0);
a = rand(30,10);
b = rand(30,1);
c_nom = 1+rand(10,1); % nominal c values

in python:

46

   1   0.500.5100.511.522.533.544.55xzimport numpy as np
np.random.seed(10)
(m, n) = (30, 10)
a = np.random.rand(m, n); a = np.asmatrix(a)
b = np.random.rand(m, 1); b = np.asmatrix(b)
c_nom = np.ones((n, 1)) + np.random.rand(n, 1); c_nom = np.asmatrix(c_nom)

in julia:

srand(10);
n = 10;
m = 30;
a = rand(m, n);
b = rand(m, 1);
c_nom = 1 + rand(n, 1);
then, use c described as follows. each ci deviates no more than 25% from its nominal value,
i.e., 0.75cnom (cid:22) c (cid:22) 1.25cnom, and the average of c does not deviate more than 10% from the
average of the nominal values, i.e., 0.9(1t cnom)/n     1t c/n     1.1(1t cnom)/n.
compare the worst-case cost f (x) and the nominal cost ct
nomx for x optimal for the robust
problem, and for x optimal for the nominal problem (i.e., the case where c = {cnom}). com-
pare the values and make a brief comment.

4.22 diagonal scaling with prescribed column and row sums [marshall and olkin]. let a be an n    n
matrix with positive entries, and let c and d be positive n-vectors that satisfy 1t c = 1t d = 1.
consider the geometric program

minimize

subject to

xt ay
xci
i = 1

ydj
j = 1,

n(cid:81)
n(cid:81)

i=1

j=1

with variables x, y     rn (and implicit constraints x (cid:31) 0, y (cid:31) 0). write this geometric program
in convex form and derive the optimality conditions. show that if x and y are optimal, then the
matrix

satis   es b1 = c and bt 1 = d.

b =

1

xt ay

diag(x)a diag(y)

4.23 [schoenberg] suppose m balls in rn, with centers ai and radii ri, have a nonempty intersection.

we de   ne y to be a point in the intersection, so
(cid:107)y     ai(cid:107)2     ri,

i = 1, . . . , m.

(21)

suppose we move the centers to new positions bi in such a way that the distances between the
centers do not increase:

(cid:107)bi     bj(cid:107)2     (cid:107)ai     aj(cid:107)2,

i, j = 1, . . . , m.

(22)

47

we will prove that the intersection of the translated balls is nonempty, i.e., there exists a point x
with (cid:107)x     bi(cid:107)2     ri, i = 1, . . . , m. to show this we prove that the optimal value of

minimize
subject to (cid:107)x     bi(cid:107)2

t

2     r2

i + t,

i = 1, . . . , m,

(23)

with variables x     rn and t     r, is less than or equal to zero.

(a) show that (22) implies that

t     (x     bi)t (x     bj)        (y     ai)t (y     aj)

for i, j     i,

if (x, t) is feasible in (23), and i     {1, . . . , m} is the set of active constraints at x, t.

(b) suppose x, t are optimal in (23) and that   1, . . . ,   m are optimal dual variables. use the

optimality conditions for (23) and the inequality in part a to show that

t = t     (cid:107) m(cid:88)

2        (cid:107) m(cid:88)

  i(x     bi)(cid:107)2

  i(y     ai)(cid:107)2
2.

i=1

i=1

4.24 controlling a switched linear system via duality. we consider a discrete-time dynamical system

with state xt     rn. the state propagates according to the recursion

xt+1 = atxt,

t = 0, 1, . . . , t     1,

where the matrices at are to be chosen from a    nite set a = {a(1), . . . , a(k)} in order to control the
state xt over a    nite time horizon of length t . more formally, the switched-linear control problem
is

minimize (cid:80)t

t=1 f (xt)

subject to xt+1 = a(ut)xt,

for t = 0, . . . , t     1

the problem variables are xt     rn, for t = 1, . . . , t , and ut     {1, . . . , k}, for t = 0, . . . , t     1.
we assume the initial state, x0     rn is a problem parameter (i.e., is known and    xed). you may
assume the function f is convex, though it isn   t necessary for this problem.
note that, to    nd a feasible point, we take any sequence u0, . . . , ut   1     {1, . . . , k}; we then
generate a feasible point according to the recursion

xt+1 = a(ut)xt,

t = 0, 1, . . . , t     1.

the switched-linear control problem is not convex, and is hard to solve globally.
consider a heuristic based on lagrange duality.

instead, we

(a) find the dual of the switched-linear control problem explicitly in terms of x0, a(1), . . . , a(k),
the function f , and its conjugate f   . your formulation cannot involve a number of constraints
or objective terms that is exponential in k or t . (this includes minimization or maximization
with an exponential number of terms.)

48

(b) given optimal dual variables   (cid:63)

t corresponding to the t constraints of the switched-
linear control problem, a heuristic to choose ut is to minimize the langrangian using these
optimal dual variables:
(  u0, . . . ,   ut   1)    

l(x1, . . . , xt , u0, . . . , ut   1,   (cid:63)

argmin

1 , . . . ,   (cid:63)

1 , . . . ,   (cid:63)

t ),

inf

u0,...,ut   1   {1,...,k}

x1,...,xt

given the optimal dual variables, show (explicitly) how to    nd   u0, . . . ,   ut   1.

(c) consider the case f (x) = (1/2)xt qx. with q     sn

++. for the data given in sw lin ctrl data.*,

solve the dual problem and report its optimal value d(cid:63), which is a lower bound on p(cid:63). (as a
courtesy, we also included p(cid:63) in the data    le, so you can check your bound.)
note: julia users might want to use the ecos solver, by including using ecos, and solving
by using solve!(prob, ecossolver()).

(d) using the same data as is part (c), carry out the heuristic method of part (b) to compute
  u0, . . .   ut   1. use these values to generate a feasible point. report the value of the objective
at this feasible point, which is an upper bound on p(cid:63).

4.25 [friedland and karlin] let a be an n    n matrix with positive entries, and let u and v be two
positive n-vectors. show that one can compute positive diagonal matrices d1 and d2 that satisfy

(d1ad2)u = u,

(d1ad2)t v = v

(24)

by the following method. de   ne   i = uivi for i = 1, . . . , n, and solve the optimization problem

n(cid:80)

n(cid:81)
n(cid:81)

aijxj)  i

(
j=1
i=1
x  i
i = 1

i=1

minimize

subject to

(25)

with domain {x     rn | x (cid:31) 0}. then use the solution x to de   ne

d1 = diag(u) diag(ax)   1,

d2 = diag(u)   1 diag(x).

the    rst equality in (24) follows immediately from the expressions of d1 and d2. to show the
second equality in (24), express (25) as a id76 problem and derive the optimality
conditions.

4.26 consider the optimization problem

minimize (cid:107)ax     b(cid:107)2 +   (cid:107)x(cid:107)1

with a     rm  n, b     rm, and    > 0. the variable is an n-vector x.

(a) derive the lagrange dual of the equivalent problem

(cid:107)y(cid:107)2 +   (cid:107)x(cid:107)1

minimize
subject to ax     b = y

with variables x     rn and y     rm.

49

(b) suppose ax(cid:63)     b (cid:54)= 0 where x(cid:63) is an optimal point. de   ne r = (ax(cid:63)     b)/(cid:107)ax(cid:63)     b(cid:107)2. show

that

(cid:107)at r(cid:107)          ,

rt ax(cid:63) +   (cid:107)x(cid:63)(cid:107)1 = 0.

(c) show that if the euclidean norm of the ith column of a is less than   , then x(cid:63)

i = 0.

4.27 consider the optimization problem

with variable x     rn, where c     rn, ai     r3  n, bi     r3, and

derive the lagrange dual of the equivalent problem

minimize

h((cid:107)aix + bi(cid:107)2)     ct x

i=1

m(cid:88)
(cid:26) (u     1)2/2 u     1
m(cid:80)

0

h(u) =

otherwise.

h((cid:107)yi(cid:107)2)     ct x
minimize
subject to aix + bi     yi = 0,

i=1

i = 1, . . . , m,

with variables x     rn and yi     r3 for i = 1, . . . , m.
this optimization problem describes the equilibrium of a structure consisting of m elastic cables
suspended between di   erent points or nodes. some of the nodes are anchored, other nodes are free.
the variable x contains the displacements of the free nodes. the vector c speci   es the external
forces applied to the nodes. the norm (cid:107)aix + bi(cid:107)2 is the distance between the endpoints of the ith
cable as a function of the node displacements. the ith term in the sum in the cost function is the
potential energy stored in the ith cable, assuming its undeformed length is one.

4.28 robust least squares with polyhedral uncertainty. we consider a robust least-squares problem

m(cid:88)

i=1

minimize

i x     bi)2
(at

sup
ai   pi

with variable x     rn. each set pi is a nonempty and bounded polyhedron, de   ned as

pi = {ai     rn | ciai (cid:22) di}

with ci     rpi  n, di     rpi. if we introduce variables ti     supai   pi |at
problem as

i x     bi| we can write the

m(cid:80)

minimize

i=1
sup
ai   pi
formulate this problem as a qp.

subject to

t2
i
max{at

i x     bi,   at

i x + bi}     ti,

i = 1, . . . , m.

50

4.29 for an m   n-matrix a (with m     n) and an integer k between 1 and n, we de   ne f (a) as the sum

of the largest k singular values of a:

f (a) =   1(a) +        +   k(a),

where   1(a),   2(a), . . . ,   n(a) denote the singular values of a in nonincreasing order.

(a) show that f (a) is the optimal value of the sdp

maximize

subject to

(cid:20) u x

tr(at x)

(cid:21)

(cid:23) 0

x t v

u (cid:22) i
v (cid:22) i
tr u + tr v = 2k,

with variables x     rm  n, u     sm, v     sn.
hint. the singular value decomposition of a can be written as a = p   qt , where p     rm  m
and q     rn  n are orthogonal matrices (p t p = i, qt q = i), and    is a diagonal m  n matrix
with elements   ii =   i(a) for i = 1, . . . , n, and   ij = 0 for i (cid:54)= j. use the decomposition to
reformulate the sdp as an equivalent sdp in which a in the objective is replaced by   .

(b) what does the result of part (a) imply about the convexity properties of f (a)?

(c) derive the lagrange dual of the sdp in part (a). use the dual problem to give an sdp

formulation of the problem

f (a0 + x1a1 +        + xpap)
with variable x     rp, where a0, . . . , ap are given m    n matrices.

minimize

4.30 consider the id76 problem

minimize

ct x +

m(cid:88)

i=1

1
  

log(1 + e  (at

i x   bi))

(26)

with variable x     rn, where    is a positive constant.

(a) derive the lagrange dual of the equivalent problem

m(cid:88)

ct x +

minimize
subject to ax     b (cid:22) y

i=1

1
  

log(1 + exp(  yi))

with variables x     rn, y     rm, where a is the m    n-matrix with ith row at
i .

(b) suppose the pair of primal and dual linear programs

minimize
subject to ax (cid:22) b

ct x

maximize    bt z
subject to at z + c = 0
z (cid:23) 0

51

has a    nite optimal value p(cid:63) and a dual optimal solution z(cid:63) that satis   es z(cid:63) (cid:22) 1. let q(cid:63) be
the optimal value of (26). show that

4.31 in this problem, r is an integer between 1 and n, and (cid:107)x(cid:107) denotes the norm

p(cid:63)     q(cid:63)     p(cid:63) +

m log 2

  

.

(cid:107)x(cid:107) =

max

1   i1<      <ir   n

|xi1| +        + |xir|

on rn ((cid:107)x(cid:107) is the sum of the largest r absolute values of entries of x). for r = 1, this is the

chebyshev norm (cid:107)x(cid:107)    = maxi |xi|; for r = n, it is the 1-norm (cid:107)x(cid:107)1 =(cid:80)

k |xk|.

(a) explain why (cid:107)x(cid:107) is the optimal value of the optimization problem

maximize xt y
subject to (cid:107)y(cid:107)        1
(cid:107)y(cid:107)1     r.

the variable in this problem is an n-vector y.

(b) from part (a),    (cid:107)x(cid:107) is the optimal value of the id76 problem

minimize
subject to (cid:107)y(cid:107)1     r

f (y)

where dom f = {y | (cid:107)y(cid:107)        1} and f (y) =    xt y for y     dom f .
derive the dual of this problem (exactly as it is stated, i.e., treating the constraint (cid:107)y(cid:107)        1
as an implicit constraint).

(c) suppose a     rm  n and b     rm. use your result in part (b) to formulate the problem

minimize

(cid:107)ax     b(cid:107)2

2 + (cid:107)x(cid:107)

as a quadratic program.

52

5 approximation and    tting

5.1 three measures of the spread of a group of numbers. for x     rn, we de   ne three functions that
measure the spread or width of the set of its elements (or coe   cients). the    rst function is the
spread, de   ned as

  sprd(x) = max
i=1,...,n

xi     min

i=1,...,n

xi.

this is the width of the smallest interval that contains all the elements of x.

the second function is the standard deviation, de   ned as

       1

n

n(cid:88)

i=1

i    
x2

(cid:33)2      1/2

.

xi

(cid:32)

n(cid:88)

i=1

1
n

  stdev(x) =

this is the statistical standard deviation of a random variable that takes the values x1, . . . , xn, each
with id203 1/n.

the third function is the average absolute deviation from the median of the values:

n(cid:88)

  aamd(x) = (1/n)

|xi     med(x)|,

i=1

where med(x) denotes the median of the components of x, de   ned as follows. if n = 2k     1 is
odd, then the median is de   ned as the value of middle entry when the components are sorted, i.e.,
med(x) = x[k], the kth largest element among the values x1, . . . , xn. if n = 2k is even, we de   ne
the median as the average of the two middle values, i.e., med(x) = (x[k] + x[k+1])/2.
each of these functions measures the spread of the values of the entries of x; for example, each
function is zero if and only if all components of x are equal, and each function is una   ected if a
constant is added to each component of x.

which of these three functions is convex? for each one, either show that it is convex, or give a
counterexample showing it is not convex. by a counterexample, we mean a speci   c x and y such
that jensen   s inequality fails, i.e.,   ((x + y)/2) > (  (x) +   (y))/2.

5.2 minimax rational    t to the exponential. (see exercise 6.9 of id76.) we consider

the speci   c problem instance with data

ti =    3 + 6(i     1)/(k     1),

yi = eti,

i = 1, . . . , k,

where k = 201. (in other words, the data are obtained by uniformly sampling the exponential
function over the interval [   3, 3].) find a function of the form

f (t) =

a0 + a1t + a2t2
1 + b1t + b2t2

that minimizes maxi=1,...,k |f (ti)     yi|. (we require that 1 + b1ti + b2t2
find optimal values of a0, a1, a2, b1, b2, and give the optimal objective value, computed to an
accuracy of 0.001. plot the data and the optimal rational function    t on the same plot. on a
di   erent plot, give the    tting error, i.e., f (ti)     yi.

i > 0 for i = 1, . . . , k.)

53

hint. to check if a feasibility problem is feasible, in matlab, you can use strcmp(cvx_status,   solved   )
after cvx_end. in python, use problem.status ==    optimal   . in julia, use problem.status == :optimal.

in julia, make sure to use the ecos solver.

5.3 approximation with trigonometric polynomials. suppose y : r     r is a 2  -periodic function. we

will approximate y with the trigonometric polynomial

k(cid:88)

k(cid:88)

f (t) =

ak cos(kt) +

bk sin(kt).

k=0

k=1

we consider two approximations: one that minimizes the l2-norm of the error, de   ned as

(cid:107)f     y(cid:107)2 =

(f (t)     y(t))2 dt

,

(cid:19)1/2

(cid:18)(cid:90)   
(cid:90)   

     

     

and one that minimizes the l1-norm of the error, de   ned as

(cid:107)f     y(cid:107)1 =

|f (t)     y(t)| dt.

the l2 approximation is of course given by the (truncated) fourier expansion of y.

to    nd an l1 approximation, we discretize t at 2n points,

ti =       + i  /n,

i = 1, . . . , 2n,

and approximate the l1 norm as

(cid:107)f     y(cid:107)1     (  /n )

2n(cid:88)

i=1

|f (ti)     y(ti)|.

(a standard rule of thumb is to take n at least 10 times larger than k.) the l1 approximation (or
really, an approximation of the l1 approximation) can now be found using id135.
we consider a speci   c case, where y is a 2  -periodic square-wave, de   ned for           t        as

(cid:26) 1 |t|       /2

0 otherwise.

y(t) =

(the graph of y over a few cycles explains the name    square-wave   .)

find the optimal l2 approximation and (discretized) l1 optimal approximation for k = 10. you
can    nd the l2 optimal approximation analytically, or by solving a least-squares problem associated
with the discretized version of the problem. since y is even, you can take the sine coe   cients in
your approximations to be zero. show y and the two approximations on a single plot.
in addition, plot a histogram of the residuals (i.e., the numbers f (ti)   y(ti)) for the two approxima-
tions. use the same horizontal axis range, so the two residual distributions can easily be compared.
(matlab command hist might be helpful here.) make some brief comments about what you see.

54

5.4 penalty function approximation. we consider the approximation problem

minimize   (ax     b)

where a     rm  n and b     rm, the variable is x     rn, and    : rm     r is a convex penalty
function that measures the quality of the approximation ax     b. we will consider the following
choices of penalty function:

(a) euclidean norm.

(b) (cid:96)1-norm.

m(cid:88)
m(cid:88)

k=1

  (y) = (cid:107)y(cid:107)2 = (

y2
k)1/2.

  (y) = (cid:107)y(cid:107)1 =

|yk|.

(c) sum of the largest m/2 absolute values.

  (y) =

k=1

(cid:98)m/2(cid:99)(cid:88)

k=1

|y|[k]

where |y|[1], |y|[2], |y|[3], . . . , denote the absolute values of the components of y sorted in
decreasing order.

(d) a piecewise-linear penalty.

m(cid:88)

  (y) =

h(yk),

h(u) =

(e) huber penalty.

k=1

m(cid:88)

k=1

h(yk),

  (y) =

          0
(cid:26) u2

|u|     0.2
|u|     0.2
0.2     |u|     0.3
2|u|     0.5 |u|     0.3.

h(u) =

m (2|u|     m )

|u|     m
|u|     m

with m = 0.2.

(f) log-barrier penalty.

  (y) =

m(cid:88)

k=1

h(yk),

h(u) =     log(1     u2), dom h = {u | |u| < 1}.

here is the problem. generate data a and b as follows:

m = 200;
n = 100;
a = randn(m,n);
b = randn(m,1);
b = b/(1.01*max(abs(b)));

55

(the id172 of b ensures that the domain of   (ax    b) is nonempty if we use the log-barrier
penalty.) to compare the results, plot a histogram of the vector of residuals y = ax     b, for each
of the solutions x, using the matlab command

hist(a*x-b,m/2);

some additional hints and remarks for the indiviid78:

(a) this problem can be solved using least-squares (x=a\b).

(b) use the cvx function norm(y,1).

(c) use the cvx function norm_largest().

(d) use cvx, with the overloaded max(), abs(), and sum() functions.

(e) use the cvx function huber().

(f) the current version of cvx handles the logarithm using an iterative procedure, which is slow

and not entirely reliable. however, you can reformulate this problem as

((cid:81)m

maximize

k=1 ((1     (ax     b)k)(1 + (ax     b)k)))1/2m ,

and use the cvx function geo_mean().

5.5 (cid:96)1.5 optimization. optimization and approximation methods that use both an (cid:96)2-norm (or its
square) and an (cid:96)1-norm are currently very popular in statistics, machine learning, and signal and
image processing. examples include huber estimation, lasso, basis pursuit, id166, various (cid:96)1-
regularized classi   cation methods, total variation de-noising, etc. very roughly, an (cid:96)2-norm cor-
responds to euclidean distance (squared), or the negative log-likelihood function for a gaussian;
in contrast the (cid:96)1-norm gives    robust    approximation, i.e., reduced sensitivity to outliers, and also
tends to yield sparse solutions (of whatever the argument of the norm is).
(all of this is just
background; you don   t need to know any of this to solve the problem.)

in this problem we study a natural method for blending the two norms, by using the (cid:96)1.5-norm,
de   ned as

(cid:32) k(cid:88)

(cid:33)2/3

(cid:107)z(cid:107)1.5 =

|zi|3/2

for z     rk. we will consider the simplest approximation or regression problem:

i=1

minimize (cid:107)ax     b(cid:107)1.5,

with variable x     rn, and problem data a     rm  n and b     rm. we will assume that m > n and
the a is full rank (i.e., rank n). the hope is that this (cid:96)1.5-optimal approximation problem should
share some of the good features of (cid:96)2 and (cid:96)1 approximation.

(a) give optimality conditions for this problem. try to make these as simple as possible.

(b) explain how to formulate the (cid:96)1.5-norm approximation problem as an sdp. (your sdp can

include linear equality and inequality constraints.)

(c) solve the speci   c numerical instance generated by the following code:

56

randn(   state   ,0);
a=randn(100,30);
b=randn(100,1);

numerically verify the optimality conditions. give a histogram of the residuals, and repeat
for the (cid:96)2-norm and (cid:96)1-norm approximations. you can use any method you like to solve the
problem (but of course you must explain how you did it); in particular, you do not need to
use the sdp formulation found in part (b).

5.6 total variation image interpolation. a grayscale image is represented as an m    n matrix of
, for (i, j)     k, where k     {1, . . . , m}    {1, . . . , n}.
intensities u orig. you are given the values u orig
your job is to interpolate the image, by guessing the missing values. the reconstructed image
will be represented by u     rm  n, where u satis   es the interpolation conditions uij = u orig
for
(i, j)     k.
the reconstruction is found by minimizing a roughness measure subject to the interpolation con-
ditions. one common roughness measure is the (cid:96)2 variation (squared),

ij

ij

another method minimizes instead the total variation,

m(cid:88)

n(cid:88)

m(cid:88)

n(cid:88)

(uij     ui   1,j)2 +

i=2

j=1

i=1

j=2

|uij     ui   1,j| +

m(cid:88)

n(cid:88)

m(cid:88)

n(cid:88)

(uij     ui,j   1)2.

|uij     ui,j   1|.

evidently both methods lead to id76 problems.

i=2

j=1

i=1

j=2

carry out (cid:96)2 and total variation interpolation on the problem instance with data given in tv_img_interp.m.
this will de   ne m, n, and matrices uorig and known. the matrix known is m    n, with (i, j) entry
one if (i, j)     k, and zero otherwise. the m   le also has skeleton plotting code. (we give you
the entire original image so you can compare your reconstruction to the original; obviously your
solution cannot access u orig

for (i, j) (cid:54)    k.)

ij

5.7 piecewise-linear    tting. in many applications some function in the model is not given by a formula,
but instead as tabulated data. the tabulated data could come from empirical measurements,
historical data, numerically evaluating some complex expression or solving some problem, for a set
of values of the argument. for use in a id76 model, we then have to    t these data
with a convex function that is compatible with the solver or other system that we use. in this
problem we explore a very simple problem of this general type.
suppose we are given the data (xi, yi), i = 1, . . . , m, with xi, yi     r. we will assume that xi are
sorted, i.e., x1 < x2 <        < xm. let a0 < a1 < a2 <        < ak be a set of    xed knot points, with
a0     x1 and ak     xm. explain how to    nd the convex piecewise linear function f , de   ned over
[a0, ak], with knot points ai, that minimizes the least-squares    tting criterion

(f (xi)     yi)2.

m(cid:88)

i=1

57

you must explain what the variables are and how they parametrize f , and how you ensure convexity
of f .

hints. one method to solve this problem is based on the lagrange basis, f0, . . . , fk, which are the
piecewise linear functions that satisfy

fj(ai) =   ij,

i, j = 0, . . . , k.

another method is based on de   ning f (x) =   ix +   i, for x     (ai   1, ai]. you then have to add
conditions on the parameters   i and   i to ensure that f is continuous and convex.
apply your method to the data in the    le pwl_fit_data.m, which contains data with xj     [0, 1].
find the best a   ne    t (which corresponds to a = (0, 1)), and the best piecewise-linear convex
function    t for 1, 2, and 3 internal knot points, evenly spaced in [0, 1]. (for example, for 3 internal
knot points we have a0 = 0, a1 = 0.25, a2 = 0.50, a3 = 0.75, a4 = 1.) give the least-squares
   tting cost for each one. plot the data and the piecewise-linear    ts found. express each function
in the form

f (x) = max
i=1...,k

(  ix +   i).

(in this form the function is easily incorporated into an optimization problem.)

5.8 least-squares    tting with convex splines. a cubic spline (or fourth-order spline) with breakpoints
  0,   1, . . . ,   m (that satisfy   0 <   1 <        <   m ) is a piecewise-polynomial function with the
following properties:

    the function is a cubic polynomial on each interval [  i,   i+1]
    the function values, and the    rst and second derivatives are continuous on the interval (  0,   m ).

the    gure shows an example of a cubic spline f (t) with m = 10 segments and breakpoints   0 = 0,
  1 = 1, . . . ,   10 = 10.

58

0246810   10   50510xzin approximation problems with splines it is convenient to parametrize a spline as a linear combi-
nation of basis functions, called b-splines. the precise de   nition of b-splines is not important for
our purposes; it is su   cient to know that every cubic spline can be written as a linear combination
of m + 3 cubic b-splines gk(t), i.e., in the form

f (t) = x1g1(t) +        + xm +3gm +3(t) = xt g(t),

and that there exist e   cient algorithms for computing g(t) = (g1(t), . . . , gm +3(t)). the next    gure
shows the 13 b-splines for the breakpoints 0, 1, . . . , 10.

in this exercise we study the problem of    tting a cubic spline to a set of data points, subject to the
constraint that the spline is a convex function. speci   cally, the breakpoints   0, . . . ,   m are    xed,
and we are given n data points (tk, yk) with tk     [  0,   m ]. we are asked to    nd the convex cubic
spline f (t) that minimizes the least-squares criterion

n(cid:88)

k=1

(f (tk)     yk)2.

we will use b-splines to parametrize f , so the variables in the problem are the coe   cients x in
f (t) = xt g(t). the problem can then be written as

n(cid:88)

(cid:0)xt g(tk)     yk

(cid:1)2

minimize

(27)

k=1

subject to xt g(t) is convex in t on [  0,   m ].

(a) express problem (27) as a id76 problem of the form

(cid:107)ax     b(cid:107)2
minimize
subject to gx (cid:22) h.

2

59

024681000.20.40.60.81xz(b) use cvx to solve a speci   c instance of the optimization problem in part (a). as in the    gures

above, we take m = 10 and   0 = 0,   1 = 1, . . . ,   10 = 10.
download the matlab    les spline_data.m and bsplines.m. the    rst m-   le is used to generate
the problem data. the command [t, y] = spline_data will generate two vectors t, y of
length n = 51, with the data points tk, yk.
the second function can be used to compute the b-splines, and their    rst and second deriva-
tives, at any given point u     [0, 10]. the command [g, gp, gpp] = bsplines(u) returns
three vectors of length 13 with elements gk(u), g(cid:48)
k(u). (the right derivatives are
returned for u = 0, and the left derivatives for u = 10.)
solve the convex spline    tting problem (27) for this example, and plot the optimal spline.

k(u), and g(cid:48)(cid:48)

5.9 robust least-squares with interval coe   cient matrix. an interval matrix in rm  n is a matrix whose

entries are intervals:

a = {a     rm  n | |aij       aij|     rij, i = 1, . . . , m, j = 1, . . . , n}.

the matrix   a     rm  n is called the nominal value or center value, and r     rm  n, which is
elementwise nonnegative, is called the radius.

the robust least-squares problem, with interval matrix, is

minimize

supa   a (cid:107)ax     b(cid:107)2,

with optimization variable x     rn. the problem data are a (i.e.,   a and r) and b     rm. the
objective, as a function of x, is called the worst-case residual norm. the robust least-squares
problem is evidently a id76 problem.

(a) formulate the interval matrix robust least-squares problem as a standard optimization prob-
lem, e.g., a qp, socp, or sdp. you can introduce new variables if needed. your reformulation
should have a number of variables and constraints that grows linearly with m and n, and not
exponentially.

(b) consider the speci   c problem instance with m = 4, n = 3,
45    0.05    8    0.05
90    0.05
30    0.05    30    0.05
0    0.05    8    0.05    4    0.05
10    0.05    10    0.05
30    0.05

             60    0.05

a =

             ,

             .

                6

   3
18
   9

b =

(the    rst part of each entry in a gives   aij; the second gives rij, which are all 0.05 here.) find
the solution xls of the nominal problem (i.e., minimize (cid:107)   ax     b(cid:107)2), and robust least-squares
solution xrls. for each of these,    nd the nominal residual norm, and also the worst-case residual
norm. make sure the results make sense.

5.10 identifying a sparse linear dynamical system. a linear dynamical system has the form

x(t + 1) = ax(t) + bu(t) + w(t),

t = 1, . . . , t     1,

where x(t)     rn is the state, u(t)     rm is the input signal, and w(t)     rn is the process noise,
at time t. we assume the process noises are iid n (0, w ), where w (cid:31) 0 is the covariance matrix.

60

the matrix a     rn  n is called the dynamics matrix or the state transition matrix, and the matrix
b     rn  m is called the input matrix.
you are given accurate measurements of the state and input signal, i.e., x(1), . . . , x(t ), u(1), . . . , u(t   
1), and w is known. your job is to    nd a state transition matrix   a and input matrix   b from these
data, that are plausible, and in addition are sparse, i.e., have many zero entries. (the sparser the
better.)

by doing this, you are e   ectively estimating the structure of the dynamical system, i.e., you are
determining which components of x(t) and u(t) a   ect which components of x(t + 1).
in some
applications, this structure might be more interesting than the actual values of the (nonzero)
coe   cients in   a and   b.

by plausible, we mean that

(cid:13)(cid:13)(cid:13)w    1/2(cid:16)

t   1(cid:88)

t=1

x(t + 1)       ax(t)       bu(t)

(cid:17)(cid:13)(cid:13)(cid:13)2

2

    n(t     1) + 2(cid:112)2n(t     1).

(you can just take this as our de   nition of plausible. but to explain this choice, we note that when
  a = a and   b = b, the left-hand side is   2, with n(t     1) degrees of freedom, and so has mean

n(t     1) and standard deviation(cid:112)2n(t     1). thus, the constraint above states that the lhs does

not exceed the mean by more than 2 standard deviations.)

(a) describe a method for    nding   a and   b, based on id76.

we are looking for a very simple method, that involves solving one id76
problem. (there are many extensions of this basic method, that would improve the simple
method, i.e., yield sparser   a and   b that are still plausible. we   re not asking you to describe
or implement any of these.)

(b) carry out your method on the data found in sparse_lds_data.m. give the values of   a and

  b that you    nd, and verify that they are plausible.
in the data    le, we give you the true values of a and b, so you can evaluate the performance
of your method. (needless to say, you are not allowed to use these values when forming   a and
  b.) using these true values, give the number of false positives and false negatives in both   a
and   b. a false positive in   a, for example, is an entry that is nonzero, while the corresponding
entry in a is zero. a false negative is an entry of   a that is zero, while the corresponding
entry of a is nonzero. to judge whether an entry of   a (or   b) is nonzero, you can use the test
|   aij|     0.01 (or |   bij|     0.01).

5.11 measurement with bounded errors. a series of k measurements y1, . . . , yk     rp, are taken in order
to estimate an unknown vector x     rq. the measurements are related to the unknown vector x by
yi = ax + vi, where vi is a measurement noise that satis   es (cid:107)vi(cid:107)           but is otherwise unknown.
(in other words, the entries of v1, . . . , vk are no larger than   .) the matrix a and the measurement
noise norm bound    are known. let x denote the set of vectors x that are consistent with the
observations y1, . . . , yk, i.e., the set of x that could have resulted in the measurements made. is x
convex?

now we will examine what happens when the measurements are occasionally in error, i.e., for a few
i we have no relation between x and yi. more precisely suppose that ifault is a subset of {1, . . . , k},

61

and that yi = ax + vi with (cid:107)vi(cid:107)           (as above) for i (cid:54)    ifault, but for i     ifault, there is no relation
between x and yi. the set ifault is the set of times of the faulty measurements.
suppose you know that ifault has at most j elements, i.e., out of k measurements, at most j are
faulty. you do not know ifault; you know only a bound on its cardinality (size). for what values of
j is x, the set of x consistent with the measurements, convex?

5.12 least-squares with some permuted measurements. we want to estimate a vector x     rn, given
some linear measurements of x corrupted with gaussian noise. here   s the catch: some of the
measurements have been permuted.
more precisely, our measurement vector y     rm has the form

y = p (ax + v),

where vi are iid n (0, 1) measurement noises, x     rn is the vector of parameters we wish to
estimate, and p     rm  m is a permutation matrix. (this means that each row and column of p
has exactly one entry equal to one, and the remaining m     1 entries zero.) we assume that m > n
and that at most k of the measurements are permuted; i.e., p ei (cid:54)= ei for no more than k indices i.
we are interested in the case when k < m (e.g. k = 0.4m); that is, only some of the measurements
have been permuted. we want to estimate x and p .
once we make a guess   p for p , we can get the maximum likelihood estimate of x by minimizing
(cid:107)ax      p t y(cid:107)2. the residual a  x      p t y is then our guess of what v is, and should be consistent with
being a sample of a n (0, i) vector.

in principle, we can    nd the maximum likelihood estimate of x and p by solving a set of(cid:0)m

(cid:1)(k!    1)

least-squares problems, and choosing one that has minimum residual. but this is not practical unless
m and k are both very small.

k

describe a heuristic method for approximately solving this problem, using id76.
(there are many di   erent approaches which work quite well.)

you might    nd the following fact useful. the solution to

minimize (cid:107)ax     p t y(cid:107)

over p     rm  m a permutation matrix, is the permutation that matches the smallest entry in y
with the smallest entry in ax, does the same for the second smallest entries and so forth.

carry out your method on the data in ls_perm_meas_data.*. give your estimate of the permuted
indices. the data    le includes the true permutation matrix and value of x (which of course you
cannot use in forming your estimate). compare the estimate of x you get after your guessed
permutation with the estimate obtained assuming p = i.

remark. this problem comes up in several applications. in target tracking, we get multiple noisy
measurements of a set of targets, and then guess which targets are the same in the di   erent sets of
measurements. if some of our guesses are wrong (i.e., our target association is wrong) we have the
present problem. in vision systems the problem arises when we have multiple camera views of a
scene, which give us noisy measurements of a set of features. a feature correspondence algorithm
guesses which features in one view correspond to features in other views. if we make some feature
correspondence errors, we have the present problem.

note. if you are using julia, you might have to set the solver to run more than the default number
of iterations, using solve!(problem, scssolver(max_iters=10000)).

62

5.13 fitting with censored data.

in some experiments there are two kinds of measurements or data
available: the usual ones, in which you get a number (say), and censored data, in which you don   t
get the speci   c number, but are told something about it, such as a lower bound. a classic example
is a study of lifetimes of a set of subjects (say, laboratory mice). for those who have died by the end
of data collection, we get the lifetime. for those who have not died by the end of data collection,
we do not have the lifetime, but we do have a lower bound, i.e., the length of the study. these are
the censored data values.

we wish to    t a set of data points,

(x(1), y(1)), . . . , (x(k), y(k)),

with x(k)     rn and y(k)     r, with a linear model of the form y     ct x. the vector c     rn is the
model parameter, which we want to choose. we will use a least-squares criterion, i.e., choose c to
minimize

k(cid:88)

(cid:16)

y(k)     ct x(k)(cid:17)2

.

j =

k=1

here is the tricky part: some of the values of y(k) are censored; for these entries, we have only a
(given) lower bound. we will re-order the data so that y(1), . . . , y(m ) are given (i.e., uncensored),
while y(m +1), . . . , y(k) are all censored, i.e., unknown, but larger than d, a given number. all the
values of x(k) are known.

(a) explain how to    nd c (the model parameter) and y(m +1), . . . , y(k) (the censored data values)

that minimize j.

(b) carry out the method of part (a) on the data values in cens_fit_data.*. report   c, the value

of c found using this method.
also    nd   cls, the least-squares estimate of c obtained by simply ignoring the censored data
samples, i.e., the least-squares estimate based on the data

(x(1), y(1)), . . . , (x(m ), y(m )).

the data    le contains ctrue, the true value of c, in the vector c_true. use this to give the two
relative errors

(cid:107)ctrue       c(cid:107)2
(cid:107)ctrue(cid:107)2

,

(cid:107)ctrue       cls(cid:107)2

(cid:107)ctrue(cid:107)2

.

of the sample is given by s = (cid:80)n

5.14 spectrum analysis with quantized measurements. a sample is made up of n compounds, in quantities
qi     0, for i = 1, . . . , n. each compound has a (nonnegative) spectrum, which we represent as a
vector s(i)     rm
+ , for i = 1, . . . , n. (precisely what s(i) means won   t matter to us.) the spectrum
i=1 qis(i). we can write this more compactly as s = sq, where
s     rm  n is a matrix whose columns are s(1), . . . , s(n).
measurement of the spectrum of the sample gives us an interval for each spectrum value, i.e.,
l, u     rm

+ for which

li     si     ui,

i = 1, . . . , m.

(we don   t directly get s.) this occurs, for example, if our measurements are quantized.

63

instead, we ask you to do the
given l and u (and s), we cannot in general deduce q exactly.
following. for each compound i,    nd the range of possible values for qi consistent with the spectrum
measurements. we will denote these ranges as qi     [qmin
and qmax
.
note that if qmin
i in the sample. if qmax
i in the sample.

is large, we can con   dently conclude that there is a signi   cant amount of compound
is small, we can con   dently conclude that there is not much of compound

]. your job is to    nd qmin

, qmax

i

i

i

i

i

i

i

and qmax

(a) explain how to    nd qmin
(b) carry out the method of part (a) for the problem instance given in spectrum_data.m. (ex-
ecuting this    le de   nes the problem data, and plots the compound spectra and measurement
bounds.) plot the minimum and maximum values versus i, using the commented out code in
the data    le. report your values for qmin

, given s, l, and u.

and qmax

.

i

4

4

5.15 learning a quadratic pseudo-metric from distance measurements. we are given a set of n pairs of

points in rn, x1, . . . , xn , and y1, . . . , yn , together with a set of distances d1, . . . , dn > 0.
the goal is to    nd (or estimate or learn) a quadratic pseudo-metric d,

d(x, y) =(cid:0)(x     y)t p (x     y)(cid:1)1/2

,

+, which approximates the given distances, i.e., d(xi, yi)     di. (the pseudo-metric d is

with p     sn
a metric only when p (cid:31) 0; when p (cid:23) 0 is singular, it is a pseudo-metric.)
to do this, we will choose p     sn

+ that minimizes the mean squared error objective

n(cid:88)

i=1

1
n

(di     d(xi, yi))2.

(a) explain how to    nd p using convex or quasiid76. if you cannot    nd an exact
formulation (i.e., one that is guaranteed to minimize the total squared error objective), give
a formulation that approximately minimizes the given objective, subject to the constraints.

(b) carry out the method of part (a) with the data given in quad_metric_data.m. the columns
of the matrices x and y are the points xi and yi; the row vector d gives the distances di. give
the optimal mean squared distance error.
we also provide a test set, with data x_test, y_test, and d_test. report the mean squared
distance error on the test set (using the metric found using the data set above).

5.16 polynomial approximation of inverse using eigenvalue information. we seek a polynomial of degree

k, p(a) = c0 + c1a + c2a2 +        + ckak, for which

p(a) = c0i + c1a + c2a2        + ckak

is an approximate inverse of the nonsingular matrix a, for all a     a     rn  n. when   x = p(a)b
is used as an approximate solution of the linear equation ax = b, the associated residual norm is
(cid:107)a(p(a)b)     b(cid:107)2. we will judge our polynomial (i.e., the coe   cients c0, . . . , ck) by the worst case
residual over a     a and b in the unit ball:

rwc =

sup

a   a, (cid:107)b(cid:107)2   1

(cid:107)a(p(a)b)     b(cid:107)2.

64

the set of matrices we take is a = {a     sn |   (a)        }, where   (a) is the set of eigenvalues of a
(i.e., its spectrum), and         r is a union of a set of intervals (that do not contain 0).

0, . . . , c(cid:63)

(a) explain how to    nd coe   cients c(cid:63)

k that minimize rwc. your solution can involve ex-
pressions that involve the supremum of a polynomial (with scalar argument) over an interval.
(b) carry out your method for k = 4 and     = [   0.6,   0.3]     [0.7, 1.8]. you can replace the
supremum of a polynomial over     by a maximum over uniformly spaced (within each interval)
points in    , with spacing 0.01. give the optimal value rwc(cid:63) and the optimal coe   cients
c(cid:63) = (c(cid:63)

0, . . . , c(cid:63)

k).

remarks. (not needed to solve the problem.)

    the approximate inverse p(a)b would be computed by recursively, requiring the multiplication

of a with a vector k times.

    this approximate inverse could be used as a preconditioner for an iterative method.
    the cayley-hamilton theorem tells us that the inverse of any (invertible) matrix is a polyno-
mial of degree n     1 of the matrix. our hope here, however, is to get a single polynomial, of
relatively low degree, that serves as an approximate inverse for many di   erent matrices.

5.17 fitting a generalized additive regression model. a generalized additive model has the form

n(cid:88)

j=1

f (x) =    +

fj(xj),

for x     rn, where        r is the o   set, and fj : r     r, with fj(0) = 0. the functions fj are called
the regressor functions. when each fj is linear, i.e., has the form wjxj, the generalized additive
model is the same as the standard (linear) regression model. roughly speaking, a generalized
additive model takes into account nonlinearities in each regressor xj, but not nonlinear interactions
among the regressors. to visualize a generalized additive model, it is common to plot each regressor
function (when n is not too large).
we will restrict the functions fj to be piecewise-a   ne, with given knot points p1 <        < pk. this
means that fj is a   ne on the intervals (      , p1], [p1, p2], . . . , [pk   1, pk], [pk,   ), and continuous at
p1, . . . , pk. let c denote the total (absolute value of) change in slope across all regressor functions
and all knot points. the value c is a measure of nonlinearity of the regressor functions; when
c = 0, the generalized additive model reduces to a id75 model.
now suppose we observe samples or data (x(1), y(1)), . . . , (x(n ), y(n ))     rn    r, and wish to    t
a generalized additive model to the data. we choose the o   set and the regressor functions to
minimize

n(cid:88)

i=1

1
n

(y(i)     f (x(i))2 +   c,

where    > 0 is a id173 parameter. (the    rst term is the mean-square error.)

(a) explain how to solve this problem using id76.

65

(b) carry out the method of part (a) using the data in the    le gen_add_reg_data.m. this    le
contains the data, given as an n    n matrix x (whose rows are (x(i))t ), a column vector y
(which give y(i)), a vector p that gives the knot points, and the scalar lambda.
give the mean-square error achieved by your generalized additive regression model. compare
the estimated and true regressor functions in a 3   3 array of plots (using the plotting code in
the data    le as a template), over the range    10     xi     10. the true regressor functions (to
be used only for plotting, of course) are given in the cell array f.

hints.

    you can represent each regressor function fj as a linear combination of the basis functions

b0(u) = u and bi(u) = (u     pk)+     (   pk)+ for k = 1, 2, . . . , k, where (a)+ = max{a, 0}.

    you might    nd the matrix xx = [b0(x) b1(x)        bk(x)] useful.

5.18 multi-label support vector machine. the basic id166 described in the book is used for classi   cation
of data with two labels. in this problem we explore an extension of id166 that can be used to carry
out classi   cation of data with more than two labels. our data consists of pairs (xi, yi)     rn   
{1, . . . , k}, i = 1, . . . , m, where xi is the feature vector and yi is the label of the ith data point. (so
the labels can take the values 1, . . . , k.) our classi   er will use k a   ne functions, fk(x) = at
k x + bk,
k = 1, . . . , k, which we also collect into a   ne function from rn into rk as f (x) = ax + b. (the
rows of a are at
k .) given feature vector x, we guess the label   y = argmaxk fk(x). we assume that
exact ties never occur, or if they do, an arbitrary choice can be made. note that if a multiple of 1
is added to b, the classi   er does not change. thus, without loss of generality, we can assume that
1t b = 0.
to correctly classify the data examples, we need fyi(xi) > maxk(cid:54)=yi fk(xi) for all i. this is a set of
homogeneous strict inequalities in ak and bk, which are feasible if and only if the set of nonstrict
inequalities fyi(xi)     1 + maxk(cid:54)=yi fk(xi) are feasible. this motivates the id168

(cid:18)

m(cid:88)

i=1

(cid:19)
fk(xi)     fyi(xi)

,

+

l(a, b) =

1 + max
k(cid:54)=yi

where (u)+ = max{u, 0}. the multi-label id166 chooses a and b to minimize

l(a, b) +   (cid:107)a(cid:107)2
f ,

subject to 1t b = 0, where    > 0 is a id173 parameter. (several variations on this are
possible, such as regularizing b as well, or replacing the frobenius norm squared with the sum of
norms of the columns of a.)

(a) show how to    nd a and b using id76. be sure to justify any changes of
variables or reformulation (if needed), and convexity of the objective and constraints in your
formulation.

(b) carry out multi-label id166 on the data given in multi_label_id166_data.m. use the data
given in x and y to    t the id166 model, for a range of values of   . this data set includes an
additional set of data, xtest and ytest, that you can use to test the id166 models. plot the
test set classi   cation error rate (i.e., the fraction of data examples in the test set for which
  y (cid:54)= y) versus   .

66

you don   t need to try more than 10 or 20 values of   , and we suggest choosing them uniformly
on a log scale, from (say) 10   2 to 102.

5.19 colorization with total variation id173. a m  n color image is represented as three matrices
of intensities r, g, b     rm  n, with entries in [0, 1], representing the red, green, and blue pixel
intensities, respectively. a color image is converted to a monochrome image, represented as one
matrix m     rm  n, using

m = 0.299r + 0.587g + 0.114b.

(these weights come from di   erent perceived brightness of the three primary colors.)

in colorization, we are given m , the monochrome version of an image, and the color values of some
of the pixels; we are to guess its color version, i.e., the matrices r, g, b. of course that   s a very
underdetermined problem. a very simple technique is to minimize the total variation of (r, g, b),
de   ned as

m   1(cid:88)

n   1(cid:88)

i=1

j=1

(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)
                        

rij     ri,j+1
gij     gi,j+1
bij     bi,j+1
rij     ri+1,j
gij     gi+1,j
bij     bi+1,j

(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)2
                        

,

tv(r, g, b) =

subject to consistency with the given monochrome image, the known ranges of the entries of
(r, g, b) (i.e., in [0, 1]), and the given color entries. note that the sum above is of the norm
of 6-vectors, and not the norm-squared. (the 6-vector is an approximation of the spatial gradient
of (r, g, b).)

carry out this method on the data given in image_colorization_data.*. the    le loads flower.png
and provides the monochrome version of the image, m, along with vectors of known color intensities,
r_known, g_known, and b_known, and known_ind, the indices of the pixels with known values. if r
denotes the red channel of an image, then r(known_ind) returns the known red color intensities in
matlab, and r[known_ind] returns the same in python and julia. the    le also creates an image,
flower_given.png, that is monochrome, with the known pixels colored.

the tv function, invoked as tv(r,g,b), gives the total variation. cvxpy has the tv function
built-in, but cvx and cvx.jl do not, so we have provided the    les tv.m and tv.jl which contain
implementations for you to use.

in python and julia we have also provided the function save_img(filename,r,g,b) which writes
the image de   ned by the matrices r, g, b, to the    le filename. to view an image in matlab use
the imshow function.
the problem instance is a small image, 75    75, so the solve time is reasonable, say, under ten
seconds or so in cvx or cvxpy, and around 60 seconds in julia.

report your optimal objective value and, if you have access to a color printer, attach your recon-
structed image. if you don   t have access to a color printer, it   s ok to just give the optimal objective
value.

5.20 recovering latent periodic signals. first, a de   nition: a signal x     rn is p-periodic with p < n if

xi+p = xi for i = 1, . . . , n     p.

67

in this problem, we consider a noisy, measured signal y     rn which is (approximately) the sum
of a several periodic signals, with unknown periods. given only the noisy signal y, our task is to
recover these latent periodic signals. in particular, y is given as

(cid:88)

p   p

y = v +

x(p),

where v     rn is a (small) random noise term, and x(p) is a p-periodic signal. the set p    
{1, . . . , pmax} contains the periods of the latent periodic signals that compose y.
if p were known, we could approximately recover the latent periodic signals x(p) using, say, least
squares. because p is not known, we instead propose to recover the latent periodic signals x(p) by
solving the following optimization problem:

minimize (cid:80)n
subject to   y =(cid:80)pmax

i=1(yi       yi)2 +(cid:80)pmax

p=1   x(p)

p=1 wp(cid:107)  x(p)(cid:107)2

  x(p) is p-periodic, for p = 1, . . . , pmax.

the variables are   y and   x(p), for p = 1, . . . , pmax. the    rst sum in the objective penalizes the
squared deviation of the measured signal y from our estimate   y, and the second sum is a heuristic
for producing vectors   x(p) that contain only zeros. the weight vector w (cid:23) 0 is increasing in its
indices, which encodes our desire that the latent periodic signals have small period.

(a) explain how to solve the given optimization problem using id76, and how to

use it to (approximately) recover the set p and the latent periodic signals x(p), for p     p.

(b) the    le periodic signals data.* contains a signal y, as well as a weight vector w. return
your best guess of the set p. plot the measured signal y, as well as the di   erent periodic
components that (approximately) compose it. (use separate graphs for each signal, so you
should have |p| + 1 graphs.)

5.21 rank one nonnegative matrix approximation. we are given some entries of an m   n matrix a with
positive entries, and wish to approximate it as the outer product of vectors x and y with positive
entries, i.e., xyt . we will use the average relative deviation between the entries of a and xyt as
our approximation criterion,

m(cid:88)

n(cid:88)

i=1

j=1

1
mn

r(aij, xiyj),

where r is the relative deviation of two positive numbers, de   ned as

r(u, v) = max{u/v, v/u}     1.

if we scale x by the positive number   , and y by 1/  , the outer product (  x)(y/  )t is the same
as xyt , so we will normalize x as 1t x = 1.

the data in the problem consists of some of the values of a. speci   cally, we are given aij for
(i, j)             {1, . . . , m}    {1, . . . , n}. thus, your goal is to    nd x     rm
++ (which satis   es 1t x = 1),
y     rn
++, and aij > 0 for (i, j) (cid:54)       , to minimize the average relative deviation between the entries
of a and xyt .

68

(a) explain how to solve this problem using convex or quasiid76.

(b) solve the problem for the data given in rank_one_nmf_data.*. this includes a matrix a, and
a set of indexes omega for the given entries. (the other entries of a are    lled in with zeros.)
report the optimal average relative deviation between a and xyt . give your values for x1,
y1, and a11 = x1y1.

5.22 total variation de-mosaicing. a color image is represented by 3 m    n matrices r, g, and b that
give the red, green, and blue pixel intensities. a camera sensor, however, measures only one of the
color intensities at each pixel. the pattern of pixel sensor colors varies, but most of the patterns
have twice as many green sensor pixels as red or blue. a common arrangement repeats the 2    2
block

r g
g b

(assuming m and n are even).

de-mosaicing is the process of guessing, or interpolating, the missing color values at each pixel. the
sensors give us mn entries in the matrices r, g, and b; in de-mosaicing, we guess the remaining
2mn entries in the matrices.
first we describe a very basic method of de-mosaicing. for each 2    2 block of pixels we have the
4 intensity values

ri,j
gi,j+1
gi+1,j bi+1,j+1

.

we use the value ri,j as the red value for the other three pixels, and we do the same for the blue
value bi+1,j+1. for guessing the green values at i, j and i + 1, j + 1, we simply use the average of
the two measured green values, (gi,j+1 + gi+1,j)/2.

a more sophisticated method relies on id76. you choose the unknown pixel values
in r, g, and b to minimize the total variation of the color image, de   ned as

m   1(cid:88)

n   1(cid:88)

i=1

j=1

(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)
                        

ri,j     ri,j+1
gi,j     gi,j+1
bi,j     bi,j+1
ri+1,j     ri,j
gi+1,j     gi,j
bi+1,j     bi,j

(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)(cid:13)2
                        

.

note that the norms in the sum here are not squared. the argument of the norms is a vector in
r6, an estimate of the spatial gradient of the rgb values.

we have provided you with several    les in the data directory. three images are given (in png for-
mat): demosaic_raw.png, which contains the raw or mosaic image to de-mosaic, demosaic_original.png,
which contains the original image from which the raw image was constructed, and demosaic_simple.png,
which is the image de-mosaiced by the simple method described above. remember that the raw
image, and any reconstructed de-mosaiced image, have only one third the information of the origi-
nal, so we cannot expect them to look as good as the original. you don   t need the original or basic
de-mosaiced image    les to solve the problem; they are given only so you can look at them to see
what they are. you should zoom in while viewing the raw image and the basic de-mosaic version,

69

so you can see the pattern of 2    2 blocks in the    rst, and the simple de-mosaic method in the
second.

the tv function, invoked as tv(r,g,b), gives the total variation. cvxpy has the tv function
built-in, but cvx and cvx.jl do not, so we have provided the    les tv.m and tv.jl which contain
implementations for you to use.

the    le demosaic_data.* constructs arrays r_mask, g_mask, and b_mask, which contain the in-
dices of pixels whose values we know in the original image, the number of rows and columns in
the image, m, n respectively, and arrays r_raw, b_raw, g_raw, which contain the known values
of each color at each pixel,    lled in with zeroes for the unknown values. so if r is an m    n
matrix variable, the constraint r[r_mask]==r_raw[r_mask] in julia and python will impose the
constraint that it agrees with the given red pixel values; in matlab, the constraint can be ex-
pressed as r(r_mask)==r_raw(r_mask). this    le also contains a save_image method, which takes
three arguments, r, g, b arrays (that you   ve reconstructed) and saves the    le under the name
output_image.png. to see the image in matlab, use the imshow function.

report the optimal value of total variation, and attach the de-mosaiced image. (if you don   t have
access to a color printer, you can submit a monochrome version. print it large enough that we can
see it, say, at least half the page width wide.)

hint. your solution code should take less than 10 seconds or so to run in python and matlab, but
up to a minute or so in julia. you might get a warning about an inaccurate solution, but you can
ignore it.

70

6 statistical estimation

6.1 id113 of x and noise mean and covariance. consider the maximum

likelihood estimation problem with the linear measurement model

the vector x     rn is a vector of unknown parameters, yi are the measurement values, and vi are
independent and identically distributed measurement errors.

yi = at

i x + vi,

i = 1, . . . , m.

in this problem we make the assumption that the normalized id203 density function of the
errors is given (normalized to have zero mean and unit variance), but not their mean and variance.
in other words, the density of the measurement errors vi is

p(z) =

1
  

f (

z       
  

),

where f is a given, normalized density. the parameters    and    are the mean and standard
deviation of the distribution p, and are not known.

the maximum likelihood estimates of x,   ,    are the maximizers of the log-likelihood function

m(cid:88)

log p(yi     at

i x) =    m log    +

i=1

i=1

log f (

yi     at
i x       
  

),

m(cid:88)

where y is the observed value. show that if f is log-concave, then the maximum likelihood estimates
of x,   ,    can be determined by solving a id76 problem.

6.2 mean and covariance estimation with conditional independence constraints. let x     rn be a

gaussian random variable with density

p(x) =

1

(2  )n/2(det s)1/2

exp(   (x     a)t s   1(x     a)/2).

the conditional density of a subvector (xi, xj)     r2 of x, given the remaining variables, is also
gaussian, and its covariance matrix rij is equal to the schur complement of the 2    2 submatrix

(cid:20) sii sij

(cid:21)

sij sjj

in the covariance matrix s. the variables xi, xj are called conditionally independent if the
covariance matrix rij of their conditional distribution is diagonal.
formulate the following problem as a id76 problem. we are given n independent
samples y1, . . . , yn     rn of x. we are also given a list n     {1, . . . , n}    {1, . . . , n} of pairs of
conditionally independent variables: (i, j)     n means xi and xj are conditionally independent.
the problem is to compute the maximum likelihood estimate of the mean a and the covariance
matrix s, subject to the constraint that xi and xj are conditionally independent for (i, j)     n .
6.3 id113 for exponential family. a id203 distribution or density on a

set d, parametrized by        rn, is called an exponential family if it has the form

p  (x) = a(  ) exp(  t c(x)),

71

for x     d, where c : d     rn, and a(  ) is a normalizing function. here we intepret p  (x) as a
density function when d is a continuous set, and a id203 distribution when d is discrete.
thus we have

when p   is a density, and

a(  ) =

exp(  t c(x)) dx

a(  ) =

exp(  t c(x))

(cid:18)(cid:90)
(cid:32)(cid:88)

d

x   d

(cid:19)   1
(cid:33)   1

when p   represents a distribution. we consider only values of    for which the integral or sum above
is    nite. many families of distributions have this form, for appropriate choice of the parameter   
and function c.
(a) when c(x) = x and d = rn

+, what is the associated family of densities? what is the set of
(b) consider the case with d = {0, 1}, with c(0) = 0, c(1) = 1. what is the associated exponential

valid values of   ?

family of distributions? what are the valid values of the parameter        r?

(c) explain how to represent the normal family n (  ,   ) as an exponential family. hint. use pa-
rameter (z, y ) = (     1  ,      1). with this parameter,   t c(x) has the form zt c1(x)+tr y c2(x),
where c2(x)     sn.
(d) log-likelihood function. show that for any x     d, the log-likelihood function log p  (x) is
concave in   . this means that maximum-likelihood estimation for an exponential family leads
to a id76 problem. you don   t have to give a formal proof of concavity of
log p  (x) in the general case: you can just consider the case when d is    nite, and state that
the other cases (discrete but in   nite d, continuous d) can be handled by taking limits of    nite
sums.

(e) optimality condition for ml estimation. let (cid:96)  (x1, . . . , xk) be the log-likelihood function for
k iid samples, x1, . . . , xk, from the distribution or density p  . assuming log p   is di   erentiable
in   , show that

(1/k)     (cid:96)  (x1, . . . , xk) =

1
k

c(xi)     e

  

c(x).

k(cid:88)

i=1

(the subscript under e means the expectation under the distribution or density p  .)
interpretation. the ml estimate of    is characterized by the empirical mean of c(x) being
equal to the expected value of c(x), under the density or distribution p  . (we assume here
that the maximizer of (cid:96) is characterized by the gradient vanishing.)

6.4 maximum likelihood prediction of team ability. a set of n teams compete in a tournament. we
model each team   s ability by a number aj     [0, 1], j = 1, . . . , n. when teams j and k play each
other, the id203 that team j wins is equal to prob(aj     ak + v > 0), where v     n (0,   2).
you are given the outcome of m past games. these are organized as

(j(i), k(i), y(i)),

i = 1, . . . , m,

meaning that game i was played between teams j(i) and k(i); y(i) = 1 means that team j(i) won,
while y(i) =    1 means that team k(i) won. (we assume there are no ties.)

72

(a) formulate the problem of    nding the maximum likelihood estimate of team abilities,   a     rn,
given the outcomes, as a id76 problem. you will    nd the game incidence
matrix a     rm  n, de   ned as

          y(i)

   y(i)

ail =

l = j(i)
l = k(i)

0 otherwise,

useful.
the prior constraints   ai     [0, 1] should be included in the problem formulation. also, we
note that if a constant is added to all team abilities, there is no change in the probabilities of
game outcomes. this means that   a is determined only up to a constant, like a potential. but
this doesn   t a   ect the ml estimation problem, or any subsequent predictions made using the
estimated parameters.

(b) find   a for the team data given in team_data.m, in the matrix train. (this matrix gives the
outcomes for a tournament in which each team plays each other team once.) you may    nd
the cvx function log_normcdf helpful for this problem.
you can form a using the commands

a = sparse(1:m,train(:,1),train(:,3),m,n) + ...

sparse(1:m,train(:,2),-train(:,3),m,n);

(c) use the maximum likelihood estimate   a found in part (b) to predict the outcomes of next
year   s tournament games, given in the matrix test, using   y(i) = sign(  aj(i)       ak(i)). compare
these predictions with the actual outcomes, given in the third column of test. give the
fraction of correctly predicted outcomes.
the games played in train and test are the same, so another, simpler method for predicting
the outcomes in test it to just assume the team that won last year   s match will also win this
year   s match. give the percentage of correctly predicted outcomes using this simple method.

6.5 estimating a vector with unknown measurement nonlinearity. (a speci   c instance of exercise 7.9

in id76.) we want to estimate a vector x     rn, given some measurements

yi =   (at

i x + vi),

i = 1, . . . , m.

here ai     rn are known, vi are iid n (0,   2) random noises, and    : r     r is an unknown
monotonic increasing function, known to satisfy

         (cid:48)(u)       ,

for all u. (here    and    are known positive constants, with    <   .) we want to    nd a maximum
likelihood estimate of x and   , given yi. (we also know ai,   ,   , and   .)

this sounds like an in   nite-dimensional problem, since one of the parameters we are estimating is a
function. in fact, we only need to know the m numbers zi =      1(yi), i = 1, . . . , m. so by estimating
   we really mean estimating the m numbers z1, . . . , zm. (these numbers are not arbitrary; they
must be consistent with the prior information          (cid:48)(u)        for all u.)

73

(a) explain how to    nd a maximum likelihood estimate of x and    (i.e., z1, . . . , zm) using convex

optimization.

(b) carry out your method on the data given in nonlin_meas_data.*, which includes a matrix
a     rm  n, with rows at
m. give   xml, the maximum likelihood estimate of x. plot your
estimated function     ml. (you can do this by plotting (  zml)i versus yi, with yi on the vertical
axis and (  zml)i on the horizontal axis.)

1 , . . . , at

hint. you can assume the measurements are numbered so that yi are sorted in nondecreasing order,
i.e., y1     y2                ym. (the data given in the problem instance for part (b) is given in this
order.)

6.6 id113 of an increasing nonnegative signal. we wish to estimate a scalar
signal x(t), for t = 1, 2, . . . , n , which is known to be nonnegative and monotonically nondecreasing:

0     x(1)     x(2)                x(n ).

this occurs in many practical problems. for example, x(t) might be a measure of wear or dete-
rioration, that can only get worse, or stay the same, as time t increases. we are also given that
x(t) = 0 for t     0.
we are given a noise-corrupted moving average of x, given by

k(cid:88)

y(t) =

h(   )x(t        ) + v(t),

t = 2, . . . , n + 1,

where v(t) are independent n (0, 1) random variables.

   =1

(a) show how to formulate the problem of    nding the maximum likelihood estimate of x, given
y, taking into account the prior assumption that x is nonnegative and monotonically nonde-
creasing, as a id76 problem. be sure to indicate what the problem variables
are, and what the problem data are.

(b) we now consider a speci   c instance of the problem, with problem data (i.e., n , k, h, and y)
given in the    le ml_estim_incr_signal_data.*. (this    le contains the true signal xtrue,
which of course you cannot use in creating your estimate.) find the maximum likelihood
estimate   xml, and plot it, along with the true signal. also    nd and plot the maximum likelihood
estimate   xml,free not taking into account the signal nonnegativity and monotonicity.
hints.
    matlab: the function conv (convolution) is overloaded to work with cvx.
    python: numpy has a function convolve which performs convolution. cvxpy has conv

which does the same thing for variables.

    julia: the function conv is overloaded to work with convex.jl.

6.7 relaxed and discrete a-optimal experiment design. this problem concerns the a-optimal experi-

ment design problem, described on page 387, with data generated as follows.

74

n = 5; % dimension of parameters to be estimated
p = 20; % number of available types of measurements
m = 30; % total number of measurements to be carried out
randn(   state   , 0);
v=randn(n,p); % columns are vi, the possible measurement vectors

solve the relaxed a-optimal experiment design problem,

(1/m) tr(cid:0)(cid:80)p

(cid:1)   1

minimize
subject to 1t    = 1,

i=1   ivivt
i
   (cid:23) 0,

with variable        rp. find the optimal point   (cid:63) and the associated optimal value of the relaxed
problem. this optimal value is a lower bound on the optimal value of the discrete a-optimal
experiment design problem,

tr(cid:0)(cid:80)p

(cid:1)   1

minimize
subject to m1 +        + mp = m, mi     {0, . . . , m},

i=1 mivivt
i

i = 1, . . . , p,

with variables m1, . . . , mp. to get a suboptimal point for this discrete problem, round the entries
in m  (cid:63) to obtain integers   mi. if needed, adjust these by hand or some other method to ensure that
they sum to m, and compute the objective value obtained. this is, of course, an upper bound on
the optimal value of the discrete problem. give the gap between this upper bound and the lower
bound obtained from the relaxed problem. note that the two objective values can be interpreted
as mean-square estimation error e(cid:107)  x     x(cid:107)2
2.

6.8 optimal detector design. we adopt here the notation of   7.3 of the book. explain how to design a
(possibly randomized) detector that minimizes the worst-case id203 of our estimate being o   
by more than one,

pwc = max

  

prob(|           |     2).

(the id203 above is under the distribution associated with   .)

carry out your method for the problem instance with data in off_by_one_det_data.m. give the
optimal detection id203 matrix d. compare the optimal worst-case id203 p (cid:63)
wc with the
worst-case id203 p ml

wc obtained using a maximum-likelihood detector.

6.9 experiment design with condition number objective. explain how to solve the experiment design
problem (  7.5) with the condition number cond(e) of e (the error covariance matrix) as the
objective to be minimized.

6.10 worst-case id203 of loss. two investments are made, with random returns r1 and r2. the
total return for the two investments is r1 + r2, and the id203 of a loss (including breaking
even, i.e., r1 + r2 = 0) is ploss = prob(r1 + r2     0). the goal is to    nd the worst-case (i.e.,
maximum possible) value of ploss, consistent with the following information. both r1 and r2 have
gaussian marginal distributions, with known means   1 and   2 and known standard deviations   1
and   2. in addition, it is known that r1 and r2 are correlated with correlation coe   cient   , i.e.,

e(r1       1)(r2       2) =     1  2.

75

your job is to    nd the worst-case ploss over any joint distribution of r1 and r2 consistent with the
given marginals and correlation coe   cient.

we will consider the speci   c case with data

  1 = 8,   2 = 20,

  1 = 6,

  2 = 17.5,

   =    0.25.

we can compare the results to the case when r1 and r2 are jointly gaussian. in this case we have

r1 + r2     n (  1 +   2,   2

1 +   2

2 + 2    1  2),

which for the data given above gives ploss = 0.050. your job is to see how much larger ploss can
possibly be.
this is an in   nite-dimensional optimization problem, since you must maximize ploss over an in   nite-
dimensional set of joint distributions. to (approximately) solve it, we discretize the values that r1
and r2 can take on, to n = 100 values r1, . . . , rn, uniformly spaced from r1 =    30 to rn = +70.
we use the discretized marginals p(1) and p(2) for r1 and r2, given by

k)(cid:1)
exp(cid:0)   (ri       k)2/(2  2
j=1 exp(cid:0)   (rj       k)2/(2  2
k)(cid:1) ,
(cid:80)n

p(k)
i = prob(rk = ri) =

for k = 1, 2, i = 1, . . . , n.

formulate the (discretized) problem as a id76 problem, and solve it. report the
maximum value of ploss you    nd. plot the joint distribution that yields the maximum value of ploss
using the matlab commands mesh and contour.
remark. you might be surprised at both the maximum value of ploss, and the joint distribution
that achieves it.

6.11 minimax linear    tting. consider a linear measurement model y = ax + v, where x     rn is a
vector of parameters to be estimated, y     rm is a vector of measurements, v     rm is a set of
measurement errors, and a     rm  n with rank n, with m     n. we know y and a, but we don   t
know v; our goal is to estimate x. we make only one assumption about the measurement error v:
(cid:107)v(cid:107)         .
we will estimate x using a linear estimator   x = by; we must choose the estimation matrix b    
rn  m. the estimation error is e =   x     x. we will choose b to minimize the maximum possible
value of (cid:107)e(cid:107)   , where the maximum is over all values of x and all values of v satisfying (cid:107)v(cid:107)         .

(a) show how to    nd b via id76.

(b) numerical example. solve the problem instance given in minimax_fit_data.m. display the
  x you obtain and report (cid:107)  x     xtrue(cid:107)   . here xtrue is the value of x used to generate the
measurement y; it is given in the data    le.

6.12 cox proportional hazards model. let t be a continuous random variable taking on values in r+.
we can think of t as modeling an event that takes place at some unknown future time, such as
the death of a living person or a machine failure.
the survival function is s(t) = prob(t     t), which satis   es s(0) = 1, s(cid:48)(t)     0, and limt       s(t) =
0. the hazard rate is given by   (t) =    s(cid:48)(t)/s(t)     r+, and has the following interpretation: for

76

small    > 0,   (t)   is approximately the id203 of the event occurring in [t, t +   ], given that it
has not occurred up to time t. the survival function can be expressed in terms of the hazard rate:

(cid:90) t

(cid:18)

   

(cid:19)

s(t) = exp

  (   ) d  

.

(the hazard rate must have in   nite integral over [0,   ).)
the cox proportional hazards model gives the hazard rate as a function of some features or ex-
planatory variables (assumed constant in time) x     rn. in particular,    is given by

0

  (t) =   0(t) exp(wt x),

where   0 (which is nonnegative, with in   nite integral) is called the baseline hazard rate, and w     rn
is a vector of model parameters. (the name derives from the fact that   (t) is proportional to
exp(wixi), for each i.)
now suppose that we have observed a set of independent samples, with event times tj and feature
values xj, for j = 1, . . . , n . in other words, we observe that the event with features xj occurred at
time tj. you can assume that the baseline hazard rate   0 is known. show that maximum likelihood
estimation of the parameter w is a id76 problem.

remarks. id173 is typically included in cox proportional hazards    tting; for example,
adding (cid:96)1 id173 yields a sparse model, which selects the features to be used. the basic
cox proportional hazards model described here is readily extended to include discrete times of the
event, censored measurements (which means that we only observe t to be in an interval), and the
e   ects of features that can vary with time.

6.13 id113 for an a   nely transformed distribution. let z be a random variable
on rn with density pz(u) = exp     ((cid:107)u(cid:107)2), where    : r     r is convex and increasing. examples of
such distributions include the standard normal n (0,   2i), with   (u) = (u)2
+ +   , and the multivari-
able laplacian distribution, with   (u) = (u)+ +   , where    and    are normalizing constants, and
(a)+ = max{a, 0}. now let x be the random variable x = az + b, where a     rn  n is nonsingular.
the distribution of x is parametrized by a and b.

suppose x1, . . . , xn are independent samples from the distribution of x. explain how to    nd a
maximum likelihood estimate of a and b using id76.
if you make any further
assumptions about a and b (beyond invertiblility of a), you must justify it.

hint. the density of x = az + b is given by

| det a| pz(a   1(v     b)).
6.14 a simple map problem. we seek to estimate a point x     r2

px(v) =

1

p(x) = exp   (x1 + x2), based on the measurements

+, with exponential prior density

y1 = x1 + v1,

y2 = x2 + v2,

y3 = x1     x2 + v3,

where v1, v2, v3 are iid n (0, 1) random variables (also independent of x). a na    ve estimate of x is
given by   xnaive = (y1, y2).

77

(a) explain how to    nd the map estimate of x, given the observations y1, y2, y3.
(b) generate 100 random instances of x and y, from the given distributions. for each instance,
   nd the map estimate   xmap and the na    ve estimate xnaive. give a scatter plot of the map
estimation error, i.e.,   xmap   x, and another scatter plot of the na    ve estimation error,   xnaive   x.
6.15 minimum possible maximum correlation. let z be a random variable taking values in rn, and let
       sn
++ be its covariance matrix. we do not know   , but we do know the variance of m linear
functions of z. speci   cally, we are given nonzero vectors a1, . . . , am     rn and   1, . . . ,   m > 0 for
which

for i (cid:54)= j the correlation of zi and zj is de   ned to be

var(at

i z) =   2
i ,

i = 1, . . . , m.

  ij(cid:112)  ii  jj

.

  ij =

let   max = maxi(cid:54)=j |  ij| be the maximum (absolute value) of the correlation among entries of z. if
  max is large, then at least two components of z are highly correlated (or anticorrelated).

(a) explain how to    nd the smallest value of   max that is consistent with the given information,
using convex or quasiid76. if your formulation involves a change of variables
or other transformation, justify it.

(b) the    le correlation_bounds_data.* contains   1, . . . ,   m and the matrix a with columns
a1, . . . , am. find the minimum value of   max that is consistent with this data. report your
minimum value of   max, and give a corresponding covariance matrix    that achieves this value.
you can report the minimum value of   max to an accuracy of 0.01.

6.16 direct standardization. consider a random variable (x, y)     rn  r, and n samples (x1, y1), . . . , (xn , yn )    

rn    r, which we will use to estimate the (marginal) distribution of y. if the given samples were
chosen according to the joint distribution of (x, y), a reasonable estimate for the distribution of y
would be the uniform empirical distribution, which takes on values y1, . . . , yn each with probabil-
ity 1/n . (if y is boolean, i.e., y     {0, 1}, we are using the fraction of samples with y = 1 as our
estimate of prob(y = 1).)
the bad news is that the samples (x1, y1), . . . , (xn , yn )     rn    r were not chosen from the
distribution of (x, y), but instead from another (unknown, but presumably similar) distribution.
the good news is that we know e x, the expected value of x. we will use our knowledge of e x,
together with the samples, to estimate the distribution of y. direct standardization replaces the
uniform empirical distribution with a weighted one, which takes on values yi with id203   i,
where    (cid:23) 0, 1t    = 1. the weights or sample probabilities    are found by maximizing the id178
i=1   i log   i, subject to the requirement that the weighted sample expected value of x matches
i=1   ixi = e x.

   (cid:80)n
the known probabilities of x in the distribution, e x. this can be expressed as (cid:80)n

(both xi and e x are known.)

(a) explain why choosing    is a id76 problem.
(b) consider the simple case with n = 1, and x     {0, 1}, so e x = prob(x = 1). find the optimal
sample weights   (cid:63)
i (analytically). explain your solution in the following case. the samples are
people, with x = 0 meaning the person is male, and x = 1 meaning the person is female. the

78

overall population is known to have equal numbers of females and males, but in the sample
population the male : female proportions are 0.7 : 0.3.

(c) the data in direct std data.* contain the samples x(i) and y(i), as well as e x. find the
weights   (cid:63), and report the weighted empirical distribution. on the same plot, compare the
cumulative distributions of

    the uniform empirical distribution,
    the weighted empirical distribution using   (cid:63), and
    the true distribution of y.

the true and empirical distributions are provided in the data    le.
elements of p true give prob(y = 1) up to prob(y = 20), in order).
note: julia users might want to use the ecos solver, by including using ecos, and solving
by using solve!(prob, ecossolver()).

(for example, the 20

note: you don   t need to know this to solve the problem, but the data for part (c) are real. the
random variable x is a vector of a student   s gender, age, and mother   s and father   s educational
attainment, and y is the student   s score on a standardized test.

6.17 id113 of a discrete log-concave distribution. suppose random variable
x     {1, . . . , n} has unknown id203 mass function p     rn, where prob(x = k) = pk,
k = 1, . . . , n. suppose we know that the id203 mass function is log-concave, which means

prob(x = k)    (cid:112)prob(x = k     1) prob(x = k + 1),

k = 2, . . . , n     1.

let x(1), . . . , x(n ) be n independent and identically distributed (iid) samples of x.

(a) explain how to compute a maximum likelihood estimate of the log-concave id203 mass

function p, given the n observations described above.

(b) carry out your procedure on the data found in logccv_id113_data.*. plot the empirical
id203 mass function (which is the maximum likelihood estimate without the log-concave
assumption), your maximum likelihood estimate (with the log-concave assumption), and the
true id203 mass function found in the data    le. comment brie   y on the result.

6.18 id113 of a log-concave distribution. we have a random variable x which
takes values in {1, . . . , n}. it has a distribution p     rn, with prob(x = i) = pi. however, we
do not know p, and would like to determine it based on n independent samples of x. in those
i mi = n . the likelihood

n samples, let mi denote the number of samples for which x = i, so(cid:80)

function is then

n(cid:89)

l(p) =

pmi
i

.

we know that the distribution p is log-concave. recall a discrete function f : z     r is called
concave if f (i)     (1/2)(f (i     1) + f (i + 1)). for functions f de   ned on {1, . . . , n} we require this
constraint to hold at i = 2, . . . , n    1. the function p is called log-concave if log p is concave. given
m1, . . . , mn, we would like to    nd the log-concave distribution p of maximum likelihood.

i=1

(a) formulate this problem as a id76 problem.

79

(b) we have n = 13 and observe

m =(cid:0) 1, 5, 6, 15, 18, 20, 22, 11, 22, 8, 9, 4, 2 (cid:1) .

carry out your method from part (a) on this data. plot mi/n (the empirical distribution)
and your estimate of p.

6.19 rank one nonnegative matrix approximation. we are given some entries of an m   n matrix a with
positive entries, and wish to approximate it as the outer product of vectors x and y with positive
entries, i.e., xyt . we will use the average relative deviation between the entries of a and xyt as
our approximation criterion,

m(cid:88)

n(cid:88)

i=1

j=1

1
mn

r(aij, xiyj),

where r is the relative deviation of two positive numbers, de   ned as

r(u, v) = max{u/v, v/u}     1.

if we scale x by the positive number   , and y by 1/  , the outer product (  x)(y/  )t is the same
as xyt , so we will normalize x as 1t x = 1.

the data in the problem consists of some of the values of a. speci   cally, we are given aij for
(i, j)             {1, . . . , m}    {1, . . . , n}. thus, your goal is to    nd x     rm
++ (which satis   es 1t x = 1),
y     rn
++, and aij > 0 for (i, j) (cid:54)       , to minimize the average relative deviation between the entries
of a and xyt .

(a) explain how to solve this problem using convex or quasiid76.

(b) solve the problem for the data given in rank_one_nmf_data.*. this includes a matrix a, and
a set of indexes omega for the given entries. (the other entries of a are    lled in with zeros.)
report the optimal average relative deviation between a and xyt . give your values for x1,
y1, and a11 = x1y1.

6.20 post-modern portfolio optimization metrics. let r     rt denote a time series (say, daily) of in-
vestment returns, i.e., the increase in value divided by initial value. the value of the investment
(typically, a portfolio) is the time series vector v     rt de   ned by the recursion

vt+1 = vt(1 + rt),

t = 0, . . . , t     1,

with v0 a given positive initial value. here we are compounding the investment returns. we will
assume that all returns satisfy rt >    1, which implies that v (cid:31) 0. we de   ne the high-water value
or last high value as

the value and high-water value are functions of r.

ht = max
     t

v   ,

t = 1, . . . , t.

portfolio theory as originally developed by markowitz in the 1950s takes into account the mean
return    = 1t r/t and variance (risk)   2 = (cid:107)r       1(cid:107)2
2/t . the idea of using a mathematical
approach to choose a portfolio to maximize return and minimize risk came to be called modern
portfolio theory. of course, it   s not so modern nowadays.

80

researchers later suggested various alternative metrics that are (supposedly) closer to what we
really care about than the mean return and risk. the use of these metrics was dubbed (or mar-
keted as) post-modern portfolio theory. some of these so-called post-modern portfolio metrics are
described below, along with a parenthetical note about whether we   d like to minimize or maximize
the metric.

for each metric we wish to minimize, determine if it is a convex or quasiconvex function of r, or
neither. for each metric we wish to maximize, determine if it is a concave or quasiconcave function
of r, or neither. for example, the mean return (which we wish to maximize) is a concave function
of r, and the risk (variance, which we wish to minimize) is a convex function of r. when the metric
is convex or quasiconvex (or concave or quasiconcave), justify your answer. when it is neither, you
can simply state this; you do not need to produce a counterexample. we will deduct some points
if your answer is not strong enough, e.g., if you assert that a metric is quasiconvex, but it is in fact
convex.

growth rate of vt.

(a) logarithmic or kelly growth rate.

(b) downside variance. (minimize.) the downside variance is (1/t )(cid:80)

t log(1 + rt). this is the average
t(rt       )2   , where (u)    =
max{   u, 0}, and    is the mean return. this assesses a penalty for a return below the average
(the    downside   ), but not for a return above the average.

(maximize.)

(c) maximum drawdown. (minimize.) the drawdown at period t is de   ned as dt = (ht     vt)/ht.

the maximum drawdown is de   ned as maxt dt.

(d) maximum consecutive days under water. (minimize.) a time period t is called under water
if vt < ht, i.e., the current value is less than the last high. maximum consecutive days under
water means just that, i.e., the maximum number of consecutive days under water.

remark. many other post-modern metrics can derived be from, or are related to, the ones described
above. examples include the sortino, calmar, and information ratios. you can thank the ee364a
sta    for refraining from asking about these.

(1/t )(cid:80)

6.21 transforming to a normal distribution. we are given n samples xi     r from an unknown distri-
bution. we seek an increasing piecewise-a   ne function    : r     r for which yi =   (xi) has a
distribution close to n (0, 1). in other words, the nonlinear transformation x (cid:55)    y =   (x) (approx-
imately) transforms the given distribution to a standard normal distribution.
you can assume that the samples are distinct and sorted, i.e., x1 < x2 <        < xn, and therefore
we also have y1 < y2 <        < yn. the empirical cdf (cumulative distribution function) of yi is the
piecewise-constant function f : r     r given by

          0

f (z) =

k/n yk     z < yk+1,
1

z < y1,
z     yn.

k = 1, . . . , n     1,

the kolmogorov-smirnov distance between the empirical distribution of yi and the standard normal
distribution is given by

|f (z)       (z)|,

d = sup

z

81

where    is the cdf of an n (0, 1) random variable. we will use d as our measure of how close the
transformed distribution is to normal. note that d can be as small as 1/(2n) (but no smaller), by
choosing yi =      1((i     1/2)/n).
note that d only depends on the n numbers y1, . . . , yn. from these numbers we extend    to a
function on r using linear interpolation between these values, and extending outside the interval
[x1, xn] using the same slopes as the    rst and last segments, respectively. so y1, . . . , yn determine
  .

our id173 (measure of complexity) of    is

(cid:12)(cid:12)(cid:12)(cid:12) yi+1     yi

xi+1     xi

n   1(cid:88)

i=2

r =

(cid:12)(cid:12)(cid:12)(cid:12) .

    yi     yi   1
xi     xi   1

this is the sum of the absolute values of the change in slope of   . note that r = 0 if and only if
   has no kinks, i.e., is a   ne.
we will choose yi (which de   nes   ) by minimizing r, subject to d     dmax, where dmax     1/(2n)
is a parameter. it can be shown that the condition yi < yi+1 will hold automatically; but if you are
nervous about this, you are welcome to add the constraint yi +       yi+1, where   is a small positive
number.

(a) explain how to solve this problem using convex or quasiid76. if your formu-

lation involves a change of variables or other transformation, justify it.

(b) the    le transform_to_normal_data.* contains the vector x (in sorted order) and its length
n. use the method of part (a) to    nd the optimal    (i.e., y) for dmax = 0.05. plot the empirical
cdf of the original data x and the normal cdf    on one plot, the empirical cdf of the
transformed data y and the normal cdf    on another plot, and the optimal transformation
   on a third plot. report the optimal value of r.
hints. in python and julia, you should use the (default) ecos solver to avoid warnings about
inaccurate solutions. you can evaluate the normal cdf    using normcdf.m/norminv.m (mat-
lab), scipy.stats.norm.cdf/ppf (python), or normcdf/norminvcdf in statsfuns.jl (julia).
to plot the empirical cdfs of x and y, you are welcome to use the basic plot functions, which
connect adjacent points with lines. but if you   d like to create step function style plots, you
can use ecdf.m (matlab), matplotlib.pyplot.step (python), or step in pyplot.jl (julia).

6.22 arx model with sparse excitation. consider a time series y = (y1, . . . , yt ). the auto-regressive

with excitation (arx) model has the form

yt+1 =   1yt +        +   m yt   m +1 + xt+1,

t = m, . . . , t     1,

where        rm are the coe   cients, and xm +1, . . . , xt is the excitation or input signal. neither   
nor x     rt are known. (the excitation values x1, . . . , xm do not enter the model.)
(a) the classical assumption is that xt are iid n (0,   2) random variables. explain how to    nd

the maximum likelihood estimate of        rm , given y.

(b) now assume that the excitation signal x is sparse. suggest a simple method, based on convex
optimization, for estimating   . remark. this is a common model of various phenomena. in
one example y is an acoustic signal of a voiced phoneme, and x is the glottal excitation. and
no, you do not need to know this.

82

(c) apply the methods of parts (a) and (b) to the signal given in arx_fit_data.*, with m = 10
and t = 200. the data    le also contains the    true    coe   cient   true from which the data is
generated. compare the two estimates of    with the true value, by plotting all three.
hint. you may use the fact that x can be expressed in terms of the convolution of b = (1,     )
and y, de   ned as

min{i,m}(cid:88)

(b     y)i =

bjyi   j+1,

i = 1, . . . , t + m.

the function conv(b,y) is overloaded to work with cvx*. (warning: b     y is not x; but x
can be written in terms of b     y.)

j=1

6.23 blending overlapping covariance matrices. we consider the problem of constructing a covariance
matrix r     sn
+ from two (not necessarily consistent) estimates of submatrices s and t . we order
the indices in the underlying random variable so that the    rst n1 entries correspond to those
in the    rst submatrix but not the second, the next n2 entries correspond to the entries in both
submatrices, and the last n3 entries are those in the second submatrix but not the    rst. we have
n1 + n2 + n3 = n, and we assume all three are positive. we partition the matrix r as

r =

rt
rt

12 r22 r23
13 rt
23 r33

       r11 r12 r13
(cid:20) r11 r12
(cid:20) r22 r23

       .
(cid:20) s11 s12
(cid:20) t22 t23

(cid:21)
(cid:21)

    s =

12 r22

12 s22

rt

st

    t =

rt

23 r33

t t
23 t33

(cid:21)
(cid:21)

.

we wish to choose r     sn

+ so that

and

r(1) =

r(2) =

+

are given.

(note the non-standard labeling of the block indices in t .) you can assume that s     sn1+n2
t     sn2+n3
roughly speaking, your job is to guess the six submatrices rij for i     j. for four of these,
r11, r12, r23, and r33, you have only one piece of data to work with, i.e., s11, s12, t23, and t33,
respectively. for one of them, r22, you have two pieces of data to work with, i.e., s22 and t22. for
one submatrix, r13, you have no pieces of data to work with.

and

+

(a) a simple method. based on the given data s and t , our guess of r is

r11 = s11,
r22 = (1/2)(s22 + t22),

r12 = s12,
r23 = t23,

r13 = 0,
r33 = t33.

for the four submatrices for which you have only one piece of data, we simply use that data
as our guess. for the one submatrix for which we have two pieces of data, we average the two
values. for the one submatrix for which we have no data, we guess the zero matrix.
show by a speci   c numerical example that this simple method can yield an unacceptable value
of r. (no, we will not be more speci   c about what we mean by this; part of the problem
is to    gure out what we mean. also, we will deduct points from examples that are more
complicated than they need to be.)

83

(b) id76 to the rescue. suppose we choose r by solving the id76

problem

minimize
subject to r (cid:23) 0.

(cid:107)r(1)     s(cid:107)2

f + (cid:107)r(2)     t(cid:107)2

f + (cid:107)r13(cid:107)2

f

here the variable is r     sn, and (cid:107)u(cid:107)f = (tr(u t u ))1/2 is the frobenius norm of a matrix.
let rsim be the estimate of r obtained using the simple method in part (a). show that if
rsim (cid:23) 0, then it is the solution of this problem.

(c) apply the method described in part (b) to the speci   c numerical example you provided in

part (a), and check (numerically) that the result r(cid:63) is now acceptable.

84

7 geometry

7.1 e   ciency of maximum volume inscribed ellipsoid.

in this problem we prove the following geo-
metrical result. suppose c is a polyhedron in rn, symmetric about the origin, and described
as

c = {x |     1     at

i x     1, i = 1, . . . , p}.

let

with q     sn
the ellipsoid

e = {x | xt q   1x     1},

++, be the maximum volume ellipsoid with center at the origin, inscribed in c. then

   
ne = {x | xt q   1x     n}
   
(i.e., the ellipsoid e, scaled by a factor
(a) show that the condition e     c is equivalent to at
(b) the volume of e is proportional to (det q)1/2, so we can    nd the maximum volume ellipsoid

i qai     1 for i = 1, . . . , p.

n about the origin) contains c.

e inside c by solving the convex problem

minimize
subject to at

log det q   1
i qai     1,

i = 1. . . . , p.

(28)

the variable is the matrix q     sn and the domain of the objective function is sn
derive the lagrange dual of problem (28).

++.

(c) note that slater   s condition for (28) holds (at

i qai < 1 for q =  i and   > 0 small enough),
so we have strong duality, and the kkt conditions are necessary and su   cient for optimality.
what are the kkt conditions for (28)?
suppose q is optimal. use the kkt conditions to show that
x     c =    xt q   1x     n.

in other words c        

ne, which is the desired result.

7.2 euclidean distance matrices. a matrix x     sn is a euclidean distance matrix if its elements xij

can be expressed as

xij = (cid:107)pi     pj(cid:107)2
2,

i, j = 1, . . . , n,

for some vectors p1, . . . , pn (of arbitrary dimension). in this exercise we prove several classical
characterizations of euclidean distance matrices, derived by i. schoenberg in the 1930s.

(a) show that x is a euclidean distance matrix if and only if

x = diag(y )1t + 1 diag(y )t     2y

(29)

for some matrix y     sn
+ (the symmetric positive semide   nite matrices of order n). here,
diag(y ) is the n-vector formed from the diagonal elements of y , and 1 is the n-vector with
all its elements equal to one. the equality (29) is therefore equivalent to

xij = yii + yjj     2yij,

i, j = 1, . . . , n.

hint. y is the gram matrix associated with the vectors p1, . . . , pn, i.e., the matrix with
elements yij = pt

i pj.

85

(b) show that the set of euclidean distance matrices is a convex cone.

(c) show that x is a euclidean distance matrix if and only if

diag(x) = 0,

the subscripts refer to the partitioning

x =

x22     x211t     1x t

21 (cid:22) 0.

(cid:20) x11 x t

21
x21 x22

(cid:21)

(30)

with x21     rn   1, and x22     sn   1.
hint. the de   nition of euclidean distance matrix involves only the distances (cid:107)pi     pj(cid:107)2, so
the origin can be chosen arbitrarily. for example, it can be assumed without loss of generality
that p1 = 0. with this assumption there is a unique gram matrix y for a given euclidean
distance matrix x. find y from (29), and relate it to the lefthand side of the inequality (30).

(d) show that x is a euclidean distance matrix if and only if

diag(x) = 0,

(i     1
n

11t )x(i     1
n

11t ) (cid:22) 0.

(31)

hint. use the same argument as in part (c), but take the mean of the vectors pk at the origin,
i.e., impose the condition that p1 + p2 +        + pn = 0.

(e) suppose x is a euclidean distance matrix. show that the matrix w     sn with elements

wij = e   xij ,

i, j = 1, . . . , n,

is positive semide   nite.
hint. use the following identity from id203 theory. de   ne z     n (0, i). then

for all x, where i =
istic function of a multivariate normal distribution.)

      1 and e denotes expectation with respect to z. (this is the character-

e eizt x = e    1

2(cid:107)x(cid:107)2

2

7.3 minimum total covering ball volume. we consider a collection of n points with locations x1, . . . , xn    
rk. we are also given a set of m groups or subsets of these points, g1, . . . , gm     {1, . . . , n}. for
each group, let vi be the volume of the smallest euclidean ball that contains the points in group
gi. (the volume of a euclidean ball of radius r in rk is akrk, where ak is known constant that
is positive but otherwise irrelevant here.) we let v = v1 +        + vm be the total volume of these
minimal covering balls.

the points xk+1, . . . , xn are    xed (i.e., they are problem data). the variables to be chosen are
x1, . . . , xk. formulate the problem of choosing x1, . . . , xk, in order to minimize the total minimal
covering ball volume v , as a id76 problem. be sure to explain any new variables
you introduce, and to justify the convexity of your objective and inequality constraint functions.

7.4 maximum-margin multiclass classi   cation. in an m-category pattern classi   cation problem, we are
given m sets ci     rn. set ci contains ni examples of feature vectors in class i. the learning
problem is to    nd a decision function f : rn     {1, 2, . . . , m} that maps each training example to
its class, and also generalizes reliably to feature vectors that are not included in the training sets
ci.

86

(a) a common type of decision function for two-way classi   cation is

(cid:26) 1 if at x + b > 0

2 if at x + b < 0.

f (x) =

in the simplest form,    nding f is equivalent to solving a feasibility problem:    nd a and b such
that

at x + b > 0
at x + b < 0

if x     c1
if x     c2.

since these strict inequalities are homogeneous in a and b, they are feasible if and only if the
nonstrict inequalities

at x + b     1
at x + b        1

if x     c1
if x     c2

are feasible. this is a feasibility problem with n1 + n2 linear inequalities in n + 1 variables a,
b.
as an extension that improves the robustness (i.e., generalization capability) of the classi   er,
we can impose the condition that the decision function f classi   es all points in a neighborhood
of c1 and c2 correctly, and we can maximize the size of the neighborhood. this problem can
be expressed as

maximize
t
subject to at x + b > 0 if dist(x, c1)     t,
at x + b < 0 if dist(x, c2)     t,

where dist(x, c) = miny   c (cid:107)x     y(cid:107)2.
this is illustrated in the    gure. the centers of the shaded disks form the set c1. the centers
of the other disks form the set c2. the set of points at a distance less than t from ci is the
union of disks with radius t and center in ci. the hyperplane in the    gure separates the two
expanded sets. we are interested in expanding the circles as much as possible, until the two
expanded sets are no longer separable by a hyperplane.

since the constraints are homogeneous in a, b, we can again replace them with nonstrict
inequalities

maximize
t
subject to at x + b     1 if dist(x, c1)     t,
at x + b        1 if dist(x, c2)     t.

(32)

87

hh1h2the variables are a, b, and t.

(b) next we consider an extension to more than two classes.

if m > 2 we can use a decision

function

f (x) = argmax
i=1,...,m

(at

i x + bi),

parameterized by m vectors ai     rn and m scalars bi. to    nd f , we can solve a feasibility
problem:    nd ai, bi, such that

at
i x + bi > max
j(cid:54)=i

(at

j x + bj)

if x     ci,

i = 1, . . . , m,

or, equivalently,

i x + bi     1 + max
at
j(cid:54)=i

(at

j x + bj)

if x     ci,

i = 1, . . . , m.

similarly as in part (a), we consider a robust version of this problem:

maximize
subject to at

t

i x + bi     1 + maxj(cid:54)=i (at

j x + bj) if dist(x, ci)     t,

(33)

the variables in the problem are ai     rn, bi     r, i = 1, . . . , m, and t.

i = 1, . . . , m.

formulate the optimization problems (32) and (33) as socps (if possible), or as quasiconvex
optimization problems involving socp feasibility problems (otherwise).

7.5 three-way linear classi   cation. we are given data

x(1), . . . , x(n ),

y(1), . . . , y(m ),

z(1), . . . , z(p ),

three nonempty sets of vectors in rn. we wish to    nd three a   ne functions on rn,

fi(z) = at

i z     bi,

i = 1, 2, 3,

that satisfy the following properties:

f1(x(j)) > max{f2(x(j)), f3(x(j))},
f2(y(j)) > max{f1(y(j)), f3(y(j))},
f3(z(j)) > max{f1(z(j)), f2(z(j))},

j = 1, . . . , n,
j = 1, . . . , m,
j = 1, . . . , p.

in words: f1 is the largest of the three functions on the x data points, f2 is the largest of the three
functions on the y data points, f3 is the largest of the three functions on the z data points. we
can give a simple geometric interpretation: the functions f1, f2, and f3 partition rn into three
regions,

r1 = {z | f1(z) > max{f2(z), f3(z)}},
r2 = {z | f2(z) > max{f1(z), f3(z)}},
r3 = {z | f3(z) > max{f1(z), f2(z)}},

88

de   ned by where each function is the largest of the three. our goal is to    nd functions with
x(j)     r1, y(j)     r2, and z(j)     r3.
pose this as a id76 problem. you may not use strict inequalities in your formulation.

solve the speci   c instance of the 3-way separation problem given in sep3way_data.m, with the
columns of the matrices x, y and z giving the x(j), j = 1, . . . , n , y(j), j = 1, . . . , m and z(j), j =
1, . . . , p . to save you the trouble of plotting data points and separation boundaries, we have
included the plotting code in sep3way_data.m. (note that a1, a2, a3, b1 and b2 contain arbitrary
numbers; you should compute the correct values using cvx.)

7.6 feature selection and sparse linear separation. suppose x(1), . . . , x(n ) and y(1), . . . , y(m ) are two
given nonempty collections or classes of vectors in rn that can be (strictly) separated by a hyper-
plane, i.e., there exists a     rn and b     r such that

at x(i)     b     1,

i = 1, . . . , n,

at y(i)     b        1,

i = 1, . . . , m.

this means the two classes are (weakly) separated by the slab
s = {z | |at z     b|     1},

which has thickness 2/(cid:107)a(cid:107)2. you can think of the components of x(i) and y(i) as features; a and b
de   ne an a   ne function that combines the features and allows us to distinguish the two classes.

to    nd the thickest slab that separates the two classes, we can solve the qp

(cid:107)a(cid:107)2
minimize
subject to at x(i)     b     1,
at y(i)     b        1,

i = 1, . . . , n

i = 1, . . . , m,

with variables a     rn and b     r. (this is equivalent to the problem given in (8.23), p424,   8.6.1;
see also exercise 8.23.)

in this problem we seek (a, b) that separate the two classes with a thick slab, and also has a sparse,
i.e., there are many j with aj = 0. note that if aj = 0, the a   ne function at z     b does not depend
on zj, i.e., the jth feature is not used to carry out classi   cation. so a sparse a corresponds to a
classi   cation function that is parsimonious; it depends on just a few features. so our goal is to    nd
an a   ne classi   cation function that gives a thick separating slab, and also uses as few features as
possible to carry out the classi   cation.

this is in general a hard combinatorial (bi-criterion) optimization problem, so we use the standard
heuristic of solving

(cid:107)a(cid:107)2 +   (cid:107)a(cid:107)1
minimize
subject to at x(i)     b     1,
at y(i)     b        1,

i = 1, . . . , n

i = 1, . . . , m,

where        0 is a weight vector that controls the trade-o    between separating slab thickness and
(indirectly, through the (cid:96)1 norm) sparsity of a.
get the data in sp_ln_sp_data.m, which gives x(i) and y(i) as the columns of matrices x and y,
respectively. find the thickness of the maximum thickness separating slab. solve the problem above
for 100 or so values of    over an appropriate range (we recommend log spacing). for each value,

89

record the separation slab thickness 2/(cid:107)a(cid:107)2 and card(a), the cardinality of a (i.e., the number
of nonzero entries).
in computing the cardinality, you can count an entry aj of a as zero if it
satis   es |aj|     10   4. plot these data with slab thickness on the vertical axis and cardinality on the
horizontal axis.

use this data to choose a set of 10 features out of the 50 in the data. give the indices of the features
you choose. you may have several choices of sets of features here; you can just choose one. then
   nd the maximum thickness separating slab that uses only the chosen features. (this is standard
practice: once you   ve chosen the features you   re going to use, you optimize again, using only those
features, and without the (cid:96)1 id173.

7.7 thickest slab separating two sets. we are given two sets in rn: a polyhedron

c1 = {x | cx (cid:22) d},

de   ned by a matrix c     rm  n and a vector d     rm, and an ellipsoid

c2 = {p u + q | (cid:107)u(cid:107)2     1},

de   ned by a matrix p     rn  n and a vector q     rn. we assume that the sets are nonempty and
that they do not intersect. we are interested in the optimization problem

inf x   c1 at x     supx   c2 at x

maximize
subject to (cid:107)a(cid:107)2 = 1.

with variable a     rn.
explain how you would solve this problem. you can answer the question by reducing the problem
to a standard problem class (lp, qp, socp, sdp, . . . ), or by describing an algorithm to solve it.

remark. the geometrical interpretation is as follows. if we choose

b =

1
2

( inf
x   c1

at x + sup
x   c2

at x),

then the hyperplane h = {x | at x = b} is the maximum margin separating hyperplane separating
c1 and c2. alternatively, a gives us the thickest slab that separates the two sets.

7.8 bounding object position from multiple camera views. a small object is located at unknown position

x     r3, and viewed by a set of m cameras. our goal is to    nd a box in r3,

b = {z     r3 | l (cid:22) z (cid:22) u},

for which we can guarantee x     b. we want the smallest possible such bounding box. (although
it doesn   t matter, we can use volume to judge    smallest    among boxes.)
now we describe the cameras. the object at location x     r3 creates an image on the image plane
of camera i at location

1

(aix + bi)     r2.

vi =

ct
i x + di

90

the matrices ai     r2  3, vectors bi     r2 and ci     r3, and real numbers di     r are known, and
i x + di > 0. the 3    4 matrix
depend on the camera positions and orientations. we assume that ct

(cid:20) ai

ct
i

(cid:21)

bi
di

pi =

is called the camera matrix (for camera i). it is often (but not always) the case the that the    rst 3
columns of pi (i.e., ai stacked above ct
i ) form an orthogonal matrix, in which case the camera is
called orthographic.

we do not have direct access to the image point vi; we only know the (square) pixel that it lies in.
in other words, the camera gives us a measurement   vi (the center of the pixel that the image point
lies in); we are guaranteed that

(cid:107)vi       vi(cid:107)          i/2,

where   i is the pixel width (and height) of camera i. (we know nothing else about vi; it could be
any point in this pixel.)
given the data ai, bi, ci, di,   vi,   i, we are to    nd the smallest box b (i.e.,    nd the vectors l and
u) that is guaranteed to contain x. in other words,    nd the smallest box in r3 that contains all
points consistent with the observations from the camera.

(a) explain how to solve this using convex or quasiid76. you must explain any
transformations you use, any new variables you introduce, etc. if the convexity or quasicon-
vexity of any function in your formulation isn   t obvious, be sure justify it.

(b) solve the speci   c problem instance given in the    le camera_data.m. be sure that your    nal

numerical answer (i.e., l and u) stands out.

7.9 triangulation from multiple camera views. a projective camera can be described by a linear-

fractional function f : r3     r2,

f (x) =

1

ct x + d

(ax + b),

with

(cid:21)

(cid:20) a

ct

rank(

) = 3.

dom f = {x | ct x + d > 0},

the domain of f consists of the points in front of the camera.

before stating the problem, we give some background and interpretation, most of which will not
be needed for the actual problem.

91

the 3    4-matrix

(cid:21)

(cid:20) a b

ct

d

p =

is called the camera matrix and has rank 3. since f is invariant with respect to a scaling of p , we
can normalize the parameters and assume, for example, that (cid:107)c(cid:107)2 = 1. the numerator ct x + d is
then the distance of x to the plane {z | ct z + d = 0}. this plane is called the principal plane. the
point

(cid:20) a

ct

(cid:21)   1(cid:20) b

(cid:21)

d

xc =    

lies in the principal plane and is called the camera center. the ray {xc +   c |        0}, which is
perpendicular to the principal plane, is the principal axis. we will de   ne the image plane as the
plane parallel to the principal plane, at a unit distance from it along the principal axis.
the point x(cid:48) in the    gure is the intersection of the image plane and the line through the camera
center and x, and is given by

x(cid:48) = xc +

1

ct (x     xc)

(x     xc).

using the de   nition of xc we can write f (x) as

f (x) =

1

ct (x     xc)

a(x     xc) = a(x(cid:48)     xc) = ax(cid:48) + b.

this shows that the mapping f (x) can be interpreted as a projection of x on the image plane to
get x(cid:48), followed by an a   ne transformation of x(cid:48). we can interpret f (x) as the point x(cid:48) expressed
in some two-dimensional coordinate system attached to the image plane.
in this exercise we consider the problem of determining the position of a point x     r3 from its
image in n cameras. each of the cameras is characterized by a known linear-fractional mapping
fk and camera matrix pk:

(cid:20) ak

ct
k

(cid:21)

bk
dk

,

k = 1, . . . , n.

fk(x) =

1

ct
k x + dk

(akx + bk),

pk =

92

cxfmibthe image of the point x in camera k is denoted y(k)     r2. due to camera imperfections and
calibration errors, we do not expect the equations fk(x) = y(k), k = 1, . . . , n , to be exactly
solvable. to estimate the point x we therefore minimize the maximum error in the n equations by
solving

minimize g(x) = max

k=1,...,n

(cid:107)fk(x)     y(k)(cid:107)2.

(34)

(a) show that (34) is a quasiid76 problem. the variable in the problem is x     r3.

the functions fk (i.e., the parameters ak, bk, ck, dk) and the vectors y(k) are given.

(b) solve the following instance of (34) using cvx (and bisection): n = 4,

p1 =

0 1 0 0
0 0 1 0

       1 0 0 0
       1
(cid:21)

1 1    10
   1
0
1 1
   1    1 1
10

(cid:20) 1.01

       ,
       ,
(cid:21)

,

y(2) =

1.01

       ,

p2 =

0 0
0 1

0
0
0
0    1 0 10

p4 =

1 1
0    1 1
   1

0
0
0 0 10

       1
       0
(cid:20) 0.95

1.05

(cid:21)

,

,

y(3) =

y(4) =

       ,
(cid:20) 2.04

0.00

(cid:21)

.

p3 =

(cid:20) 0.98

0.93

y(1) =

you can terminate the bisection when a point is found with accuracy g(x)    p(cid:63)     10   4, where
p(cid:63) is the optimal value of (34).

7.10 projection onto the id203 simplex. in this problem you will work out a simple method for
   nding the euclidean projection y of x     rn onto the id203 simplex p = {z | z (cid:23) 0, 1t z = 1}.
hints. consider the problem of minimizing (1/2)(cid:107)y     x(cid:107)2
2 subject to y (cid:23) 0, 1t y = 1. form the
partial lagrangian

l(y,   ) = (1/2)(cid:107)y     x(cid:107)2

2 +   (1t y     1),

leaving the constraint y (cid:23) 0 implicit. show that y = (x       1)+ minimizes l(y,   ) over y (cid:23) 0.

7.11 conformal mapping via id76. suppose that     is a closed bounded region in c with
no holes (i.e., it is simply connected). the riemann mapping theorem states that there exists a
conformal mapping    from     onto d = {z     c | |z|     1}, the unit disk in the complex plane.
(this means that    is an analytic function, and maps     one-to-one onto d.)

one proof of the riemann mapping theorem is based on an in   nite dimensional optimization
problem. we choose a point a     int     (the interior of    ). among all analytic functions that map
       (the boundary of    ) into d, we choose one that maximizes the magnitude of the derivative at
a. amazingly, it can be shown that this function is a conformal mapping of     onto d.

we can use this theorem to construct an approximate conformal mapping, by sampling the bound-
ary of    , and by restricting the optimization to a    nite-dimensional subspace of analytic functions.
let b1, . . . , bn be a set of points in        (meant to be a sampling of the boundary). we will search
only over polynomials of degree up to n,

    (z) =   1zn +   2zn   1 +        +   nz +   n+1,

93

where   1, . . . ,   n+1     c. with these approximations, we obtain the problem

|     (cid:48)(a)|

maximize
subject to |     (bi)|     1,

i = 1, . . . , n,

with variables   1, . . . ,   n+1     c. the problem data are b1, . . . , bn            and a     int    .

(a) explain how to solve the problem above via convex or quasiid76.

(b) carry out your method on the problem instance given in conf_map_data.m. this    le de   nes
the boundary points bi and plots them. it also contains code that will plot     (bi), the boundary
of the mapped region, once you provide the values of   j; these points should be very close to
the boundary of the unit disk. (please turn in this plot, and give us the values of   j that you
   nd.) the function polyval may be helpful.

remarks.

    we   ve been a little informal in our mathematics here, but it won   t matter.
    you do not need to know any complex analysis to solve this problem; we   ve told you everything

you need to know.

    a basic result from complex analysis tells us that      is one-to-one if and only if the image of
the boundary does not    loop over    itself. (we mention this just for fun; we   re not asking you
to verify that the      you    nd is one-to-one.)

7.12 fitting a vector    eld to given directions. this problem concerns a vector    eld on rn, i.e., a function

f : rn     rn. we are given the direction of the vector    eld at points x(1), . . . , x(n )     rn,

q(i) =

1

(cid:107)f (x(i))(cid:107)2

f (x(i)),

i = 1, . . . , n.

(these directions might be obtained, for example, from samples of trajectories of the di   erential
equation   z = f (z).) the goal is to    t these samples with a vector    eld of the form

  f =   1f1 +        +   mfm,

where f1, . . . , fm : rn     rn are given (basis) functions, and        rm is a set of coe   cients that
we will choose.

we will measure the    t using the maximum angle error,

(cid:12)(cid:12)(cid:12)(cid:54) (q(i),   f (x(i)))
(cid:12)(cid:12)(cid:12) ,

j = max

i=1,...,n

where (cid:54) (z, w) = cos   1((zt w)/(cid:107)z(cid:107)2(cid:107)w(cid:107)2) denotes the angle between nonzero vectors z and w. we
are only interested in the case when j is smaller than   /2.

(a) explain how to choose    so as to minimize j using id76. your method can
involve solving multiple convex problems. be sure to explain how you handle the constraints
  f (x(i)) (cid:54)= 0.

94

(b) use your method to solve the problem instance with data given in vfield_fit_data.m, with
an a   ne vector    eld    t, i.e.,   f (z) = az + b. (the matrix a and vector b are the parameters
   above.) give your answer to the nearest degree, as in    20    < j (cid:63)     21      .
this    le also contains code that plots the vector    eld directions, and also (but commented
out) the directions of the vector    eld    t,   f (x(i))/(cid:107)   f (x(i))(cid:107)2. create this plot, with your    tted
vector    eld.

7.13 robust minimum volume covering ellipsoid. suppose z is a point in rn and e is an ellipsoid in rn

with center c. the mahalanobis distance of the point to the ellipsoid center is de   ned as

m (z,e) = inf{t     0 | z     c + t(e     c)},

which is the factor by which we need to scale the ellipsoid about its center so that z is on its
boundary. we have z     e if and only if m (z,e)     1. we can use (m (z,e)     1)+ as a measure of
the mahalanobis distance of the point z to the ellipsoid e.
now we can describe the problem. we are given m points x1, . . . , xm     rn. the goal is to    nd the
optimal trade-o    between the volume of the ellipsoid e and the total mahalanobis distance of the
points to the ellipsoid, i.e.,

m(cid:88)

(m (z,e)     1)+ .

note that this can be considered a robust version of    nding the smallest volume ellipsoid that
covers a set of points, since here we allow one or more points to be outside the ellipsoid.

i=1

(a) explain how to solve this problem. you must say clearly what your variables are, what problem

you solve, and why the problem is convex.

(b) carry out your method on the data given in rob_min_vol_ellips_data.m. plot the optimal
trade-o    curve of ellipsoid volume versus total mahalanobis distance. for some selected points
on the trade-o    curve, plot the ellipsoid and the points (which are in r2). we are only
interested in the region of the curve where the ellipsoid volume is within a factor of ten (say)
of the minimum volume ellipsoid that covers all the points.
important. depending on how you formulate the problem, you might encounter problems that
are unbounded below, or where cvx encounters numerical di   culty. just avoid these by
appropriate choice of parameter.
very important. if you use matlab version 7.0 (which is    lled with bugs) you might    nd that
functions involving determinants don   t work in cvx. if you use this version of matlab, then
you must download the    le blkdiag.m on the course website and put it in your matlab path
before the default version (which has a bug).

7.14 isoperimetric problem. we consider the problem of choosing a curve in a two-dimensional plane
that encloses as much area as possible between itself and the x-axis, subject to constraints. for
simplicity we will consider only curves of the form

where f : [0, a]     r. this assumes that for each x-value, there can only be a single y-value, which
need not be the case for general curves. we require that at the end points (which are given), the

c = {(x, y) | y = f (x)},

95

curve returns to the x-axis, so f (0) = 0, and f (a) = 0. in addition, the length of the curve cannot

exceed a budget l, so we must have(cid:90) a

the objective is the area enclosed, which is given by

1 + f(cid:48)(x)2 dx     l.

(cid:112)

0

(cid:90) a

0

f (x) dx.

to pose this as a    nite dimensional optimization problem, we discretize over the x-values. specif-
ically, we take xi = h(i     1), i = 1, . . . , n + 1, where h = a/n is the discretization step size, and
we let yi = f (xi). thus our objective becomes

n(cid:88)

i=1

h

yi,

and our constraints can be written as

n(cid:88)

(cid:112)

h

1 + ((yi+1     yi)/h)2     l,

y1 = 0,

yn +1 = 0.

i=1

in addition to these constraints, we will also require that our curve passes through a set of pre-
speci   ed points. let f     {1, . . . , n + 1} be an index set. for j     f, we require yj = y   xed
, where
y   xed     rn +1 (the entries of y   xed whose indices are not in f can be ignored). finally, we add a
constraint on maximum curvature,

j

   c     (yi+2     2yi+1 + yi)/h2     c,

i = 1, . . . , n     1.

explain how to    nd the curve, i.e., y1, . . . , yn +1, that maximizes the area enclosed subject to these
constraints, using id76. carry out your method on the problem instance with data
given in iso_perim_data.m. report the optimal area enclosed, and use the commented out code
in the data    le to plot your curve.

remark (for your amusement only). the isoperimetric problem is an ancient problem in mathe-
matics with a history dating all the way back to the tragedy of queen dido and the founding of
carthage. the story (which is mainly the account of the poet virgil in his epic volume aeneid ),
goes that dido was a princess forced to    ee her home after her brother murdered her husband. she
travels across the mediterranean and arrives on the shores of what is today modern tunisia. the
natives weren   t very happy about the newcomers, but dido was able to negotiate with the local
king: in return for her fortune, the king promised to cede her as much land as she could mark out
with the skin of a bull.

the king thought he was getting a good deal, but dido outmatched him in mathematical skill. she
broke down the skin into thin pieces of leather and sewed them into a long piece of string. then,
taking the seashore as an edge, they laid the string in a semicircle, carving out a piece of land
larger than anyone imagined; and on this land, the ancient city of carthage was born. when the
king saw what she had done, he was so impressed by dido   s talent that he asked her to marry him.
dido refused, so the king built a university in the hope that he could    nd another woman with
similar talent.

96

7.15 dual of maximum volume ellipsoid problem. consider the problem of computing the maximum

volume ellipsoid inscribed in a nonempty bounded polyhedron

c = {x | at

i x     bi, i = 1, . . . , m}.

parametrizing the ellipsoid as e = {bu + d | (cid:107)u(cid:107)2     1}, with b     sn
ellipsoid can be found by solving the id76 problem

++ and d     rn, the optimal

minimize     log det b
subject to (cid:107)bai(cid:107)2 + at

i d     bi,

i = 1, . . . , m

with variables b     sn, d     rn. derive the lagrange dual of the equivalent problem

minimize     log det b
subject to (cid:107)yi(cid:107)2 + at
bai = yi,

i d     bi,

i = 1, . . . , m

i = 1, . . . , m

with variables b     sn, d     rn, yi     rn, i = 1, . . . , m.

7.16 fitting a sphere to data. consider the problem of    tting a sphere {x     rn | (cid:107)x     xc(cid:107)2 = r} to m

points u1, . . . , um     rn, by minimizing the error function

m(cid:88)

(cid:0)(cid:107)ui     xc(cid:107)2

2     r2(cid:1)2

i=1

over the variables xc     rn, r     r.
(a) explain how to solve this problem using convex or quasiid76. the simpler your
formulation, the better. (for example: a convex formulation is simpler than a quasiconvex
formulation; an lp is simpler than an socp, which is simpler than an sdp.) be sure to explain
what your variables are, and how your formulation minimizes the error function above.

(b) use your method to solve the problem instance with data given in the    le sphere_fit_data.m,

with n = 2. plot the    tted circle and the data points.

7.17 the polar of a set c     rn is de   ned as

c    = {x | ut x     1    u     c}.
(a) show that c    is convex, regardless of the properties of c.
(b) let c1 and c2 be two nonempty polyhedra de   ned by sets of linear inequalities:

c1 = {u     rn | a1u (cid:22) b1},

c2 = {v     rn | a2v (cid:22) b2}

with a1     rm1  n, a2     rm2  n, b1     rm1, b2     rm2. formulate the problem of    nding the
euclidean distance between c   

1 and c   
2 ,

(cid:107)x1     x2(cid:107)2
minimize
subject to x1     c   
1
x2     c   
2 ,

2

as a qp. your formulation should be e   cient, i.e., the dimensions of the qp (number of
variables and constraints) should be linear in m1, m2, n. (in particular, formulations that
require enumerating the extreme points of c1 and c2 are to be avoided.)

97

7.18 polyhedral cone questions. you are given matrices a     rn  k and b     rn  p.

explain how to solve the following two problems using id76. your solution can
involve solving multiple convex problems, as long as the number of such problems is no more than
linear in the dimensions n, k, p.

(a) how would you determine whether ark

+? this means that every nonnegative linear
combination of the columns of a can be expressed as a nonnegative linear combination of the
columns of b.

+     brp

(b) how would you determine whether ark

+ = rn? this means that every vector in rn can be

expressed as a nonnegative linear combination of the columns of a.

7.19 projection on convex hull of union of ellipsoids. let e1, . . . , em be m ellipsoids in rn de   ned as

ei = {aiu + bi | (cid:107)u(cid:107)2     1},

i = 1, . . . , m,

with ai     rn  n and bi     rn. consider the problem of projecting a point a     rn on the convex
hull of the union of the ellipsoids:

(cid:107)x     a(cid:107)2

minimize
subject to x     conv(e1                em).

formulate this as a second order cone program.

7.20 bregman divergences. let f : rn     r be strictly convex and di   erentiable. then the bregman

divergence associated with f is the function df : rn    rn     r given by

df (x, y) = f (x)     f (y)        f (y)t (x     y).

(a) show that df (x, y)     0 for all x, y     dom f .
(b) show that if f = (cid:107)    (cid:107)2

(c) show that if f (x) =(cid:80)n

2, then df (x, y) = (cid:107)x     y(cid:107)2
2.
i=1 xi log xi (negative id178), with dom f = rn

to be 0), then

n(cid:88)

df (x, y) =

(xi log(xi/yi)     xi + yi) ,

+ (with 0 log 0 taken

the id181 between x and y.

i=1

(d) bregman projection. the previous parts suggest that bregman divergences can be viewed as
generalized    distances   , i.e., functions that measure how similar two vectors are. this suggests
solving geometric problems that measure distance between vectors using a bregman divergence
rather than euclidean distance.
explain whether

minimize df (x, y)
subject to x     c,

with variable x     rn, is a id76 problem (assuming c is convex).

(e) duality. show that dg(y   , x   ) = df (x, y), where g = f    and z    =    f (z). you can assume

that    f    = (   f )   1 and that f is closed.

98

7.21 ellipsoidal peeling. in this problem, you will implement an outlier identi   cation technique using
l  owner-john ellipsoids. given a set of points d = {x1, . . . , xn} in rn, the goal is to identify a
set o     d that are anomalous in some sense. roughly speaking, we think of an outlier as a point
that is far away from most of the points, so we would like the points in d \ o to be relatively close
together, and to be relatively far apart from the points in o.
we describe a heuristic technique for identifying o. we start with o =     and    nd the minimum
volume (l  owner-john) ellipsoid e containing all xi /    o (which is all xi in the    rst step). each
iteration, we    ag (i.e., add to o) the point that corresponds to the largest dual variable for the
constraint xi     e; this point will be one of the points on the boundary of e, and intuitively, it will
be the one for whom the constraint is    most    binding. we then plot vole (on a log scale) versus
cardo and hope that we see a sharp drop in the curve. we use the value of o after the drop.
the hope is that after removing a relatively small number of points, the volume of the minimum
volume ellipsoid containing the remaining points will be much smaller than the minimum volume
ellipsoid for d, which means the removed points are far away from the others.
for example, suppose we have 100 points that lie in the unit ball and 3 points with (euclidean)
norm 1000. intuitively, it is clear that it is reasonable to consider the three large points outliers.
the minimum volume ellipsoid of all 103 points will have very large volume. the three points will
be the    rst ones removed, and as soon as they are, the volume of the ellipsoid ellipsoid will drop
dramatically and be on the order of the volume of the unit ball.
run 6 iterations of the algorithm on the data given in ellip_anomaly_data.m. plot vole (on a
log scale) versus cardo. in addition, on a single plot, plot all the ellipses found with the function
ellipse_draw(a,b) along with the outliers (in red) and the remaining points (in blue).
of course, we have chosen an example in r2 so the ellipses can be plotted, but one can detect
outliers in r2 simply by inspection. in dimension much higher than 3, however, detecting outliers
by plotting will become substantially more di   cult, while the same algorithm can be used.

note. in cvx, you should use det_rootn (which is sdp-representable and handled exactly) instead
of log_det (which is handled using an ine   cient iterative procedure).

7.22 urban planning. an urban planner would like to choose the location x     r2 for a new warehouse.
this should be close to n distribution centers located at y1, . . . , yn     r2. the objective is to
minimize the worst-case distance, i.e., solve

minimize maxk=1,...,n(cid:107)yk     x(cid:107)2.

(a) explain in one sentence why this is a id76 problem.

(b) construct an equivalent second-order cone program.

(c) find the langrange dual to the problem you found in part (b). does strong duality hold?

(d) suppose that the primal socp and the dual socp each have a unique optimum. give a
relationship between the primal optimal point and the optimal dual variables. in particular,
we would like you to say as much as you can about the optimal dual variables given the primal
optimal solution.

7.23 optimizing a set of disks. a disk d     r2 is parametrized by its center c     r2 and its radius r     0,
with the form d = {x | (cid:107)x     c(cid:107)2     r}. (we allow r = 0, in which case the disk reduces to a single

99

point {c}.) the goal is to choose a set of n disks d1, . . . , dn (i.e., specify their centers and radii),
to minimize an objective subject to some constraints.

one constraint is that the    rst k disks are    xed, i.e.,

ci = c   x
i

,

ri = r   x
i

,

i = 1, . . . , k,

where c   x

i and r   x

i are given.

the second constraint is an overlap or intersection constraint, which requires some pairs of disks
to intersect:

di     dj (cid:54)=    ,

(i, j)     i,

where i     {1, . . . , n}2 is given. you can assume that for each (i, j)     i, i < j.
we consider two objectives: the sum of the disk areas, and the sum of the disk perimeters. these
two objectives result in two di   erent problems.

(a) explain how to solve these two problems using id76.

(b) solve both problems for the problem data given in disks_data.*. give the optimal total
area, and the optimal total perimeter. plot the two optimal disk arrangements, using the
code included in the data    le. give a very brief comment on the results, especially the
distribution of disk radii each problem obtains.

100

8 unconstrained and equality constrained minimization

8.1 id119 and nondi   erentiable functions.

(a) let    > 1. show that the function

f (x1, x2) =

               

(cid:112)x2

1 +   x2
2
x1 +   |x2|
   
1 +   

|x2|     x1

otherwise

is convex. you can do this, for example, by verifying that

(cid:110)

   

(cid:12)(cid:12)(cid:12) y2

2     1, y1     1/(cid:112)1 +   

(cid:111)

.

f (x1, x2) = sup

x1y1 +

  x2y2

1 + y2

note that f is unbounded below. (take x2 = 0 and let x1 go to       .)

(b) consider the id119 algorithm applied to f , with starting point x(0) = (  , 1) and an

exact line search. show that the iterates are

(cid:18)        1

(cid:19)k

   + 1

x(k)
1 =   

,

x(k)
2 =

(cid:18)

           1

   + 1

(cid:19)k

.

therefore x(k) converges to (0, 0). however, this is not the optimum, since f is unbounded
below.

8.2 a characterization of the newton decrement. let f : rn     r be convex and twice di   erentiable,
and let a be a p   n-matrix with rank p. suppose   x is feasible for the equality constrained problem

recall that the newton step    x at   x can be computed from the linear equations

minimize
subject to ax = b.

f (x)

(cid:20)    2f (  x) at

(cid:21)(cid:20)    x

(cid:21)

(cid:20)       f (  x)

(cid:21)

,

0

=

and that the newton decrement   (  x) is de   ned as

a

0

u

  (  x) = (      f (  x)t    x)1/2 = (   xt   2f (  x)   x)1/2.

assume the coe   cient matrix in the linear equations above is nonsingular and that   (  x) is positive.
express the solution y of the optimization problem

minimize    f (  x)t y
subject to ay = 0

yt   2f (  x)y     1

in terms of newton step    x and the newton decrement   (  x).

8.3 suggestions for exercises 9.30 in id76. we recommend the following to generate

a problem instance:

101

n = 100;
m = 200;
randn(   state   ,1);
a=randn(m,n);

of course, you should try out your code with di   erent dimensions, and di   erent data as well.

in all cases, be sure that your line search    rst    nds a step length for which the tentative point is
in dom f ; if you attempt to evaluate f outside its domain, you   ll get complex numbers, and you   ll
never recover.
to    nd expressions for    f (x) and    2f (x), use the chain rule (see appendix a.4); if you attempt
to compute    2f (x)/   xi   xj, you will be sorry.
to compute the newton step, you can use vnt=-h\g.

8.4 suggestions for exercise 9.31 in id76. for 9.31a, you should try out n = 1,
n = 15, and n = 30. you might as well compute and store the cholesky factorization of the
hessian, and then back solve to get the search directions, even though you won   t really see any
speedup in matlab for such a small problem. after you evaluate the hessian, you can    nd the
cholesky factorization as l=chol(h,   lower   ). you can then compute a search step as -l   \(l\g),
where g is the gradient at the current point. matlab will do the right thing, i.e., it will    rst solve
l\g using forward substitution, and then it will solve -l   \(l\g) using backward substitution. each
substitution is order n2.

to fairly compare the convergence of the three methods (i.e., n = 1, n = 15, n = 30), the
horizontal axis should show the approximate total number of    ops required, and not the number
of iterations. you can compute the approximate number of    ops using n3/3 for each factorization,
and 2n2 for each solve (where each    solve    involves a forward substitution step and a backward
substitution step).

8.5 e   cient numerical method for a regularized least-squares problem. we consider a regularized least

squares problem with smoothing,

minimize

i x     bi)2 +   
(at

(xi     xi+1)2 +   

x2
i ,

k(cid:88)

i=1

n   1(cid:88)

i=1

n(cid:88)

i=1

where x     rn is the variable, and   ,    > 0 are parameters.

(a) express the optimality conditions for this problem as a set of linear equations involving x.

(these are called the normal equations.)

(b) now assume that k (cid:28) n. describe an e   cient method to solve the normal equations found in
part (a). give an approximate    op count for a general method that does not exploit structure,
and also for your e   cient method.

(c) a numerical instance. in this part you will try out your e   cient method. we   ll choose k = 100
and n = 4000, and    =    = 1. first, randomly generate a and b with these dimensions. form
the normal equations as in part (a), and solve them using a generic method. next, write
(short) code implementing your e   cient method, and run it on your problem instance. verify
that the solutions found by the two methods are nearly the same, and also that your e   cient
method is much faster than the generic one.

102

note: you   ll need to know some things about matlab to be sure you get the speedup from the
e   cient method. your method should involve solving linear equations with tridiagonal coe   cient
matrix.
in this case, both the factorization and the back substitution can be carried out very
e   ciently. the matlab documentation says that banded matrices are recognized and exploited,
when solving equations, but we found this wasn   t always the case. to be sure matlab knows your
matrix is tridiagonal, you can declare the matrix as sparse, using spdiags, which can be used to
create a tridiagonal matrix. you could also create the tridiagonal matrix conventionally, and then
convert the resulting matrix to a sparse one using sparse.

one other thing you need to know. suppose you need to solve a group of linear equations with the
same coe   cient matrix, i.e., you need to compute f    1a1, ..., f    1am, where f is invertible and ai
are column vectors. by concatenating columns, this can be expressed as a single matrix

(cid:2)f    1a1        f    1am

(cid:3) = f    1 [a1        am] .

to compute this matrix using matlab, you should collect the righthand sides into one matrix (as
above) and use matlab   s backslash operator: f\a. this will do the right thing: factor the matrix
f once, and carry out multiple back substitutions for the righthand sides.

in python, np.linalg.solve is unable to recognize banded matrices, and will therefore take a long
time to solve the resulting system of equations. instead, you can use scipy.linalg.solve banded
with (l, u) = (1, 1) for a tridiagonal matrix to solve it more e   ciently.

8.6 id77 for approximate total variation de-noising. total variation de-noising is based on

the bi-criterion problem with the two objectives

(cid:107)x     xcor(cid:107)2,

  tv(x) =

n   1(cid:88)

|xi+1     xi|.

here xcor     rn is the (given) corrupted signal, x     rn is the de-noised signal to be computed,
and   tv is the total variation function. this bi-criterion problem can be formulated as an socp,
or, by squaring the    rst objective, as a qp. in this problem we consider a method used to approx-
imately formulate the total variation de-noising problem as an unconstrained problem with twice
di   erentiable objective, for which newton   s method can be used.

i=1

we    rst observe that the pareto optimal points for the bi-criterion total variation de-noising problem
can found as the minimizers of the function

(cid:107)x     xcor(cid:107)2

2 +     tv(x),

where        0 is parameter. (note that the euclidean norm term has been squared here, and so is
twice di   erentiable.) in approximate total variation de-noising, we substitute a twice di   erentiable
approximation of the total variation function,

n   1(cid:88)

(cid:16)(cid:112)

  atv(x) =

 2 + (xi+1     xi)2      

,

(cid:17)

for the total variation function   tv. here   > 0 is parameter that controls the level of approximation.
in approximate total variation de-noising, we use newton   s method to minimize

i=1

(the parameters    > 0 and   > 0 are given.)

  (x) = (cid:107)x     xcor(cid:107)2

2 +     atv(x).

103

(a) find expressions for the gradient and hessian of   .

(b) explain how you would exploit the structure of the hessian to compute the newton direction
for    e   ciently. (your explanation can be brief.) compare the approximate    op count for
your method with the    op count for a generic method that does not exploit any structure in
the hessian of   .

(c) implement newton   s method for approximate total variation de-noising. get the corrupted
signal xcor from the    le approx_tv_denoising_data.m, and compute the de-noised signal x(cid:63),
using parameters   = 0.001,    = 50 (which are also in the    le). use line search parameters
   = 0.01,    = 0.5, initial point x(0) = 0, and stopping criterion   2/2     10   8. plot the
newton decrement versus iteration, to verify asymptotic quadratic convergence. plot the    nal
smoothed signal x(cid:63), along with the corrupted one xcor.

8.7 derive the newton equation for the unconstrained minimization problem

(1/2)xt x + log(cid:80)m

minimize

i=1 exp(at

i x + bi).

give an e   cient method for solving the newton system, assuming the matrix a     rm  n (with
rows at

i ) is dense with m (cid:28) n. give an approximate    op count of your method.

8.8 we consider the equality constrained problem

tr(cx)     log det x

minimize
subject to diag(x) = 1.

the variable is the matrix x     sn. the domain of the objective function is sn
++. the matrix
c     sn is a problem parameter. this problem is similar to the analytic centering problem discussed
in lecture 11 (p.18   19) and pages 553-555 of the textbook. the di   erences are the extra linear term
tr(cx) in the objective, and the special form of the equality constraints. (note that the equality
constraints can be written as tr(aix) = 1 with ai = eiet
i , a matrix of zeros except for the i, i
element, which is equal to one.)

(a) show that x is optimal if and only if

x (cid:31) 0,

x   1     c is diagonal,

diag(x) = 1.

(b) the newton step    x at a feasible x is de   ned as the solution of the newton equations

x   1   xx   1 + diag(w) =    c + x   1,

diag(   x) = 0,

with variables    x     sn, w     rn. (note the two meanings of the diag function: diag(w) is
the diagonal matrix with the vector w on its diagonal; diag(   x) is the vector of the diagonal
elements of    x.) eliminating    x from the    rst equation gives an equation

diag(x diag(w)x) = 1     diag(xcx).

this is a set of n linear equations in n variables, so it can be written as hw = g. give a
simple expression for the coe   cients of the matrix h.

104

(c) implement the feasible id77 in matlab. you can use x = i as starting point. the

code should terminate when   (x)2/2     10   6, where   (x) is the newton decrement.
you can use the cholesky factorization to evaluate the cost function: if x = llt where l is

triangular with positive diagonal then log det x = 2(cid:80)

i log lii.

to ensure that the iterates remain feasible, the line search has to consist of two phases. starting
at t = 1, you    rst need to backtrack until x + t   x (cid:31) 0. then you continue the backtracking
until the condition of su   cient decrease

f0(x + t   x)     f0(x) +   t tr(   f0(x)   x)

is satis   ed. to check that a matrix x + t   x is positive de   nite, you can use the cholesky
factorization with two output arguments ([r, p] = chol(a) returns p > 0 if a is not positive
de   nite).
test your code on randomly generated problems of sizes n = 10, . . . , 100 (for example, using
n = 100; c = randn(n); c = c + c   ).

8.9 estimation of a vector from one-bit measurements. a system of m sensors is used to estimate an
unknown parameter x     rn. each sensor makes a noisy measurement of some linear combination
it returns +1 if the
of the unknown parameters, and quantizes the measured value to one bit:
measured value exceeds a certain threshold, and    1 otherwise.
in other words, the output of
sensor i is given by

yi = sign(at

i x + vi     bi) =

(cid:26) 1 at

   1 at

i x + vi     bi
i x + vi < bi,

where ai and bi are known, and vi is measurement error. we assume that the measurement errors
   
vi are independent random variables with a zero-mean unit-variance gaussian distribution (i.e.,
2  )e   v2/2). as a consequence, the sensor outputs yi are
with a id203 density   (v) = (1/
random variables with possible values   1. we will denote prob(yi = 1) as pi(x) to emphasize that
it is a function of the unknown parameter x:

pi(x) = prob(yi = 1) = prob(at

i x + vi     bi) =

1     pi(x) = prob(yi =    1) = prob(at

i x + vi < bi) =

(cid:90)    
(cid:90) bi   at

bi   at
i x

      

1   
2  
1   
2  

e   t2/2dt

i x

e   t2/2dt.

the problem is to estimate x, based on observed values   y1,   y2, . . . ,   ym of the m sensor outputs.
we will apply the maximum likelihood (ml) principle to determine an estimate   x. in maximum
likelihood estimation, we calculate   x by maximizing the log-likelihood function

      (cid:89)

  yi=1

(cid:89)

  yi=   1

       =

(cid:88)

  yi=1

(cid:88)

  yi=   1

l(x) = log

pi(x)

(1     pi(x))

log pi(x) +

log(1     pi(x)).

(a) show that the id113 problem

maximize l(x)

is a id76 problem. the variable is x. the measured vector   y, and the param-
eters ai and bi are given.

105

(cid:90) u
(cid:90) u

      

      

(cid:90)    

u

eu2/2

1   
2  

1   
2  

(cid:90)    

u

(b) solve the ml estimation problem with data de   ned in one_bit_meas_data.m, using newton   s
i ), a vector

method with backtracking line search. this    le will de   ne a matrix a (with rows at
b, and a vector   y with elements   1.

remark. the matlab functions erfc and erfcx are useful to evaluate the following functions:

1   
2  

e   t2/2 dt =

1
2

erfc(    u   
2

),

e   t2/2 dt =

1
2

erfc(

u   
2

)

1   
2  

eu2/2

e   t2/2 dt =

1
2

erfcx(    u   
2

),

e   t2/2 dt =

1
2

erfcx(

u   
2

).

8.10 functions with bounded newton decrement. let f : rn     r be a convex function with    2f (x) (cid:31) 0

for all x     dom f and newton decrement bounded by a positive constant c:

show that the function g(x) = exp(   f (x)/c) is concave.

  (x)2     c    x     dom f.

8.11 monotone convergence of newton   s method. suppose f : r     r is strongly convex and smooth,
and in addition, f(cid:48)(cid:48)(cid:48)     0. let x(cid:63) minimize f , and suppose newton   s method is initialized with
x(0) < x(cid:63). show that the iterates x(k) converge to x(cid:63) monotonically, and that a backtracking line
search always takes a step size of one, i.e., t(k) = 1.

8.12 infeasible start id77 for lp centering problem. implement the infeasible start newton

method for solving the centering problem arising in the standard form lp,

ct x    (cid:80)n

minimize
subject to ax = b,

i=1 log xi

with variable x. the data are a     rm  n, with m < n, c     rn, and b     rm. you can assume that
a is full rank. this problem cannot be solved when it is infeasible or unbounded below.
your code should accept a, b, c, and x0, and return x(cid:63), the primal optimal point,   (cid:63), a dual optimal
point, and the number of newton steps executed. the initial point x(0) must satisfy x(0) (cid:31) 0, but
it need not satisfy the equality constraints.

use the block elimination method to compute the newton step. (you can also compute the newton
step via the kkt system, and compare the result to the newton step computed via block elimi-
nation. the two steps should be close, but if any xi is very small, you might get a warning about
the condition number of the kkt matrix.)
plot (cid:107)r(x,   )(cid:107)2, the norm of the concatenated primal and dual residuals, versus iteration k for
various problem data and initial points, to verify that your implementation achieves quadratic
convergence. as stopping criterion, you can use (cid:107)r(x,   )(cid:107)2     10   6 (which means the problem was
solved) or some maximum number of iterations (say, 50) was reached, which means it was not
solved (likely because the problem is either infeasible or unbounded below).

for a    xed problem instance, experiment with varying the algorithm parameters    and   , observing
the e   ect on the total number of newton steps required.

106

to generate problem data (i.e., a, b, c, x0) that are feasible, you can    rst generate a, then random
positive vector p, and set b = ap. you can be sure that the problem is not unbounded by making
one row of a have positive entries. you may also want to check that a is full rank.

test the behavior of your implementation on data instances that are not feasible, and also ones
that are unbounded below.

107

9

interior point methods

9.1 dual feasible point from analytic center. we consider the problem

minimize
subject to fi(x)     0,

f0(x)

i = 1, . . . , m,

(35)

where the functions fi are convex and di   erentiable. for u > p(cid:63), de   ne xac(u) as the analytic
center of the inequalities

i.e.,

xac(u) = argmin

show that        rm, de   ned by

f0(x)     u,

i = 1, . . . , m,

fi(x)     0,

(cid:32)
    log(u     f0(x))     m(cid:88)

(cid:33)

log(   fi(x))

.

i=1

  i =

u     f0(xac(u))
   fi(xac(u))

,

i = 1, . . . , m

is dual feasible for the problem above. express the corresponding dual objective value in terms of
u, xac(u) and the problem parameters.

9.2 e   cient solution of newton equations. explain how you would solve the newton equations in the

barrier method applied to the quadratic program

minimize
subject to ax (cid:22) b

(1/2)xt x + ct x

where a     rm  n is dense. distinguish two cases, m (cid:29) n and n (cid:29) m, and give the most e   cient
method in each case.

9.3 e   cient solution of newton equations. describe an e   cient method for solving the newton equa-

tion in the barrier method for the quadratic program

(1/2)(x     a)t p    1(x     a)

minimize
subject to 0 (cid:22) x (cid:22) 1,

with variable x     rn. the matrix p     sn and the vector a     rn are given.
assume that the matrix p is large, positive de   nite, and sparse, and that p    1 is dense.    e   cient   
means that the complexity of the method should be much less than o(n3).

9.4 dual feasible point from incomplete centering. consider the sdp

with variable x     rn, and its dual

minimize
subject to w + diag(x) (cid:23) 0,

1t x

maximize     tr w z
subject to zii = 1,
z (cid:23) 0,

i = 1, . . . , n

108

with variable x     sn. (these problems arise in a relaxation of the two-way partitioning problem,
described on page 219; see also exercises 5.39 and 11.23.)

standard results for the barrier method tell us that when x is on the central path, i.e., minimizes
the function

  (x) = t1t x + log det(w + diag(x))   1

for some parameter t > 0, the matrix

1
t

z =

(w + diag(x))   1
is dual feasible, with objective value     tr w z = 1t x     n/t.
now suppose that x is strictly feasible, but not necessarily on the central path. (for example, x
might be the result of using newton   s method to minimize   , but with early termination.) then
the matrix z de   ned above will not be dual feasible. in this problem we will show how to construct
a dual feasible   z (which agrees with z as given above when x is on the central path), from any
point x that is near the central path. de   ne x = w + diag(x), and let v =       2  (x)   1     (x) be
the newton step for the function    de   ned above. de   ne

(cid:0)x   1     x   1 diag(v)x   1(cid:1) .

  z =

1
t

(a) verify that when x is on the central path, we have   z = z.
(b) show that   zii = 1, for i = 1, . . . , n.
(c) let   (x) =      (x)t   2  (x)   1     (x) be the newton decrement at x. show that
  (x) = tr(x   1 diag(v)x   1 diag(v)) = tr(x   1/2 diag(v)x   1/2)2.

(d) show that   (x) < 1 implies that   z (cid:31) 0. thus, when x is near the central path (meaning,

  (x) < 1), z is dual feasible.

9.5 standard form lp barrier method. in the following three parts of this exercise, you will implement

a barrier method for solving the standard form lp

minimize
subject to ax = b,

ct x

x (cid:23) 0,

with variable x     rn, where a     rm  n, with m < n. throughout these exercises we will assume
that a is full rank, and the sublevel sets {x | ax = b, x (cid:23) 0, ct x       } are all bounded. (if this is
not the case, the centering problem is unbounded below.)

(a) centering step. implement newton   s method for solving the centering problem

ct x    (cid:80)n

minimize
subject to ax = b,

i=1 log xi

with variable x, given a strictly feasible starting point x0.
your code should accept a, b, c, and x0, and return x(cid:63), the primal optimal point,   (cid:63), a dual
optimal point, and the number of newton steps executed.

109

use the block elimination method to compute the newton step. (you can also compute the
newton step via the kkt system, and compare the result to the newton step computed via
block elimination. the two steps should be close, but if any xi is very small, you might get a
warning about the condition number of the kkt matrix.)
plot   2/2 versus iteration k, for various problem data and initial points, to verify that your
implementation gives asymptotic quadratic convergence. as stopping criterion, you can use
  2/2     10   6. experiment with varying the algorithm parameters    and   , observing the e   ect
on the total number of newton steps required, for a    xed problem instance. check that your
computed x(cid:63) and   (cid:63) (nearly) satisfy the kkt conditions.
to generate some random problem data (i.e., a, b, c, x0), we recommend the following ap-
proach. first, generate a randomly. (you might want to check that it has full rank.) then
generate a random positive vector x0, and take b = ax0. (this ensures that x0 is strictly
feasible.) the parameter c can be chosen randomly. to be sure the sublevel sets are bounded,
you can add a row to a with all positive elements. if you want to be able to repeat a run with
the same problem data, be sure to set the state for the uniform and normal random number
generators.
here are some hints that may be useful.

    we recommend computing   2 using the formula   2 =       xt

nt   f (x). you don   t really need
   for anything; you can work with   2 instead. (this is important for reasons described
below.)

    there can be small numerical errors in the newton step    xnt that you compute. when
nt   f (x), can actually be
x is nearly optimal, the computed value of   2, i.e.,   2 =       xt
(slightly) negative.
if you take the squareroot to get   , you   ll get a complex number,
and you   ll never recover. moreover, your line search will never exit. however, this only
happens when x is nearly optimal. so if you exit on the condition   2/2     10   6, everything
will be    ne, even when the computed value of   2 is negative.

    for the line search, you must    rst multiply the step size t by    until x + t   xnt is feasible
(i.e., strictly positive). if you don   t, when you evaluate f you   ll be taking the logarithm
of negative numbers, and you   ll never recover.

(b) lp solver with strictly feasible starting point. using the centering code from part (a), imple-

ment a barrier method to solve the standard form lp

minimize
subject to ax = b,

ct x

x (cid:23) 0,

with variable x     rn, given a strictly feasible starting point x0. your lp solver should take
as argument a, b, c, and x0, and return x(cid:63).
you can terminate your barrier method when the duality gap, as measured by n/t, is smaller
than 10   3.
(if you make the tolerance much smaller, you might run into some numerical
trouble.) check your lp solver against the solution found by cvx*, for several problem
instances.
the comments in part (a) on how to generate random data hold here too.
experiment with the parameter    to see the e   ect on the number of newton steps per centering
step, and the total number of newton steps required to solve the problem.

110

plot the progress of the algorithm, for a problem instance with n = 500 and m = 100, showing
duality gap (on a log scale) on the vertical axis, versus the cumulative total number of newton
steps (on a linear scale) on the horizontal axis.
your algorithm should return a 2  k matrix history, (where k is the total number of centering
steps), whose    rst row contains the number of newton steps required for each centering step,
and whose second row shows the duality gap at the end of each centering step. in order to
get a plot that looks like the ones in the book (e.g.,    gure 11.4, page 572), you should use the
following code:

[xx, yy] = stairs(cumsum(history(1,:)),history(2,:));
semilogy(xx,yy);

(c) lp solver. using the code from part (b), implement a general standard form lp solver, that
takes arguments a, b, c, determines (strict) feasibility, and returns an optimal point if the
problem is (strictly) feasible.
you will need to implement a phase i method, that determines whether the problem is strictly
feasible, and if so,    nds a strictly feasible point, which can then be fed to the code from
part (b). in fact, you can use the code from part (b) to implement the phase i method.
to    nd a strictly feasible initial point x0, we solve the phase i problem

minimize
subject to ax = b

t
x (cid:23) (1     t)1,

t     0,

with variables x and t. if we can    nd a feasible (x, t), with t < 1, then x is strictly feasible for
the original problem. the converse is also true, so the original lp is strictly feasible if and
only if t(cid:63) < 1, where t(cid:63) is the optimal value of the phase i problem.
we can initialize x and t for the phase i problem with any x0 satisfying ax0 = b, and
t0 = 2     mini x0
i     0; otherwise x0 is already a strictly
feasible point, and we are done.) you can use a change of variable z = x+(t   1)1 to transform
the phase i problem into the form in part (b).
check your lp solver against cvx* on several numerical examples, including both feasible
and infeasible instances.

i . (here we can assume that min x0

9.6 primal and dual feasible points in the barrier method for lp. consider a standard form lp and its

dual

ct x
minimize
subject to ax = b
x (cid:23) 0

maximize
subject to at y (cid:22) c,

bt y

with a     rm  n and rank(a) = m. in the barrier method the (feasible) id77 is applied
to the equality constrained problem

where t > 0 and   (x) =     n(cid:80)

minimize
subject to ax = b,

tct x +   (x)

log xi. the newton equation at a strictly feasible   x is given by

(cid:20)    2  (  x) at

i=1

(cid:21)(cid:20)    x

(cid:21)

(cid:20)    tc          (  x)

(cid:21)

=

0

.

a

0

w

111

suppose   (  x)     1 where   (  x) is the newton decrement at   x.

(a) show that   x +    x is primal feasible.
(b) show that y =    (1/t)w is dual feasible.
(c) let p(cid:63) be the optimal value of the lp. show that

9.7 consider a id76 problem and its dual

ct   x     p(cid:63)     n +   (  x)

t

   

n

.

minimize
subject to fi(x)     0,

f0(x)

i = 1, . . . , m,

maximize
g(  )
subject to    (cid:23) 0.

the centering problem in the barrier method is

tf0(x)     m(cid:88)

log(   fi(x)),

minimize

where t is a positive parameter.

i=1

(36)

(37)

(a) the centering problem can be written as

tf0(x)     m(cid:80)

minimize
subject to fi(x) + yi     0,

i=1

log(yi)

i = 1, . . . , m,

with variables x and y. derive the lagrange dual of this problem and express it in terms of
the dual function g(  ) in (36).

(b) suppose the feasible set of the dual problem in (36) contains strictly positive   . show that

the centering problem (37) is bounded below for any positive t.

9.8 standard form lp barrier method with infeasible start id77.

implement the barrier

method for the standard form lp,

minimize
subject to ax = b,

ct x

x (cid:23) 0,

with variable x     rn, where a     rm  n, with m < n, with a full rank. (your method will of
course fail if the problem is not strictly feasible, or if it is unbounded.)

use the centering code that you developed in exercise 8.12. your lp solver should take as argument
a, b, c, and return primal and dual optimal points x(cid:63),   (cid:63), and   (cid:63).

you can terminate your barrier method when the duality gap, as measured by n/t, is smaller than
10   3. (if you make the tolerance much smaller, you might run into some numerical trouble.)
check your lp solver against the solution found by cvx* for several problem instances. the
comments in exercise 8.12 on how to generate random data hold here too.

112

experiment with the parameter    to see the e   ect on the number of newton steps per centering
step, and the total number of newton steps required to solve the problem.

plot the progress of the algorithm, for a problem instance with n = 500 and m = 100, showing
duality gap (on a log scale) on the vertical axis, versus the cumulative total number of newton
steps (on a linear scale) on the horizontal axis.
your algorithm should return a 2    k matrix history, (where k is the total number of centering
steps), whose    rst row contains the number of newton steps required for each centering step, and
whose second row shows the duality gap at the end of each centering step. in order to get a plot
that looks like the ones in the book (e.g.,    gure 11.4, page 572), you should use the following code
in matlab:

[xx, yy] = stairs(cumsum(history(1,:)),history(2,:));
semilogy(xx,yy);

in julia, with pyplot you can use the following:

using pyplot
step(cumsum(history[1,:]   ),history[2,:]   )
yscale("log")

in python, also with pyplot you should use:

import matplotlib.pyplot as plt
plt.step(np.cumsum(history[0,:]),history[1,:])
plt.yscale("log")
plt.show()

9.9 consider an optimization problem

minimize
subject to fi(x)     0,

f0(x)

i = 1, . . . , m,

with f0, . . . , fm convex and di   erentiable.

m(cid:88)

(a) show that the karush-kuhn-tucker (kkt) conditions are equivalent to the two conditions

  i = max{  i + fi(x), 0},

i = 1, . . . , m,

   f0(x) +

  i   fi(x) = 0.

(b) the function max{u, 0} can be approximated by the smooth function (u+
t is a positive constant that determines the quality of the approximation.

i=1

   

u2 + 4t)/2, where

113

(u +

   
max{u, 0}

u2 + 4t)/2

   

t

u

if we use this approximation in the kkt conditions of part (a), we obtain

i = 1, . . . , m,

   f0(x) +

  i   fi(x) = 0.

(38)

m(cid:88)

i=1

  i =

  i + fi(x) +(cid:112)(  i + fi(x))2 + 4t
satisfy (38), then x minimizes f0(x)     t(cid:80)m

2

,

solving this set of nonlinear equations for a small value of t, gives an approximate solution
of the kkt conditions. show that this is another interpretation of the central path: if x,   

i=1 log(   fi(x)) and   i =    t/fi(x).

9.10 suppose   x is on the central path of the linear program

minimize
subject to ax (cid:22) b,

ct x

where a     rm  n, b     rm. we assume m     2 and rank(a) = n.

(a) show that the set

c = {x | ax (cid:22) b, ct x     ct   x}

is contained in the ellipsoid

in this expression,    is the logarithmic barrier function   (x) =    (cid:80)m

e = {x | (x       x)t   2  (  x)(x       x)     m(m     1)}.

i x), where at
i
denotes the ith row of a. to simplify the notation you can assume (without loss of generality)
that b = 1 and   x = 0.

i=1 log(bi    at

(b) the dual problem of the linear program is

maximize    bt z
subject to at z + c = 0
z (cid:23) 0,

with variable z     rm. use the result of part (a) to show that the optimal zk must be zero if

(cid:113)
k   x +(cid:112)m(m     1)

at

k    2  (  x)   1ak < bk.
at

114

10 mathematical background

10.1 some famous inequalities. the cauchy-schwarz inequality states that

|at b|     (cid:107)a(cid:107)2(cid:107)b(cid:107)2
for all vectors a, b     rn (see page 633 of the textbook).

(a) prove the cauchy-schwarz inequality.

hint. a simple proof is as follows. with a and b    xed, consider the function g(t) = (cid:107)a + tb(cid:107)2
2
of the scalar variable t. this function is nonnegative for all t. find an expression for inf t g(t)
(the minimum value of g), and show that the cauchy-schwarz inequality follows from the fact
that inf t g(t)     0.

to show that

(b) the 1-norm of a vector x is de   ned as (cid:107)x(cid:107)1 =(cid:80)n
(cid:107)x(cid:107)1        
(cid:32)

(c) the harmonic mean of a positive vector x     rn

for all x.

++ is de   ned as

(cid:33)   1

n(cid:88)

1
n

1
xk

k=1 |xk|. use the cauchy-schwarz inequality
n(cid:107)x(cid:107)2

use the cauchy-schwarz inequality to show that the arithmetic mean ((cid:80)

k=1

.

n-vector is greater than or equal to its harmonic mean.

k xk)/n of a positive

10.2 schur complements. consider a matrix x = x t     rn  n partitioned as

(cid:20) a b

bt c

(cid:21)

,

x =

where a     rk  k. if det a (cid:54)= 0, the matrix s = c     bt a   1b is called the schur complement of
a in x. schur complements arise in many situations and appear in many important formulas and
theorems. for example, we have det x = det a det s. (you don   t have to prove this.)

(a) the schur complement arises when you minimize a quadratic form over some of the variables.
let f (u, v) = (u, v)t x(u, v), where u     rk. let g(v) be the minimum value of f over u, i.e.,
g(v) = inf u f (u, v). of course g(v) can be       .
show that if a (cid:31) 0, we have g(v) = vt sv.

(b) the schur complement arises in several characterizations of positive de   niteness or semide   -

niteness of a block matrix. as examples we have the following three theorems:

    x (cid:31) 0 if and only if a (cid:31) 0 and s (cid:31) 0.
    if a (cid:31) 0, then x (cid:23) 0 if and only if s (cid:23) 0.
    x (cid:23) 0 if and only if a (cid:23) 0, bt (i     aa   ) = 0 and c     bt a   b (cid:23) 0, where a    is the
pseudo-inverse of a. (c     bt a   b serves as a generalization of the schur complement in
the case where a is positive semide   nite but singular.)

prove one of these theorems. (you can choose which one.)

115

11 circuit design

11.1 interconnect sizing.

in this problem we will size the interconnecting wires of the simple circuit
shown below, with one voltage source driving three di   erent capacitive loads cload1, cload2, and
cload3.

we divide the wires into 6 segments of    xed length li; our variables will be the widths wi of the
segments. (the height of the wires is related to the particular ic technology process, and is    xed.)
the total area used by the wires is, of course,

(cid:88)

a =

wili.

i

we   ll take the lengths to be one, for simplicity. the wire widths must be between a minimum and
maximum allowable value:

wmin     wi     wmax.

for our speci   c problem, we   ll take wmin = 0.1 and wmax = 10.

each of the wire segments will be modeled by a simple simple rc circuit, with the resistance
inversely proportional to the width of the wire and the capacitance proportional to the width. (a
far better model uses an extra constant term in the capacitance, but this complicates the equations.)
the capacitance and resistance of the ith segment is thus

ci = k0wi,

ri =   /wi,

where k0 and    are positive constants, which we take to be one for simplicity. we also have
cload1 = 1.5, cload2 = 1, and cload3 = 5.
using the rc model for the wire segments yields the circuit shown below.

116

c3c6c5we will use the elmore delay to model the delay from the source to each of the loads. the elmore
delay to loads 1, 2, and 3 are given by

t1 = (c3 + cload1)(r1 + r2 + r3) + c2(r1 + r2) +

+(c1 + c4 + c5 + c6 + cload2 + cload3)r1

t2 = (c5 + cload2)(r1 + r4 + r5) + c4(r1 + r4) +

+(c6 + cload3)(r1 + r4) + (c1 + c2 + c3 + cload1)r1

t3 = (c6 + cload3)(r1 + r4 + r6) + c4(r1 + r4) +

+(c1 + c2 + c3 + cload1)r1 + (c5 + cload2)(r1 + r4).

our main interest is in the maximum of these delays,

t = max{t1, t2, t3}.

(a) explain how to    nd the optimal trade-o    curve between area a and delay t .

(b) optimal area-delay sizing. for the speci   c problem parameters given, plot the area-delay
trade-o    curve, together with the individual elmore delays. comment on the results you
obtain.

(c) the simple method. plot the area-delay trade-o    obtained when you assign all wire widths
to be the same width (which varies between wmin and wmax). compare this curve to the
optimal one, obtained in part (b). how much better does the optimal method do than the
simple method? note:
for a large circuit, say with 1000 wires to size, the di   erence is far
larger.

for this problem you can use the cvx in gp mode. we   ve also made available the function
elm_del_example.m, which evaluates the three delays, given the widths of the wires.

11.2 optimal sizing of power and ground trees. we consider a system or vlsi device with many sub-
systems or subcircuits, each of which needs one or more power supply voltages. in this problem we
consider the case where the power supply network has a tree topology with the power supply (or
external pin connection) at the root. each node of the tree is connected to some subcircuit that
draws power.

117

r1r2r3r4r5r6c1c2c4c3c6c5we model the power supply as a constant voltage source with value v . the m subcircuits are
modeled as current sources that draw currents i1(t), . . . , im(t) from the node (to ground) (see the
   gure below).

the subcircuit current draws have two components:

ik(t) = idc

k + iac

k (t)

where idc
has zero average value). we characterize the ac current draw by its rms value, de   ned as

k is the dc current draw (which is a positive constant), and iac

k (t) is the ac draw (which

(cid:18)

(cid:90) t

0

rms(iac

k ) =

lim
t      

1
t

k (t)2 dt
iac

.

(cid:19)1/2

for each subcircuit we are given maximum values for the dc and rms ac currents draws, i.e.,
constants i dc

k and i ac

k such that

0     idc

k     i dc
k ,

rms(iac

k )     i ac
k .

(39)

the n wires that form the distribution network are modeled as resistors rk (which, presumably, have
small value). (since the circuit has a tree topology, we can use the following labeling convention:
node k and the current source ik(t) are immediately following resistor rk.) the resistance of the
wires is given by

ri =   li/wi,

where    is a constant and li are the lengths of the wires, which are known and    xed. the variables
in the problem are the width of the wires, w1, . . . , wn. obviously by making the wires very wide,
the resistances become very low, and we have a nearly ideal power network. the purpose of this
problem is to optimally select wire widths, to minimize area while meeting certain spec   cations.
note that in this problem we ignore dynamics, i.e., we do not model the capacitance or inductance
of the wires.

as a result of the current draws and the nonzero resistance of the wires, the voltage at node k
(which supplies subcircuit k) has a dc value less than the supply voltage, and also an ac voltage
(which is called power supply ripple or noise). by superposition these two e   ects can be analyzed
separately.

118

r2r3r4r5r6i1i4i5i6r1vii3i2    the dc voltage drop v     vdc

k at node k is equal to the sum of the voltage drops across wires

on the (unique) path from node k to the root. it can be expressed as

v     vdc

k =

idc
j

m(cid:88)

j=1

(cid:88)

i   n (j,k)

ri,

(40)

where n (j, k) consists of the indices of the branches upstream from nodes j and k, i.e.,
i     n (j, k) if and only if ri is in the path from node j to the root and in the path from node
k to the root.

    the power supply noise at a node can be found as follows. the ac voltage at node k is equal

to

(cid:88)

ri.

i   n (j,k)

vac

j=1

iac
j (t)

k (t) =     m(cid:88)
      rms(iac
       m(cid:88)

we assume the ac current draws are independent, so the rms value of vac
k (t) is given by the
squareroot of the sum of the squares of the rms value of the ripple due to each other node,
i.e.,

      2      1/2
the problem is to choose wire widths wi that minimize the total wire area (cid:80)n

(cid:88)

rms(vac

i=k wklk subject to

i   n (j,k)

k ) =

(41)

j )

ri

j=1

.

the following speci   cations:

    maximum allowable dc voltage drop at each node:

v     vdc

k     v dc
max,

k = 1, . . . , m,

where v     vdc

k is given by (40), and v dc

max is a given constant.

    maximum allowable power supply noise at each node:

rms(vac

k )     v ac
max,

k = 1, . . . , m,

where rms(vac

k ) is given by (41), and v ac
    upper and lower bounds on wire widths:

max is a given constant.

wmin     wi     wmax,

i = 1, . . . , n,

where wmin and wmax are given constants.

    maximum allowable dc current density in a wire:

       (cid:88)

j   m(k)

      (cid:44)

idc
j

wk       max,

k = 1, . . . , n,

(42)

(43)

(44)

(45)

where m(k) is the set of all indices of nodes downstream from resistor k, i.e., j     m(k) if
and only if rk is in the path from node j to the root, and   max is a given constant.

119

    maximum allowable total dc power dissipation in supply network:

n(cid:88)

rk

       (cid:88)

j   m(k)

      2

idc
j

    pmax,

(46)

where pmax is a given constant.

k=1

these speci   cations must be satis   ed for all possible ik(t) that satisfy (39).
formulate this as a id76 problem in the standard form

f0(x)

minimize
subject to fi(x)     0,
ax = b.

i = 1, . . . , p

you may introduce new variables, or use a change of variables, but you must say very clearly

    what the optimization variable x is, and how it corresponds to the problem variables w (i.e.,

is x equal to w, does it include auxiliary variables, . . . ?)

    what the objective f0 and the constraint functions fi are, and how they relate to the objectives

and speci   cations of the problem description

    why the objective and constraint functions are convex
    what a and b are (if applicable).

11.3 optimal ampli   er gains. we consider a system of n ampli   ers connected (for simplicity) in a chain,
as shown below. the variables that we will optimize over are the gains a1, . . . , an > 0 of the
ampli   ers. the    rst speci   cation is that the overall gain of the system, i.e., the product a1        an,
is equal to atot, which is given.

we are concerned about two e   ects: noise generated by the ampli   ers, and ampli   er overload.
these e   ects are modeled as follows.

we    rst describe how the noise depends on the ampli   er gains. let ni denote the noise level (rms,
or root-mean-square) at the output of the ith ampli   er. these are given recursively as

(cid:0)n 2

(cid:1)1/2

n0 = 0, ni = ai

i   1 +   2
i

,

i = 1, . . . , n

where   i > 0 (which is given) is the (   input-referred   ) rms noise level of the ith ampli   er. the
output noise level nout of the system is given by nout = nn, i.e., the noise level of the last ampli   er.
evidently nout depends on the gains a1, . . . , an.

120

a1a2annow we describe the ampli   er overload limits. si will denote the signal level at the output of the
ith ampli   er. these signal levels are related by

s0 = sin,

si = aisi   1,

i = 1, . . . , n,

where sin > 0 is the input signal level. each ampli   er has a maximum allowable output level
mi > 0 (which is given). (if this level is exceeded the ampli   er will distort the signal.) thus we
have the constraints si     mi, for i = 1, . . . , n. (we can ignore the noise in the overload condition,
since the signal levels are much larger than the noise levels.)

(cid:81)

the maximum output signal level smax is de   ned as the maximum value of sn, over all input signal
levels sin that respect the the overload constraints si     mi. of course smax     mn, but it can be
smaller, depending on the gains a1, . . . , an.
the dynamic range d of the system is de   ned as d = smax/nout. evidently it is a (rather
complicated) function of the ampli   er gains a1, . . . , an.
the goal is to choose the gains ai to maximize the dynamic range d, subject to the constraint
i ai = atot, and upper bounds on the ampli   er gains, ai     amax
explain how to solve this problem as a convex (or quasiconvex) optimization problem. if you intro-
duce new variables, or transform the variables, explain. clearly give the objective and inequality
constraint functions, explaining why they are convex if it is not obvious. if your problem involves
equality constraints, give them explicitly.

(which are given).

i

carry out your method on the speci   c instance with n = 4, and data

atot = 10000,

   = (10   5, 10   2, 10   2, 10   2),
m = (0.1, 5, 10, 10),
amax = (40, 40, 40, 20).

give the optimal gains, and the optimal dynamic range.

11.4 blending existing circuit designs. in circuit design, we must select the widths of a set of n compo-

nents, given by the vector w = (w1, . . . , wn), which must satisfy width limits

w min     wi     w max,

i = 1, . . . , n,

where w min and w max are given (positive) values. (you can assume there are no other constraints
on w.) the design is judged by three objectives, each of which we would like to be small: the
circuit power p (w), the circuit delay d(w), and the total circuit area a(w). these three objectives
are (complicated) posynomial functions of w.

you do not know the functions p , d, or a. (that is, you do not know the coe   cients or exponents
in the posynomial expressions.) you do know a set of k designs, given by w(1), . . . , w(k)     rn, and
their associated objective values

p (w(j)), d(w(j)), a(w(j)),

j = 1, . . . , k.

you can assume that these designs satisfy the width limits. the goal is to    nd a design w that
satis   es the width limits, and the design speci   cations

p (w)     pspec, d(w)     dspec, a(w)     aspec,

121

where pspec, dspec, and aspec are given.
now consider the speci   c data given in blend_design_data.m. give the following.

    a feasible design (i.e., w) that satis   es the speci   cations.
    a clear argument as to how you know that your design satis   es the speci   cations, even though

you do not know the formulas for p , d, and a.

    your method for    nding w, including any code that you write.

hints/comments.

    you do not need to know anything about circuit design to solve this problem.
    see the title of this problem.

11.5 solving nonlinear circuit equations using id76. an electrical circuit consists of b
two-terminal devices (or branches) connected to n nodes, plus a so-called ground node. the goal is
to compute several sets of physical quantities that characterize the circuit operation. the vector of
branch voltages is v     rb, where vj is the voltage appearing across device j. the vector of branch
currents is i     rb, where ij is the current    owing through device j. (the symbol i, which is often
used to denote an index, is unfortunately the standard symbol used to denote current.) the vector
of node potentials is e     rn, where ek is the potential of node k with respect to the ground node.
(the ground node has potential zero by de   nition.)

the circuit variables v, i, and e satisfy several physical laws. kirchho      s current law (kcl) can
be expressed as ai = 0, and kirchho      s voltage law (kvl) can be expressed as v = at e, where
a     rn  b is the reduced incidence matrix, which describes the circuit topology:

             1 branch j enters node k

+1 branch j leaves node k
0

otherwise,

akj =

for k = 1, . . . , n, j = 1, . . . , b. (kcl states that current is conserved at each node, and kvl states
that the voltage across each branch is the di   erence of the potentials of the nodes it is connected
to.)

the branch voltages and currents are related by

vj =   j(ij),

j = 1, . . . , b,

where   j is a given function that depends on the type of device j. we will assume that these
functions are continuous and nondecreasing. we give a few examples. if device j is a resistor with
resistance rj > 0, we have   j(ij) = rjij (which is called ohm   s law).
if device j is a voltage
source with voltage vj and internal resistance rj > 0, we have   j(ij) = vj + rjij. and for a more
interesting example, if device j is a diode, we have   j(ij) = vt log(1 + ij/is), where is and vt are
known positive constants.

(a) find a method to solve the circuit equations, i.e.,    nd v, i, and e that satisfy kcl, kvl,
and the branch equations, that relies on id76. state the optimization problem
clearly, indicating what the variables are. be sure to explain how solving the convex optimiza-
tion problem you propose leads to choices of the circuit variables that satisfy all of the circuit

122

equations. you can assume that no pathologies occur in the problem that you propose, for
example, it is feasible, a suitable constraint quali   cation holds, and so on.
hint. you might    nd the function    : rb     r,

(cid:90) ij

b(cid:88)

  (i1, . . . , ib) =

  j(uj) duj,

useful.

j=1

0

(b) consider the circuit shown in the diagram below. device 1 is a voltage source with parameters
v1 = 1000, r1 = 1. devices 2 and 5 are resistors with resistance r2 = 1000, and r5 = 100
respectively. devices 3 and 4 are identical diodes with parameters vt = 26, is = 1. (the
units are mv, ma, and    .)
the nodes are labeled n1, n2, and n3; the ground node is at the bottom. the incidence
matrix a is

       1

a =

1

0
0
0    1 1
0
0    1 1
0

0
1

0

       .

(the reference direction for each edge is down or to the right.)
use the method in part (a) to compute v, i, and e. verify that all the circuit equations hold.

n1

r2

n2

d4

n3

v1

+
   

d3

r5

123

12 signal processing and communications

12.1 fir low-pass    lter design. consider the (symmetric, linear phase)    nite impulse response (fir)

   lter described by its frequency response

h(  ) = a0 +

n(cid:88)

k=1

ak cos k  ,

where        [0,   ] is the frequency. the design variables in our problems are the real coe   cients
a = (a0, . . . , an )     rn +1, where n is called the order or length of the fir    lter. in this problem
we will explore the design of a low-pass    lter, with speci   cations:

    for 0              /3, 0.89     h(  )     1.12, i.e., the    lter has about   1db ripple in the    passband   

[0,   /3].

    for   c              , |h(  )|       . in other words, the    lter achieves an attenuation given by    in

the    stopband    [  c,   ]. here   c is called the    lter    cuto    frequency   .

(it is called a low-pass    lter since low frequencies are allowed to pass, but frequencies above the
cuto    frequency are attenuated.) these speci   cations are depicted graphically in the    gure below.

for parts (a)   (c), explain how to formulate the given problem as a convex or quasiconvex optimiza-
tion problem.

(a) maximum stopband attenuation. we    x   c and n , and wish to maximize the stopband atten-

uation, i.e., minimize   .

(b) minimum transition band. we    x n and   , and want to minimize   c, i.e., we set the stopband
attenuation and    lter length, and wish to minimize the    transition    band (between   /3 and
  c).

(c) shortest length    lter. we    x   c and   , and wish to    nd the smallest n that can meet the

speci   cations, i.e., we seek the shortest length fir    lter that can meet the speci   cations.

124

00w1wciimazz1a091011wa(d) numerical    lter design. use cvx to    nd the shortest length    lter that satis   es the    lter

speci   cations with

  c = 0.4  ,    = 0.0316.

(the attenuation corresponds to    30db.) for this subproblem, you may sample the constraints
in frequency, which means the following. choose k large (say, 500; an old rule of thumb is that
k should be at least 15n ), and set   k = k  /k, k = 0, . . . , k. then replace the speci   cations
with
    for k with 0       k       /3, 0.89     h(  k)     1.12.
    for k with   c       k       , |h(  k)|       .
plot h(  ) versus    for your design.

12.2 sinr maximization. solve the following instance of problem 4.20: we have n = 5 transmitters,
grouped into two groups: {1, 2} and {3, 4, 5}. the maximum power for each transmitter is 3, the
total power limit for the    rst group is 4, and the total power limit for the second group is 6. the
noise    is equal to 0.5 and the limit on total received power is 5 for each receiver. finally, the path
gain matrix is given by

                  

g =

                   .

1.0 0.1 0.2 0.1 0.0
0.1 1.0 0.1 0.1 0.0
0.2 0.1 2.0 0.2 0.2
0.1 0.1 0.2 1.0 0.1
0.0 0.0 0.2 0.1 1.0

find the transmitter powers p1, . . . , p5 that maximize the minimum sinr ratio over all receivers.
also report the maximum sinr value. solving the problem to an accuracy of 0.05 (in sinr) is
   ne.

hint. when implementing a bisection method in cvx, you will need to check feasibility of a convex
problem. you can do this using strcmpi(cvx_status,    solved   ).

12.3 power control for sum rate maximization in interference channel. we consider the optimization

problem

maximize

subject to

(cid:33)

(cid:80)

pi

j(cid:54)=i aijpj + vi

n(cid:88)
n(cid:88)

i=1

(cid:32)

log

1 +

pi = 1

i=1

pi     0,

i = 1, . . . , n

with variables p     rn. the problem data are the matrix a     rn  n and the vector v     rn.
we assume a and v are componentwise nonnegative (aij     0 and vi     0), and that the diagonal
elements of a are equal to one. if the o   -diagonal elements of a are zero (a = i), the problem
has a simple solution, given by the water   lling method. we are interested in the case where the
o   -diagonal elements are nonzero.

we can give the following interpretation of the problem, which is not needed below. the variables
in the problem are the transmission powers in a communications system. we limit the total power
to one (for simplicity; we could have used any other number). the ith term in the objective is

125

the shannon capacity of the ith channel; the fraction in the argument of the log is the signal to
interference plus noise ratio.

we can express the problem as

maximize

subject to

n(cid:88)
n(cid:88)

i=1

(cid:32) (cid:80)n
(cid:80)n
j=1 bijpj     pi

j=1 bijpj

(cid:33)

log

pi = 1

(47)

i=1

pi     0,

i = 1, . . . , n,

where b     rn  n is de   ned as b = a + v1t , i.e., bij = aij + vi, i, j = 1, . . . , n. suppose b is
nonsingular and

b   1 = i     c

with cij     0. express the problem above as a id76 problem. hint. use y = bp as
variables.

12.4 radio-relay station placement and power allocation. radio relay stations are to be located at posi-
tions x1, . . . , xn     r2, and transmit at power p1, . . . , pn     0. in this problem we will consider the
problem of simultaneously deciding on good locations and operating powers for the relay stations.

the received signal power sij at relay station i from relay station j is proportional to the transmit
power and inversely proportional to the distance, i.e.,

sij =

  pj

(cid:107)xi     xj(cid:107)2 ,

where    > 0 is a known constant.
relay station j must transmit a signal to relay station i at the rate (or bandwidth) rij     0 bits
per second; rij = 0 means that relay station j does not need to transmit any message (directly)
to relay station i. the matrix of bit rates rij is given. although it doesn   t a   ect the problem, r
would likely be sparse, i.e., each relay station needs to communicate with only a few others.

to guarantee accurate reception of the signal from relay station j to i, we must have

sij       rij,

where    > 0 is a known constant. (in other words, the minimum allowable received signal power
is proportional to the signal bit rate or bandwidth.)

the relay station positions xr+1, . . . , xn are    xed, i.e., problem parameters. the problem variables
are x1, . . . , xr and p1, . . . , pn. the goal is to choose the variables to minimize the total transmit
power, i.e., p1 +        + pn.
explain how to solve this problem as a convex or quasiid76 problem. if you intro-
duce new variables, or transform the variables, explain. clearly give the objective and inequality
constraint functions, explaining why they are convex. if your problem involves equality constraints,
express them using an a   ne function.

126

12.5 power allocation with coherent combining receivers.

in this problem we consider a variation on
the power allocation problem described on pages 4-13 and 4-14 of the notes. in that problem we
have m transmitters, each of which transmits (broadcasts) to n receivers, so the total number of
receivers is mn. in this problem we have the converse: multiple transmitters send a signal to each
receiver.

more speci   cally we have m receivers labeled 1, . . . , m, and mn transmitters labeled (j, k), j =
1, . . . , m, k = 1, . . . , n. the transmitters (i, 1), . . . , (i, n) all transmit the same message to the
receiver i, for i = 1, . . . , m.
transmitter (j, k) operates at power pjk, which must satisfy 0     pjk     pmax, where pmax is a given
maximum allowable transmitter power.

the path gain from transmitter (j, k) to receiver i is aijk > 0 (which are given and known). thus
the power received at receiver i from transmitter (j, k) is given by aijkpjk.
for i (cid:54)= j, the received power aijkpjk represents an interference signal. the total interference-plus-
noise power at receiver i is given by

(cid:88)

       (cid:88)

ii =

aijkpjk +   

j(cid:54)=i, k=1,...,n

      2

si =

(aiikpik)1/2

.

where    > 0 is the known, given (self) noise power of the receivers. note that the powers of the
interference and noise signals add to give the total interference-plus-noise power.

the receivers use coherent detection and combining of the desired message signals, which means
the e   ective received signal power at receiver i is given by

k=1,...,n

(thus, the amplitudes of the desired signals add to give the e   ective signal amplitude.)

the total signal to interference-plus-noise ratio (sinr) for receiver i is given by   i = si/ii.
the problem is to choose transmitter powers pjk that maximize the minimum sinr mini   i, subject
to the power limits.

explain in detail how to solve this problem using convex or quasiid76.
if you
transform the problem by using a di   erent set of variables, explain completely. identify the objective
function, and all constraint functions, indicating if they are convex or quasiconvex, etc.

12.6 antenna array weight design. we consider an array of n omnidirectional antennas in a plane, at

positions (xk, yk), k = 1, . . . , n.

127

p1kthetan(cid:88)
n(cid:88)

k=1

a unit plane wave with frequency    is incident from an angle   . this incident wave induces in
the kth antenna element a (complex) signal exp(i(xk cos    + yk sin          t)), where i =
simplicity we assume that the spatial units are normalized so that the wave number is one, i.e., the
wavelength is    = 2  .) this signal is demodulated, i.e., multiplied by ei  t, to obtain the baseband
signal (complex number) exp(i(xk cos    + yk sin   )). the baseband signals of the n antennas are
combined linearly to form the output of the antenna array

      1. (for

g(  ) =

=

wk ei(xk cos   +yk sin   )

(wre,k cos   k(  )     wim,k sin   k(  )) + i (wre,k sin   k(  ) + wim,k cos   k(  )) ,

k=1

if we de   ne   k(  ) = xk cos    + yk sin   . the complex weights in the linear combination,

wk = wre,k + iwim,k,

k = 1, . . . , n,

are called the antenna array coe   cients or shading coe   cients, and will be the design variables
in the problem. for a given set of weights, the combined output g(  ) is a function of the angle
of arrival    of the plane wave. the design problem is to select weights wi that achieve a desired
directional pattern g(  ).
we now describe a basic weight design problem. we require unit gain in a target direction   tar,
i.e., g(  tar) = 1. we want |g(  )| small for |         tar|        , where 2    is our beamwidth. to do this,
we can minimize

|g(  )|,

max

|       tar|      

where the maximum is over all        [     ,   ] with |         tar|        . this number is called the sidelobe
level for the array; our goal is to minimize the sidelobe level. if we achieve a small sidelobe level,
then the array is relatively insensitive to signals arriving from directions more than     away from
the target direction. this results in the optimization problem

minimize max|       tar|       |g(  )|
subject to g(  tar) = 1,

with w     cn as variables.
the objective function can be approximated by discretizing the angle of arrival with (say) n values
(say, uniformly spaced)   1, . . . ,   n over the interval [     ,   ], and replacing the objective with

max{|g(  k)| | |  k       tar|        }

(a) formulate the antenna array weight design problem as an socp.
(b) solve an instance using cvx, with n = 40,   tar = 15   ,     = 15   , n = 400, and antenna

positions generated using

rand(   state   ,0);
n = 40;
x = 30 * rand(n,1);
y = 30 * rand(n,1);

128

compute the optimal weights and make a plot of |g(  )| (on a logarithmic scale) versus   .
hint. cvx can directly handle complex variables, and recognizes the modulus abs(x) of a
complex number as a convex function of its real and imaginary parts, so you do not need to
explicitly form the socp from part (a). even more compactly, you can use norm(x,inf)
with complex argument.

12.7 power allocation problem with analytic solution. consider a system of n transmitters and n re-
ceivers. the ith transmitter transmits with power xi, i = 1, . . . , n. the vector x will be the variable
in this problem. the path gain from each transmitter j to each receiver i will be denoted aij and
is assumed to be known (obviously, aij     0, so the matrix a is elementwise nonnegative, and
aii > 0). the signal received by each receiver i consists of three parts: the desired signal, arriving
from transmitter i with power aiixi, the interfering signal, arriving from the other receivers with
j(cid:54)=i aijxj, and noise   i (which are positive and known). we are interested in allocating
the powers xi in such a way that the signal to noise plus interference ratio at each of the receivers
exceeds a level   .
(thus    is the minimum acceptable snir for the receivers; a typical value
might be around    = 3, i.e., around 10db). in other words, we want to    nd x (cid:23) 0 such that for
i = 1, . . . , n

power (cid:80)

      (cid:88)

j(cid:54)=i

       .

aiixi       

aijxj +   i

equivalently, the vector x has to satisfy

where b     rn  n is de   ned as

x (cid:23) 0, bx (cid:23)     

(48)

bii = aii, bij =      aij, j (cid:54)= i.

(a) show that (48) is feasible if and only if b is invertible and z = b   11 (cid:23) 0 (1 is the vector with

all components 1). show how to construct a feasible power allocation x from z.

(b) show how to    nd the largest possible snir, i.e., how to maximize    subject to the existence

of a feasible power allocation.

to solve this problem you may need the following:
hint. let t     rn  n be a matrix with nonnegative elements, and s     r. then the following are
equivalent:
(a) s >   (t ), where   (t ) = maxi |  i(t )| is the spectral radius of t .
(b) si     t is nonsingular and the matrix (si     t )   1 has nonnegative elements.
(c) there exists an x (cid:23) 0 with (si     t )x (cid:31) 0.
(for such s, the matrix si     t is called a nonsingular m-matrix.)
remark. this problem gives an analytic solution to a very special form of transmitter power
allocation problem. speci   cally, there are exactly as many transmitters as receivers, and no power
limits on the transmitters. one consequence is that the receiver noises   i play no role at all in the
solution     just crank up all the transmitters to overpower the noises!

129

12.8 optimizing rates and time slot fractions. we consider a wireless system that uses time-domain
multiple access (tdma) to support n communication    ows. the    ows have (nonnegative) rates
r1, . . . , rn, given in bits/sec. to support a rate ri on    ow i requires transmitter power

p = ai(ebr     1),

where b is a (known) positive constant, and ai are (known) positive constants related to the noise
power and gain of receiver i.

tdma works like this. time is divided up into periods of some    xed duration t (seconds). each
of these t -long periods is divided into n time-slots, with durations t1, . . . , tn, that must satisfy
t1 +        + tn = t , ti     0. in time-slot i, communications    ow i is transmitted at an instantaneous
rate r = t ri/ti, so that over each t -long period, t ri bits from    ow i are transmitted. the power
required during time-slot i is ai(ebt ri/ti     1), so the average transmitter power over each t -long
period is

p = (1/t )

aiti(ebt ri/ti     1).

n(cid:88)

i=1

when ti is zero, we take p =     if ri > 0, and p = 0 if ri = 0. (the latter corresponds to the case
when there is zero    ow, and also, zero time allocated to the    ow.)
the problem is to    nd rates r     rn and time-slot durations t     rn that maximize the log utility
function

n(cid:88)

u (r) =

log ri,

subject to p     p max. (this utility function is often used to ensure    fairness   ; each communication
   ow gets at least some positive rate.) the problem data are ai, b, t and p max; the variables are ti
and ri.

i=1

(a) formulate this problem as a id76 problem. feel free to introduce new variables,
if needed, or to change variables. be sure to justify convexity of the objective or constraint
functions in your formulation.

(b) give the optimality conditions for your formulation. of course we prefer simpler optimality
conditions to complex ones. note: we do not expect you to solve the optimality conditions;
you can give them as a set of equations (and possibly inequalities).

hint. with a log utility function, we cannot have ri = 0, and therefore we cannot have ti = 0;
therefore the constraints ri     0 and ti     0 cannot be active or tight. this will allow you to simplify
the optimality conditions.

12.9 optimal jamming power allocation. a set of n jammers transmit with (nonnegative) powers

p1, . . . , pn, which are to be chosen subject to the constraints
f p (cid:22) g.

p (cid:23) 0,

the jammers produce interference power at m receivers, given by

di =

gijpj,

i = 1, . . . , m,

n(cid:88)

j=1

130

where gij is the (nonnegative) channel gain from jammer j to receiver i.
receiver i has capacity (in bits/s) given by

ci =    log(1 +   i/(  2

i + di)),

i = 1, . . . , m,

i is the receiver i self-noise, but you won   t need to know this to solve the problem.)

where   ,   i, and   i are positive constants. (here   i is proportional to the signal power at receiver
i and   2
explain how to choose p to minimize the sum channel capacity, c = c1 +        + cm, using convex
optimization. (this corresponds to the most e   ective jamming, given the power constraints.) the
problem data are f , g, g,   ,   i,   i.
if you change variables, or transform your problem in any way that is not obvious (for example, you
form a relaxation), you must explain fully how your method works, and why it gives the solution.
if your method relies on any convex functions that we have not encountered before, you must show
that the functions are convex.

disclaimer. the teaching sta    does not endorse jamming, optimal or otherwise.

12.10 2d    lter design. a symmetric convolution kernel with support {   (n     1), . . . , n     1}2 is charac-

terized by n 2 coe   cients

hkl,

k, l = 1, . . . , n.

these coe   cients will be our variables. the corresponding 2d frequency response (fourier trans-
form) h : r2     r is given by

(cid:88)

h(  1,   2) =

hkl cos((k     1)  1) cos((l     1)  2),

k,l=1,...,n

where   1 and   2 are the frequency variables. evidently we only need to specify h over the region
[0,   ]2, although it is often plotted over the region [     ,   ]2. (it won   t matter in this problem, but
we should mention that the coe   cients hkl above are not exactly the same as the impulse response
coe   cients of the    lter.)

we will design a 2d    lter (i.e.,    nd the coe   cients hkl) to satisfy h(0, 0) = 1 and to minimize the
maximum response r in the rejection region    rej     [0,   ]2,

r =

sup

(  1,  2)      rej

|h(  1,   2)|.

(a) explain why this 2d    lter design problem is convex.
(b) find the optimal    lter for the speci   c case with n = 5 and
1 +   2

   rej = {(  1,   2)     [0,   ]2 |   2

2     w 2},

with w =   /4.
you can approximate r by sampling on a grid of frequency values. de   ne

  (p) =   (p     1)/m,

p = 1, . . . , m.

(you can use m = 25.) we then replace the exact expression for r above with
  r = max{|h(  (p),   (q))| | p, q = 1, . . . , m, (  (p),   (q))        rej}.

give the optimal value of   r. plot the optimal frequency response using plot_2d_filt(h),
available on the course web site, where h is the matrix containing the coe   cients hkl.

131

12.11 maximizing log utility in a wireless system with interference. consider a wireless network consisting
of n data links, labeled 1, . . . , n. link i transmits with power pi > 0, and supports a data rate
ri = log(1 +   i), where   i is the signal-to-interference-plus-noise ratio (sinr). these sinr ratios
depend on the transmit powers, as described below.
the system is characterized by the link gain matrix g     rn  n
++ , where gij is the gain from the
transmitter on link j to the receiver for link i. the received signal power for link i is giipi; the
noise plus interference power for link i is given by

  2
i +

gijpj,

  i =

  2

giipi

.

j(cid:54)=i gijpj

(cid:88)

j(cid:54)=i

i +(cid:80)
n(cid:88)

u (p ) =

log ri.

where   2

i > 0 is the receiver noise power for link i. the sinr is the ratio

the problem is to choose the transmit powers p1, . . . , pn, subject to 0 < pi     p max
maximize the log utility function

i

, in order to

i=1

(this utility function can be argued to yield a fair distribution of rates.) the data are g,   2
p max

.

i , and

i

formulate this problem as a convex or quasiid76 problem. if you make any trans-
formations or use any steps that are not obvious, explain.

hints.

    the function log log(1 + ex) is concave. (if you use this fact, you must show it.)
    you might    nd the new variables de   ned by zi = log pi useful.

12.12 spectral factorization via semide   nite programming. a toeplitz matrix is a matrix that has constant

values on its diagonals. we use the notation

                           

x1
x2
x3
...

x2
x1
x2
...

x3
x2
x1
...

xm   1 xm   2 xm   2
xm   1 xm   2
xm

       xm   1
xm
       xm   2 xm   1
       xm   3 xm   2
. . .
      
      

...
x2
x1

...
x1
x2

                           

tm(x1, . . . , xm) =

to denote the symmetric toeplitz matrix in sm  m constructed from x1, . . . , xm. consider the
semide   nite program

minimize
subject to tn(x1, . . . , xn) (cid:23) e1et
1 ,

ct x

with variable x = (x1, . . . , xn), where e1 = (1, 0, . . . , 0).

132

(a) derive the dual of the sdp above. denote the dual variable as z. (hence z     sn and the

dual constraints include an inequality z (cid:23) 0.)

(b) show that tn(x1, . . . , xn) (cid:31) 0 for every feasible x in the sdp above. you can do this by

induction on n.
    for n = 1, the constraint is x1     1 which obviously implies x1 > 0.
    in the induction step, assume n     2 and that tn   1(x1, . . . , xn   1) (cid:31) 0. use a schur
complement argument and the toeplitz structure of tn to show that tn(x1, . . . , xn) (cid:23) e1et
implies tn(x1, . . . , xn) (cid:31) 0.

1

(c) suppose the optimal value of the sdp above is    nite and attained, and that z is dual optimal.
use the result of part (b) to show that the rank of z is at most one, i.e., z can be expressed
as z = yyt for some n-vector y. show that y satis   es
2 +        + y2

n = c1

y2
1 + y2

y1y2 + y2y3 +        + yn   1yn = c2/2

...

y1yn   1 + y2yn = cn   1/2

y1yn = cn/2.

this can be expressed as an identity |y (  )|2 = r(  ) between two functions

y (  ) = y1 + y2e   i   + y3e   3i   +        + yne   i(n   1)  
r(  ) = c1 + c2 cos    + c3 cos(2  ) +        + cn cos((n     1)  )

      1). the function y (  ) is called a spectral factor of the trigonometric polynomial

(with i =
r(  ).

12.13 bandlimited signal recovery from zero-crossings. let y     rn denote a bandlimited signal, which

means that it can be expressed as a linear combination of sinusoids with frequencies in a band:

b(cid:88)

j=1

(cid:18) 2  

n

(cid:19)

(cid:18) 2  

n

(cid:19)

yt =

aj cos

(fmin + j     1)t

+ bj sin

(fmin + j     1)t

,

t = 1, . . . , n,

where fmin is lowest frequency in the band, b is the bandwidth, and a, b     rb are the cosine and
sine coe   cients, respectively. we are given fmin and b, but not the coe   cients a, b or the signal y.
we do not know y, but we are given its sign s = sign(y), where st = 1 if yt     0 and st =    1
if yt < 0. (up to a change of overall sign, this is the same as knowing the    zero-crossings    of the
signal, i.e., when it changes sign. hence the name of this problem.)

we seek an estimate   y of y that is consistent with the bandlimited assumption and the given signs.
of course we cannot distinguish y and   y, where    > 0, since both of these signals have the same
sign pattern. thus, we can only estimate y up to a positive scale factor. to normalize   y, we will
require that (cid:107)  y(cid:107)1 = n, i.e., the average value of |yi| is one. among all   y that are consistent with the
bandlimited assumption, the given signs, and the id172, we choose the one that minimizes
(cid:107)  y(cid:107)2.

133

(a) show how to    nd   y using convex or quasiid76.

(b) apply your method to the problem instance with data in zero_crossings_data.*. the data
   les also include the true signal y (which of course you cannot use to    nd   y). plot   y and y,
and report the relative recovery error, (cid:107)y       y(cid:107)2/(cid:107)y(cid:107)2. give one short sentence commenting on
the quality of the recovery.

12.14 wireless communication power optimization.

a wireless communication system consists of n
transmitters and n receivers, where transmitter i is meant to send information to receiver i. the
variables to be chosen are the transmitter powers pi, which are limited to the range [pmin, pmax],
where pmin > 0. receiver i receives power gijpj from each transmitter j, where gij     0 are
known channel gains, with gii > 0. the signal power at receiver i is giipi. receiver i also receives
interference power gijpj from each of the other transmitters, i.e., for j (cid:54)= i, and also has a self-noise
given by   2
j(cid:54)=i gijpj. the sinr
(signal to interference and noise ratio) for receiver i is

i . the total interference plus noise power at receiver i is   2

i +(cid:80)

i +(cid:80)

  2

giipi

.

j(cid:54)=i gijpj

si =

the sinr si determines the data rate ri (in bits/sec) that receiver i can receive, which has the
form ri =    log(1 + si), where    is a known positive constant. we will use system objective
r = mini ri, i.e., the minimum data rate of any of the n receivers.
we wish to maximize r, while minimizing total system power p = p1 +        + pn. this is a
bi-objective problem.

(a) explain how to compute the optimal trade-o    curve of minimum rate r versus total power
p , using convex or quasiid76. (by computing the curve, we mean computing
a number of pareto optimal points.) if you change variables in your formulation, be sure to
explain.
hint. in addition to the usual scalarization, there are many ways to compute pareto optimal
points for the bi-criterion problem above.

(b) find and plot the optimal trade-o    curve for the problem instance with data given in power_control_data.*,

with total power p on the horizontal axis. (it is enough to compute a few tens of points on
the pareto curve. be sure to check that the end-points of the pareto curve make sense.)

12.15 sparse blind deconvolution. we are given a time series observation y     rt , and seek a    lter
(convolution kernel) w     rk, so that the convolution x = w    y     rt +k   1 is sparse after truncating
the    rst and last k     1 entries, i.e., xk:t = (xk, xk+1, . . . , xt ) is sparse. here     denotes convolution,

k(cid:88)

xi =

wjyi   j,

i = 1, . . . , t + k     1,

j=1

where we assume that yt = 0 for t     0. typically we have k (cid:28) t .
as a convex surrogate for sparsity of x, we minimize its (cid:96)1-norm, (cid:107)x(cid:107)1. to preclude the trivial
solution w = 0, we normalize w by imposing the constraint w1 = 1.

134

interpretations. (these are not needed to solve the problem.) in signal processing dialect, we can
say that w is a    lter which, when applied to the signal y, results in x, a simpler, sparse signal. as
a second interpretation, we can say that y = w   1     x, where w   1 is the convolution inverse of w,
de   ned as

w   1 = f   1(1/f(w)),

where f is discrete fourier transform at length n = t + k and f   1 is its inverse transform. in
this interpretation, we can say that we have decomposed the signal into the convolution of a sparse
signal x and a signal with short (k-long) inverse, w   1.
carry out blind deconvolution on the signal given in blind_deconv_data.*. this    le also de   nes
the kernel length k. plot optimal w and x, and also the given observation y. also plot the inverse
kernel w   1, use the function inverse_ker that we provided in blind_deconv_data.*.
hint. the function conv(w,y) is overloaded to work with cvx*.

135

13 control and trajectory optimization

13.1 quickest take-o   . this problem concerns the braking and thrust pro   les for an airplane during
take-o   . for simplicity we will use a discrete-time model. the position (down the runway) and the
velocity in time period t are pt and vt, respectively, for t = 0, 1, . . .. these satisfy p0 = 0, v0 = 0,
and pt+1 = pt + hvt, t = 0, 1, . . ., where h > 0 is the sampling time period. the velocity updates as

vt+1 = (1       )vt + h(ft     bt),

t = 0, 1, . . . ,

where        (0, 1) is a friction or drag parameter, ft is the engine thrust, and bt is the braking force,
at time period t. these must satisfy

0     bt     min{bmax, ft},

0     ft     f max,

t = 0, 1, . . . ,

as well as a constraint on how fast the engine thrust can be changed,

|ft+1     ft|     s,

t = 0, 1, . . . .

here bmax, f max, and s are given parameters. the initial thrust is f0 = 0. the take-o    time is
t to = min{t | vt     v to}, where v to is a given take-o    velocity. the take-o    position is p to = pt to,
the position of the aircraft at the take-o    time. the length of the runway is l > 0, so we must
have p to     l.

(a) explain how to    nd the thrust and braking pro   les that minimize the take-o    time t to,
respecting all constraints. your solution can involve solving more than one convex problem,
if necessary.

(b) solve the quickest take-o    problem with data

h = 1,

   = 0.05, bmax = 0.5, f max = 4, s = 0.8,

v to = 40, l = 300.

plot pt, vt, ft, and bt versus t. comment on what you see. report the take-o    time and
take-o    position for the pro   le you    nd.

13.2 optimal spacecraft landing. we consider the problem of optimizing the thrust pro   le for a spacecraft

to carry out a landing at a target position. the spacecraft dynamics are

m  p = f     mge3,

where m > 0 is the spacecraft mass, p(t)     r3 is the spacecraft position, with 0 the target landing
position and p3(t) representing height, f (t)     r3 is the thrust force, and g > 0 is the gravitational
acceleration. (for simplicity we assume that the spacecraft mass is constant. this is not always
a good assumption, since the mass decreases with fuel use. we will also ignore any atmospheric
friction.) we must have p(t td) = 0 and   p(t td) = 0, where t td is the touchdown time. the
spacecraft must remain in a region given by

p3(t)       (cid:107)(p1(t), p2(t))(cid:107)2,

where    > 0 is a given minimum glide slope. the initial position p(0) and velocity   p(0) are given.

136

the thrust force f (t) is obtained from a single rocket engine on the spacecraft, with a given
maximum thrust; an attitude control system rotates the spacecraft to achieve any desired direction
of thrust. the thrust force is therefore characterized by the constraint (cid:107)f (t)(cid:107)2     f max. the fuel
use rate is proportional to the thrust force magnitude, so the total fuel use is

(cid:90) t td

  (cid:107)f (t)(cid:107)2 dt,

0

where    > 0 is the fuel consumption coe   cient. the thrust force is discretized in time, i.e., it is
constant over consecutive time periods of length h > 0, with f (t) = fk for t     [(k     1)h, kh), for
k = 1, . . . , k, where t td = kh. therefore we have

vk+1 = vk + (h/m)fk     hge3,

pk+1 = pk + (h/2)(vk + vk+1),

where pk denotes p((k   1)h), and vk denotes   p((k   1)h). we will work with this discrete-time model.
for simplicity, we will impose the glide slope constraint only at the times t = 0, h, 2h, . . . , kh.

(a) minimum fuel descent. explain how to    nd the thrust pro   le f1, . . . , fk that minimizes fuel

consumption, given the touchdown time t td = kh and discretization time h.

(b) minimum time descent. explain how to    nd the thrust pro   le that minimizes the touch-
down time, i.e., k, with h    xed and given. your method can involve solving several convex
optimization problems.

(c) carry out the methods described in parts (a) and (b) above on the problem instance with
data given in spacecraft_landing_data.*. report the optimal total fuel consumption for
part (a), and the minimum touchdown time for part (b). the data    les also contain plotting
code (commented out) to help you visualize your solution. use the code to plot the spacecraft
trajectory and thrust pro   les you obtained for parts (a) and (b).

hints.

    in julia, the plot will come out rotated.

remarks. if you   d like to see the ideas of this problem in action, watch these videos:

    http://www.youtube.com/watch?v=2t15vp1pyoa
    https://www.youtube.com/watch?v=orujskc2pg0
    https://www.youtube.com/watch?v=1b6oilnykki
    https://www.youtube.com/watch?v=zcbe8ocokaq

13.3 feedback gain optimization. a system (such as an industrial plant) is characterized by y = gu + v,
where y     rn is the output, u     rn is the input, and v     rn is a disturbance signal. the matrix
g     rn  n, which is known, is called the system input-output matrix. the input signal u is found
using a linear feedback (control) policy: u = f y, where f     rn  n is the feedback (gain) matrix,
which is what we need to determine. from the equations given above, we have

y = (i     gf )   1v,

u = f (i     gf )   1v.

(you can simply assume that i     gf will be invertible.)

137

the disturbance v is random, with e v = 0, e vvt =   2i, where    is known. the objective is to
minimize maxi=1,...,n e y2
i , the maximum mean square value of the output components, subject to
i     1, i = 1, . . . , n, i.e., each input component has a mean square value not
the constraint that e u2
exceeding one. the variable to be chosen is the matrix f     rn  n.

(a) explain how to use convex (or quasi-convex) optimization to    nd an optimal feedback gain
matrix. as usual, you must fully explain any change of variables or other transformations you
carry out, and why your formulation solves the problem described above. a few comments:
    you can assume that matrices arising in your change of variables are invertible; you do

not need to worry about the special cases when they are not.

    you can assume that g is invertible if you need to, but we will deduct a few points from

these answers.

(b) carry out your method for the problem instance with data

       0.3    0.1    0.9

0.3    0.3
0.2
0.6

   0.6
   0.3

       .

   = 1,

g =

give an optimal f , and the associated optimal objective value.

13.4 minimum time speed pro   le along a road. a vehicle of mass m > 0 moves along a road in r3, which
is piecewise linear with given knot points p1, . . . , pn +1     r3, starting at p1 and ending at pn +1. we
let hi = (pi)3, the z-coordinate of the knot point; these are the heights of the knot points (above
sea-level, say). for your convenience, these knot points are equidistant, i.e., (cid:107)pi+1     pi(cid:107)2 = d for all
i. (the points give an arc-length parametrization of the road.) we let si > 0 denote the (constant)
vehicle speed as it moves along road segment i, from pi to pi+1, for i = 1, . . . , n , and sn +1     0
denote the vehicle speed after it passes through knot point pn +1. our goal is to minimize the total
time to traverse the road, which we denote t .
we let fi     0 denote the total fuel burnt while traversing the ith segment. this fuel burn is turned
into an increase in vehicle energy given by   fi, where    > 0 is a constant that includes the engine
e   ciency and the energy content of the fuel. while traversing the ith road segment the vehicle is
subject to a drag force, given by cds2
i , where cd > 0 is the coe   cient of drag, which results in an
energy loss dcds2
i .
we derive equations that relate these quantities via energy balance:
i + mghi +   fi     dcds2
i ,

i+1 + mghi+1 =

i = 1, . . . , n,

ms2

ms2

1
2

1
2

where g = 9.8 is the gravitational acceleration. the lefthand side is the total vehicle energy (kinetic
plus potential) after it passes through knot point pi+1; the righthand side is the total vehicle energy
after it passes through knot point pi, plus the energy gain from the fuel burn, minus the energy
lost to drag. to set up the    rst vehicle speed s1 requires an additional initial fuel burn f0, with
  f0 = 1
fuel is also used to power the on-board system of the vehicle. the total fuel used for this purpose is
fob, where   fob = t p , where p > 0 is the (constant) power consumption of the on-board system.

we have a fuel capacity constraint: (cid:80)n

i=0 fi + fob     f , where f > 0 is the total initial fuel.

2 ms2
1.

the problem data are m, d, h1, . . . , hn +1,   , cd, p , and f . (you don   t need the knot points pi.)

138

(a) explain how to    nd the fuel burn levels f0, . . . , fn that minimize the time t , subject to the

constraints.

(b) carry out the method described in part (a) for the problem instance with data given in
min_time_speed_data.m. give the optimal time t (cid:63), and compare it to the time t unif achieved
if the fuel for propulsion were burned uniformly, i.e., f0 =        = fn . for each of these cases,
plot speed versus distance along the road, using the plotting code in the data    le as a template.

13.5 minimum time maneuver for a crane. a crane manipulates a load with mass m > 0 in two
dimensions using two cables attached to the load. the cables maintain angles      with respect to
vertical, as shown below.

     

load

the (scalar) tensions t left and t right in the two cables are independently controllable, from 0 up
to a given maximum tension t max. the total force on the load is

(cid:20)     sin   

(cid:21)

cos   

(cid:21)

(cid:20) sin   

cos   

f = t left

+ t right

+ mg,

where g = (0,   9.8) is the acceleration due to gravity. the acceleration of the load is then f/m.
we approximate the motion of the load using

pi+1 = pi + hvi,

vi+1 = vi + (h/m)fi,

i = 1, 2, . . . ,

where pi     r2 is the position of the load, vi     r2 is the velocity of the load, and fi     r2 is the
force on the load, at time t = ih. here h > 0 is a small (given) time step.
the goal is to move the load, which is initially at rest at position pinit to the position pdes, also at
rest, in minimum time. in other words, we seek the smallest k for which

is possible, subject to the constraints described above.

p1 = pinit,

pk = pdes,

v1 = vk = (0, 0)

(a) explain how to solve this problem using convex (or quasiconvex) optimization.

(b) carry out the method of part (a) for the problem instance with

m = 0.1,

   = 15   , t max = 2,

pinit = (0, 0),

pdes = (10, 2),

with time step h = 0.1. report the minimum time k(cid:63). plot the tensions versus time, and the
load trajectory, i.e., the points p1, . . . , pk in r2. does the load move along the line segment
between pinit and pdes (i.e., the shortest path from pinit and pdes)? comment brie   y.

139

13.6 planning an autonomous lane change. a vehicle is traveling down a highway with two lanes,
separated by l meters. at time t, its position is p(t) = (x(t), y(t))     r2
+. we require that
y(t)     [0, l], for all t. when y(t) = 0, it means the vehicle is in lane 1, when y(t) = l, it means
the vehicle is in lane 2, and when 0 < y(t) < l, it means the vehicle is passing between lanes.
(notice that since a lane on a highway has tra   c moving in a single direction, we require that x(t)
is nondecreasing in t.)

for simplicity, we discretize the problem. we will consider the position of the vehicle every second,
so pt = (xt, yt), t = 0, 1, . . . , t , denotes the vehicles position from 0 to t seconds (in particular,
this means pt = p(t)). initially (t = 0), the vehicle lies in lane 1, and we assume x0 = 0. between t
and t + 1 seconds, we assume the vehicle travels at constant speed, measured in meters per second
(m/s). the speed from time t to t + 1 is simply (cid:107)pt+1     pt(cid:107)2. we require that these speeds never
exceed smax (for example, the speed limit plus, say, 4 or 5 m/s).
the goal of this problem is to plan a lane change. in particular, after time t start, the vehicle may
initiate a lane change from lane 1, and by time t end, the vehicle should have fully entered lane 2.
the vehicle should always travel at a speed of at most smax, measured in meters per second.
additionally, when the vehicle is not allowed to lane change (before t start and after t end), the
vehicle must be driving with at least a given minimum speed, smin, which is also given. (you may
assume that t start and t end are integers.)

your goal is to determine the smoothest possible lane change, subject to the constraints described
above. by smooth, we simply mean that you should minimize the total acceleration of the vehicle,
which can be approximated by

t   1(cid:88)

(cid:107)(pt+1     pt)     (pt     pt   1)(cid:107)2
2.

t=1

(a) explain how to plan this autonomous lane change using convex or quasiid76,
given t , t start, t end, smin, smax, and l. if you introduce new variables or make any trans-
formations you must justify them.

(b) carry out this method on the data below,

t = 30, t start = 15, t end = 20, smin = 25, smax = 35, l = 3.7.

produce a plot the speed of the vehicle against time, as well as the position of the vehicle in
r2 for the plan you produce.
remark. in fact, many highways have lanes separated by 3.7 meters. additionally, on average,
a lane change for a vehicle on a standard us freeway takes 5 to 6 seconds, and the speed limits
we impose here correspond to a vehicle driving between 55 mph, and 75 mph, which aren   t
unreasonable for a standard us highway.

13.7 optimal racing of an energy-limited vehicle. we have an energy-limited vehicle, such as a solar car,
moving along a    xed straight track. we   d like to design a control system to move the vehicle from
the starting point to the    nishing point using minimum energy in the time interval [0, t ]. (there
are other related natural formulations of this problem, such as traversing the track in the minimum
time subject to a maximum energy usage. we will not consider these here, but the same techniques
are applicable.)

140

at time t the car has position x(t)     r, velocity v(t)     r and acceleration a(t)     r. the car
starts with x(0) = 0 and v(0) = 0 and must    nish with x(t )     x   nal.
at time t the kinetic energy of the vehicle is k(t) = 1
2 mv(t)2, where m is the mass. let the energy
delivered from the battery to the drivetrain be p(t), which is nonnegative (there is no regenerative
braking.) then

  k(t) = p(t)     pbrake(t)     ploss(t)

where pbrake(t)     0 is an input that the control system (i.e., your optimization) chooses, and losses
due to drag are modeled via

ploss(t) = clossv(t)3

here closs is a positive constant that depends on the shape of the vehicle and the density of the air.

the vehicle must move according to the following requirements. tire traction limits acceleration
so that   v(t)     amax. note that there is no lower bound on the acceleration. the vehicle cannot
move backwards and must stay within the speed limit, and so 0     v(t)     vmax. the    nal velocity
of the vehicle must satisfy v(t )     v   nal.
we will use period h > 0 and sample position according to xi = x(ih), and similarly for veloc-
ity, acceleration and kinetic energy. the vehicle dynamics   x(t) = v(t) and   v(t) = a(t) are then
discretized according to

xi+1 = xi +

h
2

(vi + vi+1),

vi+1 = vi + hai

and the rate of change of kinetic energy is discretized according to
    ploss

(ki+1     ki) = pi     pbrake

i

i

1
h

we would like to minimize the total energy used, which is discretized as

n(cid:88)

e = h

pi

where t = nh. the parameters are

i=0

m = 10 x   nal = 10 v   nal = 1 vmax = 10 amax = 2 closs = 2 h = 0.1 t = 5

(a) formulate this problem as an optimization problem with variables pi, xi, vi, ki (and others if

necessary) for i = 0, . . . , n. if this problem is not convex, explain brie   y why.

(b) by relaxing the energy constraint k(t) = 1

2 mv(t)2 to

k(t)     1
2

mv(t)2

state a id76 problem whose solution provides an optimal trajectory x, v, p,
and k for part (a). explain why the relaxation is tight. by tight, we mean that the solution
to your problem has the same optimal value as that of part (a).

(c) carry out your method from part (b). report the optimal value of the total energy e. plot

the position x, velocity v and power used p of the vehicle as functions of time.

141

13.8 well that was a bit roundabout. you   re late for the last lecture of id76 and you

need to get the lecture hall. you get on your bike, and proceed directly to class.
at time t the bike has position x(t)     r2, velocity v(t)     r2, and acceleration a(t)     r2. you
start at position x(0) = xinitial and    nish at time t with x(t ) = x   nal. your initial velocity is
v(0) = vinitial.

we will use period h > 0 and sample position according to xi = x(ih), and similarly for velocity and
acceleration. fortunately your bicycle is a point mass, and so the vehicle dynamics are   x(t) = v(t)
and   v(t) = a(t). these are then discretized according to

xi+1 = xi + h
vi+1 = vi + hai

2 (vi + vi+1)

despite your desire to arrive at class on time, you cycle somewhat leisurely, avoiding unnecessary
exertion. so you choose to minimize

n(cid:88)

j = h

(cid:107)ai(cid:107)2

2

where t = nh. we have

(cid:20)    5

0

(cid:21)

,

x   nal =

(cid:21)

(cid:20) 6

1

i=0

,

vinitial =

(cid:21)

(cid:20) 2

0

, t = 12,

h = 0.1.

xinitial =

(a) find and plot the optimal trajectory of the bicycle. report the optimal value j.

(b) unfortunately, somebody has built a roundabout in the way. the roundabout is a disk of

radius 1 centered at the origin

r = {x     r2 | (cid:107)x(cid:107)2     1}

the constable observing your path advises you that he fears that your trajectory has the
unfortunate property of failing to correctly circumnavigate the roundabout.
unfortunately, the constraint that you should avoid the roundabout is not convex. after
considering this, you arrive at a new strategy. let the previous solution be xprev. you
construct a new optimization problem, where at each time step i you add the constraint that
i xi     1, where
ct

ci = xprev

i

/(cid:107)xprev

(cid:107)2.

i

give a brief interpretation of these constraints. solve the optimization problem again, with
these new constraints. plot the optimal trajectory and report the optimal cost.

(c) repeat part (b) until the trajectory converges. plot the    nal trajectory along with the the
trajectories from part (a),(b) and the roundabout r. note that each optimization only uses
constraints generated by the previous solution. what is the    nal cost j achieved?

13.9 path planning with contingencies. a vehicle path down a (straight, for simplicity) road is speci   ed
by a vector p     rn , where pi gives the position perpendicular to the centerline at the point ih
meters down the road, where h > 0 is a given discretization size. (throughout this problem, indexes
on n -vectors will correspond to positions on the road.) we normalize p so    1     pi     1 gives the
road boundaries. (we are modeling the vehicle as a point, by adjusting for its width.) you are

142

given the initial two positions p1 = a and p2 = b (which give the initial road position and angle),
as well as the    nal two positions pn   1 = c and pn = d.
you know there may be an obstruction at position i = o. this will require the path to either
go around the obstruction on the left, which requires po     0.5, or on the right, which requires
po        0.5, or possibly the obstruction will clear, and the obstruction does not place any additional
constraint on the path. these are the three contingencies in the problem title, which we label as
k = 1, 2, 3.
you will plan three paths for these contingencies, p(i)     rn for i = 1, 2, 3. they must each
satisfy the given initial and    nal two road positions and the constraint of staying within the road
boundaries. paths p(1) and p(2) must satisfy the (di   erent) obstacle avoidance constraints given
above. path p(3) does not need to satisfy an avoidance constraint.

now we add a twist: you will not learn which of the three contingencies will occur until the vehicle
arrives at position i = s, when the sensors will determine which contingency holds. we model this
with the information constraints (also called causality constraints or non-anticipatory constraints),

which state that before you know which contingency holds, the three paths must be the same.

p(1)
i = p(2)

i = p(3)

i

,

i = 1, . . . , s,

the objective to be minimized is

3(cid:88)

n   1(cid:88)

i   1     2p(k)
(p(k)

i + p(k)

i+1)2,

the sum of the squares of the second di   erences, which gives smooth paths.

k=1

i=2

(a) explain how to solve this problem using id76.

(b) solve the problem with data given in path_plan_contingencies_data.*. the data    les
include code to plot the results, which you should use to plot (on one plot) the optimal paths.
report the optimal objective value. give a very brief informal explanation for what you see
happening for i = 1, . . . , s.
hint. in python, use the (default) solver ecos to avoid warnings about inaccurate solutions.

143

14 finance

n , sorted in increasing order, in positive share quantities qsell

14.1 transaction cost. consider a market for some asset or commodity, which we assume is in   nitely
divisible, i.e., can be bought or sold in quantities of shares that are real numbers (as opposed to
integers). the order book at some time consists of a set of o   ers to sell or buy the asset, at a given
price, up to a given quantity of shares. the n o   ers to sell the asset have positive prices per share
psell
1 , . . . , psell
n . the m o   ers to
buy the asset have positive prices pbuy
n , sorted in decreasing order, and positive quantities
qbuy
is the bid price
1
for the asset. the ask price is larger than the bid price; the di   erence is called the spread. the
average of the ask and bid prices is called the mid-price, denoted pmid.
now suppose that you want to purchase q > 0 shares of the asset, where q     qsell
n , i.e.,
your purchase quantity does not exceed the total amount of the asset currently o   ered for sale.
your purchase proceeds as follows. suppose that

is called the (current) ask price for the asset; pbuy

1 +        + qsell

m . the price psell
1

1 , . . . , qsell

, . . . , pbuy

, . . . , qbuy

1

1

1 +        + qsell
qsell

k < q     qsell

1 +        + qsell
k+1.

then you pay an amount

a = psell

1 qsell

1 +        + psell

k qsell

k + psell

k+1(q     qsell

1                qsell
k ).

roughly speaking, you work your way through the o   ers in the order book, from the least (ask)
price, and working your way up the order book until you    ll the order. we de   ne the transaction
cost as

t (q) = a     pmidq.

this is the di   erence between what you pay, and what you would have paid had you been able to
purchase the shares at the mid-price. it is always positive.
we handle the case of selling the asset in a similar way. here we take q < 0 to mean that we sell    q
shares of the asset. here you sell shares at the bid price, up to the quantity qbuy (or    q, whichever
, and so on, until all    q shares are sold. here
is smaller); if needed, you sell shares at the price pbuy
we assume that    q     qbuy
m , i.e., you are not selling more shares than the total quantity
of o   ers to buy. let a denote the amount you receive from the sale. here we de   ne the transaction
cost as

1 +       + qbuy

2

t (q) =    pmidq     a,

the di   erence between the amount you would have received had you sold the shares at the mid-price,
and the amount you received. it is always positive. we set t (0) = 0.

(a) show that t is a convex piecewise linear function.
(b) show that t (q)     (s/2)|q|, where s is the spread. when would we have t (q) = (s/2)|q| for

all q (in the range between the total shares o   ered to purchase or sell)?

(c) give an interpretation of the conjugate function t    (y) = supq(yq     t (q)). hint. suppose you

can purchase or sell the asset in another market, at the price pother.

144

14.2 risk-return trade-o    in portfolio optimization. we consider the portfolio risk-return trade-o    prob-

lem of page 185, with the following data:

             0.12

0.10
0.07
0.03

             ,

             0.0064

0.0008
   0.0011

0

             .

0.0008    0.0011 0
0
0.0025
0
0

0.0004

0
0

0

0

  p =

   =

(a) solve the quadratic program

minimize      pt x +   xt   x
x (cid:23) 0
subject to 1t x = 1,

for a large number of positive values of    (for example, 100 values logarithmically spaced
between 1 and 107). plot the optimal values of the expected return   pt x versus the standard
deviation (xt   x)1/2. also make an area plot of the optimal portfolios x versus the standard
deviation (as in    gure 4.12).

(b) assume the price change vector p is a gaussian random variable, with mean   p and covariance

  . formulate the problem

  pt x

maximize
subject to prob(pt x     0)       
x (cid:23) 0,

1t x = 1,

as a id76 problem, where    < 1/2 is a parameter. in this problem we maximize
the expected return subject to a constraint on the id203 of a negative return. solve the
problem for a large number of values of    between 10   4 and 10   1, and plot the optimal values
of   pt x versus   . also make an area plot of the optimal portfolios x versus   .
hint: the matlab functions erfc and erfcinv can be used to evaluate

   
  (x) = (1/

2  )

e   t2/2 dt

(cid:90) x

      

and its inverse:

  (u) =

   
erfc(   u/

2).

1
2

since you will have to solve this problem for a large number of values of   , you may    nd the
command cvx_quiet(true) helpful.

(c) monte carlo simulation. let x be the optimal portfolio found in part (b), with    = 0.05.
this portfolio maximizes the expected return, subject to the id203 of a loss being no
more than 5%. generate 10000 samples of p, and plot a histogram of the returns. find the
empirical mean of the return samples, and calculate the percentage of samples for which a loss
occurs.
hint: you can generate samples of the price change vector using

p=pbar+sqrtm(sigma)*randn(4,1);

14.3 simple portfolio optimization. we consider a portfolio optimization problem as described on pages

155 and 185   186 of id76, with data that can be found in the    le simple_portfolio_data.*.

145

(a) find minimum-risk portfolios with the same expected return as the uniform portfolio (x =
(1/n)1), with risk measured by portfolio return variance, and the following portfolio con-
straints (in addition to 1t x = 1):
    no (additional) constraints.
    long-only: x (cid:23) 0.
    limit on total short position: 1t (x   )     0.5, where (x   )i = max{   xi, 0}.
compare the optimal risk in these portfolios with each other and the uniform portfolio.

(b) plot the optimal risk-return trade-o    curves for the long-only portfolio, and for total short-
position limited to 0.5, in the same    gure. follow the style of    gure 4.12 (top), with horizontal
axis showing standard deviation of portfolio return, and vertical axis showing mean return.

14.4 bounding portfolio risk with incomplete covariance information. consider the following instance of
the problem described in   4.6, on p171   173 of id76. we suppose that   ii, which
are the squares of the price volatilities of the assets, are known. for the o   -diagonal entries of   ,
all we know is the sign (or, in some cases, nothing at all). for example, we might be given that
  12     0,   23     0, etc. this means that we do not know the correlation between p1 and p2, but we
do know that they are nonnegatively correlated (i.e., the prices of assets 1 and 2 tend to rise or
fall together).
compute   2

wc, the worst-case variance of the portfolio return, for the speci   c case

             0.1

0.2
   0.05
0.1

             ,    =

            0.2 + +   

+ 0.1        
+     0.3 +
       + 0.1

             ,

x =

where a    +    entry means that the element is nonnegative, a           means the entry is nonpositive,
and          means we don   t know anything about the entry. (the negative value in x represents a
short position: you sold stocks that you didn   t have, but must produce at the end of the investment
period.) in addition to   2
wc, give the covariance matrix   wc associated with the maximum risk.
compare the worst-case risk with the risk obtained when    is diagonal.

14.5 log-optimal investment strategy. in this problem you will solve a speci   c instance of the log-optimal
investment problem described in exercise 4.60, with n = 5 assets and m = 10 possible outcomes in
each period. the problem data are de   ned in log_opt_invest.*, with the rows of the matrix p
giving the asset return vectors pt
j . the outcomes are equiprobable, i.e., we have   j = 1/m. each
column of the matrix p gives the return of the associated asset in the di   erent posible outcomes.
you can examine the columns to get an idea of the types of assets. for example, the last asset gives
a    xed and certain return of 1%; the    rst asset is a very risky one, with occasional large return,
and (more often) substantial loss.
find the log-optimal investment strategy x(cid:63), and its associated long term growth rate r(cid:63)
lt. compare
this to the long term growth rate obtained with a uniform allocation strategy, i.e., x = (1/n)1, and
also with a pure investment in each asset.

trajectories of the accumulated wealth, i.e., w (t ) = w (0)(cid:81)t

for the optimal investment strategy, and also the uniform investment strategy, plot 10 sample
t=1   (t), for t = 0, . . . , 200, with

initial wealth w (0) = 1.

146

to save you the trouble of    guring out how to simulate the wealth trajectories or plot them nicely,
we   ve included the simulation and plotting code in log_opt_invest.*; you just have to add the
code needed to    nd x(cid:63).

hint (matlab users only): the current version of cvx handles the logarithm via an iterative
method, which can be slow and unreliable. you   re better o    using geo_mean(), which is directly
handled by cvx, to solve the problem.

14.6 optimality conditions and dual for log-optimal investment problem.

(a) show that the optimality conditions for the log-optimal investment problem described in

exercise 4.60 can be expressed as: 1t x = 1, x (cid:23) 0, and for each i,

xi > 0     m(cid:88)

  j

pij
pt
j x

= 1,

j=1

xi = 0     m(cid:88)

  j

pij
pt
j x

    1.

j=1

we can interpret this as follows. pij/pt
j x is a random variable, which gives the ratio of the
investment gain with asset i only, to the investment gain with our mixed portfolio x. the
optimality condition is that, for each asset we invest in, the expected value of this ratio is one,
and for each asset we do not invest in, the expected value cannot exceed one. very roughly
speaking, this means our portfolio does as well as any of the assets that we choose to invest
in, and cannot do worse than any assets that we do not invest in.
hint. you can start from the simple criterion given in   4.2.3 or the kkt conditions.

(b) in this part we will derive the dual of the log-optimal investment problem. we start by writing

the problem as

minimize    (cid:80)m

subject to y = p t x,

1t x = 1.

j=1   j log yj

x (cid:23) 0,

here, p has columns p1, . . . , pm, and we have the introduced new variables y1, . . . , ym, with
the implicit constraint y (cid:31) 0. we will associate dual variables   ,    and   0 with the constraints
y = p t x, x (cid:23) 0, and 1t x = 1, respectively. de   ning     j =   j/  0 for j = 1, . . . , m, show that
the dual problem can be written as

maximize (cid:80)m

subject to p      (cid:22) 1,

j=1   j log(    j/  j)

with variable     . the objective here is the (negative) id181 between the
given distribution    and the dual variable     .

14.7 arbitrage and theorems of alternatives. consider an event (for example, a sports game, political
elections, the evolution of the stock market over a certain period) with m possible outcomes.
suppose that n wagers on the outcome are possible. if we bet an amount xj on wager j, and the
outcome of the event is i (i = 1, . . . , m), then our return will be equal to rijxj. the return rijxj is
the net gain: we pay xj initially, and receive (1 + rij)xj if the outcome of the event is i. we allow
the bets xj to be positive, negative, or zero. the interpretation of a negative bet is as follows. if
xj < 0, then initially we receive an amount of money |xj|, with an obligation to pay (1 + rij)|xj| if
outcome i occurs. in that case, we lose rij|xj|, i.e., our net is gain rijxj (a negative number).

147

country odds
holland

italy
spain
france

3.5
5.0
5.5
6.5
7.0
germany
england
10.0
belgium 14.0
16.0
sweden

country

czech republic

romania
yugoslavia
portugal
norway
denmark
turkey
slovenia

odds
17.0
18.0
20.0
20.0
20.0
33.0
50.0
80.0

table 1: odds for the 2000 european soccer championships.

x, our total return in the event of outcome i is equal to(cid:80)n

we call the matrix r     rm  n with elements rij the return matrix. a betting strategy is a vector
x     rn, with as components xj the amounts we bet on each wager. if we use a betting strategy
j=1 rijxj, i.e., the ith component of the

vector rx.

(a) the arbitrage theorem. suppose you are given a return matrix r. prove the following theorem:

there is a betting strategy x     rn for which

rx (cid:31) 0

if and only if there exists no vector p     rm that satis   es

rt p = 0,

p (cid:23) 0,

p (cid:54)= 0.

we can interpret this theorem as follows. if rx (cid:31) 0, then the betting strategy x guarantees a
positive return for all possible outcomes, i.e., it is a sure-win betting scheme. in economics,
we say there is an arbitrage opportunity.
if we normalize the vector p in the second condition, so that 1t p = 1, we can interpret it as
a id203 vector on the outcomes. the condition rt p = 0 means that

e rx = pt rx = 0

for all x, i.e., the expected return is zero for all betting strategies. in economics, p is called a
risk neutral id203.
we can therefore rephrase the arbitrage theorem as follows: there is no sure-win betting
strategy (or arbitrage opportunity) if and only if there is a id203 vector on the outcomes
that makes all bets fair (i.e., the expected gain is zero).

(b) betting.

in a simple application, we have exactly as many wagers as there are outcomes
(n = m). wager i is to bet that the outcome will be i. the returns are usually expressed as
odds. for example, suppose that a bookmaker accepts bets on the result of the 2000 european
soccer championships. if the odds against belgium winning are 14 to one, and we bet $100 on
belgium, then we win $1400 if they win the tournament, and we lose $100 otherwise.

148

in general, if we have m possible outcomes, and the odds against outcome i are   i to one,
then the return matrix r     rm  m is given by

rij =   i
rij =    1 otherwise.

if j = i

show that there is no sure-win betting scheme (or arbitrage opportunity) if

m(cid:88)

1

= 1.

1 +   i

i=1

in fact, you can verify that if this equality is not satis   ed, then the betting strategy

1/(1 +   i)

i=1 1/(1 +   i)

1    (cid:80)m
m(cid:88)

1

xi =

always results in a pro   t.
the common situation in real life is

because the bookmakers take a cut on all bets.

1 +   i

i=1

> 1,

14.8 log-optimal investment. we consider an instance of the log-optimal investment problem described
in exercise 4.60 of id76. in this exercise, however, we allow x, the allocation vector,
to have negative components. investing a negative amount xiw (t) in an asset is called shorting
the asset. it means you borrow the asset, sell it for |xiw (t)|, and have an obligation to purchase it
back later and return it to the lender.
(a) let r be the n    m-matrix with columns rj:

r =(cid:2) r1

(cid:3) .

      

r2

rm

we assume that the elements rij of r are all positive, which implies that the log-optimal
investment problem is feasible. show the following property: if there exists a v     rn with

1t v = 0,

rt v (cid:23) 0,

rt v (cid:54)= 0

(49)

then the log-optimal investment problem is unbounded (assuming that the probabilities pj are
all positive).

(b) derive a lagrange dual of the log-optimal investment problem (or an equivalent problem of
your choice). use the lagrange dual to show that the condition in part a is also necessary for
unboundedness. in other words, the log-optimal investment problem is bounded if and only
if there does not exist a v satisfying (49).

149

(c) consider the following small example. we have four scenarios and three investment options.

the return vectors for the four scenarios are

       ,

       2

1.3
1

       ,

       2

0.5
1

       ,

       0.5

1.3
1

r1 =

r2 =

r3 =

r4 =

       .

       0.5

0.5
1

the probabilities of the three scenarios are

p1 = 1/3,

p2 = 1/6,

p3 = 1/3,

p4 = 1/6.

the interpretation is as follows. we can invest in two stocks. the    rst stock doubles in value
in each period with a id203 1/2, or decreases by 50% with a id203 1/2. the second
stock either increases by 30% with a id203 2/3, or decreases by 50% with a id203
1/3. the    uctuations in the two stocks are independent, so we have four scenarios: both stocks
go up (id203 2/6), stock 1 goes up and stock 2 goes down (id203 1/6), stock 1 goes
down and stock 2 goes up (id203 1/3), both stocks go down (id203 1/6). the
fractions of our capital we invest in stocks 1 and 2 are denoted by x1 and x2, respectively.
the rest of our capital, x3 = 1     x1     x2 is not invested.
what is the expected growth rate of the log-optimal strategy x? compare with the strategies
(x1, x2, x3) = (1, 0, 0), (x1, x2, x3) = (0, 1, 0) and (x1, x2, x3) = (1/2, 1/2, 0). (obviously the
expected growth rate for (x1, x2, x3) = (0, 0, 1) is zero.)
remark. the    gure below shows a simulation that compares three investment strategies over
200 periods. the solid line shows the log-optimal investment strategy. the dashed lines show
the growth for strategies x = (1, 0, 0), (0, 1, 0), and (0, 0, 1).

150

05010015020025010   810   610   410   2100102104106tw14.9 maximizing house pro   t in a gamble and imputed probabilities. a set of n participants bet on
which one of m outcomes, labeled 1, . . . , m, will occur. participant i o   ers to purchase up to qi > 0
gambling contracts, at price pi > 0, that the true outcome will be in the set si     {1, . . . , m}. the
house then sells her xi contracts, with 0     xi     qi. if the true outcome j is in si, then participant
i receives $1 per contract, i.e., xi. otherwise, she loses, and receives nothing. the house collects a
total of x1p1 +        + xnpn, and pays out an amount that depends on the outcome j,

(cid:88)

xi.

the di   erence is the house pro   t.

i: j   si

(a) optimal house strategy. how should the house decide on x so that its worst-case pro   t (over the
possible outcomes) is maximized? (the house determines x after examining all the participant
o   ers.)

(b) imputed probabilities. suppose x(cid:63) maximizes the worst-case house pro   t. show that there
+ , 1t    = 1) for which

exists a id203 distribution    on the possible outcomes (i.e.,        rm
x(cid:63) also maximizes the expected house pro   t. explain how to    nd   .
hint. formulate the problem in part (a) as an lp; you can construct    from optimal dual
variables for this lp.
remark. given   , the    fair    price for o   er i is pfair
be completely    lled (i.e., xi = qi); all o   ers with pi < pfair
remark. this exercise shows how the probabilities of outcomes (e.g., elections) can be guessed
from the o   ers of a set of gamblers.

  j. all o   ers with pi > pfair
j   si
i will be rejected (i.e., xi = 0).

i =(cid:80)

i will

(c) numerical example. carry out your method on the simple example below with n = 5 partici-

pants, m = 5 possible outcomes, and participant o   ers

participant i

1
2
3
4
5

pi
0.50
0.60
0.60
0.60
0.20

qi
10
5
5
20
10

si
{1,2}
{4}
{1,4,5}
{2,5}
{3}

compare the optimal worst-case house pro   t with the worst-case house pro   t, if all o   ers were
accepted (i.e., xi = qi). find the imputed probabilities.

14.10 optimal investment to fund an expense stream. an organization (such as a municipality) knows
its operating expenses over the next t periods, denoted e1, . . . , et . (normally these are positive;
but we can have negative et, which corresponds to income.) these expenses will be funded by a
combination of investment income, from a mixture of bonds purchased at t = 0, and a cash account.

the bonds generate investment income, denoted i1, . . . , it . the cash balance is denoted b0, . . . , bt ,
where b0     0 is the amount of the initial deposit into the cash account. we can have bt < 0 for
t = 1, . . . , t , which represents borrowing.

after paying for the expenses using investment income and cash, in period t, we are left with
bt     et + it in cash. if this amount is positive, it earns interest at the rate r+ > 0; if it is negative,

151

we must pay interest at rate r   , where r        r+. thus the expenses, investment income, and cash
balances are linked as follows:

(cid:26) (1 + r+)(bt     et + it) bt     et + it     0

(1 + r   )(bt     et + it) bt     et + it < 0,

bt+1 =

for t = 1, . . . , t     1. we take b1 = (1 + r+)b0, and we require that bt     et + it = 0, which
means the    nal cash balance, plus income, exactly covers the    nal expense.

the initial investment will be a mixture of bonds, labeled 1, . . . , n. bond i has a price pi > 0,
a coupon payment ci > 0, and a maturity mi     {1, . . . , t}. bond i generates an income stream
given by

          ci

a(i)
t =

t < mi
ci + 1 t = mi
0
t > mi,

for t = 1, . . . , t . if xi is the number of units of bond i purchased (at t = 0), the total investment
cash    ow is

it = x1a(1)

t +        + xna(n)

t

,

t = 1, . . . , t.

we will require xi     0. (the xi can be fractional; they do not need to be integers.)
the total initial investment required to purchase the bonds, and fund the initial cash balance at
t = 0, is x1p1 +        + xnpn + b0.

(a) explain how to choose x and b0 to minimize the total initial investment required to fund the

expense stream.

(b) solve the problem instance given in opt_funding_data.m. give optimal values of x and b0.
give the optimal total initial investment, and compare it to the initial investment required if
no bonds were purchased (which would mean that all the expenses were funded from the cash
account). plot the cash balance (versus period) with optimal bond investment, and with no
bond investment.

14.11 planning production with uncertain demand. you must order (nonnegative) amounts ri, . . . , rm of
raw materials, which are needed to manufacture (nonnegative) quantities q1, . . . , qn of n di   erent
products. to manufacture one unit of product j requires at least aij units of raw material i, so
we must have r (cid:23) aq. (we will assume that aij are nonnegative.) the per-unit cost of the raw
materials is given by c     rm
the (nonnegative) demand for product j is denoted dj; the number of units of product j sold is
sj = min{qj, dj}. (when qj > dj, qj     dj is the amount of product j produced, but not sold; when
dj > qj, dj     qj is the amount of unmet demand.) the revenue from selling the products is pt s,
+ is the vector of product prices. the pro   t is pt s     ct r. (both d and q are real
where p     rn
vectors; their entries need not be integers.)

+ , so the total raw material cost is ct r.

instead, a set of k
you are given a, c, and p. the product demand, however, is not known.
possible demand vectors, d(1), . . . , d(k), with associated probabilities   1, . . . ,   k, is given. (these
satisfy 1t    = 1,    (cid:23) 0.)
you will explore two di   erent optimization problems that arise in choosing r and q (the variables).

152

i. choose r and q ahead of time. you must choose r and q, knowing only the data listed
above. (in other words, you must order the raw materials, and commit to producing the chosen
quantities of products, before you know the product demand.) the objective is to maximize the
expected pro   t.

ii. choose r ahead of time, and q after d is known. you must choose r, knowing only the
data listed above. some time after you have chosen r, the demand will become known to you.
this means that you will    nd out which of the k demand vectors is the true demand. once you
know this, you must choose the quantities to be manufactured. (in other words, you must order
the raw materials before the product demand is known; but you can choose the mix of products to
manufacture after you have learned the true product demand.) the objective is to maximize the
expected pro   t.

(a) explain how to formulate each of these problems as a id76 problem. clearly
state what the variables are in the problem, what the constraints are, and describe the roles
of any auxiliary variables or constraints you introduce.

(b) carry out the methods from part (a) on the problem instance with numerical data given in
planning_data.m. this    le will de   ne a, d, k, c, m, n, p and pi. the k columns of d are the
possible demand vectors. for both of the problems described above, give the optimal value of
r, and the expected pro   t.

14.12 gini coe   cient of inequality. let x1, . . . , xn be a set of nonnegative numbers with positive sum,
which typically represent the wealth or income of n individuals in some group. the lorentz curve
is a plot of the fraction fi of total wealth held by the i poorest individuals,

i(cid:88)

j=1

fi = (1/1t x)

x(j),

i = 0, . . . , n,

versus i/n, where x(j) denotes the jth smallest of the numbers {x1, . . . , xn}, and we take f0 = 0.
the lorentz curve starts at (0, 0) and ends at (1, 1). interpreted as a continuous curve (as, say,
n        ) the lorentz curve is convex and increasing, and lies on or below the straight line joining
the endpoints. the curve coincides with this straight line, i.e., fi = (i/n), if and only if the wealth
is distributed equally, i.e., the xi are all equal.
the gini coe   cient is de   ned as twice the area between the straight line corresponding to uniform
wealth distribution and the lorentz curve:

n(cid:88)

g(x) = (2/n)

((i/n)     fi).

i=1

the gini coe   cient is used as a measure of wealth or income inequality: it ranges between 0 (for
equal distribution of wealth) and 1     1/n (when one individual holds all wealth).
(a) show that g is a quasiconvex function on x     rn
(b) gini coe   cient and marriage. suppose that individuals i and j get married (i (cid:54)= j) and
therefore pool wealth. this means that xi and xj are both replaced with (xi + xj)/2. what
can you say about the change in gini coe   cient caused by this marriage?

+ \ {0}.

153

14.13 internal rate of return for cash streams with a single initial investment. we use the notation of
example 3.34 in the textbook. let x     rn+1 be a cash    ow over n periods, with x indexed from 0
to n, where the index denotes period number. we assume that x0 < 0, xj     0 for j = 1, . . . , n, and
x0 +       + xn > 0. this means that there is an initial positive investment; thereafter, only payments
are made, with the total of the payments exceeding the initial investment. (in the more general
setting of example 3.34, we allow additional investments to be made after the initial investment.)

(a) show that irr(x) is quasilinear in this case.
(b) blending initial investment only streams. use the result in part (a) to show the following.
let x(i)     rn+1, i = 1, . . . , k, be a set of k cash    ows over n periods, each of which satis   es
the conditions above. let w     rk
+, with 1t w = 1, and consider the blended cash    ow given
by x = w1x(1) +        + wkx(k). (we can think of this as investing a fraction wi in cash    ow
i.) show that irr(x)     maxi irr(x(i)). thus, blending a set of cash    ows (with initial
investment only) will not improve the irr over the best individual irr of the cash    ows.

14.14 e   cient solution of basic portfolio optimization problem. this problem concerns the simplest

possible portfolio optimization problem:

maximize   t w     (  /2)wt   w
subject to 1t w = 1,

with variable w     rn (the normalized portfolio, with negative entries meaning short positions),
and data    (mean return),        sn
++ (return covariance), and    > 0 (the risk aversion parameter).
the return covariance has the factor form    = f qf t + d, where f     rn  k (with rank k) is
the factor loading matrix, q     sk
++ is the factor covariance matrix, and d is a diagonal matrix
with positive entries, called the idiosyncratic risk (since it describes the risk of each asset that is
independent of the factors). this form for    is referred to as a    k-factor risk model   . some typical
dimensions are n = 2500 (assets) and k = 30 (factors).

(a) what is the    op count for computing the optimal portfolio, if the low-rank plus diagonal
structure of    is not exploited? you can assume that    = 1 (which can be arranged by
absorbing it into   ).

(b) explain how to compute the optimal portfolio more e   ciently, and give the    op count for your
method. you can assume that k (cid:28) n. you do not have to give the best method; any method
that has linear complexity in n is    ne. you can assume that    = 1.
hints. you may want to introduce a new variable y = f t w (which is called the vector of
factor exposures). you may want to work with the matrix

(cid:21)

(cid:20) 1 f

0    i

g =

    r(n+k)  (1+k),

treating it as dense, ignoring the (little) exploitable structure in it.

(c) carry out your method from part (b) on some randomly generated data with dimensions
n = 2500, k = 30. for comparison (and as a check on your method), compute the optimal
portfolio using the method of part (a) as well. give the (approximate) cpu time for each
method, using tic and toc. hints. after you generate d and q randomly, you might want to
add a positive multiple of the identity to each, to avoid any issues related to poor conditioning.
also, to be able to invert a block diagonal matrix e   ciently, you   ll need to recast it as sparse.

154

(d) risk return trade-o    curve. now suppose we want to compute the optimal portfolio for m
values of the risk aversion parameter   . explain how to do this e   ciently, and give the
complexity in terms of m , n, and k. compare to the complexity of using the method of
part (b) m times. hint. show that the optimal portfolio is an a   ne function of 1/  .

14.15 sparse index tracking. the (weekly, say) return of n stocks is given by a random variable r     rn,
with mean r and covariance e(r     r)(r     r)t =    (cid:31) 0. an index (such as s&p 500 or wilshire
5000) is a weighted sum of these returns, given by z = ct r, where c     rn
+. (for example, the
vector c is nonzero only for the stocks in the index, and the coe   cients ci might be proportional to
some measure of market capitalization of stock i.) we will assume that the index weights c     rn,
as well as the return mean and covariance r and   , are known and    xed.
our goal is to    nd a sparse weight vector w     rn, which can include negative entries (meaning,
short positions), so that the rms index tracking error, de   ned as

(cid:18) e(z     wt r)2

(cid:19)1/2

e =

e z2

,

does not exceed 0.10 (i.e., 10%). of course, taking w = c results in e = 0, but we are interested in
   nding a weight vector with (we hope) many fewer nonzero entries than c has.

remark. this is the idea behind an index fund : you    nd a sparse portfolio that replicates or tracks
the return of the index (within some error tolerance). acquiring (and rebalancing) the sparse
tracking portfolio will incur smaller transactions costs than trading in the full index.
(a) propose a (simple) heuristic method for    nding a sparse weight vector w that satis   es e     0.10.
(b) carry out your method on the problem instance given in sparse_idx_track_data.m. give
card(w), the number of nonzero entries in w. (to evaluate card(w), use sum(abs(w)>0.01),
which treats weight components smaller than 0.01 as zero.) (you might want to compare the
index weights and the weights you    nd by typing [c w]. no need to print or turn in the
resulting output, though.)

14.16 option price bounds.

in this problem we use the methods and results of example 5.10 to give
bounds on the arbitrage-free price of an option. (see exercise 5.38 for a simple version of option
pricing.) we will use all the notation and de   nitions from example 5.10.

we consider here options on an underlying asset (such as a stock); these have a payo    or value that
depends on s, the value of the underlying asset at the end of the investment period. we will assume
that the underying asset can only take on m di   erent values, s(1), . . . , s(m). these correspond to
the m possible scenarios or outcomes described in example 5.10.

a risk-free asset has value r > 1 in every scenario.

a put option at strike price k gives the owner the right to sell one unit of the underlying stock
at price k. at the end of the investment period, if the stock is trading at a price s, then the
put option has payo    (k     s)+ = max{0, k     s} (since the option is exercised only if k > s).
similarly a call option at strike price k gives the buyer the right to buy a unit of stock at price k.
a call option has payo    (s     k)+ = max{0, s     k}.

155

a collar is an option with payo              c     s0 s > c

s     s0 f     s     c
f     s0 s < f

where f is the    oor, c is the cap and s0 is the price of the underlying at the start of the investment
period. this option limits both the upside and downside of payo   .

now we consider a speci   c problem. the price of the risk-free asset, with r = 1.05, is 1. the price
of the underlying asset is s0 = 1. we will use m = 200 scenarios, with s(i) uniformly spaced from
s(1) = 0.5 to s(200) = 2. the following options are traded on an exchange, with prices listed below.

type strike price
0.06
call
0.03
call
put
0.02
0.01.
put

1.1
1.2
0.8
0.7

a collar with    oor f = 0.9 and cap c = 1.15 is not traded on an exchange. find the range of
prices for this collar, consistent with the absence of arbitrage and the prices given above.

14.17 portfolio optimization with qualitative return forecasts. we consider the risk-return portfolio opti-
mization problem described on pages 155 and 185 of the book, with one twist: we don   t precisely
know the mean return vector   p. instead, we have a range of possible values for each asset, i.e., we
have l, u     rn with l (cid:22)   p (cid:22) u. we use l and u to encode various qualitative forecasts we have
about the mean return vector   p. for example, l7 = 0.02 and u7 = 0.20 means that we believe the
mean return for asset 7 is between 2% and 20%.
de   ne the worst-case mean return rwc, as a function of portfolio vector x, as the worst (minimum)
value of   pt x, over all   p consistent with the given bounds l and u.

(a) explain how to    nd a portfolio x that maximizes rwc, subject to a budget constraint and risk

limit,

where        sn

1t x = 1,
++ and   max     r++ are given.

xt   x       2

max,

(b) solve the problem instance given in port_qual_forecasts_data.m. give the optimal worst-

case mean return achieved by the optimal portfolio x(cid:63).
in addition, construct a portfolio xmid that maximizes ct x subject to the budget constraint
and risk limit, where c = (1/2)(l + u). this is the optimal portfolio assuming that the mean
return has the midpoint value of the forecasts. compare the midpoint mean returns ct xmid
and ct x(cid:63), and the worst-case mean returns of xmid and x(cid:63).
brie   y comment on the results.

14.18 de-leveraging. we consider a multi-period portfolio optimization problem, with n assets and t
time periods, where xt     rn gives the holdings (say, in dollars) at time t, with negative entries
denoting, as usual, short positions. for each time period the return vector has mean        rn and
covariance        sn

++. (these are known.)

156

the initial portfolio x0 maximizes the risk-adjusted expected return   t x       xt   x, where    > 0,
subject to the leverage limit constraint (cid:107)x(cid:107)1     linit, where linit > 0 is the given initial leverage
limit.
(there are several di   erent ways to measure leverage; here we use the sum of the total
short and long positions.) the    nal portfolio xt maximizes the risk-adjusted return, subject to
(cid:107)x(cid:107)1     lnew, where lnew > 0 is the given    nal leverage limit (with lnew < linit). this uniquely
determines x0 and xt , since the objective is strictly concave.
the question is how to move from x0 to xt , i.e., how to choose x1, . . . , xt   1. we will do this so as
to maximize the objective

j =

t(cid:88)

t=1

(cid:0)  t xt       xt
n(cid:88)

t   xt       (xt     xt   1)(cid:1) ,
(cid:0)  i|ui| +   iu2

(cid:1) ,

  (u) =

i

which is the total risk-adjusted expected return, minus the total transaction cost. the transaction
cost function    has the form

where    (cid:23) 0 and    (cid:23) 0 are known parameters. we will require that (cid:107)xt(cid:107)1     linit, for t =
1, . . . , t     1. in other words, the leverage limit is the initial leverage limit up until the deadline t ,
when it drops to the new lower value.

i=1

(a) explain how to    nd the portfolio sequence x(cid:63)

1, . . . , x(cid:63)

t   1 that maximizes j subject to the

leverage limit constraints.

(b) find the optimal portfolio sequence x(cid:63)

compare this sequence with two others: xlp
trading at the last possible period), and the linearly interpolated portfolio sequence

t = x0 for t = 1, . . . , t     1 (i.e., one that does all

t for the problem instance with data given in deleveraging_data.m.

t = (1     t/t )x0 + (t/t )xt ,
xlin

t = 1, . . . , t     1.

for each of these three portfolio sequences, give the objective value obtained, and plot the
risk and transaction cost adjusted return,
  t xt       xt

t   xt       (xt     xt   1),

and the leverage (cid:107)xt(cid:107)1, versus t, for t = 0, . . . , t . also, for each of the three portfolio sequences,
generate a single plot that shows how the holdings (xt)i of the n assets change over time, for
i = 1, . . . , n.
give a very short (one or two sentence) intuitive explanation of the results.

14.19 worst-case variance. suppose z is a random variable on rn with covariance matrix        sn
+.
let c     rn. the variance of y = ct z is var(y ) = ct   c. we de   ne the worst-case variance
of y , denoted wcvar(y ), as the maximum possible value of ct     c, over all          sn
+ that satisfy
  ii =     ii, i = 1, . . . , n.
in other words, the worst-case variance of y is the maximum possible
variance, if we are allowed to arbitrarily change the correlations between zi and zj. of course we
have wcvar(y )     var(y ).

157

(a) find a simple expression for wcvar(y ) in terms of c and the diagonal entries of   . you must

justify your expression.

(b) portfolio optimization. explain how to    nd the portfolio x     rn that maximizes the expected
return   t x subject to a limit on risk, var(rt x) = xt   x     r, and a limit on worst-case
risk wcvar(rt x)     rwc, where r > 0 and rwc > r are given. here    = e r and    =
e(r       )(r       )t are the (given) mean and covariance of the (random) return vector r     rn.

(c) carry out the method of part (b) for the problem instance with data given in

wc_risk_portfolio_opt_data.m. also    nd the optimal portfolio when the worst-case risk
limit is ignored. find the expected return and worst-case risk for these two portfolios.

remark. if a portfolio is highly leveraged, and the correlations in the returns change drastically,
you (the portfolio manager) can be in big trouble, since you are now exposed to much more risk
than you thought you were. and yes, this (almost exactly) has happened.

14.20 risk budget allocation. suppose an amount xi > 0 is invested in n assets, labeled i = 1, ..., n, with
++. we de   ne the risk of the investments as the standard

asset return covariance matrix        sn
deviation of the total return, r(x) = (xt   x)1/2.

we de   ne the (relative) risk contribution of asset i (in the portfolio x) as

  i =

    log r(x)

    log xi

=

   r(x)
r(x)

xi
   xi

,

i = 1, . . . , n.

thus   i gives the fractional increase in risk per fractional increase in investment i. we can express
the risk contributions as

from which we see that(cid:80)n

  i =

xi(  x)i
xt   x

,

i = 1, . . . , n,

i=1   i = 1. for general x, we can have   i < 0, which means that a small
increase in investment i decreases the risk. desirable investment choices have   i > 0, in which case
we can interpret   i as the fraction of the total risk contributed by the investment in asset i. note
that the risk contributions are homogeneous of degree zero, i.e., scaling x by a positive constant
does not a   ect   i.
in the risk budget allocation problem, we are given    and a set of desired risk contributions   des
i > 0
with 1t   des = 1; the goal is to    nd an investment mix x (cid:31) 0, 1t x = 1, with these risk contributions.
when   des = (1/n)1, the problem is to    nd an investment mix that achieves so-called risk parity.

(a) explain how to solve the risk budget allocation problem using id76.

(b) find the investment mix that achieves risk parity for the return covariance matrix

hint. minimize (1/2)xt   x    (cid:80)n
             6.1

i=1   des

   =

i

log xi.

2.9    0.8
4.3    0.3
0.9    0.7

0.1
0.9
1.2    0.7
2.3

2.9
   0.8    0.3
0.1

             .

for your convenience, this is contained in risk_alloc_data.m.

158

14.21 portfolio rebalancing. we consider the problem of rebalancing a portfolio of assets over multiple
periods. we let ht     rn denote the vector of our dollar value holdings in n assets, at the beginning
of period t, for t = 1, . . . , t , with negative entries meaning short positions. we will work with the
portfolio weight vector, de   ned as wt = ht/(1t ht), where we assume that 1t ht > 0, i.e., the total
portfolio value is positive.
the target portfolio weight vector w(cid:63) is de   ned as the solution of the problem

maximize   t w       
subject to 1t w = 1,

2 wt   w

where w     rn is the variable,    is the mean return,        sn
++ is the return covariance, and    > 0 is
the risk aversion parameter. the data   ,   , and    are given. in words, the target weights maximize
the risk-adjusted expected return.

at the beginning of each period t we are allowed to rebalance the portfolio by buying and selling
assets. we call the post-trade portfolio weights   wt. they are found by solving the (rebalancing)
problem

maximize   t w       
subject to 1t w = 1,

2 wt   w       t|w     wt|

with variable w     rn, where        rn
+ is the vector of (so-called linear) transaction costs for
the assets.
(for example, these could model bid/ask spread.) thus, we choose the post-trade
weights to maximize the risk-adjusted expected return, minus the transactions costs associated
with rebalancing the portfolio. note that the pre-trade weight vector wt is known at the time we
solve the problem. if we have   wt = wt, it means that no rebalancing is done at the beginning of
period t; we simply hold our current portfolio. (this happens if wt = w(cid:63), for example.)
after holding the rebalanced portfolio over the investment period, the dollar value of our portfolio
becomes ht+1 = diag(rt)  ht, where rt     rn
++ is the (random) vector of asset returns over period
t, and   ht is the post-trade portfolio given in dollar values (which you do not need to know). the
next weight vector is then given by

wt+1 =

diag (rt)   wt

rt
t   wt

.

t   wt     0, which means our portfolio has negative value after the investment period, we have
(if rt
gone bust, and all trading stops.) the standard model is that rt are iid random variables with
mean and covariance    and   , but this is not relevant in this problem.

(a) no-trade condition. show that   wt = wt is optimal in the rebalancing problem if

   |  (wt     w(cid:63))| (cid:22)   

holds, where the absolute value on the left is elementwise.
interpretation. the lefthand side measures the deviation of wt from the target portfolio w(cid:63);
when this deviation is smaller than the cost of trading, you do not rebalance.
hint. find dual variables, that with w = wt satisfy the kkt conditions for the rebalancing
problem.

159

(b) starting from w1 = w(cid:63), compute a sequence of portfolio weights   wt for t = 1, . . . , t . for each
t,    nd   wt by solving the rebalancing problem (with wt a known constant); then generate a
vector of returns rt (using our supplied function) to compute wt+1 (the sequence of weights
is random, so the results won   t be the same each time you run your script. but they should
look similar.)
report the fraction of periods in which the no-trade condition holds and the fraction of periods
in which the solution has only zero (or negligible) trades, de   ned as (cid:107)   wt     wt(cid:107)        10   3. plot
the sequence   wt for t = 1, 2, . . . , t .
the    le portf_weight_rebalance_data.* provides the data, a function to generate a (ran-
dom) vector rt of market returns, and the code to plot the sequence   wt. (the plotting code
also draws a dot for every non-negligible trade.)
carry this out for two values of   ,    =   1 and    =   2. brie   y comment on what you observe.
hint.
in cvxpy we recommend using the solver ecos. but if you use scs you should
increase the default accuracy, by passing eps=1e-4 to the cvxpy.problem.solve() method.
14.22 portfolio optimization using multiple risk models. let w     rn be a vector of portfolio weights,
where negative values correspond to short positions, and the weights are normalized such that
1t w = 1. the expected return of the portfolio is   t w, where        rn is the (known) vector
of expected asset returns. as usual we measure the risk of the portfolio using the variance of
the portfolio return. however, in this problem we do not know the covariance matrix    of the
asset returns; instead we assume that    is one of m (known) covariance matrices   (k)     sn
++,
k = 1, . . . , m . we can think of the   (k) as representing m di   erent risk models, associated with
m di   erent market regimes (say). for a weight vector w, there are m di   erent possible values
of the risk: wt   (k)w, k = 1, . . . , m . the worst-case risk, across the di   erent models, is given by
maxk=1,...,m wt   (k)w. (this is the same as the worst-case risk over all covariance matrices in the
convex hull of   (1), . . . ,   (m ).)

we will choose the portfolio weights in order to maximize the expected return, adjusted by the
worst-case risk, i.e., as the solution w(cid:63) of the problem

maximize   t w        maxk=1,...,m wt   (k)w
subject to 1t w = 1,

with variable w, where    > 0 is a given risk-aversion parameter. we call this the mean-worst-case-
risk portfolio problem.

(a) show that there exist   1, . . . ,   m     0 such that (cid:80)m
maximize   t w    (cid:80)m

mean-worst-case-risk portfolio problem is also the solution of the problem

k=1   k =    and the solution w(cid:63) of the

subject to 1t w = 1,

k=1   kwt   (k)w

with variable w.
remark. the result above has a beautiful interpretation: we can think of the   k as allocating
our total risk aversion    in the mean-worst-case-risk portfolio problem across the m di   erent
regimes.
hint. the values   k are not easy to    nd: you have to solve the mean-worst-case-risk problem
to get them. thus, this result does not help us solve the mean-worst-case-risk problem; it
simply gives a nice interpretation of its solution.

160

(b) find the optimal portfolio weights for the problem instance with data given in multi_risk_portfolio_data.*.

report the weights and the values of   k, k = 1, . . . , m . give the m possible values of the risk
associated with your weights, and the worst-case risk.

14.23 computing market-clearing prices. we consider n commodities or goods, with p     rn

++ the vector
of prices (per unit quantity) of them. the (nonnegative) demand for the products is a function of
the prices, which we denote d : rn     rn, so d(p) is the demand when the product prices are
p. the (nonnegative) supply of the products (i.e., the amounts that manufacturers are willing to
produce) is also a function of the prices, which we denote s : rn     rn, so s(p) is the supply
when the product prices are p. we say that the market clears if s(p) = d(p), i.e., supply equals
demand, and we refer to p in this case as a set of market-clearing prices.

elementary economics courses consider the special case n = 1, i.e., a single commodity, so supply
and demand can be plotted (vertically) against the price (on the horizontal axis). it is assumed
that demand decreases with increasing price, and supply increases; the market clearing price can be
found    graphically   , as the point where the supply and demand curves intersect. in this problem we
examine some cases in which market-clearing prices (for the general case n > 1) can be computed
using id76.
we assume that the demand function is hicksian, which means it has the form d(p) =    e(p),
where e : rn     r is a di   erentiable function that is concave and increasing in each argument,
called the expenditure function. (while not relevant in this problem, hicksian demand arises from
a model in which consumers make purchases by maximizing a concave utility function.)

we will assume that the producers are independent, so s(p)i = si(pi), i = 1, . . . , n, where si :
r     r is the supply function for good i. we will assume that the supply functions are positive
and increasing on their domain r+.

(a) explain how to use id76 to    nd market-clearing prices under the assumptions
given above. (you do not need to worry about technical details like zero prices, or cases in
which there are no market-clearing prices.)

(b) compute market-clearing prices for the speci   c case with n = 4,

(cid:32) 4(cid:89)

(cid:33)1/4

e(p) =

pi

,

s(p) = (0.2p1 + 0.5, 0.02p2 + 0.1, 0.04p3, 0.1p4 + 0.2).

i=1

give the market-clearing prices and the demand and supply (which should match) at those
prices.
hint: in cvx and cvxpy, geo_mean gives the geometric mean of the entries of a vector
argument. julia does not yet have a vector argument geom_mean function, but you can get the
geometric mean of 4 variables a, b, c, d using geomean(geomean(a, b), geomean(c, d)).

14.24 funding an expense stream. your task is to fund an expense stream over n time periods. we

consider an expense stream e     rn, so that et is our expenditure at time t.
one possibility for funding the expense stream is through our bank account. at time period t,
the account has balance bt and we withdraw an amount wt. (a negative withdrawal represents a

161

deposit.) the value of our bank account accumulates with an interest rate    per time period, less
withdrawals:

bt+1 = (1 +   )bt     wt.

we assume the account value must be nonnegative, so that bt     0 for all t.
we can also use other investments to fund our expense stream, which we purchase at the initial
time period t = 1, and which pay out over the n time periods. the amount each investment type
pays out over the n time periods is given by the payout matrix p , de   ned so that ptj is the amount
investment type j pays out at time period t per dollar invested. there are m investment types,
and we purchase xj     0 dollars of investment type j.
in time period t, the total payout of all
investments purchased is therefore given by (p x)t.

in each time period, the sum of the withdrawals and the investment payouts must cover the expense
stream, so that

wt + (p x)t     et

for all t = 1, . . . , n.

the total amount we invest to fund the expense stream is the sum of the initial account balance,
and the sum total of the investments purchased: b1 + 1t x.

(a) show that the minimum initial investment that funds the expense stream can be found by

solving a id76 problem.

(b) using the data in expense stream data.*, carry out your method in part (a). on three
graphs, plot the expense stream, the payouts from the m investment types (so m di   erent
curves), and the bank account balance, all as a function of the time period t. report the
minimum initial investment, and the initial investment required when no investments are
purchased (so x = 0).

14.25 yield curve envelope. the term structure of interest rates gives the current value of a future
payment at the current time. the value of a $1 payment in period t is worth pt, with p0 = 1.
the curve pt is called the discount curve. it is often described in terms of the yield curve, de   ned
   1/t
    1. we will assume that pt is positive, nonincreasing, and satis   es p0 = 1. (the
as yt = p
t
nonincreasing assumption means that future payments are worth less than current payments.) we
don   t know the discount curve (or equivalently, the yield curve) but we do have some additional
information about it, beyond the assumptions made above, based on the market prices of some
known bonds.

a bond is characterized by a future cash    ow, called the the coupon payment schedule, given by
c     rt , where ct     0 is the payment in period t, for t = 1, . . . , t . (bond payment schedules typically
have the form of a constant payment every month, or quarter, or year, and a large payment on its
maturity date, with no payments after that. but you don   t need to know this for this problem.)
the present (or discounted) value of the bond is ct p. we assume this is the current market price
of the bond, which we know. we have k bonds with known coupon schedules ck and market prices
bk, k = 1, . . . , k. together with the assumptions above (nonnegativity and monotonicity), this
describes a set of possible discount rates which we denote p     rt . thus p is the set of discount
curves that are consistent with the known bond market prices and our assumptions.

162

de   ne

dmax
t = max

p   p pt,

dmin
t = min

p   p pt,

t = 0, . . . , t.

these functions, called the upper and lower envelopes of the discount curve, give the range of
possible values of the discount at each time, over all discounts compatible with our assumptions
and the known bond prices. from these we can get the maximum and minimum values of the yield
curve,

ymax
t = (dmin

t

)   1/t     1,

ymin
t = (dmax

t

)   1/t     1,

t = 1, . . . , t.

these are called the upper and lower envelope of the yield curve, respectively.

(a) explain how to    nd dmax and dmin using convex or quasiid76, given t , the
coupon payment schedules ck, and known prices, bk, of the k bonds. your solution may
involve solving a reasonable number of problems.

(b) solve the problem you formulated using the problem data found in the    le, yield_curve_data.*.

after computing dmax and dmin, you should plot your lower and upper envelopes against time.
create one    gure for the yield curve, and another for the discount curve. besides t = 0,
are there any time points at which you can be certain what value of the discount curve (or
equivalently, the yield curve) is? if so, explain brie   y.

14.26 portfolio optimization with a drawdown limit. you are given the time series of the daily share prices
of n assets over t days, p1, . . . , pt     rn
++. we consider a buy-and-hold portfolio, consisting of si
shares of asset i (with negative meaning a short position). the value of the portfolio on day t is
t s. we will assume that vt > 0 for all t. we are interested in choosing s     rn,
given by vt = pt
subject to the constraint v1 = b, where b > 0 is the total budget to be invested on day 1. the
objective is to maximize the ending portfolio value vt , subject to the budget constraint above, and
an additional constraint described below related to the maximum drawdown of the portfolio.
the last high or high water mark at time t is ht = max     t v   , the maximum portfolio value up to
time t. the drawdown dt at time t is de   ned as

dt = (ht     vt)/ht.

(this is often expressed as a percentage.) investors get nervous when the drawdown gets too large,
say, more than 10%.

(a) explain how to use id76 to    nd a portfolio s that maximizes    nal value vt ,
subject to the budget constraint, and dt     dmax, where dmax     (0, 1) is given. you can change
or introduce variables, reformulate the problem, or use quasiid76. in all cases,
you must explain your method, and establish the convexity (or concavity, or quasiconvexity,
etc.) of any function for which it is not obvious. the number of variables or constraints you
introduce in your formulation should be no more than a small multiple of t .

(b) find optimal portfolios for the problem data given in drawdown_data.* and asset_prices.csv,
under drawdown limits dmax     {0.05, 0.10, 0.20}. report the optimal    nal value in each case.
plot the portfolio value vt versus time for each choice of dmax.

remark. the optimization problem described here is not immediately useful, since you obviously
would not know future returns when you choose your portfolio. instead we are    nding what buy

163

and hold portfolio would have been best over the (past) t periods, had you known future returns.
but if you believe the future looks like the past (which it need not), this portfolio could be a good
choice for the future, too.

14.27 minimax portfolio optimization. we consider a portfolio optimization problem with n assets held
for a    xed period of time. let xi denote the amount of asset i held. the price change of asset i
over the period is given by pi. the random vector p has mean        rn
+ and covariance        sn
+.
the risk adjusted return is de   ned to be

  t x       xt   x

where        0 is the risk aversion parameter. unfortunately we do not know   , but instead we know
that        a where

a = {  |    (cid:23) 0, lij       ij     uij for i, j = 1, . . . , n}

we do know the matrices l and u , which are symmetric and provide lower and upper bounds
on the entries of the matrix   . (note the two di   erent types of inequality symbols used in the
de   nition of a above.) we assume that   mid = (l + u ) /2 (cid:31) 0. we require that xi     0 (so all
positions are long.)

we intend to maximize the worst-case risk-adjusted return, by solving the optimization problem

maximize   t x        max     a xt   x
subject to x (cid:23) 0,

1t x = 1,

(a) show that max     a xt   x is equal to the optimal value of the following optimization problem

with variables v, w     rn  n

tr (v u     w l)
minimize
subject to vij     0,
wij     0,

(cid:20) v     w x

(cid:21)

i, j = 1, . . . , n,
i, j = 1, . . . , n,

(cid:23) 0.

xt

1

(b) explain how the worst-case risk-adjusted return problem can be solved using convex optimiza-

tion.

(c) the    le minimax_data.m contains l, u and   . for each        {2   4, 2   3, . . . , 23, 24} apply your
method from part (b). plot the mean return   t x(cid:63) of the optimal portfolio versus log2   .
similarly plot the worst-case risk, given by max     a(x(cid:63))t   x(cid:63), versus log2   .

14.28 maximum sharpe ratio portfolio. we consider a portfolio optimization problem with portfolio vector
x     rn, mean return        rn, and return covariance        sn
++. the ratio of portfolio mean return
  t x to portfolio standard deviation (cid:107)  1/2x(cid:107)2 is called the sharpe ratio of the portfolio. (it is often
modi   ed by subtracting a risk-free return from the mean return.) the sharpe ratio measures how
much return you get per risk taken on, and is a widely used single metric that combines return and
risk. it is unde   ned for   t x     0.
consider the problem of choosing the portfolio to maximize the sharpe ratio, subject to the con-
straint 1t x = 1, and the leverage constraint (cid:107)x(cid:107)1     lmax, where lmax     1 is a given leverage limit.
you can assume there is a feasible x with   t x > 0.

164

(a) show that the maximum sharpe ratio problem is quasiconvex in the variable x.

(b) show how to solve the maximum sharpe ratio problem by solving one id76

problem. you must fully justify any change of variables or problem transformation.

14.29 post-modern portfolio optimization metrics. let r     rt denote a time series (say, daily) of in-
vestment returns, i.e., the increase in value divided by initial value. the value of the investment
(typically, a portfolio) is the time series vector v     rt de   ned by the recursion

vt+1 = vt(1 + rt),

t = 0, . . . , t     1,

with v0 a given positive initial value. here we are compounding the investment returns. we will
assume that all returns satisfy rt >    1, which implies that v (cid:31) 0. we de   ne the high-water value
or last high value as

the value and high-water value are functions of r.

ht = max
     t

v   ,

t = 1, . . . , t.

portfolio theory as originally developed by markowitz in the 1950s takes into account the mean
return    = 1t r/t and variance (risk)   2 = (cid:107)r       1(cid:107)2
2/t . the idea of using a mathematical
approach to choose a portfolio to maximize return and minimize risk came to be called modern
portfolio theory. of course, it   s not so modern nowadays.

researchers later suggested various alternative metrics that are (supposedly) closer to what we
really care about than the mean return and risk. the use of these metrics was dubbed (or mar-
keted as) post-modern portfolio theory. some of these so-called post-modern portfolio metrics are
described below, along with a parenthetical note about whether we   d like to minimize or maximize
the metric.

for each metric we wish to minimize, determine if it is a convex or quasiconvex function of r, or
neither. for each metric we wish to maximize, determine if it is a concave or quasiconcave function
of r, or neither. for example, the mean return (which we wish to maximize) is a concave function
of r, and the risk (variance, which we wish to minimize) is a convex function of r. when the metric
is convex or quasiconvex (or concave or quasiconcave), justify your answer. when it is neither, you
can simply state this; you do not need to produce a counterexample. we will deduct some points
if your answer is not strong enough, e.g., if you assert that a metric is quasiconvex, but it is in fact
convex.

growth rate of vt.

(a) logarithmic or kelly growth rate.

(b) downside variance. (minimize.) the downside variance is (1/t )(cid:80)

t log(1 + rt). this is the average
t(rt       )2   , where (u)    =
max{   u, 0}, and    is the mean return. this assesses a penalty for a return below the average
(the    downside   ), but not for a return above the average.

(maximize.)

(c) maximum drawdown. (minimize.) the drawdown at period t is de   ned as dt = (ht     vt)/ht.

the maximum drawdown is de   ned as maxt dt.

(d) maximum consecutive days under water. (minimize.) a time period t is called under water
if vt < ht, i.e., the current value is less than the last high. maximum consecutive days under
water means just that, i.e., the maximum number of consecutive days under water.

165

(1/t )(cid:80)

remark. many other post-modern metrics can derived be from, or are related to, the ones described
above. examples include the sortino, calmar, and information ratios. you can thank the ee364a
sta    for refraining from asking about these.

166

15 mechanical and aerospace engineering

15.1 optimal design of a tensile structure. a tensile structure is modeled as a set of n masses in r2,
some of which are    xed, connected by a set of n springs. the masses are in equilibrium, with spring
forces, connection forces for the    xed masses, and gravity balanced. (this equilibrium occurs when
the position of the masses minimizes the total energy, de   ned below.)
we let (xi, yi)     r2 denote the position of mass i, and mi > 0 its mass value. the    rst p masses
are    xed, which means that xi = x   xed
, for i = 1, . . . , p. the gravitational potential
energy of mass i is gmiyi, where g     9.8 is the gravitational acceleration.
suppose spring j connects masses r and s. its elastic potential energy is

and yi = y   xed

i

i

(cid:0)(xr     xs)2 + (yr     ys)2(cid:1) ,

(1/2)kj
where kj     0 is the sti   ness of spring j.
to describe the topology, i.e., which springs connect which masses, we will use the incidence matrx
a     rn  n , de   ned as

          1 head of spring j connects to mass i

   1 tail of spring j connects to mass i
0 otherwise.

aij =

here we arbitrarily choose a head and tail for each spring, but in fact the springs are completely
symmetric, and the choice can be reversed without any e   ect. (hopefully you will discover why it
is convenient to use the incidence matrix a to specify the topology of the system.)

the total energy is the sum of the gravitational energies, over all the masses, plus the sum of the
elastic energies, over all springs. the equilibrium positions of the masses is the point that minimizes
the total energy, subject to the constraints that the    rst p positions are    xed. (in the equilibrium
positions, the total force on each mass is zero.) we let emin denote the total energy of the system,
in its equilibrium position. (we assume the energy is bounded below; this occurs if and only if each
mass is connected, through some set of springs with positive sti   ness, to a    xed mass.)

the total energy emin is a measure of the sti   ness of the structure, with larger emin corresponding
to sti   er. (we can think of emin =        as an in   nitely unsti    structure; in this case, at least one
mass is not even supported against gravity.)

(a) suppose we know the    xed positions x   xed

1

, . . . , x   xed

p

, y   xed

1

, . . . , y   xed

p

, the mass values m1, . . . , mn,

the spring topology a, and the constant g. you are to choose nonnegative k1, . . . , kn , subject
to a budget constraint 1t k = k1 +      +kn = ktot, where ktot is given. your goal is to maximize
emin.
explain how to do this using id76.

(b) carry out your method for the problem data given in tens_struct_data.*. this    le de   nes
all the needed data, and also plots the equilibrium con   guration when the sti   ness is evenly
distributed across the springs (i.e., k = (ktot/n )1).
report the optimal value of emin. plot the optimized equilibrium con   guration, and compare
it to the equilibrium con   guration with evenly distributed sti   ness. (the code for doing this
is in the    le tens_struct_data.*, but commented out.)

167

15.2 equilibrium position of a system of springs. we consider a collection of n masses in r2, with
locations (x1, y1), . . . , (xn, yn), and masses m1, . . . , mn. (in other words, the vector x     rn gives
the x-coordinates, and y     rn gives the y-coordinates, of the points.) the masses mi are, of course,
positive.
for i = 1, . . . , n     1, mass i is connected to mass i + 1 by a spring. the potential energy in the ith
spring is a function of the (euclidean) distance di = (cid:107)(xi, yi)     (xi+1, yi+1)(cid:107)2 between the ith and
(i + 1)st masses, given by

(cid:26) 0

ei =

di < li
(ki/2)(di     li)2 di     li

where li     0 is the rest length, and ki > 0 is the sti   ness, of the ith spring. the gravitational
potential energy of the ith mass is gmiyi, where g is a positive constant. the total potential energy
of the system is therefore

n   1(cid:88)

e =

ei + gmt y.

i=1

the locations of the    rst and last mass are    xed. the equilibrium location of the other masses is
the one that minimizes e.
(a) show how to    nd the equilibrium positions of the masses 2, . . . , n   1 using id76.
be sure to justify convexity of any functions that arise in your formulation (if it is not obvious).
the problem data are mi, ki, li, g, x1, y1, xn, and yn.

(b) carry out your method to    nd the equilibrium positions for a problem with n = 10, mi = 1,
ki = 10, li = 1, x1 = y1 = 0, xn = yn = 10, with g varying from g = 0 (no gravity) to g = 10
(say). verify that the results look reasonable. plot the equilibrium con   guration for several
values of g.

15.3 elastic truss design. in this problem we consider a truss structure with m bars connecting a set
of nodes. various external forces are applied at each node, which cause a (small) displacement in
the node positions. f     rn will denote the vector of (components of) external forces, and d     rn
will denote the vector of corresponding node displacements. (by    corresponding    we mean if fi is,
say, the z-coordinate of the external force applied at node k, then di is the z-coordinate of the
displacement of node k.) the vector f is called a loading or load.

the structure is linearly elastic, i.e., we have a linear relation f = kd between the vector of
external forces f and the node displacements d. the matrix k = kt (cid:31) 0 is called the sti   ness
matrix of the truss. roughly speaking, the    larger    k is (i.e., the sti   er the truss) the smaller the
node displacement will be for a given loading.

we assume that the geometry (unloaded bar lengths and node positions) of the truss is    xed; we
are to design the cross-sectional areas of the bars. these cross-sectional areas will be the design
variables xi, i = 1, . . . , m. the sti   ness matrix k is a linear function of x:

k(x) = x1k1 +        + xmkm,

where ki = kt
known. the total weight wtot of the truss also depends on the bar cross-sectional areas:

i (cid:23) 0 depend on the truss geometry. you can assume these matrices are given or

wtot(x) = w1x1 +        + wmxm,

168

where wi > 0 are known, given constants (density of the material times the length of bar i). roughly
speaking, the truss becomes sti   er, but also heavier, when we increase xi; there is a tradeo    between
sti   ness and weight.

our goal is to design the sti   est truss, subject to bounds on the bar cross-sectional areas and total
truss weight:

l     xi     u,

i = 1, . . . , m,

wtot(x)     w,

where l, u, and w are given. you may assume that k(x) (cid:31) 0 for all feasible vectors x. to obtain
a speci   c optimization problem, we must say how we will measure the sti   ness, and what model of
the loads we will use.

(a) there are several ways to form a scalar measure of how sti    a truss is, for a given load f . in

this problem we will use the elastic stored energy

e(x, f ) =

f t k(x)   1f

1
2

to measure the sti   ness. maximizing sti   ness corresponds to minimizing e(x, f ).
show that e(x, f ) is a convex function of x on {x | k(x) (cid:31) 0}.
hint. use schur complements to prove that the epigraph is a convex set.

(b) we can consider several di   erent scenarios that re   ect our knowledge about the possible
loadings f that can occur. the simplest is that f is a single,    xed, known loading. in more
sophisticated formulations, the loading f might be a random vector with known distribution,
or known only to lie in some set f, etc.
show that each of the following four problems is a id76 problem, with x as
variable.

    design for a    xed known loading. the vector f is known and    xed. the design problem

is

minimize
subject to l     xi     u,

e(x, f )
wtot(x)     w.

i = 1, . . . , m

    design for multiple loadings. the vector f can take any of n known values f (i), i =

1, . . . , n , and we are interested in the worst-case scenario. the design problem is

minimize maxi=1,...,n e(x, f (i))
subject to l     xi     u,

i = 1, . . . , m

wtot(x)     w.

    design for worst-case, unknown but bounded load. here we assume the vector f can take
arbitrary values in a ball b = {f | (cid:107)f(cid:107)2       }, for a given value of   . we are interested
in minimizing the worst-case stored energy, i.e.,

minimize
subject to l     xi     u,

sup(cid:107)f(cid:107)2      e(x, f (i))
wtot(x)     w.

i = 1, . . . , m

169

    design for a random load with known statistics. we can also use a stochastic model of the
uncertainty in the load, and model the vector f as a random variable with known mean
and covariance:

e f = f (0), e(f     f (0))(f     f (0))t =   .

in this case we would be interested in minimizing the expected stored energy, i.e.,

minimize ee(x, f (i))
subject to l     xi     u,

wtot(x)     w.

i = 1, . . . , m

hint. if v is a random vector with zero mean and covariance   , then e vt av = e tr avvt =
tr a e vvt = tr a  .

(c) formulate the four problems in (b) as semide   nite programming problems.

15.4 a structural optimization problem [bazaraa, sherali, and shetty]. the    gure shows a two-bar truss
with height 2h and width w. the two bars are cylindrical tubes with inner radius r and outer
radius r. we are interested in determining the values of r, r, w, and h that minimize the weight
of the truss subject to a number of constraints. the structure should be strong enough for two
loading scenarios. in the    rst scenario a vertical force f1 is applied to the node; in the second
scenario the force is horizontal with magnitude f2.

the weight of the truss is proportional to the total volume of the bars, which is given by

this is the cost function in the design problem.

2  (r2     r2)

(cid:112)

w2 + h2

the    rst constraint is that the truss should be strong enough to carry the load f1, i.e., the stress
caused by the external force f1 must not exceed a given maximum value. to formulate this
constraint, we    rst determine the forces in each bar when the structure is subjected to the vertical
load f1. from the force equilibrium and the geometry of the problem we can determine that the
magnitudes of the forces in two bars are equal and given by

   

w2 + h2

2h

f1.

170

h1h2wfxrrfthe maximum force in each bar is equal to the cross-sectional area times the maximum allowable
stress    (which is a given constant). this gives us the    rst constraint:

   

w2 + h2

2h

f1         (r2     r2).

the second constraint is that the truss should be strong enough to carry the load f2. when f2 is
applied, the magnitudes of the forces in two bars are again equal and given by

   

w2 + h2

2w

f2,

which gives us the second constraint:
   

w2 + h2

2w

f2         (r2     r2).

we also impose limits wmin     w     wmax and hmin     h     hmax on the width and the height of the
structure, and limits 1.1r     r     rmax on the outer radius.
in summary, we obtain the following problem:

minimize

subject to

   
2  (r2     r2)
   

w2 + h2

   

2h

w2 + h2

w2 + h2

f1         (r2     r2)

f2         (r2     r2)

2w

wmin     w     wmax
hmin     h     hmax
1.1r     r     rmax
r > 0,

r > 0, w > 0,

h > 0.

the variables are r, r, w, h.

formulate this as a geometric programming problem.

15.5 optimizing the inertia matrix of a 2d mass distribution. an object has density   (z) at the point
z = (x, y)     r2, over some region r     r2. its mass m     r and center of gravity c     r2 are given
by

(cid:90)

m =

  (z) dxdy,

c =

  (z)z dxdy,

(cid:90)

1
m

r

r
and its inertia matrix m     r2  2 is

(cid:90)

r

m =

  (z)(z     c)(z     c)t dxdy.

(you do not need to know the mechanics interpretation of m to solve this problem, but here it is,
for those interested. suppose we rotate the mass distribution around a line passing through the

171

center of gravity in the direction q     r2 that lies in the plane where the mass distribution is, at
angular rate   . then the total kinetic energy is (  2/2)qt m q.)
the goal is to choose the density   , subject to 0       (z)       max for all z     r, and a    xed total
mass m = mgiven, in order to maximize   min(m ).
to solve this problem numerically, we will discretize r into n pixels each of area a, with pixel
i having constant density   i and location (say, of its center) zi     r2. we will assume that the
integrands above don   t vary too much over the pixels, and from now on use instead the expressions

n(cid:88)

n(cid:88)

m = a

  i,

c =

a
m

  izi, m = a

i=1

i=1

  i(zi     c)(zi     c)t .

n(cid:88)

i=1

the problem below refers to these discretized expressions.

(a) explain how to solve the problem using convex (or quasiconvex) optimization.

(b) carry out your method on the problem instance with data in inertia_dens_data.m. this
   le includes code that plots a density. give the optimal inertia matrix and its eigenvalues,
and plot the optimal density.

15.6 truss loading analysis. a truss (in 2d, for simplicity) consists of a set of n nodes, with positions
p(1), . . . , p(n)     r2, connected by a set of m bars with tensions t1, . . . , tm     r (tj < 0 means bar j
operates in compression).

each bar puts a force on the two nodes which it connects. suppose bar j connects nodes k and l.
the tension in this bar applies a force

tj

(cid:107)p(l)     p(k)(cid:107)2

(p(l)     p(k))     r2

to node k, and the opposite force to node l. in addition to the forces imparted by the bars, each
node has an external force acting on it. we let f (i)     r2 be the external force acting on node i. for
the truss to be in equilibrium, the total force on each node, i.e., the sum of the external force and
the forces applied by all of the bars that connect to it, must be zero. we refer to this constraint as
force balance.
the tensions have given limits, t min
(for example, if bar j is a cable, then it can only apply a nonnegative tension, so t min
we interpret t max
the    rst p nodes, i = 1, . . . , p, are free, while the remaining n     p nodes, i = p + 1, . . . , n, are
anchored (i.e., attached to a foundation). we will refer to the external forces on the free nodes
as load forces, and external forces at the anchor nodes as anchor forces. the anchor forces are
unconstrained. (more accurately, the foundations at these points are engineered to withstand any
total force that the bars attached to it can deliver.) we will assume that the load forces are just
dead weight, i.e., have the form

    0, for j = 1, . . . , m.
j = 0, and

as the maximum tension the cable can carry.)

j     0 and t max

j     tj     t max

, with t min

j

j

j

0
   wi
where wi     0 is the weight supported at node i.

f (i) =

,

i = 1, . . . , p,

(cid:20)

(cid:21)

172

the set of weights w     rp
+ is supportable if there exists a set of tensions t     rm and anchor forces
f (p+1), . . . , f (n) that, together with the given load forces, satisfy the force balance equations and
respect the tension limits. (the tensions and anchor forces in a real truss will adjust themselves to
have such values when the load forces are applied.) if there does not exist such a set of tensions
and anchor forces, the set of load forces is said to be unsupportable. (in this case, a real truss will
fail, or collapse, when the load forces are applied.)

finally, we get to the questions.

(a) explain how to    nd the maximum total weight, 1t w, that is supportable by the truss.

(b) explain how to    nd the minimum total weight that is not supportable by the truss. (here we
mean: find the minimum value of 1t w, for which (1 +  )w is not supportable, for all   > 0.)

(c) carry out the methods of parts (a) and (b) on the data given in truss_load_data.m. give

the critical total weights from parts (a) and (b), as well as the individual weight vectors.

notes.

    in parts (a) and (b), we don   t need a fully formal mathematical justi   cation; a clear argument

or explanation of anything not obvious is    ne.

    the force balance equations can be expressed in the compact and convenient form

       f load,x

f load,y
f anch

       = 0,

at +

where

f load,x = (f (1)
f load,y = (f (1)
f anch = (f (p+1)

1 , . . . , f (p)
2 , . . . , f (p)

1 )     rp,
2 )     rp,
, f (p+1)

, . . . , f (n)

1

2

1

, . . . , f (n)

2

)     r2(n   p),

and a     r2n  m is a matrix that can be found from the geometry data (truss topology and
node positions). you may refer to a in your solutions to parts (a) and (b). for part (c), we
have very kindly provided the matrix a for you in the m-   le, to save you the time and trouble
of working out the force balance equations from the geometry of the problem.

15.7 least-cost road grading. a road is to be built along a given path. we must choose the height of
the roadbed (say, above sea level) along the path, minimizing the total cost of grading, subject to
some constraints. the cost of grading (i.e., moving earth to change the height of the roadbed from
the existing elevation) depends on the di   erence in height between the roadbed and the existing
elevation. when the roadbed is below the existing elevation it is called a cut; when it is above
it is called a    ll. each of these incurs engineering costs; for example,    ll is created in a series of
lifts, each of which involves dumping just a few inches of soil and then compacting it. deeper cuts
and higher    lls require more work to be done on the road shoulders, and possibly, the addition of
reinforced concrete structures to stabilize the earthwork. this explains why the marginal cost of
cuts and    lls increases with their depth/height.

173

we will work with a discrete model, specifying the road height as hi, i = 1, . . . , n, at points equally
spaced a distance d from each other along the given path. these are the variables to be chosen.
(the heights h1, . . . , hn are called a grading plan.) we are given ei, i = 1, . . . , n, the existing
elevation, at the points. the grading cost is

n(cid:88)

(cid:16)

c =

     ll((hi     ei)+) +   cut((ei     hi)+)

,

(cid:17)

i=1

where      ll and   cut are the    ll and cut cost functions, respectively, and (a)+ = max{a, 0}. the    ll
and cut functions are increasing and convex. the goal is to minimize the grading cost c.

the road height is constrained by given limits on the    rst, second, and third derivatives:

|hi+1     hi|/d     d(1),
|hi+1     2hi + hi   1|/d2     d(2),
|hi+1     3hi + 3hi   1     hi   2|/d3     d(3),

i = 1, . . . , n     1
i = 2, . . . , n     1
i = 3, . . . , n     1,

where d(1) is the maximum allowable road slope, d(2) is the maximum allowable curvature, and
d(3) is the maximum allowable third derivative.

(a) explain how to    nd the optimal grading plan.

(b) find the optimal grading plan for the problem with data given in

road_grading_data.m, and    ll and cut cost functions

+ + (u)+.
plot hi     ei for the optimal grading plan and report the associated cost.

+ + 30(u)+,

     ll(u) = 2(u)2

  cut = 12(u)2

(c) suppose the optimal grading problem with n = 1000 can be solved on a particular machine
(say, with one, or just a few, cores) in around one second. assuming the author of the software
took ee364a, about how long will it take to solve the optimal grading problem with n = 10000?
give a very brief justi   cation of your answer, no more than a few sentences.

15.8 lightest structure that resists a set of loads. we consider a mechanical structure in 2d (for simplic-
ity) which consists of a set of m nodes, with known positions p1, . . . , pm     r2, connected by a set
of n bars (also called struts or elements), with cross-sectional areas a1, . . . , an     r+, and internal
tensions t1, . . . , tn     r.
(cid:80)n
bar j is connected between nodes rj and sj. (the indices r1, . . . , rn and s1, . . . , sn give the structure
topology.) the length of bar j is lj = (cid:107)prj     psj(cid:107)2, and the total volume of the bars is v =
bar j applies a force (tj/lj)(prj     psj )     r2 to node sj and the negative of this force to node rj.
thus, positive tension in a bar pulls its two adjacent nodes towards each other; negative tension
(also called compression) pushes them apart. the ratio of the tension in a bar to its cross-sectional
|tj|       aj,
area is limited by its yield strength, which is symmetric in tension and compression:
where    > 0 is a known constant that depends on the material.

j=1 ajlj. (the total weight is proportional to the total volume.)

the nodes are divided into two groups:
free and    xed. we will take nodes 1, . . . , k to be free,
and nodes k + 1, . . . , m to be    xed. roughly speaking, the    xed nodes are    rmly attached to the
ground, or a rigid structure connected to the ground; the free ones are not.

174

a loading consists of a set of external forces, f1, . . . , fk     r2 applied to the free nodes. each free
node must be in equilibrium, which means that the sum of the forces applied to it by the bars and
the external force is zero. the structure can resist a loading (without collapsing) if there exists a
set of bar tensions that satisfy the tension bounds and force equilibrium constraints. (for those
with knowledge of statics, these conditions correspond to a structure made entirely with pin joints.)
finally, we get to the problem. you are given a set of m loadings, i.e., f (i)
i = 1, . . . , m . the goal is to    nd the bar cross-sectional areas that minimize the structure volume
v while resisting all of the given loadings. (thus, you are to    nd one set of bar cross-sectional areas,
and m sets of tensions.) using the problem data provided in lightest_struct_data.m, report v (cid:63)
and v unif , the smallest feasible structure volume when all bars have the same cross-sectional area.
the node positions are given as a 2    m matrix p, and the loadings as a 2    k    m array f. use
the code included in the data    le to visualize the structure with the bar cross-sectional areas that
you    nd, and provide the plot in your solution.
hint. you might    nd the graph incidence matrix a     rm  n useful. it is de   ned as

k     r2,

1 , . . . , f (i)

          +1 i = rj

   1 i = sj
0

otherwise.

aij =

remark. you could reasonably ask,    does a mechanical structure really solve a id76
problem to determine whether it should collapse?   . it sounds odd, but the answer is, yes it does.

15.9 maintaining static balance. in this problem we study a human   s ability to
maintain balance against an applied external force. we will use a planar
(two-dimensional) model to characterize the set of push forces a human
can sustain before he or she is unable to maintain balance. we model
the human as a linkage of 4 body segments, which we consider to be rigid
bodies: the foot, lower leg, upper leg, and pelvis (into which we lump the
upper body). the pose is given by the joint angles, but this won   t matter
in this problem, since we consider a    xed pose. a set of 40 muscles act
on the body segments; each of these develops a (scalar) tension ti that
satis   es 0     ti     t max
is the maximum possible tension for
muscle i. (the maximum muscle tensions depend on the pose, and the
person, but here they are known constants.) an external pushing force
f push     r2 acts on the pelvis. two (ground contact) forces act on the
foot: f heel     r2 and f toe     r2. (these are shown at right.) these must
satisfy

, where t max

i

i

|f heel

|       f heel

,

1

2

|f toe

|       f toe

,

1

2

where    > 0 is the coe   cient of friction of the ground. there are also joint
forces that act at the joints between the body segments, and gravity forces
for each body segment, but we won   t need them explicitly in this problem.

to maintain balance, the net force and torque on each each body segment must be satis   ed. these
equations can be written out from the geometry of the body (e.g., attachment points for the

175

bcamuscles) and the pose. they can be reduced to a set of 6 linear equations:

amusct + atoef toe + aheelf heel + apushf push = b,

where t     r40 is the vector of muscle tensions, and amusc, atoe, aheel, and apush are known matrices
and b     r6 is a known vector. these data depend on the pose, body weight and dimensions, and
muscle lines of action. fortunately for you, our biomechanics expert apoorva has worked them
out; you will    nd them in static_balance_data.* (along with t max and   ).
we say that the push force f push can be resisted if there exist muscle tensions and ground contact
forces that satisfy the constraints above. (this raises a philosophical question: does a person solve
an optimization to decide whether he or she should lose their balance? in any case, this approach
makes good predictions.)
find f res     r2, the set of push forces that can be resisted. plot it as a shaded region.
hints. show that f res is a convex set. for the given data, 0     f res. then for    = 1   , 2   , . . . , 360   ,
determine the maximum push force, applied in the direction   , that can be resisted. to make
a    lled region on a plot, you can use the command fill() in matlab. for python and ju-
lia, fill() is also available through pyplot.
in julia, make sure to use the ecos solver with
solver = ecossolver(verbose=false).

remark. a person can resist a much larger force applied to the hip than you might think.

15.10 thermodynamic potentials. we consider a mixture of k chemical species. the internal energy of

the mixture is

u (s, v, n1, . . . , nk),

where s is the id178 of the mixture, v is the volume occupied by the mixture, and ni is the
quantity (in moles) of chemical species i. we assume the function u is convex. (real internal
energy functions satisfy this and other interesting properties, but we won   t need any others for this
problem.) the enthalpy h, the helmoltz free energy a, and the gibbs free energy g are de   ned as

h(s, p, n1, . . . , nk) = inf
v
a(t, v, n1, . . . , nk) = inf
s
g(t, p, n1, . . . , nk) = inf
s,v

(u (s, v, n1, . . . , nk)     p v ) ,
(u (s, v, n1, . . . , nk) + t s) ,
(u (s, v, n1, . . . , nk) + t s     p v ) .

the variables t and p can be interpreted physically as the temperature and pressure of the mixture.
these four functions are called thermodynamic potentials. we refer to the arguments s, v , and
n1, . . . nk as the extensive variables, and the arguments t and p as the intensive variables.

(a) show that h, a, and g are convex in the extensive variables, when the intensive variables are

   xed.

(b) show that h, a, and g are concave in the intensive variables, when the extensive variables

are    xed.

(c) we consider a simple reaction involving three species,

2[species 1] (cid:42)(cid:41) [species 2] + [species 3],

176

carried out at temperature treact and volume vreact. the helmholtz free energy of the mixture
is

a(t, v, n1, n2, n3) = t

nj(s0,j     rcj) + t r

nj log

nj

j=1

j=1

3(cid:88)

(cid:18)

(cid:18) v0

(cid:19)(cid:18) t0

(cid:19)cj(cid:19)

v

t

,

3(cid:88)

where r, v0, t0, s0,j, and cj, for j = 1, . . . , k, are known, positive constants. the equilibrium
molar quantities n (cid:63)
subject to the stoichiometry constraints

3 of the three species are those that minimize a(treact, vreact, n1, n2, n3)

2 , and n (cid:63)

1 , n (cid:63)

n1 = n1,init     2z, n2 = n2,init + z, n3 = n3,init + z,

where nj,init is the initial quantity of species j, and the variable z gives the amount of the
reaction that has proceeded. for the values of treact, vreact, r, v0, t0, s0,j, and cj given in
thermo potentials data.*, report the equilibrium molar quantities n (cid:63)
note: julia users might want the ecos solver.
solve!(prob, ecossolver()).

include using ecos, and solve by using

2 , and n (cid:63)
3 .

1 , n (cid:63)

15.11 elastic stored energy in a spring. a spring is a mechanical device that exerts a force f that depends
on its extension x: f =   (x), where    : r     r. the domain dom    is an interval [xmin, xmax]
containing 0, where xmin (xmax) is the minimum (maximum) possible extension of the spring. when
x > 0, the spring is said to be extended, and when x < 0, it is said to be in compression. the
force exerted by the spring must be restoring, which means that f     0 when x     0, and f     0
when x     0. (our sign convention is that a positive force f opposes a positive extension x.) this
implies that f = 0 when x = 0, i.e., zero force is developed when the spring is not extended or
compressed.

the simplest spring is a hooke (linear) spring, with   (x) = kx, where k > 0 is the spring constant.
(the constant 1/k is called the spring compliance.)

a spring is called monotonic if the function    is nondecreasing, i.e., larger extension leads to
a stronger restoring force. many, but not all, springs are monotonic. a classic example is a
compound bow, which has a force that    rst increases with x, and then decreases to a small value
at the extension x where it is fully drawn. (this decrease in force from the maximum is called the
let o    of the bow.)

the elastic stored energy in the spring is

e(x) =

(cid:90) x

  (x(cid:48)) dx(cid:48),

with domain [xmin, xmax].

0

show that e is quasi-convex. show that e is convex if and only if the spring is monotonic. you
may assume    is di   erentiable.

177

16 graphs and networks

16.1 a hypergraph with nodes 1, . . . , m is a set of nonempty subsets of {1, 2, . . . , m}, called edges. an

ordinary graph is a special case in which the edges contain no more than two nodes.
we consider a hypergraph with m nodes and assume coordinate vectors xj     rp, j = 1, . . . , m, are
associated with the nodes. some nodes are    xed and their coordinate vectors xj are given. the
other nodes are free, and their coordinate vectors will be the optimization variables in the problem.
the objective is to place the free nodes in such a way that some measure of the physical size of the
nets is small.

as an example application, we can think of the nodes as modules in an integrated circuit, placed
at positions xj     r2. every edge is an interconnect network that carries a signal from one module
to one or more other modules.
to de   ne a measure of the size of a net, we store the vectors xj as columns of a matrix x     rp  m.
for each edge s in the hypergraph, we use xs to denote the p    |s| submatrix of x with the
columns associated with the nodes of s. we de   ne

as the size of the edge s, where (cid:107)    (cid:107) is a matrix norm, and 1 is a vector of ones of length |s|.

fs(x) = inf
y

(cid:107)xs     y1t(cid:107).

(50)

(a) show that the optimization problem

minimize (cid:80)

edges s fs(x)

is convex in the free node coordinates xj.

(b) the size fs(x) of a net s obviously depends on the norm used in the de   nition (50). we

consider    ve norms.
    frobenius norm:

(cid:107)xs     y1t(cid:107)f =

    maximum euclidean column norm:

(xij     yi)2

      1/2
(cid:33)1/2

.

i=1

j   s

      (cid:88)
p(cid:88)
(cid:32) p(cid:88)
p(cid:88)

i=1

(cid:107)xs     y1t(cid:107)2,1 = max
j   s

(xij     yi)2

.

    maximum column sum norm:

(cid:107)xs     y1t(cid:107)1,1 = max
j   s

|xij     yi|.

i=1

    sum of absolute values norm:

(cid:107)xs     y1t(cid:107)sav =

178

(cid:88)

p(cid:88)

j   s

i=1

|xij     yi|

    sum-row-max norm:

(cid:107)xs     y1t(cid:107)srm =

p(cid:88)

i=1

|xij     yi|

max
j   s

for which of these norms does fs have the following interpretations?
(i) fs(x) is the radius of the smallest euclidean ball that contains the nodes of s.
(ii) fs(x) is (proportional to) the perimeter of the smallest rectangle that contains the nodes

of s:

fs(x) =

1
4

(max
j   s

xij     min
j   s

xij).

(iii) fs(x) is the squareroot of the sum of the squares of the euclidean distances to the mean

of the coordinates of the nodes in s:

fs(x) =

(cid:107)xj       x(cid:107)2

2

(cid:88)

k   s

1
|s|

where

  xi =

xik,

i = 1, . . . , p.

p(cid:88)

i=1

      1/2

(iv) fs(x) is the sum of the (cid:96)1-distances to the (coordinate-wise) median of the coordinates

of the nodes in s:

fs(x) =

(cid:107)xj       x(cid:107)1 where

  xi = median({xik | k     s}),

i = 1, . . . , p.

      (cid:88)
(cid:88)

j   s

j   s

16.2 let w     sn be a symmetric matrix with nonnegative elements wij and zero diagonal. we can
interpret w as the representation of a weighted undirected graph with n nodes. if wij = wji > 0,
there is an edge between nodes i and j, with weight wij. if wij = wji = 0 then nodes i and j are
not connected. the laplacian of the weighted graph is de   ned as

l(w ) =    w + diag(w 1).

this is a symmetric matrix with elements

lij(w ) =

the laplacian has the useful property that

k=1 wik

i = j
i (cid:54)= j.

yt l(w )y =

wij(yi     yj)2

(cid:26) (cid:80)n
(cid:88)

   wij

i   j

for all vectors y     rn.
(a) show that the function f : sn     r,

f (w ) = inf

1t x=0

n  max (l(w ) + diag(x)) ,

is convex.

179

(b) give a simple argument why f (w ) is an upper bound on the optimal value of the combinatorial

optimization problem

maximize
subject to yi     {   1, 1},

yt l(w )y

i = 1, . . . , n.

this problem is known as the max-cut problem, for the following reason. every vector y
with components   1 can be interpreted as a partition of the nodes of the graph in a set
s = {i | yi = 1} and a set t = {i | yi =    1}. such a partition is called a cut of the graph.
the objective function in the max-cut problem is

yt l(w )y =

wij(yi     yj)2.

(cid:88)

i   j

if y is   1-vector corresponding to a partition in sets s and t , then yt l(w )y equals four
times the sum of the weights of the edges that join a point in s to a point in t . this is called
the weight of the cut de   ned by y. the solution of the max-cut problem is the cut with the
maximum weight.

(c) the function f de   ned in part 1 can be evaluated, for a given w , by solving the optimization

problem

with variable x     rn. express this problem as an sdp.

minimize
subject to 1t x = 0,

n  max(l(w ) + diag(x))

(d) derive an alternative expression for f (w ), by taking the dual of the sdp in part 3. show

that the dual sdp is equivalent to the following problem:
wij(cid:107)pi     pj(cid:107)2

maximize

2

(cid:88)

i   j
(cid:107)pi(cid:107)2 = 1,

subject

i = 1, . . . , n,

with variables pi     rn, i = 1, . . . , n. in this problem we place n points pi on the unit sphere
in rn in such a way that the weighted sum of their squared pair-wise distances is maximized.

16.3 utility versus latency trade-o    in a network. we consider a network with m edges, labeled 1, . . . , m,
and n    ows, labeled 1, . . . , n. each    ow has an associated nonnegative    ow rate fj; each edge or
link has an associated positive capacity ci. each    ow passes over a    xed set of links (its route);
the total tra   c ti on link i is the sum of the    ow rates over all    ows that pass through link i. the
   ow routes are described by a routing matrix r     rm  n, de   ned as

(cid:26) 1    ow j passes through link i

rij =

thus, the vector of link tra   c, t     rm, is given by t = rf . the link capacity constraint can be

expressed as rf (cid:22) c. the (logarithmic) network utility is de   ned as u (f ) =(cid:80)n

0 otherwise.

j=1 log fj.

the (average queuing) delay on link i is given by

di =

1

ci     ti

180

(multiplied by a constant, that doesn   t matter to us). we take di =     for ti = ci. the delay or
latency for    ow j, denoted lj, is the sum of the link delays over all links that    ow j passes through.
we de   ne the maximum    ow latency as

l = max{l1, . . . , ln}.

we are given r and c; we are to choose f .

(a) how would you    nd the    ow rates that maximize the utility u , ignoring    ow latency? (in

particular, we allow l =    .) we   ll refer to this maximum achievable utility as u max.

(b) how would you    nd the    ow rates that minimize the maximum    ow latency l, ignoring utility?
(in particular, we allow u =       .) we   ll refer to this minimum achievable latency as lmin.
(c) explain how to    nd the optimal trade-o    between utility u (which we want to maximize) and

latency l (which we want to minimize).

(d) find u max, lmin, and plot the optimal trade-o    of utility versus latency for the network with
data given in net_util_data.m, showing lmin and u max on the same plot. your plot should
cover the range from l = 1.1lmin to l = 11lmin. plot u vertically, on a linear scale, and l
horizontally, using a log scale.

note. for parts (a), (b), and (c), your answer can involve solving one or more id76
problems. but if there is a simpler solution, you should say so.

16.4 allocation of interdiction e   ort. a smuggler moves along a directed acyclic graph with m edges and
n nodes, from a source node (which we take as node 1) to a destination node (which we take as node
n), along some (directed) path. each edge k has a detection failure id203 pk, which is the
id203 that the smuggler passes over that edge undetected. the detection events on the edges
are independent, so the id203 that the smuggler makes it to the destination node undetected
j   p pj, where p     {1, . . . , m} is (the set of edges on) the smuggler   s path. we assume that
the smuggler knows the detection failure probabilities and will take a path that maximizes the
id203 of making it to the destination node undetected. we let p max denote this maximum
id203 (over paths). (note that this is a function of the edge detection failure probabilities.)

is(cid:81)

the edge detection failure id203 on an edge depends on how much interdiction resources are
allocated to the edge. here we will use a very simple model, with xj     r+ denoting the e   ort (say,
yearly budget) allocated to edge j, with associated detection failure id203 pj = e   aj xj , where
aj     r++ are given. the constraints on x are a maximum for each edge, x (cid:22) xmax, and a total
budget constraint, 1t x     b.
(a) explain how to solve the problem of choosing the interdiction e   ort vector x     rm, subject
to the constraints, so as to minimize p max. partial credit will be given for a method that
involves an enumeration over all possible paths (in the objective or constraints). hint. for
k   p pk over all paths p from the source node 1

each node i, let pi denote the maximum of(cid:81)

to node i (so p max = pn).

(b) carry out your method on the problem instance given in interdict_alloc_data.m. the data

   le contains the data a, xmax, b, and the graph incidence matrix a     rn  m, where

             1 if edge j leaves node i

+1 if edge j enters node i
0

otherwise.

aij =

181

give p max(cid:63), the optimal value of p max, and compare it to the value of p max obtained with
uniform allocation of resources, i.e., with x = (b/m)1.
hint. given a vector z     rn, at z is the vector of edge di   erences: (at z)j = zk     zl if edge j
goes from node l to node k.
the following    gure shows the topology of the graph in question. (the data    le contains a;
this    gure, which is not needed to solve the problem, is shown here so you can visualize the
graph.)

16.5 network sizing. we consider a network with n directed arcs. the    ow through arc k is denoted
xk and can be positive, negative, or zero. the    ow vector x must satisfy the network constraint
ax = b where a is the node-arc incidence matrix and b is the external    ow supplied to the nodes.
each arc has a positive capacity or width yk. the quantity |xk|/yk is the    ow density in arc k.
the cost of the    ow in arc k depends on the    ow density and the width of the arc, and is given by
yk  k(|xk|/yk), where   k is convex and nondecreasing on r+.

(a) de   ne f (y, b) as the optimal value of the network    ow optimization problem

n(cid:88)

minimize

yk   k(|xk|/yk)

with variable x, for given values of the arc widths y (cid:31) 0 and external    ows b. is f a convex
function (jointly in y, b)? carefully explain your answer.

subject to ax = b

k=1

182

node 1node 2node 3node 4node 5node 6node 7node 8node 9node 10(b) suppose b is a discrete random vector with possible values b(1), . . . , b(m). the id203 that
b = b(j) is   j. consider the problem of sizing the network (selecting the arc widths yk) so that
the expected cost is minimized:

minimize g(y) + e f (y, b).

(51)

the variable is y. here g is a convex function, representing the installation cost, and e f (y, b)
is the expected optimal network    ow cost

m(cid:88)

e f (y, b) =

  jf (y, b(j)),

where f is the function de   ned in part 1. is (51) a id76 problem?

j=1

16.6 maximizing algebraic connectivity of a graph. let g = (v, e) be a weighted undirected graph with
n = |v | nodes, m = |e| edges, and weights w1, . . . , wm     r+ on the edges. if edge k connects
nodes i and j, then de   ne ak     rn as (ak)i = 1, (ak)j =    1, with other entries zero. the weighted
laplacian (matrix) of the graph is de   ned as

m(cid:88)

l =

wkakat

k = a diag(w)at ,

k=1

where a = [a1        am]     rn  m is the incidence matrix of the graph. nonnegativity of the weights
implies l (cid:23) 0.
denote the eigenvalues of the laplacian l as

  1       2                  n,

which are functions of w. the minimum eigenvalue   1 is always zero, while the second smallest
eigenvalue   2 is called the algebraic connectivity of g and is a measure of the connectedness of
a graph: the larger   2 is, the better connected the graph is.
it is often used, for example, in
analyzing the robustness of computer networks.

though not relevant for the rest of the problem, we mention a few other examples of how the
algebraic connectivity can be used. these results, which relate graph-theoretic properties of g
to properties of the spectrum of l, belong to a    eld called spectral id207. for example,
  2 > 0 if and only if the graph is connected. the eigenvector v2 associated with   2 is often called
the fiedler vector and is widely used in a graph partitioning technique called spectral partitioning,
which assigns nodes to one of two groups based on the sign of the relevant component in v2. finally,
  2 is also closely related to a quantity called the isoperimetric number or cheeger constant of g,
which measures the degree to which a graph has a bottleneck.
the problem is to choose the edge weights w     rm
nonnegativity constraint) so as to maximize the algebraic connectivity:

+ , subject to some linear inequalities (and the

maximize   2
subject to w (cid:23) 0, f w (cid:22) g,

with variable w     rm. the problem data are a (which gives the graph topology), and f and g
(which describe the constraints on the weights).

183

(a) describe how to solve this problem using id76.

(b) numerical example. solve the problem instance given in max_alg_conn_data.m, which uses
f = 1t and g = 1 (so the problem is to allocate a total weight of 1 to the edges of the graph).
compare the algebraic connectivity for the graph obtained with the optimal weights w(cid:63) to the
one obtained with wunif = (1/m)1 (i.e., a uniform allocation of weight to the edges).
use the function plotgraph(a,xy,w) to visualize the weighted graphs, with weight vectors
w(cid:63) and wunif . you will    nd that the optimal weight vector v(cid:63) has some zero entries (which
due to the    nite precision of the solver, will appear as small weight values); you may want to
round small values (say, those under 10   4) of w(cid:63) to exactly zero. use the gplot function to
visualize the original (given) graph, and the subgraph associated with nonzero weights in w(cid:63).
brie   y comment on the following (incorrect) intuition:    the more edges a graph has, the more
connected it is, so the optimal weight assignment should make use of all available edges.   

16.7 graph isomorphism via id135. an (undirected) graph with n vertices can be described

by its adjacency matrix a     sn, given by

(cid:26) 1 there is an edge between vertices i and j

aij =

0 otherwise.

two (undirected) graphs are isomorphic if we can permute the vertices of one so it is the same as
the other (i.e., the same pairs of vertices are connected by edges). if we describe them by their
adjacency matrices a and b, isomorphism is equivalent to the existence of a permutation matrix
p     rn  n such that p ap t = b. (recall that a matrix p is a permutation matrix if each row and
column has exactly one entry 1, and all other entries 0.) determining if two graphs are isomorphic,
and if so,    nding a suitable permutation matrix p , is called the graph isomorphism problem.

remarks (not needed to solve the problem). it is not currently known if the graph isomorphism
problem is np-complete or solvable in polynomial time. the graph isomorphism problem comes
up in several applications, such as determining if two descriptions of a molecule are the same, or
whether the physical layout of an electronic circuit correctly re   ects the given circuit schematic
diagram.
(a) find a set of linear equalities and inequalities on p     rn  n, that together with the boolean
constraint pij     {0, 1}, are necessary and su   cient for p to be a permutation matrix satisfying
p ap t = b. thus, the graph isomorphism problem is equivalent to a boolean feasibility lp.

(b) consider the relaxed version of the boolean feasibility lp found in part (a), i.e., the lp that
results when the constraints pij     {0, 1} are replaced with pij     [0, 1]. when this lp is
infeasible, we can be sure that the two graphs are not isomorphic. if a solution of the lp
is found that satis   es pij     {0, 1}, then the graphs are isomporphic and we have solved the
graph isomorphism problem. this of course does not always happen, even if the graphs are
isomorphic.
a standard trick to encourage the entries of p to take on the values 0 and 1 is to add a random
linear objective to the relaxed feasibility lp. (this doesn   t change whether the problem is
i,j wijpij, where wij are chosen randomly
(say, from n (0, 1)). (this can be repeated with di   erent choices of w .)

feasible or not.) in other words, we minimize (cid:80)

184

carry out this scheme for the two isomorphic graphs with adjacency matrices a and b given
in graph_isomorphism_data.* to    nd a permutation matrix p that satis   es p ap t = b.
report the permutation vector, given by the matrix-vector product p v, where v = (1, 2, . . . , n).
verify that all the required conditions on p hold. to check that the entries of the solution of
the lp are (close to) {0, 1}, report maxi,j pij(1     pij). and yes, you might have to try more
than one instance of the randomized method described above before you    nd a permutation
that establishes isomorphism of the two graphs.

185

17 energy and power

17.1 power    ow optimization with    n     1    reliability constraint. we model a network of power lines as a
graph with n nodes and m edges. the power    ow along line j is denoted pj, which can be positive,
which means power    ows along the line in the direction of the edge, or negative, which means power
   ows along the line in the direction opposite the edge. (in other words, edge orientation is only
used to determine the direction in which power    ow is considered positive.) each edge can support
power    ow in either direction, up to a given maximum capacity p max

, i.e., we have |pj|     p max

.

j

j

i

i

, where gmax

generators are attached to the    rst k nodes. generator i provides power gi to the network. these
must satisfy 0     gi     gmax
is a given maximum power available from generator i.
the power generation costs are ci > 0, which are given; the total cost of power generation is ct g.
electrical loads are connected to the nodes k + 1, . . . , n. we let di     0 denote the demand at node
k + i, for i = 1, . . . , n     k. we will consider these loads as given. in this simple model we will
neglect all power losses on lines or at nodes. therefore, power must balance at each node: the total
power    owing into the node must equal the sum of the power    owing out of the node. this power
balance constraint can be expressed as

(cid:20)    g

(cid:21)

,

d

ap =

where a     rn  m is the node-incidence matrix of the graph, de   ned by

          +1 edge j enters node i,

   1 edge j leaves node i,
0 otherwise.

aij =

in the basic power    ow optimization problem, we choose the generator powers g and the line    ow
powers p to minimize the total power generation cost, subject to the constraints listed above.
the (given) problem data are the incidence matrix a, line capacities p max, demands d, maximum
generator powers gmax, and generator costs c.

in this problem we will add a basic (and widely used) reliability constraint, commonly called an
   n     1 constraint   . (n is not a parameter in the problem;    n     1    just means    all-but-one   .) this
states that the system can still operate even if any one power line goes out, by re-routing the line
powers. the case when line j goes out is called    failure contingency j   ; this corresponds to replacing
with 0. the requirement is that there must exist a contingency power    ow vector p(j) that
p max
j
satis   es all the constraints above, with p(j)
j = 0, using the same given generator powers. (this
corresponds to the idea that power    ows can be re-routed quickly, but generator power can only
be changed more slowly.) the    n     1 reliability constraint    requires that for each line, there is a
contingency power    ow vector. the    n     1 reliability constraint    is (implicitly) a constraint on the
generator powers.

the questions below concern the speci   c instance of this problem with data given in rel_pwr_flow_data.*.
(executing this    le will also generate a    gure showing the network you are optimizating.) especially
for part (b) below, you must explain exactly how you set up the problem as a id76
problem.

186

(a) nominal optimization. find the optimal generator and line power    ows for this problem
instance (without the n     1 reliability constraint). report the optimal cost and generator
powers. (you do not have to give the power line    ows.)

(b) nominal optimization with n     1 reliability constraint. minimize the nominal cost, but you
must choose generator powers that meet the n     1 reliability requirement as well. report the
optimal cost and generator powers. (you do not have to give the nominal power line    ows, or
any of the contingency    ows.)

17.2 optimal generator dispatch. in the generator dispatch problem, we schedule the electrical output
power of a set of generators over some time interval, to minimize the total cost of generation while
exactly meeting the (assumed known) electrical demand. one challenge in this problem is that the
generators have dynamic constraints, which couple their output powers over time. for example,
every generator has a maximum rate at which its power can be increased or decreased.

we label the generators i = 1, . . . , n, and the time periods t = 1, . . . , t . we let pi,t denote the
(nonnegative) power output of generator i at time interval t. the (positive) electrical demand in
period t is dt. the total generated power in each period must equal the demand:

n(cid:88)

pi,t = dt,

t = 1, . . . , t.

i=1

each generator has a minimum and maximum allowed output power:

i     pi,t     p max
p min

i

,

i = 1, . . . , n,

t = 1, . . . , t.

the cost of operating generator i at power output u is   i(u), where   i is an increasing strictly
convex function. (assuming the cost is mostly fuel cost, convexity of   i says that the thermal
e   ciency of the generator decreases as its output power increases.) we will assume these cost
functions are quadratic:   i(u) =   iu +   iu2, with   i and   i positive.
each generator has a maximum ramp-rate, which limits the amount its power output can change
over one time period:

|pi,t+1     pi,t|     ri,

i = 1, . . . , n,

t = 1, . . . , t     1.

in addition, changing the power output of generator i from ut to ut+1 incurs an additional cost
  i(ut+1     ut), where   i is a convex function. (this cost can be a real one, due to increased fuel
use during a change of power, or a    ctitious one that accounts for the increased maintenance cost
or decreased lifetime caused by frequent or large changes in power output.) we will use the power
change cost functions   i(v) =   i|v|, where   i are positive.
power plants with large capacity (i.e., p max
) are typically more e   cient (i.e., have smaller   i,   i),
but have smaller ramp-rate limits, and higher costs associated with changing power levels. small
gas-turbine plants (   peakers   ) are less e   cient, have less capacity, but their power levels can be
rapidly changed.

i

the total cost of operating the generators is

n(cid:88)

t(cid:88)

i=1

t=1

n(cid:88)

t   1(cid:88)

i=1

t=1

  i(pi,t+1     pi,t).

c =

  i(pi,t) +

187

choosing the generator output schedules to minimize c, while respecting the constraints described
above, is a id76 problem. the problem data are dt (the demands), the generator
power limits p min
, the ramp-rate limits ri, and the cost function parameters   i,   i, and
  i. we will assume that problem is feasible, and that p(cid:63)
i,t are the (unique) optimal output powers.

and p max

i

i

(a) price decomposition. show that there are power prices q1, . . . , qt for which the following

holds: for each i, p(cid:63)

i,t solves the optimization problem

minimize (cid:80)t

t=1 (  i(pi,t)     qtpi,t) +(cid:80)t   1

subject to p min

i     pi,t     p max
|pi,t+1     pi,t|     ri,

i

,

t = 1, . . . , t
t = 1, . . . , t     1.

t=1   i(pi,t+1     pi,t)

the objective here is the portion of the objective for generator i, minus the revenue generated
by the sale of power at the prices qt. note that this problem involves only generator i; it can
be solved independently of the other generators (once the prices are known). how would you
   nd the prices qt?
you do not have to give a full formal proof; but you must explain your argument fully. you
are welcome to use results from the text book.

(b) solve the generator dispatch problem with the data given in gen_dispatch_data.m, which
gives (fake, but not unreasonable) demand data for 2 days, at 15 minute intervals. this    le
includes code to plot the demand, optimal generator powers, and prices. (you must replace
these variables with their correct values.) comment on anything you see in your solution
that might at    rst seem odd. using the prices found, solve the problems in part (a) for the
generators separately, to be sure they give the optimal powers (up to some small numerical
errors).

remark. while beyond the scope of this course, we mention that there are very simple price update
mechanisms that adjust the prices in such a way that when the generators independently schedule
themselves using the prices (as described above), we end up with the total power generated in each
period matching the demand, i.e., the optimal solution of the whole (coupled) problem. this gives
a decentralized method for generator dispatch.

and cmax

17.3 optimizing a portfolio of energy sources. we have n di   erent energy sources, such as coal-   red
plants, several wind farms, and solar farms. our job is to size each of these, i.e., to choose its
capacity. we will denote by ci the capacity of plant i; these must satisfy cmin
, where
cmin
i
each generation source has a cost to build and operate (including fuel, maintenance, government
subsidies and taxes) over some time period. we lump these costs together, and assume that the
cost is proportional to ci, with (given) coe   cient bi. thus, the total cost to build and operate the
energy sources is bt c (in, say, $/hour).

are given minimum and maximum values.

i     ci     cmax

i

i

each generation source is characterized by an availability ai, which is a random variable with values
in [0, 1]. if source i has capacity ci, then the power available from the plant is ciai; the total power
available from the portfolio of energy sources is ct a, which is a random variable. a coal    red plant
has ai = 1 almost always, with ai < 1 when one of its units is down for maintenance. a wind farm,
in contrast, is characterized by strong    uctations in availability with ai = 1 meaning a strong wind

188

is blowing, and ai = 0 meaning no wind is blowing. a solar farm has ai = 1 only during peak sun
hours, with no cloud cover; at other times (such as night) we have ai = 0.
energy demand d     r+ is also modeled as a random variable. the components of a (the availabil-
ities) and d (the demand) are not independent. whenever the total power available falls short of
the demand, the additional needed power is generated by (expensive) peaking power plants at a
   xed positive price p. the average cost of energy produced by the peakers is

e p(d     ct a)+,

where x+ = max{0, x}. this average cost has the same units as the cost bt c to build and operate
the plants.

the objective is to choose c to minimize the overall cost

c = bt c + e p(d     ct a)+.

sample average approximation. to solve this problem, we will minimize a cost function based
on a sample average of peaker cost,

csa = bt c +

1
n

p(d(j)     ct a(j))+

where (a(j), d(j)), j = 1, . . . , n , are (given) samples from the joint distribution of a and d. (these
might be obtained from historical data, weather and demand forecasting, and so on.)

validation. after    nding an optimal value of c, based on the set of samples, you should double
check or validate your choice of c by evaluating the overall cost on another set of (validation)
samples, (  a(j),   d(j)), j = 1, . . . , n val,

cval = bt c +

1

n val

p(   d(j)     ct   a(j))+.

(these could be another set of historical data, held back for validation purposes.) if csa     cval,
our con   dence that each of them is approximately the optimal value of c is increased.

finally we get to the problem. get the data in energy_portfolio_data.m, which includes the
required problem data, and the samples, which are given as a 1    n row vector d for the scalars
d(j), and an n   n matrix a for a(j). a second set of samples is given for validation, with the names
d_val and a_val.
carry out the optimization described above. give the optimal cost obtained, csa, and compare to
the cost evaluated using the validation data set, cval.

compare your solution with the following naive (   certainty-equivalent   ) approach: replace a and
d with their (sample) means, and then solve the resulting optimization problem. give the optimal
cost obtained, cce (using the average values of a and d). is this a lower bound on the optimal value
of the original problem? now evaluate the cost for these capacities on the validation set, cce,val.
make a brief statement.

189

n(cid:88)

j=1

n val(cid:88)

j=1

17.4 optimizing processor speed. a set of n tasks is to be completed by n processors. the variables
to be chosen are the processor speeds s1, . . . , sn, which must lie between a given minimum value
smin and a maximum value smax. the computational load of task i is   i, so the time required to
complete task i is   i =   i/si.
the power consumed by processor i is given by pi = f (si), where f : r     r is positive, increasing,
and convex. therefore, the total energy consumed is

n(cid:88)

i=1

e =

  i
si

f (si).

(here we ignore the energy used to transfer data between processors, and assume the processors
are powered down when they are not active.)
there is a set of precedence constraints for the tasks, which is a set of m ordered pairs p    
{1, . . . , n}    {1, . . . , n}. if (i, j)     p, then task j cannot start until task i    nishes. (this would be
the case, for example, if task j requires data that is computed in task i.) when (i, j)     p, we refer
to task i as a precedent of task j, since it must precede task j. we assume that the precedence
constraints de   ne a directed acyclic graph (dag), with an edge from i to j if (i, j)     p.
if a task has no precedents, then it starts at time t = 0. otherwise, each task starts as soon as all
of its precedents have    nished. we let t denote the time for all tasks to be completed.

to be sure the precedence constraints are clear, we consider the very small example shown below,
with n = 6 tasks and m = 6 precedence constraints.

p = {(1, 4), (1, 3), (2, 3), (3, 6), (4, 6), (5, 6)}.

in this example, tasks 1, 2, and 5 start at time t = 0 (since they have no precedents). task 1
   nishes at t =   1, task 2    nishes at t =   2, and task 5    nishes at t =   5. task 3 has tasks 1 and 2 as
precedents, so it starts at time t = max{  1,   2}, and ends   3 seconds later, at t = max{  1,   2} +   3.
task 4 completes at time t =   1 +   4. task 6 starts when tasks 3, 4, and 5 have    nished, at time
t = max{max{  1,   2} +   3,   1 +   4,   5}. it    nishes   6 seconds later. in this example, task 6 is the
last task to be completed, so we have

t = max{max{  1,   2} +   3,   1 +   4,   5} +   6.

(a) formulate the problem of choosing processor speeds (between the given limits) to minimize
completion time t , subject to an energy limit e     emax, as a id76 problem.

190

123456the data in this problem are p, smin, smax,   1, . . . ,   n, emax, and the function f . the variables
are s1, . . . , sn.
feel free to change variables or to introduce new variables. be sure to explain clearly why
your formulation of the problem is convex, and why it is equivalent to the problem statement
above.
important:

    your formulation must be convex for any function f that is positive, increasing, and

convex. you cannot make any further assumptions about f .

    this problem refers to the general case, not the small example described above.

(b) consider the speci   c instance with data given in proc_speed_data.m, and processor power

f (s) = 1 + s + s2 + s3.

the precedence constraints are given by an m    2 matrix prec, where m is the number of
precedence constraints, with each row giving one precedence constraint (the    rst column gives
the precedents).
plot the optimal trade-o    curve of energy e versus time t , over a range of t that extends
from its minimum to its maximum possible value. (these occur when all processors operate at
smax and smin, respectively, since t is monotone nonincreasing in s.) on the same plot, show
the energy-time trade-o    obtained when all processors operate at the same speed   s, which is
varied from smin to smax.
note: in this part of the problem there is no limit emax on e as in part (a); you are to    nd
the optimal trade-o    of e versus t .

17.5 minimum energy processor speed scheduling. a single processor can adjust its speed in each of t
time periods, labeled 1, . . . , t . its speed in period t will be denoted st, t = 1, . . . , t . the speeds
must lie between given (positive) minimum and maximum values, smin and smax, respectively, and
must satisfy a slew-rate limit, |st+1    st|     r, t = 1, . . . , t     1. (that is, r is the maximum allowed
period-to-period change in speed.) the energy consumed by the processor in period t is given by
  (st), where    : r     r is increasing and convex. the total energy consumed over all the periods

is e =(cid:80)t

t=1   (st).

labeled 1, . . . , n. each job has an availability time ai    
the processor must handle n jobs,
{1, . . . , t}, and a deadline di     {1, . . . , t}, with di     ai. the processor cannot start work
on job i until period t = ai, and must complete the job by the end of period di. job i involves a
(nonnegative) total work wi. you can assume that in each time period, there is at least one job
available, i.e., for each t, there is at least one i with ai     t and di     t.
in period t, the processor allocates its e   ort across the n jobs as   t, where 1t   t = 1,   t (cid:23) 0. here
  ti (the ith component of   t) gives the fraction of the processor e   ort devoted to job i in period t.
respecting the availability and deadline constraints requires that   ti = 0 for t < ai or t > di. to
complete the jobs we must have

  tist     wi,

i = 1, . . . , n.

di(cid:88)

t=ai

191

(a) formulate the problem of choosing the speeds s1, . . . , st , and the allocations   1, . . . ,   t , in
order to minimize the total energy e, as a id76 problem. the problem data
are smin, smax, r,   , and the job data, ai, di, wi, i = 1, . . . , n. be sure to justify any change
of variables, or introduction of new variables, that you use in your formulation.

(b) carry out your method on the problem instance described in proc_sched_data.m, with
quadratic energy function   (st) =    +   st +   s2
t . (the parameters   ,   , and    are given
in the data    le.) executing this    le will also give a plot showing the availability times and
deadlines for the jobs.
give the energy obtained by your speed pro   le and allocations. plot these using the command
bar((s*ones(1,n)).*theta,1,   stacked   ), where s is the t    1 vector of speeds, and    is
the t    n matrix of allocations with components   ti. this will show, at each time period, how
much e   ective speed is allocated to each job. the top of the plot will show the speed st. (you
don   t need to turn in a color version of this plot; b&w is    ne.)

17.6 ac power    ow analysis via id76. this problem concerns an ac (alternating current)
power system consisting of m transmission lines that connect n nodes. we describe the topology
by the node-edge incidence matrix a     rn  m, where

          +1 line j leaves node i

   1 line j enters node i
0

otherwise.

aij =

the power    ow on line j is pj (with positive meaning in the direction of the line as de   ned in a,
negative meaning power    ow in the opposite direction).

node i has voltage phase angle   i, and external power input si. (if a generator is attached to node
i we have si > 0; if a load is attached we have si < 0; if the node has neither, si = 0.) neglecting
power losses in the lines, and assuming power is conserved at each node, we have ap = s. (we must
have 1t s = 0, which means that the total power pumped into the network by generators balances
the total power pulled out by the loads.)

the line power    ows are a nonlinear function of the di   erence of the phase angles at the nodes they
connect to:

pj =   j sin(  k       l),

where line j goes from node k to node l. here   j is a known positive constant (related to the
inductance of the line). we can write this in matrix form as p = diag(  ) sin(at   ), where sin is
applied elementwise.

the dc power    ow equations are

ap = s,

p = diag(  ) sin(at   ).

in the power analysis problem, we are given s, and want to    nd p and    that satisfy these equations.
we are interested in solutions with voltage phase angle di   erences that are smaller than   90   .
(under normal conditions, real power lines are never operated with voltage phase angle di   erences
more than   20    or so.)

192

you will show that the dc power    ow equations can be solved by solving the id76
problem

minimize (cid:80)m

i=j   j(pj)

with variable p, where

  j(u) =

(cid:90) u

0

subject to ap = s,

sin   1(v/  j) dv = u sin   1(u/  j) +   j(

(cid:113)

1     (u/  j)2     1),

with domain dom   j = (     j,   j). (the second expression will be useless in this problem.)

(a) show that the problem above is convex.
(b) suppose the problem above has solution p(cid:63), with optimal dual variable   (cid:63) associated with the
equality constraint ap = s. show that p(cid:63),    =   (cid:63) solves the dc power    ow equation. hint.
write out the optimality conditions for the problem above.

17.7 power transmission with losses. a power transmission grid is modeled as a set of n nodes and
m directed edges (which represent transmission lines), with topology described by the node-edge
incidence matrix a     rn  m, de   ned by

          +1 edge j enters node i,

   1 edge j leaves node i,
0 otherwise.

aij =

j     0 denote the power that    ows into the tail of edge j, and pout

j     0 the power that
we let pin
emerges from the head of edge j, for j = 1, . . . , m. due to transmission losses, the power that    ows
into each edge is more than the power that emerges:

pin
j = pout

j +   (lj/r2

j )(pout

j

)2,

j = 1, . . . , m,

where lj > 0 is the length of transmission line j, rj > 0 is the radius of the conductors on line
j, and    > 0 is a constant. (the second term on the righthand side above is the transmission line
power loss.) in addition, each edge has a maximum allowed input power, that also depends on the
conductor radius: pin

j , j = 1, . . . , m, where    > 0 is a constant.

j       r2

generators are attached to nodes i = 1, . . . , k, and loads are attached to nodes i = k + 1, . . . , n.
we let gi denote the (nonnegative) power injected into node i by its generator, for i = 1, . . . , k. we
let li denote the (nonnegative) power pulled from node i by the load, for i = k + 1, . . . , n. these
load powers are known and    xed.

we must have power balance at each node. for i = 1, . . . , k, the sum of all power entering the node
from incoming transmission lines, plus the power supplied by the generator, must equal the sum of
all power leaving the node on outgoing transmission lines:

(cid:88)

j   e(i)

pout
j + gi =

pin
j ,

i = 1, . . . , k,

(cid:88)

j   l(i)

193

where e(i) (l(i)) is the set of edge indices for edges entering (leaving) node i. for the load nodes
i = k + 1, . . . , n we have a similar power balance condition:

(cid:88)

j   e(i)

(cid:88)

j   l(i)

pout
j =

pin
j + li,

i = k + 1, . . . , n.

each generator can vary its power gi over a given range [0, gmax
generation   i(gi), where   i is convex and strictly increasing, for i = 1, . . . , k.

i

], and has an associated cost of

(a) minimum total cost of generation. formulate the problem of choosing generator and edge input
and output powers, so as to minimize the total cost of generation, as a id76
problem. (all other quantities described above are known.) be sure to explain any additional
variables or terms you introduce, and to justify any transformations you make.
hint: you may    nd the matrices a+ = (a)+ and a    = (   a)+ helpful in expressing the power
balance constraints.

(b) marginal cost of power at load nodes. the (marginal) cost of power at node i, for i = k +
1, . . . , n, is the partial derivative of the minimum total power generation cost, with respect to
varying the load power li. (we will simply assume these partial derivatives exist.) explain
how to    nd the marginal cost of power at node i, from your formulation in part (a).

(c) optimal sizing of lines. now suppose that you can optimize over generator powers, edge input
and output powers (as above), and the power line radii rj, j = 1, . . . , m. these must lie
between given limits, rj     [rmin
j > 0), and we must respect a total volume
constraint on the lines,

] (rmin

, rmax

j

j

m(cid:88)

ljr2

j     v max.

j=1

formulate the problem of choosing generator and edge input and output powers, as well as
power line radii, so as to minimize the total cost of generation, as a id76
problem. (again, explain anything that is not obvious.)

(d) numerical example. using the data given in ptrans_loss_data.m,    nd the minimum total
generation cost and the marginal cost of power at nodes k + 1, . . . , n, for the case described
in parts (a) and (b) (i.e., using the    xed given radii rj), and also for the case described in
part (c), where you are allowed to change the transmission line radii, keeping the same total
volume as the original lines. for the generator costs, use the quadratic functions

  i(gi) = aigi + big2
i ,

i = 1, . . . , k,

where a, b     rk
remark : in the m-   le, we give you a load vector l     rn   k. for consistency, the ith entry of
this vector corresponds to the load at node k + i.

+. (these are given in the data    le.)

17.8 utility/power trade-o    in a wireless network.

in this problem we explore the trade-o    between
total utility and total power usage in a wireless network in which the link transmit powers can
be adjusted. the network consists of a set of nodes and a set of links over which data can be
transmitted. there are n routes, each corresponding to a sequence of links from a source to a

194

destination node. route j has a data    ow rate fj     r+ (in units of bits/sec, say). the total utility
(which we want to maximize) is

n(cid:88)

j=1

u (f ) =

uj(fj),

where uj : r     r are concave increasing functions.
the network topology is speci   ed by the routing matrix r     rm  n, de   ned as

(cid:26) 1 route j passes over link i

rij =

0 otherwise.

the total tra   c on a link is the sum of the    ows that pass over the link. the tra   c (vector) is thus
t = rf     rm. the tra   c on each link cannot exceed the capacity of the link, i.e., t (cid:22) c, where
c     rm
the link capacities, in turn, are functions of the link transmit powers, given by p     rm
cannot exceed given limits, i.e., p (cid:22) pmax. these are related by

+ is the vector of link capacities.

+ , which

where   i and   i are positive parameters that characterize link i. the second objective (which we
want to minimize) is p = 1t p, the total (transmit) power.

ci =   i log(1 +   ipi),

(a) explain how to    nd the optimal trade-o    curve of total utility and total power, using convex
   

or quasiid76.

(b) plot the optimal trade-o    curve for the problem instance with m = 20, n = 10, uj(x) =

x
= 10,   i =   i = 1 for i = 1, . . . , m, and network topology generated

for j = 1, . . . , n, pmax
using

i

rand(   seed   ,3);
r = round(rand(m,n));

your plot should have the total power on the horizontal axis.

17.9 energy storage trade-o   s. we consider the use of a storage device (say, a battery) to reduce the
total cost of electricity consumed over one day. we divide the day into t time periods, and let
pt denote the (positive, time-varying) electricity price, and ut denote the (nonnegative) usage or
consumption, in period t, for t = 1, . . . , t . without the use of a battery, the total cost is pt u.

let qt denote the (nonnegative) energy stored in the battery in period t. for simplicity, we neglect
energy loss (although this is easily handled as well), so we have qt+1 = qt + ct, t = 1, . . . , t     1,
where ct is the charging of the battery in period t; ct < 0 means the battery is discharged. we will
require that q1 = qt + ct , i.e., we    nish with the same battery charge that we start with. with
the battery operating, the net consumption in period t is ut + ct; we require this to be nonnegative
(i.e., we do not pump power back into the grid). the total cost is then pt (u + c).
the battery is characterized by three parameters: the capacity q, where qt     q; the maximum
charge rate c, where ct     c; and the maximum discharge rate d, where ct        d. (the parameters
q, c, and d are nonnegative.)

195

(a) explain how to    nd the charging pro   le c     rt (and associated stored energy pro   le q     rt )

that minimizes the total cost, subject to the constraints.

(b) solve the problem instance with data p and u given in storage_tradeoff_data.*, q = 35,

and c = d = 3. plot ut, pt, ct, and qt versus t.

(c) storage trade-o   s. plot the minimum total cost versus the storage capacity q, using p and
u from storage_tradeoff_data.*, and charge/discharge limits c = d = 3. repeat for
charge/discharge limits c = d = 1. (put these two trade-o    curves on the same plot.) give
an interpretation of the endpoints of the trade-o    curves.

17.10 cost-comfort trade-o    in air conditioning. a heat pump (air conditioner) is used to cool a residence
, for t = 1, . . . , 24. these

to temperature tt in hour t, on a day with outside temperature t out
t     tt.
temperatures are given in kelvin, and we will assume that t out
a total amount of heat qt =   (t out
is a positive constant (related to the quality of thermal insulation).

t

t     tt) must be removed from the residence in hour t, where   

the electrical energy required to pump out this heat is given by et = qt/  t, where

  t =   

tt
t     tt
t out

is the coe   cient of performance of the heat pump and        (0, 1] is the e   ciency constant. the
e   ciency is typically around 0.6 for a modern unit; the theoretical limit is    = 1. (when tt = t out
,
we take   t =     and et = 0.)
electrical energy prices vary with the hour, and are given by pt > 0 for t = 1, . . . , 24. the total

t

energy cost is c =(cid:80)

t ptet. we will assume that the prices are known.
discomfort is measured using a piecewise-linear function of temperature,

dt = (tt     t ideal)+,

is d =(cid:80)24

where t ideal is an ideal temperature, below which there is no discomfort. the total daily discomfort

t=1 dt. you can assume that t ideal < t out

t

.

to get a point on the optimal cost-comfort trade-o    curve, we will minimize c +   d, where    > 0.
the variables to be chosen are t1, . . . , t24; all other quantities described above are given.
), where    : r2     r.
show that this problem has an analytical solution of the form tt =   (pt, t out
the function    can depend on the constants   ,   , t ideal,   . give    explicitly. you are free (indeed,
encouraged) to check your formula using cvx, with made up values for the constants.

t

disclaimer. the focus of this course is not on deriving 19th century pencil and paper solutions to
problems. but every now and then, a practical problem will actually have an analytical solution.
this is one of them.

17.11 optimal electric motor drive currents. in this problem you will design the drive current waveforms
for an ac (alternating current) electric motor. the motor has a magnetic rotor which spins with
constant angular velocity        0 inside the stationary stator. the stator contains three circuits
(called phase windings) with (vector) current waveform i : r     r3 and (vector) voltage waveform

196

v : r     r3, which are 2  -periodic functions of the angular position    of the rotor. the circuit
dynamics are

d
d  

i(  ) +   k(  ),

v(  ) = ri(  ) +   l
++ is the resistance matrix, l     s3

++ is the inductance matrix, and k : r     r3, a
where r     s3
2  -periodic function of   , is the back-emf waveform (which encodes the electromagnetic coupling
between the rotor permanent magnets and the phase windings). the angular velocity   , the
matrices r and l, and the back-emf waveform k, are known.
we must have |vi(  )|     vsupply, i = 1, 2, 3, where vsupply is the (given) supply voltage. the output
torque of the motor at rotor position    is    (  ) = k(  )t i(  ). we will require the torque to have a
given constant nonnegative value:    (  ) =    des for all   .

the average power loss in the motor is

p loss =

1
2  

(cid:90) 2  

0

i(  )t ri(  ) d  .

the mechanical output power is p out =      des, and the motor e   ciency is

   = p out/(p out + p loss).

the objective is to choose the current and voltage waveforms to maximize   .

discretization. to solve this problem we consider a discretized version in which    takes on the n
values    = h, 2h, . . . , n h, where h = 2  /n . we impose the voltage and torque constraints for these
values of   . we approximate the power loss as

p loss = (1/n )(cid:80)n

j=1i(jh)t ri(jh).

the circuit dynamics are approximated as

v(jh) = ri(jh) +   l

i((j + 1)h)     i(jh)

h

+   k(jh),

j = 1, . . . , n,

where here we take i((n + 1)h) = i(h) (by periodicity).

find optimal (discretized) current and voltage waveforms for the problem instance with data given
in ac_motor_data.m. the back-emf waveform is given as a 3   n matrix k. plot the three current
waveform components on one plot, and the three voltage waveforms on another. give the e   ciency
obtained.

17.12 decomposing a pv array output time series. we are given a time series p     rt

+ that gives the
output power of a photo-voltaic (pv) array in 5-minute intervals, over t = 2016 periods (one week),
given in pv_output_data.*. in this problem you will use id76 to decompose the
time series into three components:
    the clear sky output c     rt

+, a smooth daily-periodic component, which gives what the pv
output would have been without clouds. this signal is 24-hour-periodic, i.e., ct+288 = ct for
t = 1, . . . , t     288. (the clear sky output is zero at night, but we will not use this prior
information in our decomposition method.)

197

    a weather shading loss component s     rt

component satis   es 0 (cid:22) s (cid:22) c, can change rapidly, and is not periodic.

+, which gives the loss of power due to clouds. this

    a residual r     rt , which accounts for measurement error, anomalies, and other errors.

these components satisfy p = c     s + r.
we will assume that the average absolute value of the residual is no more than 4 (which is less than
1% of the average of p).

smoothness of c is measured by its laplacian,

l(c) = (c1     c2)2 +        + (c287     c288)2 + (c288     c1)2.

(note that the term involves c1 and c288.)
we will choose c, s, and r by minimizing l(c) +   1t s subject to the constraints described above,
where    is a positive parameter, that we take to be one.

solve this problem, and plot the resulting c, s, r, and p (which is given), on separate plots. give
the average values of c, s, and p, and the average absolute value of r (which should be 4).

198

18 miscellaneous applications

18.1 earth mover   s distance. in this exercise we explore a general method for constructing a distance
between two id203 distributions on a    nite set, called the earth mover   s distance, wasserstein
metric, dubroshkin metric, or optimal transport metric. let x and y be two id203 distributions
on {1, . . . , n}, i.e., 1t x = 1t y = 1, x (cid:23) 0, y (cid:23) 0. we imagine that xi is the amount of earth stored
at location i; our goal is to move the earth between locations to obtain the distribution given by
y. let cij be the cost of moving one unit of earth from location j to location i. we assume that
cii = 0, and cij = cji > 0 for i (cid:54)= j. (we allow cij =    , which means that earth cannot be moved
directly from node j to node i.) let sij     0 denote the amount of earth moved from location j
i,j=1 sijcij = tr ct s. the shipment matrix s must satisfy the

to location i. the total cost is(cid:80)n

balance equations,

n(cid:88)

n(cid:88)

sij = yi,

i = 1, . . . , n,

sij = xj,

j = 1, . . . , n,

j=1

i=1

which we can write compactly as s1 = y, st 1 = x.
(the    rst equation states that the total
amount shipped into location i equals yi; the second equation states that the total shipped out
from location j is xj.) the earth mover   s distance between x and y, denoted d(x, y), is given by the
minimal cost of earth moving required to transform x to y, i.e., the optimal value of the problem

tr ct s
minimize
subject to sij     0,

i, j = 1, . . . , n

s1 = y, st 1 = x,

with variables s     rn  n.
we can also give a id203 interpretation of d(x, y). consider a random variable z on {1, . . . , n}2
with values cij. we seek the joint distribution s that minimizes the expected value of the random
variable z, with given marginals x and y.

the earth mover   s distance is used to compare, for example, 2d images, with cij equal to the
distance between pixels i and j. if x and y represent two photographs of the same scene, from
slightly di   erent viewpoints and with an o   set in camera position (say), d(x, y) will be small, but
the distance between x and y measured by most common norms (e.g., (cid:107)x     y(cid:107)1) will be large.

(a) show that d satis   es the following.

    symmetry: d(x, y) = d(y, x).
    nonnegativity: d(x, y)     0.
    de   niteness: d(x, x) = 0, and d(x, y) > 0 for x (cid:54)= y.

(without further assumptions on c, the triangle inequality need not hold.)

(b) show that d(x, y) is the optimal value of the problem

maximize
subject to   i +   j     cij,

  t x +   t y

i, j = 1, . . . , n,

with variables   ,        rn.

199

18.2 radiation treatment planning. in radiation treatment, radiation is delivered to a patient, with the
goal of killing or damaging the cells in a tumor, while carrying out minimal damage to other tissue.
the radiation is delivered in beams, each of which has a known pattern; the level of each beam can
be adjusted. (in most cases multiple beams are delivered at the same time, in one    shot   , with the
treatment organized as a sequence of    shots   .) we let bj denote the level of beam j, for j = 1, . . . , n.
these must satisfy 0     bj     bmax, where bmax is the maximum possible beam level. the exposure
area is divided into m voxels, labeled i = 1, . . . , m. the dose di delivered to voxel i is linear in
is a (known) matrix that characterizes the

the beam levels, i.e., di =(cid:80)n

j=1 aijbj. here a     rm  n

+

beam patterns. we now describe a simple radiation treatment planning problem.
a (known) subset of the voxels, t     {1, . . . , m}, corresponds to the tumor or target region. we
require that a minimum radiation dose dtarget be administered to each tumor voxel, i.e., di     dtarget
for i     t . for all other voxels, we would like to have di     dother, where dother is a desired maximum
dose for non-target voxels. this is generally not feasible, so instead we settle for minimizing the
penalty

(cid:88)

i(cid:54)   t

e =

((di     dother)+)2,

where (  )+ denotes the nonnegative part. we can interpret e as the sum of the squares of the
nontarget excess doses.
(a) show that the treatment planning problem is convex. the optimization variable is b     rn;

the problem data are bmax, a, t , dtarget, and dother.

(b) solve the problem instance with data given in the    le treatment_planning_data.m. here we
have split the matrix a into atarget, which contains the rows corresponding to the target
voxels, and aother, which contains the rows corresponding to other voxels. give the optimal
value. plot the dose histogram for the target voxels, and also for the other voxels. make a
brief comment on what you see. remark. the beam pattern matrix in this problem instance
is randomly generated, but similar results would be obtained with realistic data.

18.3 flux balance analysis in systems biology. flux balance analysis is based on a very simple model of
the reactions going on in a cell, keeping track only of the gross rate of consumption and production
of various chemical species within the cell. based on the known stoichiometry of the reactions, and
known upper bounds on some of the reaction rates, we can compute bounds on the other reaction
rates, or cell growth, for example.

we focus on m metabolites in a cell, labeled m1, . . . , mm. there are n reactions going on, labeled
r1, . . . , rn, with nonnegative reaction rates v1, . . . , vn. each reaction has a (known) stoichiometry,
which tells us the rate of consumption and production of the metabolites per unit of reaction rate.
the stoichiometry data is given by the stoichiometry matrix s     rm  n, de   ned as follows: sij
is the rate of production of mi due to unit reaction rate vj = 1. here we consider consumption
of a metabolite as negative production; so sij =    2, for example, means that reaction rj causes
metabolite mi to be consumed at a rate 2vj.
as an example, suppose reaction r1 has the form m1     m2 + 2m3. the consumption rate of m1,
due to this reaction, is v1; the production rate of m2 is v1; and the production rate of m3 is 2v1.
(the reaction r1 has no e   ect on metabolites m4, . . . , mm.) this corresponds to a    rst column of
s of the form (   1, 1, 2, 0, . . . , 0).

200

reactions are also used to model    ow of metabolites into and out of the cell. for example, suppose
that reaction r2 corresponds to the    ow of metabolite m1 into the cell, with v2 giving the    ow
rate. this corresponds to a second column of s of the form (1, 0, . . . , 0).

the last reaction, rn, corresponds to biomass creation, or cell growth, so the reaction rate vn is
the cell growth rate. the last column of s gives the amounts of metabolites used or created per
unit of cell growth rate.

since our reactions include metabolites entering or leaving the cell, as well as those converted
to biomass within the cell, we have conservation of the metabolites, which can be expressed as
sv = 0. in addition, we are given upper limits on some of the reaction rates, which we express as
v (cid:22) vmax, where we set vmax
=     if no upper limit on reaction rate j is known. the goal is to
   nd the maximum possible cell growth rate (i.e., largest possible value of vn) consistent with the
constraints

j

sv = 0,

v (cid:23) 0,

v (cid:22) vmax.

the questions below pertain to the data found in fba_data.m.

(a) find the maximum possible cell growth rate g(cid:63), as well as optimal lagrange multipliers for
the reaction rate limits. how sensitive is the maximum growth rate to the various reaction
rate limits?

(b) essential genes and synthetic lethals. for simplicity, we   ll assume that each reaction is con-
trolled by an associated gene, i.e., gene gi controls reaction ri. knocking out a set of genes
associated with some reactions has the e   ect of setting the reaction rates (or equivalently, the
associated vmax entries) to zero, which of course reduces the maximum possible growth rate.
if the maximum growth rate becomes small enough or zero, it is reasonable to guess that
knocking out the set of genes will kill the cell. an essential gene is one that when knocked
out reduces the maximum growth rate below a given threshold gmin. (note that gn is always
an essential gene.) a synthetic lethal is a pair of non-essential genes that when knocked out
reduces the maximum growth rate below the threshold. find all essential genes and synthetic
lethals for the given problem instance, using the threshold gmin = 0.2g(cid:63).

ad i. in period t there will be a total of it > 0 impressions, so we must have (cid:80)n
through payments, for example.) the total revenue is(cid:80)t

18.4 online advertising displays. when a user goes to a website, one of a set of n ads, labeled 1, . . . , n, is
displayed. this is called an impression. we divide some time interval (say, one day) into t periods,
labeled t = 1, . . . , t . let nit     0 denote the number of impressions in period t for which we display
i=1 nit = it, for
t = 1, . . . , t . (the numbers it might be known from past history.) you can treat all these numbers
as real. (this is justi   ed since they are typically very large.)
the revenue for displaying ad i in period t is rit     0 per impression. (this might come from click-
i=1 ritnit. to maximize revenue, we
would simply display the ad with the highest revenue per impression, and no other, in each display
period.

(cid:80)n

t=1

we also have in place a set of m contracts that require us to display certain numbers of ads, or mixes
of ads (say, associated with the products of one company), over certain periods, with a penalty for
any shortfalls. contract j is characterized by a set of ads aj     {1, . . . , n} (while it does not a   ect
the math, these are often disjoint), a set of periods tj     {1, . . . , t}, a target number of impressions

201

qj     0, and a shortfall penalty rate pj > 0. the shortfall sj for contract j is

      qj    (cid:88)

(cid:88)

t   tj

i   aj

      

sj =

nit

,

target value qj.) our contracts require a total penalty payment equal to(cid:80)m

where (u)+ means max{u, 0}. (this is the number of impressions by which we fall short of the
j=1 pjsj. our net pro   t

+

is the total revenue minus the total penalty payment.

(a) explain how to    nd the display numbers nit that maximize net pro   t. the data in this
problem are r     rn  t , i     rt (here i is the vector of impressions, not the identity matrix),
and the contract data aj, tj, qj, and pj, j = 1, . . . , m.

(b) carry out your method on the problem with data given in ad_disp_data.m.

the data aj and tj, for j = 1, . . . , m are given by matrices acontr     rn  m and t contr     rt  m,
with

ad_disp_data.py.

(cid:26) 1 i     aj

(cid:26) 1 t     tj

acontr

ij =

0 otherwise,

0 otherwise.

t contr
tj

=

report the optimal net pro   t, and the associated revenue and total penalty payment. give
the same three numbers for the strategy of simply displaying in each period only the ad with
the largest revenue per impression.

18.5 ranking by aggregating preferences. we have n objects, labeled 1, . . . , n. our goal is to assign a
real valued rank ri to the objects. a preference is an ordered pair (i, j), meaning that object i is
preferred over object j. the ranking r     rn and preference (i, j) are consistent if ri     rj + 1.
(this sets the scale of the ranking: a gap of one in ranking is the threshold for preferring one item
over another.) we de   ne the preference violation of preference (i, j) with ranking r     rn as

v = (rj + 1     ri)+ = max{rj + 1     ri, 0}.

we have a set of m preferences among the objects, (i(1), j(1)), . . . , (i(m), j(m)). (these may come
from several di   erent evaluators of the objects, but this won   t matter here.)

we will select our ranking r as a minimizer of the total preference violation penalty, de   ned as

m(cid:88)

j =

  (v(k)),

k=1

where v(k) is the preference violation of (i(k), j(k)) with r, and    is a nondecreasing convex penalty
function that satis   es   (u) = 0 for u     0.

(a) make a (simple, please) suggestion for    for each of the following two situations:

(i) we don   t mind some small violations, but we really want to avoid large violations.
(ii) we want as many preferences as possible to be consistent with the ranking, but will accept

some (hopefully, few) larger preference violations.

202

(b) find the rankings obtained using the penalty functions proposed in part (a), on the data
set found in rank_aggr_data.m. plot a histogram of preference violations for each case and
brie   y comment on the di   erences between them. give the number of positive preference
violations for each case. (use sum(v>0.001) to determine this number.)

remark. the objects could be candidates for a position, papers at a conference, movies, websites,
courses at a university, and so on. the preferences could arise in several ways. each of a set of
evaluators provides some preferences, for example by rank ordering a subset of the objects. the
problem can be thought of as aggregating the preferences given by the evaluators, to come up with
a composite ranking.

18.6 time release formulation. a patient is treated with a drug (say, in pill form) at di   erent times.
each treatment (or pill) contains (possibly) di   erent amounts of various formulations of the drug.
each of the formulations, in turn, has a characteristic pattern as to how quickly it releases the
drug into the bloodstream. the goal is to optimize the blend of formulations that go into each
treatment, in order to achieve a desired drug concentration in the bloodstream over time.

we will use discrete time, t = 1, 2, . . . , t , representing hours (say). there will be k treatments,
administered at known times 1 =   1 <   2 <        <   k < t . we have m drug formulations; each
treatment consists of a mixture of these m formulations. we let a(k)     rm
+ denote the amounts of
the m formulations in treatment k, for k = 1, . . . , k.
each formulation i has a time pro   le pi(t)     r+, for t = 1, 2, . . .. if an amount a(k)
of formulation
i from treatment k is administered at time t0, the drug concentration in the bloodstream (due to
i pi(t     t0) for t > t0, and 0 for t     t0. to simplify notation, we will
this formulation) is given by a(k)
de   ne pi(t) to be zero for t = 0,   1,   2, . . .. we assume the e   ects of the di   erent formulations and
di   erent treatments are additive, so the total bloodstream drug concentration is given by

i

k(cid:88)

m(cid:88)

c(t) =

pi(t       k)a(k)

i

,

t = 1, . . . , t.

k=1

i=1

(this is just a vector convolution.) recall that pi(t       k) = 0 for t       k, which means that the
e   ect of treatment k does not show up until time   k + 1.
we require that c(t)     cmax for t = 1, . . . , t , where cmax is a given maximum permissible concen-
tration. we de   ne the therapeutic time t ther as

t ther = min{t | c(   )     cmin for    = t, . . . , t},

with t ther =     if c(t) < cmin for t = 1, . . . , t . here, cmin is the minimum concentration for the drug
to have therapeutic value. thus, t ther is the    rst time at which the drug concentration reaches,
and stays above, the minimum therapeutic level.

finally, we get to the problem. the optimization variables are the treatment formulation vectors
a(1), . . . , a(k). there are two objectives: t ther (which we want to be small), and

j ch =

(cid:107)a(k+1)     a(k)(cid:107)   

k   1(cid:88)

k=1

203

(which we also want to be small). this second objective is a penalty for changing the formulation
amounts in the treatments.

the rest of the problem concerns the speci   c instance with data given in the    le time_release_form_data.m.
this gives data for t = 168 (one week, starting from 8am monday morning), with treatments oc-
curing 3 times each day, at 8am, 2pm, and 11pm, so we have a total of k = 21 treatments. we
have m = 6 formulations, with pro   les with length 96 (i.e., pi(t) = 0 for t > 96).

    explain how to    nd the optimal trade-o    curve of t ther versus j ch. your method may involve

solving several id76 problems.

    plot the trade-o    curve over a reasonable range, and be sure to explain or at least comment

on the endpoints of the trade-o    curve.

    plot the treatment formulation amounts versus k, and the bloodstream concentration versus

t, for the two trade-o    curve endpoints, and one corresponding to t ther = 8.

warning. we   ve found that cvx can experience numerical problems when solving this problem
(depending on how it is formulated). in one case, cvx_status is    solved/inaccurate    when in fact
the problem has been solved (just not to the tolerances sedumi likes to see). you can ignore this
status, taking it to mean optimal. you can also try switching to the sdpt3 solver. in any case,
please do not spend much time worrying about, or dealing with, these numerical problems.

18.7 sizing a gravity feed water supply network. a water supply network connects water supplies (such
as reservoirs) to consumers via a network of pipes. water    ow in the network is due to gravity
(as opposed to pumps, which could also be added to the formulation). the network is composed
of a set of n nodes and m directed edges between pairs of nodes. the    rst k nodes are supply or
reservoir nodes, and the remaining n     k are consumer nodes. the edges correspond to the pipes
in the water supply network.
we let fj     0 denote the water    ow in pipe (edge) j, and hi denote the (known) altitude or height
of node i (say, above sea level). at nodes i = 1, . . . , k, we let si     0 denote the    ow into the network
from the supply. for i = 1, . . . , n     k, we let ci     0 denote the water    ow taken out of the network
(by consumers) at node k + i. conservation of    ow can be expressed as

where a     rn  m is the incidence matrix for the supply network, given by

(cid:20)    s

(cid:21)

,

c

af =

             1 if edge j leaves node i

+1 if edge j enters node i
0

otherwise.

aij =

we assume that each edge is oriented from a node of higher altitude to a node of lower altitude; if
edge j goes from node i to node l, we have hi > hl. the pipe    ows are determined by

    jr2

j (hi     hl)
lj

,

fj =

where edge j goes from node i to node l,    > 0 is a known constant, lj > 0 is the (known) length
of pipe j, rj > 0 is the radius of pipe j, and   j     [0, 1] corresponds to the valve opening in pipe j.

204

finally, we have a few more constraints. the supply feed rates are limited: we have si     smax
the pipe radii are limited: we have rmin

. (these limits are all known.)

j     rj     rmax

j

i

.

(a) supportable consumption vectors. suppose that the pipe radii are    xed and known. we say
that c     rn   k
is supportable if there is a choice of f , s, and    for which all constraints
and conditions above are satis   ed. show that the set of supportable consumption vectors is
a polyhedron, and explain how to determine whether or not a given consumption vector is
supportable.

+

(b) optimal pipe sizing. you must select the pipe radii rj to minimize the cost, which we take to
be (proportional to) the total volume of the pipes, l1r2
m, subject to being able to
support a set of consumption vectors, denoted c(1), . . . , c(n ), which we refer to as consumption
scenarios. (this means that any consumption vector in the convex hull of {c(1), . . . , c(n )} will
be supportable.) show how to formulate this as a id76 problem. note. you
are asked to choose one set of pipe radii, and n sets of valve parameters,    ow vectors, and
source vectors; one for each consumption scenario.

1 +      +lmr2

(c) solve the instance of the optimal pipe sizing problem with data de   ned in the    le grav_feed_network_data.m,

and report the optimal value and the optimal pipe radii. the columns of the matrix c in the
data    le are the consumption vectors c(1), . . . , c(n ).

hint.    at h gives a vector containing the height di   erences across the edges.

18.8 optimal political positioning. a political constituency is a group of voters with similar views on a
set of political issues. the electorate (i.e., the set of voters in some election) is partitioned (by a
political analyst) into k constituencies, with (nonnegative) populations p1, . . . , pk. a candidate in
the election has an initial or prior position on each of n issues, but is willing to consider (presumably
small) deviations from her prior positions in order to maximize the total number of votes she will
receive. we let xi     r denote the change in her position on issue i, measured on some appropriate
scale. (you can think of xi < 0 as a move to the    left    and xi > 0 as a move to the    right    on the
issue, if you like.) the vector x     rn characterizes the changes in her position on all issues; x = 0
represents the prior positions. on each issue she has a limit on how far in each direction she is
willing to move, which we express as l (cid:22) x (cid:22) u, where l     0 and u (cid:31) 0 are given.
the candidate   s position change x a   ects the fraction of voters in each constituency that will vote
for her. this fraction is modeled as a logistic function,

fk = g(wt

k x + vk),

k = 1, . . . , k.

here g(z) = 1/(1 + exp(   z)) is the standard logistic function, and wk     rn and vk     r are given
data that characterize the views of constituency k on the issues. thus the total number of votes
the candidate will receive is

v = p1f1 +        + pkfk.

the problem is to choose x (subject to the given limits) so as to maximize v . the problem data
are l, u, and pk, wk, and vk for k = 1, . . . , k.

(a) the general political positioning problem. show that the objective function v need not be
quasiconcave. (this means that the general optimal political positioning problem is not a
quasiconvex problem, and therefore also not a convex problem.) in other words, choose prob-
lem data for which v is not a quasiconcave function of x.

205

(b) the partisan political positioning problem. now suppose the candidate focuses only on her
core constituencies, i.e., those for which a signi   cant fraction will vote for her. in this case
we interpret the k constituencies as her core constituencies; we assume that vk     0, which
means that with her prior position x = 0, at least half of each of her core constituencies will
k x + vk     0 for each k, which means that she will
vote for her. we add the constraint that wt
not take positions that alienate a majority of voters from any of her core constituencies.
show that the partisan political positioning problem (i.e., maximizing v with the additional
assumptions and constraints) is convex.

(c) numerical example. find the optimal positions for the partisan political positioning problem
with data given in opt_pol_pos_data.m. report the number of votes from each constituency
under the politician   s prior positions (x = 0) and optimal positions, as well as the total number
of votes v in each case.
you may use the function

gapprox(z) = min{1, g(i) + g(cid:48)(i)(z     i) for i = 0, 1, 2, 3, 4}

as an approximation of g for z     0. (the function gapprox is also an upper bound on g for
z     0.) for your convenience, we have included function de   nitions for g and gapprox (g and
gapx, respectively) in the data    le. you should report the results (votes from each constituency
and total) using g, but be sure to check that these numbers are close to the results using gapprox
(say, within one percent or so).

18.9 resource allocation in stream processing. a large data center is used to handle a stream of j types
of jobs. the tra   c (number of instances per second) of each job type is denoted t     rj
+. each
instance of each job type (serially) invokes or calls a set of processes. there are p types of processes,
and we describe the job-process relation by the p    j matrix

(cid:26) 1 job j invokes process p

rpj =

0 otherwise.

the process loads (number of instances per second) are given by    = rt     rp , i.e.,   p is the sum
of the tra   c from the jobs that invoke process p.

is the average time the data center takes to handle an instance of job type j. we are given a

the latency of a process or job type is the average time that it takes one instance to complete.
these are denoted lproc     rp and ljob     rj , respectively, and are related by ljob = rt lproc, i.e.,
ljob
is the sum of the latencies of the processes called by j. job latency is important to users, since
j
ljob
j
maximum allowed job latency: ljob (cid:22) lmax.
the process latencies depend on the process load and also how much of n di   erent resources are
made available to them. these resources might include, for example, number of cores, disk storage,
and network bandwidth. here, we represent amounts of these resources as (nonnegative) real
numbers, so xp     rn
+ represents the resources allocated to process p. the process latencies are
given by

where   p : rn    r     r   {   } is a known (extended-valued) convex function. these functions are
nonincreasing in their    rst (vector) arguments, and nondecreasing in their second arguments (i.e.,

lproc
p =   p(xp,   p),

p = 1, . . . , p,

206

more resources or less load cannot increase latency). we interpret   p(xp,   p) =     to mean that
the resources given by xp are not su   cient to handle the load   p.
we wish to allocate a total resource amount xtot     rn

(cid:80)p
p=1 xp (cid:22) xtot. the goal is to minimize the objective function

++ among the p processes, so we have

j(cid:88)

wj(ttar

j     tj)+,

j=1

j

where ttar
is the target tra   c level for job type j, wj > 0 give the priorities, and (u)+ is the
nonnegative part of a vector, i.e., ui = max{ui, 0}. (thus the objective is a weighted penalty for
missing the target job tra   c.) the variables are t     rj
+, p = 1, . . . , p . the problem
data are the matrix r, the vectors lmax, xtot, ttar, and w, and the functions   p, p = 1, . . . , p .

+ and xp     rn

(a) explain why this is a id76 problem.

(b) solve the problem instance with data given in res_alloc_stream_data.m, with latency func-

tions

p xp       p) at

p xp >   p,
otherwise

xp (cid:23) xmin

p

++ and xmin

where ap     rn
columns of the matrices a and x_min, respectively.
give the optimal objective value and job tra   c. compare the optimal job tra   c with the
target job tra   c.

++ are given data. the vectors ap and xmin

are stored as the

p

(cid:26) 1/(at

   

  p(xp,   p) =
p     rn

18.10 optimal parimutuel betting. in parimutuel betting, participants bet nonnegative amounts on each
of n outcomes, exactly one of which will actually occur. (for example, the outcome can be which
of n horses wins a race.) the total amount bet by all participants on all outcomes is called the pool
or tote. the house takes a commission from the pool (typically around 20%), and the remaining
pool is divided among those who bet on the outcome that occurs, in proportion to their bets on
the outcome. this problem concerns the choice of the amount to bet on each outcome.
let xi     0 denote the amount we bet on outcome i, so the total amount we bet on all outcomes is
1t x. let ai > 0 denote the amount bet by all other participants on outcome i, so after the house
commission, the remaining pool is p = (1    c)(1t a + 1t x), where c     (0, 1) is the house commission
rate. our payo    if outcome i occurs is then

(cid:18) xi

(cid:19)

pi =

p.

xi + ai

the goal is to choose x, subject to 1t x = b (where b is the total amount to be bet, which is
given), so as to maximize the expected utility

n(cid:88)

  iu (pi),

where   i is the id203 that outcome i occurs, and u is a concave increasing utility function,
with u (0) = 0. you can assume that ai,   i, c, b, and the function u are known.

i=1

207

(a) explain how to    nd an optimal x using convex or quasiid76.

if you use a

change of variables, be sure to explain how your variables are related to x.

(b) suggest a fast method for computing an optimal x. you can assume that u is strictly concave,
and that scalar optimization problems involving u (such as evaluating the conjugate of    u )
are easily and quickly solved.

remarks.

    to carry out this betting strategy, you   d need to know ai, and then be the last participant
to place your bets (so that ai don   t subsequently change). you   d also need to know the
probabilities   i. these could be estimated using sophisticated machine learning techniques or
insider information.

    the formulation above assumes that the total amount to bet (i.e., b) is known. if it is not
known, you could solve the problem above for a range of values of b and use the value of b
that yields the largest optimal expected utility.

18.11 perturbing a hamiltonian to maximize an energy gap. a    nite dimensional approximation of
a quantum mechanical system is described by its hamiltonian matrix h     sn. we label the
eigenvalues of h as   1                  n, with corresponding orthonormal eigenvectors v1, . . . , vn. in this
context the eigenvalues are called the energy levels of the system, and the eigenvectors are called
the eigenstates. the eigenstate v1 is called the ground state, and   1 is the ground energy. the
energy gap (between the ground and next state) is    =   2       1.
by changing the environment (say, applying external    elds), we can perturb a nominal hamiltonian
matrix to obtain the perturbed hamiltonian, which has the form

k(cid:88)

h = h nom +

xihi.

i=1

here h nom     sn is the nominal (unperturbed) hamiltonian, x     rk gives the strength or value of
the perturbations, and h1, . . . , hk     sn characterize the perturbations. we have limits for each
perturbation, which we express as |xi|     1, i = 1, . . . , k. the problem is to choose x to maximize
the gap    of the perturbed hamiltonian, subject to the constraint that the perturbed hamiltonian
h has the same ground state (up to scaling, of course) as the unperturbed hamiltonian h nom. the
problem data are the nominal hamiltonian matrix h nom and the perturbation matrices h1, . . . , hk.

(a) explain how to formulate this as a convex or quasiid76 problem. if you change

variables, explain the change of variables clearly.

(b) carry out the method of part (a) for the problem instance with data given in hamiltonian_gap_data.*.

give the optimal perturbations, and the energy gap for the nominal and perturbed systems.
the data hi are given as a cell array; h{i} gives hi.

18.12 theory-applications split in a course. a professor teaches an advanced course with 20 lectures,
labeled i = 1, . . . , 20. the course involves some interesting theoretical topics, and many practical
applications of the theory. the professor must decide how to split each lecture between theory and
applications. let ti and ai denote the fraction of the ith lecture devoted to theory and applications,
for i = 1, . . . , 20. (we have ti     0, ai     0, and ti + ai = 1.)

208

a certain amount of theory has to be covered before the applications can be taught. we model
this in a crude way as

a1 +        + ai       (t1 +        + ti),

i = 1, . . . , 20,

where    : r     r is a given nondecreasing function. we interpret   (u) as the cumulative amount
of applications that can be covered, when the cumulative amount of theory covered is u. we will
use the simple form   (u) = a(u     b)+, with a, b > 0, which means that no applications can be
covered until b lectures of the theory is covered; after that, each lecture of theory covered opens
the possibility of covering a lectures on applications.

the theory-applications split a   ects the emotional state of students di   erently. we let si denote
the emotional state of a student after lecture i, with si = 0 meaning neutral, si > 0 meaning happy,
and si < 0 meaning unhappy. careful studies have shown that si evolves via a linear recursion
(dynamics)

si = (1       )si   1 +   (  ti +   ai),

i = 1, . . . , 20,

with s0 = 0. here    and    are parameters (naturally interpreted as how much the student likes or
dislikes theory and applications, respectively), and        [0, 1] gives the emotional volatility of the
student (i.e., how quickly he or she reacts to the content of recent lectures). the student   s terminal
emotional state is s20.
now consider a speci   c instance of the problem, with course material parameters a = 2, b = 3, and
three groups of students, with emotional dynamics parameters given as follows.

group 1 group 2 group 3
0.3
-0.3
0.7

0.05
-0.1
1.4

0.1
0.8
-0.3

  
  
  

find (four di   erent) theory-applications splits that maximize the terminal emotional state of the
   rst group, the terminal emotional state of the second group, the terminal emotional state of the
third group, and,    nally, the minimum of the terminal emotional states of all three groups.

for each case, plot ti and the emotional state si for the three groups, versus i. report the numerical
values of the terminal emotional states for each group, for each of the four theory-applications splits.

18.13 lyapunov analysis of a dynamical system. we consider a discrete-time time-varying linear dynami-
cal system with state xt     rn. the state propagates according to the linear recursion xt+1 = atxt,
for t = 0, 1, . . ., where the matrices at are unknown but satisfy at     a = {a(1), . . . , a(k)}, where
a(1), . . . , a(k) are known. (in computer science, this would be called a non-deterministic linear
automaton.) we call the sequence x0, x1, . . . a trajectory of the system. there are in   nitely many
trajectories, one for each sequence a0, a1, . . ..
the lyapunov exponent    of the system is de   ned as

   = sup

a0,a1,...

lim sup
t      

(cid:107)xt(cid:107)1/t
2 .

(if you don   t know what sup and lim sup mean, you can replace them with max and lim, respec-
tively.) roughly speaking, this means that all trajectories grow no faster than   t. when    < 1,
the system is called exponentially stable.

209

it is a hard problem to determine the lyapunov exponent of the system, or whether the system is
exponentially stable, given the data a(1), . . . , a(k). in this problem we explore a powerful method
for computing an upper bound on the lyapunov exponent.
(a) let p     sn

++ and de   ne v (x) = xt p x. suppose v satis   es

v (a(i)x)       2v (x) for all x     rn, i = 1, . . . , k.

show that          . thus    is an upper bound on the lyapunov exponent   . (the function v
is called a quadratic lyapunov function for the system.)

(b) explain how to use convex or quasiid76 to    nd a matrix p     sn

++ with the
smallest value of   , i.e., with the best upper bound on   . you must justify your formulation.

(c) carry out the method of part (b) for the speci   c problem with data given in lyap_exp_bound_data.m.

report the best upper bound on   , to a tolerance of 0.01. the data a(i) are given as a cell
array; a{i} gives a(i).

(d) approximate worst-case trajectory simulation. the quadratic lyapunov function found in
part (c) can be used to generate sequences of at that tend to result in large values of (cid:107)xt(cid:107)1/t
2 .
start from a random vector x0. at each t, generate xt+1 by choosing at = a(i) that maximizes
v (a(i)xt), where p is computed from part (c). do this for 50 time steps, and generate 5 such
trajectories. plot (cid:107)xt(cid:107)1/t
2 and    against t to verify that the bound you obtained in the previous
part is valid. report the lower bound on the lyapunov exponent that the trajectories suggest.

18.14 optimal material blending. a standard industrial operation is to blend or mix raw materials
(typically    uids such as di   erent grades of crude oil) to create blended materials or products.
this problem addresses optimizing the blending operation. we produce n blended materials from
m raw materials. each raw and blended material is characterized by a vector that gives the
concentration of each of q constituents (such as di   erent octane hydrocarbons). let c1, . . . , cm     rq
+
and   c1, . . . ,   cn     rq
+ be the concentration vectors of the raw materials and the blended materials,
respectively. we have 1t cj = 1t   ci = 1 for i = 1, . . . , n and j = 1, . . . , m. the raw material
concentrations are given; the blended product concentrations must lie between some given bounds,
i (cid:22)   ci (cid:22)   cmax
  cmin
each blended material is created by pumping raw materials (continuously) into a vat or container
where they are mixed to produce the blended material (which continuously    ows out of the mixing
vat). let fij     0 denote the    ow of raw material j (say, in kg/s) into the vat for product i, for
(cid:80)n
i = 1, . . . , n, j = 1, . . . , m. these    ows are limited by the total availability of each raw material:
i=1 fij     fj, j = 1, . . . , m, where fj > 0 is the maximum total    ow of raw material j available.
let   fi     0 denote the    ow rates of the blended materials. these also have limits:   fi       fi,
i = 1, . . . , n.

.

i

the raw and blended material    ows are related by the (mass conservation) equations

m(cid:88)

fijcj =   fi  ci,

i = 1, . . . , n.

j=1

(the lefthand side is the vector of incoming constituent mass    ows and the righthand side is the
vector of outgoing constituent mass    ows.)

210

each raw and blended material has a (positive) price, pj, j = 1, . . . , m (for the raw materials), and
  pi, i = 1, . . . , n (for the blended materials). we pay for the raw materials, and get paid for the
blended materials. the total pro   t for the blending process is

    n(cid:88)

m(cid:88)

n(cid:88)

fijpj +

  fi   pi.

i=1

j=1

i=1

the goal is to choose the variables fij,   fi, and   ci so as to maximize the pro   t, subject to the
constraints. the problem data are cj,   cmin

, fj,   fi, pj, and   pj.

,   cmax

i

i

(a) explain how to solve this problem using convex or quasi-id76. you must justify
any change of variables or problem transformation, and explain how you recover the solution
of the blending problem from the solution of your proposed problem.

(b) carry out the method of part (a) on the problem instance given in

material_blending_data.*. report the optimal pro   t, and the associated values of fij,   fi,
and   ci.

18.15 optimal evacuation planning. we consider the problem of evacuating people from a dangerous area
in a way that minimizes risk exposure. we model the area as a connected graph with n nodes and
m edges; people can assemble or collect at the nodes, and travel between nodes (in either direction)
over the edges. we let qt     rn
+ denote the vector of the numbers of people at the nodes, in time
period t, for t = 1, . . . , t , where t is the number of periods we consider. (we will consider the
entries of qt as real numbers, not integers.) the initial population distribution q1 is given. the
nodes have capacity constraints, given by qt (cid:22) q, where q     rn
+ is the vector of node capacities.
we use the incidence matrix a     rn  m to describe the graph. we assign an arbitrary reference
direction to each edge, and take

          +1 if edge j enters node i

   1 if edge j exits node i
0

otherwise.

aij =

the population dynamics are given by qt+1 = aft + qt, t = 1, . . . , t     1 where ft     rm is the
vector of population movement (   ow) across the edges, for t = 1, . . . , t     1. a positive    ow
denotes movement in the direction of the edge; negative    ow denotes population    ow in the reverse
direction. each edge has a capacity, i.e., |ft| (cid:22) f , where f     rm
+ is the vector of edge capacities,
and |ft| denotes the elementwise absolute value of ft.
an evacuation plan is a sequence q1, q2, . . . , qt and f1, f2, . . . , ft   1 obeying the constraints above.
the goal is to    nd an evacuation plan that minimizes the total risk exposure, de   ned as

t(cid:88)

(cid:0)rt qt + st q2

t

(cid:1) +

t   1(cid:88)

(cid:0)  rt|ft| +   st f 2

(cid:1) ,

t

rtot =

t=1

t=1

where r, s     rn
  r,   s     rm
t and f 2
q2

+ are given vectors of risk exposure coe   cients associated with the nodes, and
+ are given vectors of risk exposure coe   cients associated with the edges. the notation
t refers to elementwise squares of the vectors. roughly speaking, the risk exposure is a

211

quadratic function of the occupancy of a node, or the (absolute value of the)    ow of people along
an edge. the linear terms can be interpreted as the risk exposure per person; the quadratic terms
can be interpreted as the additional risk associated with crowding.

a subset of nodes have zero risk (ri = si = 0), and are designated as safe nodes. the population is
considered evacuated at time t if rt qt + st q2
t = 0. the evacuation time tevac of an evacuation plan
is the smallest such t. we will assume that t is su   ciently large and that the total capacity of the
safe nodes exceeds the total initial population, so evacuation is possible.

use cvx* to    nd an optimal evacuation plan for the problem instance with data given in opt_evac_data.*.
(we display the graph below, with safe nodes denoted as squares.)

1

3

1

2

3

2

4

5

7

4

5

6

6

7

8

9

8

report the associated optimal risk exposure r(cid:63)

rt = rt qt + st q2

tot. plot the time period risk
t +   rt|ft| +   st f 2

t

versus time. (for t = t , you can take the edge risk to be zero.) plot the node occupancies qt, and
edge    ows ft versus time. brie   y comment on the results you see. give the evacuation time tevac
(considering any rt qt + st q2
hint. with cvxpy, use the ecos solver with p.solve(solver=cvxpy.ecos).

t     10   4 to be zero).

18.16 ideal preference point. a set of k choices for a decision maker is parametrized by a set of vectors
c(1), . . . , c(k)     rn. we will assume that the entries ci of each choice are normalized to lie in the
range [0, 1]. the ideal preference point model posits that there is an ideal choice vector cideal with
entries in the range [0, 1]; when the decision maker is asked to choose between two candidate choices
c and   c, she will choose the one that is closest (in euclidean norm) to her ideal point. now suppose
that the decision maker has chosen between all k(k     1)/2 pairs of given choices c(1), . . . , c(k).
the decisions are represented by a list of pairs of integers, where the pair (i, j) means that c(i) is
chosen when given the choices c(i), c(j). you are given these vectors and the associated choices.

(a) how would you determine if the decision maker   s choices are consistent with the ideal prefer-

ence point model?

(b) assuming they are consistent, how would you determine the bounding box of ideal choice vec-
tors consistent with her decisions? (that is, how would you    nd the minimum and maximum
values of cideal

, for cideal consistent with being the ideal preference point.)

i

(c) carry out the method of part (b) using the data given in ideal_pref_point_data.*. these
   les give the points c(1), . . . , c(k) and the choices, and include the code for plotting the results.
report the width and the height of the bounding box and include your plot.

212

18.17 matrix equilibration. we say that a matrix is (cid:96)p equilibrated if each of its rows has the same (cid:96)p
norm, and each of its columns has the same (cid:96)p norm. (the row and column (cid:96)p norms are related
by m, n, and p.) suppose we are given a matrix a     rm  n. we seek diagonal invertible matrices
d     rm  m and e     rn  n for which dae is (cid:96)p equilibrated.

(a) explain how to    nd d and e using id76. (some matrices cannot be equili-
brated. but you can assume that all entries of a are nonzero, which is enough to guarantee
that it can be equilibrated.)

(b) equilibrate the matrix a given in the    le matrix_equilibration_data.*, with

m = 20, n = 10,

p = 2.

print the row (cid:96)p norms and the column (cid:96)p norms of the equilibrated matrix as vectors to check
that each matches.

hints.

    work with the matrix b, with bij = |aij|p.

    consider the problem of minimizing (cid:80)m

i=1

(cid:80)n

j=1 bijeui+vj subject to 1t u = 0, 1t v = 0.

(several variations on this idea will work.)

    we have found that expressing the terms in the objective as elog bij +ui+vj

leads to fewer

numerical problems.

18.18 approximations of the psd cone. a symmetric matrix is positive semide   nite if and only if all
its principal minors are nonnegative. here we consider approximations of the positive-semide   nite
cone produced by partially relaxing this condition.
denote by k1,n the cone of matrices whose 1    1 principal minors (i.e., diagonal elements) are
nonnegative, so that

similarly, denote by k2,n the cone of matrices whose 1  1 and 2  2 principal minors are nonnegative:

k1,n = {x     sn | xii     0 for all i}.

(cid:26)

(cid:12)(cid:12)(cid:12)(cid:12)(cid:20) xii xij

xij xjj

(cid:21)

k2,n =

x     sn

(cid:23) 0, for all i (cid:54)= j

,

(cid:27)

i.e., the cone of symmetric matrices with positive semide   nite 2    2 principal submatrices. these
two cones are convex (and in fact, proper), and satisfy the relation:
+     k2,n     k1,n,

1,n     k   
k   

2,n     sn

1,n and k   

where k   
2,n are the dual cones of k1,n and k2,n, respectively. (the last two inclusions
are immediate, and the    rst two inclusions follow from the second bullet on page 53 of the text.)
(a) give an explicit characterization of k   
(b) give an explicit characterization of k   

hint: you can use the fact that if k = k1                km, then k    = k   

1 +        + k   
m.

1,n.
2,n.

213

(c) consider the problem

minimize
subject to tr ax = b

tr cx
x     k

with variable x     sn. the problem parameters are c     sn, a     sn, b     r, and the cone
k     sn. using the data in psd cone approx data.*, solve this problem    ve times, each time
replacing k with one of the    ve cones k1,n, k2,n, sn
1,n. report the    ve di   erent
optimal values you obtain.
note: python users who run into numerical di   culties might want to use the scs solver by
using prob.solve(solver=cvxpy.scs).

2,n, and k   

+, k   

note: for parts (a) and (b), the shorter and clearer your description is, the more points you will
receive. at the very least, it should be possible to implement your description in cvx*.

18.19 equilibrating chemical reactions. a chemical system involving n species eventually reaches ther-
modynamic equilibrium. the composition of such a system is described by x     rn
++, where xi
denotes the amount of species i, measured in moles. we will assume for simplicity that all species
stay in the same phase for the entire process (this is usually violated, but is easy enough to deal
with). as time passes, the species in the system react. for example, consider the following chemical
reaction,

n2 + 3 h2 (cid:42)(cid:41) 2 nh3.

this means that one mole of n2 and 3 moles of h2 can form 2 moles of nh3, and vice versa. such
reactions are termed reversible, because they can proceed in either direction. hence, we may think
of such a reaction as an equation, n2 + 3 h2     2 nh3 = 0. in general, many reactions among the
n species may be possible. we assume for our system, there are m possible reversible reactions,
described by equations

ai1x1 + ai2x2 +        + ainxn = 0,

i = 1, . . . , m.

for reaction i, the vector ai = (ai1, . . . , ain) describes the e   ect of a single reaction on the compo-
sition of the system. in terms of the forward reactions, aij > 0 if species xj is consumed during
reaction i, aij < 0 if species xi is produced in reaction i, and aij = 0 if the quantity of xj is left
unchanged during the ith reaction.
as the system proceeds towards thermodynamic equilibrium, each reaction occurs zi     r times,
i = 1, . . . , m. thus, ziai describes the change in composition due to zi instances of reaction i.
the equilibrium composition of the system, xe, minimizes the total free energy of the system. for
simplicity, an assumption that chemists sometimes make is that their system is comprised of ideal
gasses and liquids, in which case the total free energy of the system at composition x is

n(cid:88)

g(x) = ct x +

xi log(xi/1t x),

where c     rn is a given vector determined by system conditions, such as temperature and pressure.
this free energy is often measured in joules (j) or kilo-joules (kj).

importantly, matter is conserved, which means that change in composition due to the reactions
must be equal to the the di   erence between the initial and equilibrium compositions, so that the

i=1

214

di   erence in composition between the equilibrium and initial composition, xe     x0 is precisely the
change in composition due to the m reactions.

assuming the reactants in the system act as ideal gasses and liquids, explain how to use convex or
quasiid76 to compute the equilibrium composition of the system, given ai, initial
composition x0, and free energy parameter c     rn. you must justify any statement about curvature
or monotonicity that you use. if you make a change of variables, you must justify it as well.

215

