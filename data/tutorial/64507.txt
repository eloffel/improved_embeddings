end-to-end di   erentiable proving

tim rockt  aschel

whiteson research lab, university of oxford

http://rockt.github.com

twitter: @ rockt

tim.rocktaschel@cs.ox.ac.uk

logic and learning workshop at the alan turing institute

january 12, 2018

joint work with

sebastian riedel

university college london

pasquale minervini

university college london

thomas demeester

ghent university

sameer singh

university of california, irvine

tim rockt  aschel

end-to-end di   erentiable proving

1/30

xkcd, 17th may 2017

tim rockt  aschel

end-to-end di   erentiable proving

3/30

data &
explanations
    rules
    (partial) programs
    natural language

xkcd, 17th may 2017

tim rockt  aschel

end-to-end di   erentiable proving

3/30

data &
explanations
    rules
    (partial) programs
    natural language

answers &
explanations
    rules
    programs
    natural language
    plans

xkcd, 17th may 2017

tim rockt  aschel

end-to-end di   erentiable proving

3/30

data &
data &
explanations
explanations
    rules
    rules
    (partial) programs
    (partial) programs
    natural language
    natural language

answers &
answers &
explanations
explanations
    rules
    rules
    programs
    programs
    natural language
    natural language
    plans
    plans

xkcd, 17th may 2017

tim rockt  aschel

end-to-end di   erentiable proving

3/30

data &
data &
explanations
explanations
    rules
    rules
    (partial) programs
    (partial) programs
    natural language
    natural language

answers &
answers &
explanations
explanations
    rules
    rules
    programs
    programs
    natural language
    natural language
    plans
    plans

data e   ciency & model interpretability

xkcd, 17th may 2017

tim rockt  aschel

end-to-end di   erentiable proving

3/30

id109
    no/little training data
    interpretable

id109
    no/little training data
    interpretable
    rules manually de   ned
    no generalization

id109
    no/little training data
    interpretable
    rules manually de   ned
    no generalization

id109
    no/little training data
    interpretable
    rules manually de   ned
    no generalization

neural networks

    trained end-to-end
    strong generalization

id109
    no/little training data
    interpretable
    rules manually de   ned
    no generalization

neural networks
    need a lot of training data
    not interpretable
    trained end-to-end
    strong generalization

id109
    no/little training data
    interpretable

neural networks

    trained end-to-end
    strong generalization

machine learning & logic

fuzzy logic (zadeh, 1965)

tim rockt  aschel

end-to-end di   erentiable proving

5/30

machine learning & logic

fuzzy logic (zadeh, 1965)
probabilistic logic programming, e.g.,

tim rockt  aschel

end-to-end di   erentiable proving

5/30

machine learning & logic

fuzzy logic (zadeh, 1965)
probabilistic logic programming, e.g.,

ibal (pfe   er, 2001), blog (milch et al., 2005), markov logic networks
(richardson and domingos, 2006), problog (de raedt et al., 2007) . . .

tim rockt  aschel

end-to-end di   erentiable proving

5/30

machine learning & logic

fuzzy logic (zadeh, 1965)
probabilistic logic programming, e.g.,

ibal (pfe   er, 2001), blog (milch et al., 2005), markov logic networks
(richardson and domingos, 2006), problog (de raedt et al., 2007) . . .

inductive logic programming, e.g.,

tim rockt  aschel

end-to-end di   erentiable proving

5/30

machine learning & logic

fuzzy logic (zadeh, 1965)
probabilistic logic programming, e.g.,

ibal (pfe   er, 2001), blog (milch et al., 2005), markov logic networks
(richardson and domingos, 2006), problog (de raedt et al., 2007) . . .

inductive logic programming, e.g.,

plotkin (1970), shapiro (1991), muggleton (1991), de raedt (1999) . . .

tim rockt  aschel

end-to-end di   erentiable proving

5/30

machine learning & logic

fuzzy logic (zadeh, 1965)
probabilistic logic programming, e.g.,

ibal (pfe   er, 2001), blog (milch et al., 2005), markov logic networks
(richardson and domingos, 2006), problog (de raedt et al., 2007) . . .

inductive logic programming, e.g.,

plotkin (1970), shapiro (1991), muggleton (1991), de raedt (1999) . . .
statistical predicate invention (kok and domingos, 2007)

tim rockt  aschel

end-to-end di   erentiable proving

5/30

machine learning & logic

fuzzy logic (zadeh, 1965)
probabilistic logic programming, e.g.,

ibal (pfe   er, 2001), blog (milch et al., 2005), markov logic networks
(richardson and domingos, 2006), problog (de raedt et al., 2007) . . .

inductive logic programming, e.g.,

plotkin (1970), shapiro (1991), muggleton (1991), de raedt (1999) . . .
statistical predicate invention (kok and domingos, 2007)

neural-symbolic connectionism

tim rockt  aschel

end-to-end di   erentiable proving

5/30

machine learning & logic

fuzzy logic (zadeh, 1965)
probabilistic logic programming, e.g.,

ibal (pfe   er, 2001), blog (milch et al., 2005), markov logic networks
(richardson and domingos, 2006), problog (de raedt et al., 2007) . . .

inductive logic programming, e.g.,

plotkin (1970), shapiro (1991), muggleton (1991), de raedt (1999) . . .
statistical predicate invention (kok and domingos, 2007)

neural-symbolic connectionism

propositional rules: ebl-ann (shavlik and towell, 1989), kbann (towell
and shavlik, 1994), c-lip (d   avila garcez and zaverucha, 1999)

tim rockt  aschel

end-to-end di   erentiable proving

5/30

machine learning & logic

fuzzy logic (zadeh, 1965)
probabilistic logic programming, e.g.,

ibal (pfe   er, 2001), blog (milch et al., 2005), markov logic networks
(richardson and domingos, 2006), problog (de raedt et al., 2007) . . .

inductive logic programming, e.g.,

plotkin (1970), shapiro (1991), muggleton (1991), de raedt (1999) . . .
statistical predicate invention (kok and domingos, 2007)

neural-symbolic connectionism

propositional rules: ebl-ann (shavlik and towell, 1989), kbann (towell
and shavlik, 1994), c-lip (d   avila garcez and zaverucha, 1999)
first-order id136 (no training of symbol representations): uni   cation
neural networks (h  olldobler, 1990; komendantskaya, 2011), shruti
(shastri, 1992), neural prolog (ding, 1995), clip++ (franca et al., 2014),
lifted relational networks (sourek et al., 2015)

tim rockt  aschel

end-to-end di   erentiable proving

5/30

machine learning & logic

fuzzy logic (zadeh, 1965)
probabilistic logic programming, e.g.,

ibal (pfe   er, 2001), blog (milch et al., 2005), markov logic networks
(richardson and domingos, 2006), problog (de raedt et al., 2007) . . .

inductive logic programming, e.g.,

plotkin (1970), shapiro (1991), muggleton (1991), de raedt (1999) . . .
statistical predicate invention (kok and domingos, 2007)

neural-symbolic connectionism

propositional rules: ebl-ann (shavlik and towell, 1989), kbann (towell
and shavlik, 1994), c-lip (d   avila garcez and zaverucha, 1999)
first-order id136 (no training of symbol representations): uni   cation
neural networks (h  olldobler, 1990; komendantskaya, 2011), shruti
(shastri, 1992), neural prolog (ding, 1995), clip++ (franca et al., 2014),
lifted relational networks (sourek et al., 2015)

recent: logic tensor networks (sera   ni and d   avila garcez, 2016),
tensorlog (cohen, 2016), di   erentiable inductive logic (evans and
grefenstette, 2017)

tim rockt  aschel

end-to-end di   erentiable proving

5/30

machine learning & logic

fuzzy logic (zadeh, 1965)
probabilistic logic programming, e.g.,

ibal (pfe   er, 2001), blog (milch et al., 2005), markov logic networks
(richardson and domingos, 2006), problog (de raedt et al., 2007) . . .

inductive logic programming, e.g.,

plotkin (1970), shapiro (1991), muggleton (1991), de raedt (1999) . . .
statistical predicate invention (kok and domingos, 2007)

neural-symbolic connectionism

propositional rules: ebl-ann (shavlik and towell, 1989), kbann (towell
and shavlik, 1994), c-lip (d   avila garcez and zaverucha, 1999)
first-order id136 (no training of symbol representations): uni   cation
neural networks (h  olldobler, 1990; komendantskaya, 2011), shruti
(shastri, 1992), neural prolog (ding, 1995), clip++ (franca et al., 2014),
lifted relational networks (sourek et al., 2015)

recent: logic tensor networks (sera   ni and d   avila garcez, 2016),
tensorlog (cohen, 2016), di   erentiable inductive logic (evans and
grefenstette, 2017)

for overviews see besold et al. (2017) and d   avila garcez et al. (2012)

tim rockt  aschel

end-to-end di   erentiable proving

5/30

outline

1 link prediction & symbolic vs. neural representations

tim rockt  aschel

end-to-end di   erentiable proving

6/30

outline

1 link prediction & symbolic vs. neural representations
2 regularize neural representations using logical rules

tim rockt  aschel

end-to-end di   erentiable proving

6/30

outline

1 link prediction & symbolic vs. neural representations
2 regularize neural representations using logical rules
model-agnostic but slow (rockt  aschel et al., 2015)

tim rockt  aschel

end-to-end di   erentiable proving

6/30

outline

1 link prediction & symbolic vs. neural representations
2 regularize neural representations using logical rules
model-agnostic but slow (rockt  aschel et al., 2015)
fast but restricted (demeester et al., 2016)

tim rockt  aschel

end-to-end di   erentiable proving

6/30

outline

1 link prediction & symbolic vs. neural representations
2 regularize neural representations using logical rules
model-agnostic but slow (rockt  aschel et al., 2015)
fast but restricted (demeester et al., 2016)
model-agnostic and fast (minervini et al., 2017)

tim rockt  aschel

end-to-end di   erentiable proving

6/30

outline

1 link prediction & symbolic vs. neural representations
2 regularize neural representations using logical rules
model-agnostic but slow (rockt  aschel et al., 2015)
fast but restricted (demeester et al., 2016)
model-agnostic and fast (minervini et al., 2017)

3 end-to-end di   erentiable proving (rockt  aschel and riedel, 2017)

tim rockt  aschel

end-to-end di   erentiable proving

6/30

outline

1 link prediction & symbolic vs. neural representations
2 regularize neural representations using logical rules
model-agnostic but slow (rockt  aschel et al., 2015)
fast but restricted (demeester et al., 2016)
model-agnostic and fast (minervini et al., 2017)

3 end-to-end di   erentiable proving (rockt  aschel and riedel, 2017)

explicit multi-hop reasoning using neural networks

tim rockt  aschel

end-to-end di   erentiable proving

6/30

outline

1 link prediction & symbolic vs. neural representations
2 regularize neural representations using logical rules
model-agnostic but slow (rockt  aschel et al., 2015)
fast but restricted (demeester et al., 2016)
model-agnostic and fast (minervini et al., 2017)

3 end-to-end di   erentiable proving (rockt  aschel and riedel, 2017)

explicit multi-hop reasoning using neural networks
inducing rules using id119

tim rockt  aschel

end-to-end di   erentiable proving

6/30

outline

1 link prediction & symbolic vs. neural representations
2 regularize neural representations using logical rules
model-agnostic but slow (rockt  aschel et al., 2015)
fast but restricted (demeester et al., 2016)
model-agnostic and fast (minervini et al., 2017)

3 end-to-end di   erentiable proving (rockt  aschel and riedel, 2017)

explicit multi-hop reasoning using neural networks
inducing rules using id119

4 outlook & summary

tim rockt  aschel

end-to-end di   erentiable proving

6/30

notation

constant: homer, bart, lisa etc. (lowercase)

tim rockt  aschel

end-to-end di   erentiable proving

7/30

notation

constant: homer, bart, lisa etc. (lowercase)
variable: x, y etc. (uppercase, universally quanti   ed)

tim rockt  aschel

end-to-end di   erentiable proving

7/30

notation

constant: homer, bart, lisa etc. (lowercase)
variable: x, y etc. (uppercase, universally quanti   ed)
term: constant or variable
restricted to function-free terms in this talk

tim rockt  aschel

end-to-end di   erentiable proving

7/30

notation

constant: homer, bart, lisa etc. (lowercase)
variable: x, y etc. (uppercase, universally quanti   ed)
term: constant or variable
restricted to function-free terms in this talk
predicate: fatherof, parentof etc.
function from terms to a boolean

tim rockt  aschel

end-to-end di   erentiable proving

7/30

notation

constant: homer, bart, lisa etc. (lowercase)
variable: x, y etc. (uppercase, universally quanti   ed)
term: constant or variable
restricted to function-free terms in this talk
predicate: fatherof, parentof etc.
function from terms to a boolean
atom: predicate and terms, e.g., parentof(x, bart)

tim rockt  aschel

end-to-end di   erentiable proving

7/30

notation

constant: homer, bart, lisa etc. (lowercase)
variable: x, y etc. (uppercase, universally quanti   ed)
term: constant or variable
restricted to function-free terms in this talk
predicate: fatherof, parentof etc.
function from terms to a boolean
atom: predicate and terms, e.g., parentof(x, bart)
literal: atom or negated or atom, e.g.,
not parentof(bart, lisa)

tim rockt  aschel

end-to-end di   erentiable proving

7/30

notation

constant: homer, bart, lisa etc. (lowercase)
variable: x, y etc. (uppercase, universally quanti   ed)
term: constant or variable
restricted to function-free terms in this talk
predicate: fatherof, parentof etc.
function from terms to a boolean
atom: predicate and terms, e.g., parentof(x, bart)
literal: atom or negated or atom, e.g.,
not parentof(bart, lisa)
rule: head :    body.
head: atom
body: (possibly empty) list of literals representing conjunction
restricted to horn clauses in this talk

tim rockt  aschel

end-to-end di   erentiable proving

7/30

notation

constant: homer, bart, lisa etc. (lowercase)
variable: x, y etc. (uppercase, universally quanti   ed)
term: constant or variable
restricted to function-free terms in this talk
predicate: fatherof, parentof etc.
function from terms to a boolean
atom: predicate and terms, e.g., parentof(x, bart)
literal: atom or negated or atom, e.g.,
not parentof(bart, lisa)
rule: head :    body.
head: atom
body: (possibly empty) list of literals representing conjunction
restricted to horn clauses in this talk
fact: ground rule (no free variables) with empty body, e.g.,
parentof(homer, bart).

tim rockt  aschel

end-to-end di   erentiable proving

7/30

link prediction

real world knowledge bases (like freebase, dbpedia, yago, etc.) are
incomplete!

das et al. (2017)

8/30

link prediction

real world knowledge bases (like freebase, dbpedia, yago, etc.) are
incomplete!

placeofbirth attribute is missing for 71% of people!

das et al. (2017)

8/30

link prediction

real world knowledge bases (like freebase, dbpedia, yago, etc.) are
incomplete!

placeofbirth attribute is missing for 71% of people!
commonsense knowledge often not stated explicitly

das et al. (2017)

8/30

link prediction

real world knowledge bases (like freebase, dbpedia, yago, etc.) are
incomplete!

placeofbirth attribute is missing for 71% of people!
commonsense knowledge often not stated explicitly
weak logical relationships that can be used for inferring facts

das et al. (2017)

8/30

link prediction

real world knowledge bases (like freebase, dbpedia, yago, etc.) are
incomplete!

placeofbirth attribute is missing for 71% of people!
commonsense knowledge often not stated explicitly
weak logical relationships that can be used for inferring facts

melinda

das et al. (2017)

livesin?

seattle

8/30

link prediction

real world knowledge bases (like freebase, dbpedia, yago, etc.) are
incomplete!

placeofbirth attribute is missing for 71% of people!
commonsense knowledge often not stated explicitly
weak logical relationships that can be used for inferring facts

melinda

spouseof

bill

livesin?

das et al. (2017)

seattle

8/30

link prediction

real world knowledge bases (like freebase, dbpedia, yago, etc.) are
incomplete!

placeofbirth attribute is missing for 71% of people!
commonsense knowledge often not stated explicitly
weak logical relationships that can be used for inferring facts

melinda

spouseof

bill

chairmanof

microsoft

livesin?

das et al. (2017)

seattle

8/30

link prediction

real world knowledge bases (like freebase, dbpedia, yago, etc.) are
incomplete!

placeofbirth attribute is missing for 71% of people!
commonsense knowledge often not stated explicitly
weak logical relationships that can be used for inferring facts

melinda

spouseof

bill

chairmanof

microsoft

livesin?

headquarteredin

das et al. (2017)

seattle

8/30

symbolic representations

symbols (constants and predicates) do not share any information:
grandpaof 6= grandfatherof

tim rockt  aschel

end-to-end di   erentiable proving

9/30

symbolic representations

symbols (constants and predicates) do not share any information:
grandpaof 6= grandfatherof
no notion of similarity: apple     orange, professorat     lecturerat

tim rockt  aschel

end-to-end di   erentiable proving

9/30

symbolic representations

symbols (constants and predicates) do not share any information:
grandpaof 6= grandfatherof
no notion of similarity: apple     orange, professorat     lecturerat
no generalization beyond what can be symbolically inferred:
isfruit(apple), apple     organge, isfruit(orange)?

tim rockt  aschel

end-to-end di   erentiable proving

9/30

symbolic representations

symbols (constants and predicates) do not share any information:
grandpaof 6= grandfatherof
no notion of similarity: apple     orange, professorat     lecturerat
no generalization beyond what can be symbolically inferred:
isfruit(apple), apple     organge, isfruit(orange)?
hard to work with language, vision and other modalities
      is a film based on the novel of the same name by      (x, y)

tim rockt  aschel

end-to-end di   erentiable proving

9/30

symbolic representations

symbols (constants and predicates) do not share any information:
grandpaof 6= grandfatherof
no notion of similarity: apple     orange, professorat     lecturerat
no generalization beyond what can be symbolically inferred:
isfruit(apple), apple     organge, isfruit(orange)?
hard to work with language, vision and other modalities
      is a film based on the novel of the same name by      (x, y)
but... leads to powerful id136 mechanisms and proofs for predictions:
fatherof(abe, homer). parentof(homer, lisa). parentof(homer, bart).
grandfatherof(x, y) :    fatherof(x, z), parentof(z, y).
grandfatherof(abe, q)?

{q/lisa},{q/bart}

tim rockt  aschel

end-to-end di   erentiable proving

9/30

symbolic representations

symbols (constants and predicates) do not share any information:
grandpaof 6= grandfatherof
no notion of similarity: apple     orange, professorat     lecturerat
no generalization beyond what can be symbolically inferred:
isfruit(apple), apple     organge, isfruit(orange)?
hard to work with language, vision and other modalities
      is a film based on the novel of the same name by      (x, y)
but... leads to powerful id136 mechanisms and proofs for predictions:
fatherof(abe, homer). parentof(homer, lisa). parentof(homer, bart).
grandfatherof(x, y) :    fatherof(x, z), parentof(z, y).
grandfatherof(abe, q)?
fairly easy to debug and trivial to incorporate domain knowledge:
show to domain expert and let her change/add rules and facts

{q/lisa},{q/bart}

tim rockt  aschel

end-to-end di   erentiable proving

9/30

neural representations

lower-dimensional    xed-length vector representations of symbols
(predicates and constants):
vapple, vorange, vfatherof, . . .     rk

tim rockt  aschel

end-to-end di   erentiable proving

10/30

neural representations

lower-dimensional    xed-length vector representations of symbols
(predicates and constants):
vapple, vorange, vfatherof, . . .     rk
can capture similarity and even semantic hierarchy of symbols:
vgrandpaof = vgrandfatherof,
vapple     vorange, vapple < vfruit

tim rockt  aschel

end-to-end di   erentiable proving

10/30

neural representations

lower-dimensional    xed-length vector representations of symbols
(predicates and constants):
vapple, vorange, vfatherof, . . .     rk
can capture similarity and even semantic hierarchy of symbols:
vgrandpaof = vgrandfatherof,
vapple     vorange, vapple < vfruit
can be trained from raw task data (e.g. facts in a knowledge base)

tim rockt  aschel

end-to-end di   erentiable proving

10/30

neural representations

lower-dimensional    xed-length vector representations of symbols
(predicates and constants):
vapple, vorange, vfatherof, . . .     rk
can capture similarity and even semantic hierarchy of symbols:
vgrandpaof = vgrandfatherof,
vapple     vorange, vapple < vfruit
can be trained from raw task data (e.g. facts in a knowledge base)
can be compositional
v      is the father of       = id56  (vis, vthe, vfather, vof)

tim rockt  aschel

end-to-end di   erentiable proving

10/30

neural representations

lower-dimensional    xed-length vector representations of symbols
(predicates and constants):
vapple, vorange, vfatherof, . . .     rk
can capture similarity and even semantic hierarchy of symbols:
vgrandpaof = vgrandfatherof,
vapple     vorange, vapple < vfruit
can be trained from raw task data (e.g. facts in a knowledge base)
can be compositional
v      is the father of       = id56  (vis, vthe, vfather, vof)
but... need large amount of training data

tim rockt  aschel

end-to-end di   erentiable proving

10/30

neural representations

lower-dimensional    xed-length vector representations of symbols
(predicates and constants):
vapple, vorange, vfatherof, . . .     rk
can capture similarity and even semantic hierarchy of symbols:
vgrandpaof = vgrandfatherof,
vapple     vorange, vapple < vfruit
can be trained from raw task data (e.g. facts in a knowledge base)
can be compositional
v      is the father of       = id56  (vis, vthe, vfather, vof)
but... need large amount of training data
no direct way of incorporating prior knowledge
vgrandfatherof(x, y) :    vfatherof(x, z), vparentof(z, y).

tim rockt  aschel

end-to-end di   erentiable proving

10/30

state-of-the-art neural link prediction

livesin(melinda, seattle)? = f  (vlivesin, vmelinda, vseattle)

tim rockt  aschel

end-to-end di   erentiable proving

11/30

state-of-the-art neural link prediction

livesin(melinda, seattle)? = f  (vlivesin, vmelinda, vseattle)

distmult (yang et al., 2015)
vs , vi , vj     rk

tim rockt  aschel

end-to-end di   erentiable proving

11/30

state-of-the-art neural link prediction

livesin(melinda, seattle)? = f  (vlivesin, vmelinda, vseattle)

distmult (yang et al., 2015)
vs , vi , vj     rk

f  (vs , vi , vj) = v>

=x

s (vi (cid:12) vj)
vskvikvjk

k

tim rockt  aschel

end-to-end di   erentiable proving

11/30

state-of-the-art neural link prediction

livesin(melinda, seattle)? = f  (vlivesin, vmelinda, vseattle)
complex (trouillon et al., 2016)
vs , vi , vj     ck

distmult (yang et al., 2015)
vs , vi , vj     rk

f  (vs , vi , vj) = v>

=x

s (vi (cid:12) vj)
vskvikvjk

k

tim rockt  aschel

end-to-end di   erentiable proving

11/30

state-of-the-art neural link prediction

distmult (yang et al., 2015)
vs , vi , vj     rk

livesin(melinda, seattle)? = f  (vlivesin, vmelinda, vseattle)
complex (trouillon et al., 2016)
vs , vi , vj     ck
f  (vs , vi , vj) =

f  (vs , vi , vj) = v>

=x

s (vi (cid:12) vj)
vskvikvjk

k

real(vs)>(real(vi) (cid:12) real(vj))
+ real(vs)>(imag(vi) (cid:12) imag(vj))
+ imag(vs)>(real(vi) (cid:12) imag(vj))
    imag(vs)>(imag(vi) (cid:12) real(vj))

tim rockt  aschel

end-to-end di   erentiable proving

11/30

state-of-the-art neural link prediction

distmult (yang et al., 2015)
vs , vi , vj     rk

livesin(melinda, seattle)? = f  (vlivesin, vmelinda, vseattle)
complex (trouillon et al., 2016)
vs , vi , vj     ck
f  (vs , vi , vj) =

f  (vs , vi , vj) = v>

=x

s (vi (cid:12) vj)
vskvikvjk

real(vs)>(real(vi) (cid:12) real(vj))
+ real(vs)>(imag(vi) (cid:12) imag(vj))
+ imag(vs)>(real(vi) (cid:12) imag(vj))
    imag(vs)>(imag(vi) (cid:12) real(vj))

   y log (  (f  (vs , vi , vj)))     (1     y) log (1       (f  (vs , vi , vj)))

k

training loss

l = x

rs(ei ,ej),y     t

tim rockt  aschel

end-to-end di   erentiable proving

11/30

state-of-the-art neural link prediction

distmult (yang et al., 2015)
vs , vi , vj     rk

livesin(melinda, seattle)? = f  (vlivesin, vmelinda, vseattle)
complex (trouillon et al., 2016)
vs , vi , vj     ck
f  (vs , vi , vj) =

f  (vs , vi , vj) = v>

=x

s (vi (cid:12) vj)
vskvikvjk

real(vs)>(real(vi) (cid:12) real(vj))
+ real(vs)>(imag(vi) (cid:12) imag(vj))
+ imag(vs)>(real(vi) (cid:12) imag(vj))
    imag(vs)>(imag(vi) (cid:12) real(vj))

k

training loss

l = x

rs(ei ,ej),y     t

   y log (  (f  (vs , vi , vj)))     (1     y) log (1       (f  (vs , vi , vj)))

learn vs , vi , vj from data

tim rockt  aschel

end-to-end di   erentiable proving

11/30

state-of-the-art neural link prediction

distmult (yang et al., 2015)
vs , vi , vj     rk

livesin(melinda, seattle)? = f  (vlivesin, vmelinda, vseattle)
complex (trouillon et al., 2016)
vs , vi , vj     ck
f  (vs , vi , vj) =

f  (vs , vi , vj) = v>

=x

s (vi (cid:12) vj)
vskvikvjk

real(vs)>(real(vi) (cid:12) real(vj))
+ real(vs)>(imag(vi) (cid:12) imag(vj))
+ imag(vs)>(real(vi) (cid:12) imag(vj))
    imag(vs)>(imag(vi) (cid:12) real(vj))

k

training loss

l = x

rs(ei ,ej),y     t

   y log (  (f  (vs , vi , vj)))     (1     y) log (1       (f  (vs , vi , vj)))

learn vs , vi , vj from data
obtain gradients    vs l,    vi l,    vj l by backprop

tim rockt  aschel

end-to-end di   erentiable proving

11/30

id173 by id118

r
o
t
c
i
d
e
r
p

k
n
l

i

u4

u1

sigm

dot

u5

sigm

u2

dot

sigm

u6

u3

dot

(cid:74)parentof(cid:75) (cid:74)homer, bart(cid:75) (cid:74)motherof(cid:75)

(cid:74)fatherof(cid:75)

rockt  aschel et al. (2015), naacl

12/30

id173 by id118

fatherof(x, y) :    parentof(x, y),   motherof(x, y)

r
o
t
c
i
d
e
r
p

k
n
l

i

u4

u1

sigm

dot

u5

sigm

u2

dot

sigm

u6

u3

dot

(cid:74)parentof(cid:75) (cid:74)homer, bart(cid:75) (cid:74)motherof(cid:75)

(cid:74)fatherof(cid:75)

rockt  aschel et al. (2015), naacl

12/30

id173 by id118

                                       

fatherof(x, y) :    parentof(x, y),   motherof(x, y)

p(f) =(cid:74)f(cid:75) =

r
o
t
c
i
d
e
r
p

k
n
l

i

u4

u1

sigm

dot

u5

sigm

u2

dot

sigm

u6

u3

dot

(cid:74)parentof(cid:75) (cid:74)homer, bart(cid:75) (cid:74)motherof(cid:75)

(cid:74)fatherof(cid:75)

rockt  aschel et al. (2015), naacl

f  (s, i, j)

1    (cid:74)a(cid:75)
(cid:74)a(cid:75)(cid:74)b(cid:75)
(cid:74)a(cid:75) +(cid:74)b(cid:75)    (cid:74)a(cid:75)(cid:74)b(cid:75)
(cid:74)b(cid:75) ((cid:74)a(cid:75)     1) + 1

if f = s(i, j)
if f =    a
if f = a     b
if f = a     b
if f = a :    b

12/30

id173 by id118

    + 1

u9
   

u11

u10
   

u7

u5

1        

sigm

sigm

u2

dot

u8

u6

u3

        1

dot

u4

u1

sigm

dot

(cid:74)parentof(cid:75) (cid:74)homer, bart(cid:75) (cid:74)motherof(cid:75)

(cid:74)fatherof(cid:75)

l

e
u
r

l

e
b
a
i
t
n
e
r
e
   
d

i

r
o
t
c
i
d
e
r
p

k
n
l

i

fatherof(x, y) :    parentof(x, y),   motherof(x, y)

p(f) =(cid:74)f(cid:75) =

f  (s, i, j)

1    (cid:74)a(cid:75)
(cid:74)a(cid:75)(cid:74)b(cid:75)
(cid:74)a(cid:75) +(cid:74)b(cid:75)    (cid:74)a(cid:75)(cid:74)b(cid:75)
(cid:74)b(cid:75) ((cid:74)a(cid:75)     1) + 1

if f = s(i, j)
if f =    a
if f = a     b
if f = a     b
if f = a :    b

                                       

rockt  aschel et al. (2015), naacl

12/30

id173 by id118

s
s
o
l

l

e
u
r

l

e
b
a
i
t
n
e
r
e
   
d

i

r
o
t
c
i
d
e
r
p

k
n
l

i

loss

   log

    + 1

u9
   

u11

u10
   

u7

u5

1        

sigm

sigm

u2

dot

u8

u6

u3

        1

dot

u4

u1

sigm

dot

(cid:74)parentof(cid:75) (cid:74)homer, bart(cid:75) (cid:74)motherof(cid:75)

(cid:74)fatherof(cid:75)

fatherof(x, y) :    parentof(x, y),   motherof(x, y)

p(f) =(cid:74)f(cid:75) =

f  (s, i, j)

                                       
1    (cid:74)a(cid:75)
(cid:74)a(cid:75)(cid:74)b(cid:75)
(cid:74)a(cid:75) +(cid:74)b(cid:75)    (cid:74)a(cid:75)(cid:74)b(cid:75)
(cid:74)b(cid:75) ((cid:74)a(cid:75)     1) + 1
l(cid:0)(cid:74)fatherof(homer, bart) :   
   motherof(homer, bart)(cid:75)(cid:1)

parentof(homer, bart)    

if f = s(i, j)
if f =    a
if f = a     b
if f = a     b
if f = a :    b

rockt  aschel et al. (2015), naacl

12/30

id173 by id118

l(f) =     log ((cid:74)   x, y : f(x, y)(cid:75)) =    p

(ei ,ej)   c2 log(cid:74)f(ei , ej)(cid:75)

s
s
o
l

l

e
u
r

l

e
b
a
i
t
n
e
r
e
   
d

i

r
o
t
c
i
d
e
r
p

k
n
l

i

loss

   log

    + 1

u9
   

u11

u10
   

u7

u5

1        

u8

u6

u3

        1

dot

u4

u1

sigm

dot

sigm

sigm

u2

dot

(cid:74)parentof(cid:75) (cid:74)homer, bart(cid:75) (cid:74)motherof(cid:75)

(cid:74)fatherof(cid:75)

fatherof(x, y) :    parentof(x, y),   motherof(x, y)

p(f) =(cid:74)f(cid:75) =

f  (s, i, j)

                                       
1    (cid:74)a(cid:75)
(cid:74)a(cid:75)(cid:74)b(cid:75)
(cid:74)a(cid:75) +(cid:74)b(cid:75)    (cid:74)a(cid:75)(cid:74)b(cid:75)
(cid:74)b(cid:75) ((cid:74)a(cid:75)     1) + 1
l(cid:0)(cid:74)fatherof(homer, bart) :   
   motherof(homer, bart)(cid:75)(cid:1)

parentof(homer, bart)    

if f = s(i, j)
if f =    a
if f = a     b
if f = a     b
if f = a :    b

rockt  aschel et al. (2015), naacl

12/30

zero-shot learning results

neural link prediction (lp)

n
o
i
s
i
c
e
r
p

e
g
a
r
e
v
a

n
a
e
m
d
e
t
h
g
i
e
w

40

20

0

38

33

21

10

3

tim rockt  aschel

end-to-end di   erentiable proving

13/30

zero-shot learning results

neural link prediction (lp)

deduction

n
o
i
s
i
c
e
r
p

e
g
a
r
e
v
a

n
a
e
m
d
e
t
h
g
i
e
w

40

20

0

38

33

21

10

3

tim rockt  aschel

end-to-end di   erentiable proving

13/30

zero-shot learning results

neural link prediction (lp)

deduction

deduction after lp

n
o
i
s
i
c
e
r
p

e
g
a
r
e
v
a

n
a
e
m
d
e
t
h
g
i
e
w

40

20

0

38

33

21

10

3

tim rockt  aschel

end-to-end di   erentiable proving

13/30

zero-shot learning results

neural link prediction (lp)

deduction

deduction before lp

deduction after lp

n
o
i
s
i
c
e
r
p

e
g
a
r
e
v
a

n
a
e
m
d
e
t
h
g
i
e
w

40

20

0

38

33

21

10

3

tim rockt  aschel

end-to-end di   erentiable proving

13/30

zero-shot learning results

neural link prediction (lp)

deduction

deduction after lp

deduction before lp

id173

n
o
i
s
i
c
e
r
p

e
g
a
r
e
v
a

n
a
e
m
d
e
t
h
g
i
e
w

40

20

0

38

33

21

10

3

tim rockt  aschel

end-to-end di   erentiable proving

13/30

lifted id173 by implications

every father is a parent
every mother is a parent

mother of

father of

parent of

0

demeester et al. (2016), emnlp

14/30

lifted id173 by implications

every father is a parent
every mother is a parent

implied by father of

mother of

father of

parent of

0

demeester et al. (2016), emnlp

14/30

lifted id173 by implications

every father is a parent
every mother is a parent

before
implied by father of

mother of

father of

parent of

0

after

father of

parent of

0

demeester et al. (2016), emnlp

14/30

lifted id173 by implications

every father is a parent
every mother is a parent

before
implied by father of

mother of

father of

father of

parent of

0

0

after

parent of

mother of

demeester et al. (2016), emnlp

14/30

lifted id173 by implications
generalises to similar relations (e.g. dad)
every father is a parent
every mother is a parent generalises to similar relations (e.g. mum)

before
implied by father of

mother of

father of

parent of

0

after

parent of

mother of

mum of

father of
dad of

0

demeester et al. (2016), emnlp

14/30

lifted id173 by implications
generalises to similar relations (e.g. dad)
every father is a parent
every mother is a parent generalises to similar relations (e.g. mum)
every parent is a relative no training facts needed!

before
implied by father of

mother of

father of

parent of

0

after

relative of

parent of

mother of

mum of

father of
dad of

0

demeester et al. (2016), emnlp

14/30

lifted id173 by implications
   (ei , ej)     c2 :(cid:74)h(cid:75)>(cid:74)ei , ej(cid:75)    (cid:74)b(cid:75)>(cid:74)ei , ej(cid:75)
generalises to similar relations (e.g. dad)
every father is a parent
(cid:74)h(cid:75)    (cid:74)b(cid:75) ,
   (ei , ej)     c2 :(cid:74)ei , ej(cid:75)     rk
every mother is a parent generalises to similar relations (e.g. mum)
every parent is a relative no training facts needed!
+

   x, y : h(x, y) :    b(x, y)

before
implied by father of

mother of

father of

parent of

0

after

relative of

parent of

mother of

mum of

father of
dad of

0

demeester et al. (2016), emnlp

14/30

adversarial id173

clause a:

h(x, y) :    b1(x, z)     b2(z, y)

id173 by propositional rules needs
grounding     does not scale to large
domains!

x

y

x

z

z

y

link predictor link predictor link predictor

  h(x, y)

  b1(x, z)

  b2(z, y)

ji [  h(x, y) :      b1(x, z)       b2(z, y)]

inconsistency loss

minervini et al. (2017), uai

14/30

adversarial id173

id173 by propositional rules needs
grounding     does not scale to large
domains!
lifted id173 only supports direct
implications

clause a:

h(x, y) :    b1(x, z)     b2(z, y)

x

y

x

z

z

y

link predictor link predictor link predictor

  h(x, y)

  b1(x, z)

  b2(z, y)

ji [  h(x, y) :      b1(x, z)       b2(z, y)]

inconsistency loss

minervini et al. (2017), uai

14/30

adversarial id173

id173 by propositional rules needs
grounding     does not scale to large
domains!
lifted id173 only supports direct
implications
idea: let grounding be generated by an
adversary and optimize minimax game...

clause a:

h(x, y) :    b1(x, z)     b2(z, y)

adversary

y

z

x
adversarial set s

x

y

x

z

z

y

link predictor link predictor link predictor

  h(x, y)

  b1(x, z)

  b2(z, y)

ji [  h(x, y) :      b1(x, z)       b2(z, y)]

inconsistency loss

minervini et al. (2017), uai

14/30

adversarial id173

clause a:

h(x, y) :    b1(x, z)     b2(z, y)

adversary

y

z

x
adversarial set s

x

y

x

z

z

y

link predictor link predictor link predictor

  h(x, y)

  b1(x, z)

  b2(z, y)

ji [  h(x, y) :      b1(x, z)       b2(z, y)]

inconsistency loss

id173 by propositional rules needs
grounding     does not scale to large
domains!
lifted id173 only supports direct
implications
idea: let grounding be generated by an
adversary and optimize minimax game...
adversary    nds maximally violating
grounding for a given rule

minervini et al. (2017), uai

14/30

adversarial id173

clause a:

h(x, y) :    b1(x, z)     b2(z, y)

adversary

y

z

x
adversarial set s

x

y

x

z

z

y

link predictor link predictor link predictor

  h(x, y)

  b1(x, z)

  b2(z, y)

ji [  h(x, y) :      b1(x, z)       b2(z, y)]

inconsistency loss

id173 by propositional rules needs
grounding     does not scale to large
domains!
lifted id173 only supports direct
implications
idea: let grounding be generated by an
adversary and optimize minimax game...
adversary    nds maximally violating
grounding for a given rule
neural link predictor attempts to minimize
rule violation for given generated
groundings

minervini et al. (2017), uai

14/30

end-to-end di   erentiable prover

neural network for proving queries to a knowledge base

rockt  aschel and riedel (2017), nips

15/30

end-to-end di   erentiable prover

neural network for proving queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols

rockt  aschel and riedel (2017), nips

15/30

end-to-end di   erentiable prover

neural network for proving queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
learn vector representations of symbols end-to-end from proof success

rockt  aschel and riedel (2017), nips

15/30

end-to-end di   erentiable prover

neural network for proving queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
learn vector representations of symbols end-to-end from proof success
make use of provided rules in soft proofs

rockt  aschel and riedel (2017), nips

15/30

end-to-end di   erentiable prover

neural network for proving queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
learn vector representations of symbols end-to-end from proof success
make use of provided rules in soft proofs
induce interpretable rules end-to-end from proof success

rockt  aschel and riedel (2017), nips

15/30

approach

tim rockt  aschel

end-to-end di   erentiable proving

16/30

approach

tim rockt  aschel

end-to-end di   erentiable proving

16/30

approach

let   s neuralize prolog   s backward chaining using a radial basis function

kernel for unifying vector representations of symbols!

tim rockt  aschel

end-to-end di   erentiable proving

16/30

prolog   s backward chaining

example knowledge base:

1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

tim rockt  aschel

end-to-end di   erentiable proving

17/30

prolog   s backward chaining

example knowledge base:

1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

intuition:

backward chaining translates a query into subqueries via rules, e.g.,
grandfatherof(abe, bart)

fatherof(abe, z), parentof(z, bart)

3.

tim rockt  aschel

end-to-end di   erentiable proving

17/30

prolog   s backward chaining

example knowledge base:

1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

intuition:

backward chaining translates a query into subqueries via rules, e.g.,
grandfatherof(abe, bart)
fatherof(abe, z), parentof(z, bart)
it attempts this for all rules in the knowledge base and thus speci   es a
depth-   rst search

3.

tim rockt  aschel

end-to-end di   erentiable proving

17/30

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

query
grandfatherof abe

bart

tim rockt  aschel

end-to-end di   erentiable proving

18/30

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

query
grandfatherof abe

bart

1.

fatherof

abe

homer

tim rockt  aschel

end-to-end di   erentiable proving

18/30

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

1.

query
grandfatherof abe
?=
abe

fatherof

?=

bart
?=

homer

tim rockt  aschel

end-to-end di   erentiable proving

18/30

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

1.

query
grandfatherof abe
?=
abe

fatherof

?=

bart
?=

homer

fail

success

fail

tim rockt  aschel

end-to-end di   erentiable proving

18/30

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

state t
    success

1.

query
grandfatherof abe
?=
abe

fatherof

?=

bart
?=

homer

fail

success

fail

tim rockt  aschel

end-to-end di   erentiable proving

18/30

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

state t
    success

1.

query
grandfatherof abe
?=
abe

fatherof

?=

bart
?=

homer

state t + 1
    fail

fail

success

fail

tim rockt  aschel

end-to-end di   erentiable proving

18/30

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

query
grandfatherof abe
?=

?=

2.

parentof

homer

state t
    success

bart
?=
bart

state t + 1
    fail

fail

fail

success

tim rockt  aschel

end-to-end di   erentiable proving

18/30

uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

state t
    success

3.

query
grandfatherof abe
?=
grandfatherof x

?=

bart
?=
y

success

x/abe

y/bart

state t + 1

x/abe
y/bart success

tim rockt  aschel

end-to-end di   erentiable proving

18/30

uni   cation failure

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

state t
    success

3.

grandpaof

query
abe
?=
grandfatherof x

?=

bart
?=
y

state t + 1

x/abe
y/bart

fail

fail

x/abe

y/bart

tim rockt  aschel

end-to-end di   erentiable proving

18/30

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

state t
   

1.0

3.

neural uni   cation

grandpaof

?=

query
abe

?=
x

bart

?=
y

x/abe

y/bart

state t + 1

x/abe
y/bart

tim rockt  aschel

end-to-end di   erentiable proving

18/30

neural uni   cation

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

state t
   

1.0

3.

grandpaof

?=

query
abe

?=
x

bart

?=
y

state t + 1

x/abe
y/bart

(cid:18)

min

1.0, exp

x/abe

y/bart

(cid:18)   kvgrandpaof   vgrandfatherofk2

(cid:19)(cid:19)

2  2

tim rockt  aschel

end-to-end di   erentiable proving

18/30

di   erentiable prover

    1.0

grandpaof

abe

bart

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

tim rockt  aschel

end-to-end di   erentiable proving

19/30

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

di   erentiable prover

    1.0

grandpaof

abe

bart

1.

   

tim rockt  aschel

end-to-end di   erentiable proving

19/30

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

di   erentiable prover

    1.0

grandpaof

abe

bart

   

1.

2.

   

tim rockt  aschel

end-to-end di   erentiable proving

19/30

di   erentiable prover

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

    1.0

grandpaof

abe

bart

1.

2.

   

3.

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

tim rockt  aschel

end-to-end di   erentiable proving

19/30

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

di   erentiable prover

    1.0

grandpaof

abe

bart

1.

2.

   

3.

fatherof

abe

z

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

tim rockt  aschel

end-to-end di   erentiable proving

19/30

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

di   erentiable prover

    1.0

grandpaof

abe

bart

1.

2.

   

3.

fatherof

abe

z

3.

fail

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

tim rockt  aschel

end-to-end di   erentiable proving

19/30

di   erentiable prover

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

3.2 parentof(z, y)

x/abe
y/bart
z/homer

    1.0

grandpaof

abe

bart

1.

2.

   

3.

fatherof

abe

z

1.

3.

fail

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

tim rockt  aschel

end-to-end di   erentiable proving

19/30

di   erentiable prover

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

3.2 parentof(z, y)

x/abe
y/bart
z/homer

    1.0

grandpaof

abe

bart

1.

2.

   

3.

fatherof

abe

z

1.

3.

fail

parentof

homer

bart

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

tim rockt  aschel

end-to-end di   erentiable proving

19/30

di   erentiable prover

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

3.2 parentof(z, y)

x/abe
y/bart
z/homer

    1.0

grandpaof

abe

bart

1.

2.

   

3.

fatherof

abe

z

1.

3.

fail

parentof

homer

bart

1.

2.

3.

x/abe
y/bart
z/homer

fail

x/abe
y/bart
z/homer

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

tim rockt  aschel

end-to-end di   erentiable proving

19/30

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

3.2 parentof(z, y)

x/abe
y/bart
z/homer

di   erentiable prover

    1.0

grandpaof

abe

bart

1.

2.

   

fatherof

abe

1.

3.

fail

3.

z

2.

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

x/abe
y/bart
z/bart

3.2 parentof(z, y)

parentof

homer

bart

1.

2.

3.

x/abe
y/bart
z/homer

fail

x/abe
y/bart
z/homer

tim rockt  aschel

end-to-end di   erentiable proving

19/30

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

3.2 parentof(z, y)

x/abe
y/bart
z/homer

di   erentiable prover

    1.0

grandpaof

abe

bart

1.

2.

   

fatherof

abe

1.

3.

fail

3.

z

2.

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

x/abe
y/bart
z/bart

3.2 parentof(z, y)

parentof

homer

bart

parentof

bart

bart

1.

2.

3.

x/abe
y/bart
z/homer

fail

x/abe
y/bart
z/homer

tim rockt  aschel

end-to-end di   erentiable proving

19/30

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

3.2 parentof(z, y)

x/abe
y/bart
z/homer

di   erentiable prover

    1.0

grandpaof

abe

bart

1.

2.

   

fatherof

abe

1.

3.

fail

3.

z

2.

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

x/abe
y/bart
z/bart

3.2 parentof(z, y)

parentof

homer

bart

parentof

bart

bart

1.

2.

3.

1.

2.

3.

x/abe
y/bart
z/homer

fail

x/abe
y/bart
z/homer

x/abe
y/bart
z/bart

fail

x/abe
y/bart
z/bart

tim rockt  aschel

end-to-end di   erentiable proving

19/30

neural program induction

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3. grandfatherof(x, y) :   

fatherof(x, z),
parentof(z, y).

   

3.2 parentof(z, y)

x/abe
y/bart
z/homer

    1.0

grandpaof

abe

bart

1.

2.

   

fatherof

abe

1.

3.

fail

3.

z

2.

x/abe
y/bart

3.1 fatherof(x, z)
3.2 parentof(z, y)

x/abe
y/bart
z/bart

3.2 parentof(z, y)

parentof

homer

bart

parentof

bart

bart

1.

2.

3.

1.

2.

3.

x/abe
y/bart
z/homer

fail

x/abe
y/bart
z/homer

x/abe
y/bart
z/bart

fail

x/abe
y/bart
z/bart

tim rockt  aschel

end-to-end di   erentiable proving

19/30

neural program induction

example knowledge base:
1. fatherof(abe, homer).
2. parentof(homer, bart).
3.   1(x, y) :   
  2(x, z),
  3(z, y).

   

3.2   3(z, y)

x/abe
y/bart
z/homer

    1.0

grandpaof

abe

bart

1.

  2

1.

2.

   

abe

3.

fail

3.

z

2.

x/abe
y/bart

3.1   2(x, z)
3.2   3(z, y)

x/abe
y/bart
z/bart

3.2   3(z, y)

  3

homer

bart

  3

bart

bart

1.

2.

3.

1.

2.

3.

x/abe
y/bart
z/homer

fail

x/abe
y/bart
z/homer

x/abe
y/bart
z/bart

fail

x/abe
y/bart
z/bart

tim rockt  aschel

end-to-end di   erentiable proving

19/30

training objective

grandpaof

abe

bart

3.

1.

1.

1.

1.

   

   

x/abe
y/bart
z/homer

3.

1.

2.

x/abe
y/bart
z/homer

3.

3.

2.

2.

1.

2.

x/abe
y/bart
z/bart

x/abe
y/bart
z/bart

tim rockt  aschel

end-to-end di   erentiable proving

20/30

training objective

grandpaof

abe

bart

3.

1.

1.

1.

1.

   

   

x/abe
y/bart
z/homer

3.

1.

2.

x/abe
y/bart
z/homer

3.

3.

2.

2.

1.

2.

x/abe
y/bart
z/bart

x/abe
y/bart
z/bart

max pooling

f  (grandpaof(abe, bart))

tim rockt  aschel

end-to-end di   erentiable proving

20/30

training objective

grandpaof

abe

bart

3.

1.

1.

1.

1.

   

   

x/abe
y/bart
z/homer

3.

1.

2.

x/abe
y/bart
z/homer

3.

3.

2.

2.

1.

2.

x/abe
y/bart
z/bart

x/abe
y/bart
z/bart

max pooling

f  (grandpaof(abe, bart))

loss: negative log-likelihood w.r.t. target proof success

tim rockt  aschel

end-to-end di   erentiable proving

20/30

training objective

grandpaof

abe

bart

3.

1.

1.

1.

1.

   

   

x/abe
y/bart
z/homer

3.

1.

2.

x/abe
y/bart
z/homer

3.

3.

2.

2.

1.

2.

x/abe
y/bart
z/bart

x/abe
y/bart
z/bart

max pooling

f  (grandpaof(abe, bart))

loss: negative log-likelihood w.r.t. target proof success
trained end-to-end using stochastic id119

tim rockt  aschel

end-to-end di   erentiable proving

20/30

training objective

grandpaof

abe

bart

3.

1.

1.

1.

1.

   

   

x/abe
y/bart
z/homer

3.

1.

2.

x/abe
y/bart
z/homer

3.

3.

2.

2.

1.

2.

x/abe
y/bart
z/bart

x/abe
y/bart
z/bart

max pooling

f  (grandpaof(abe, bart))

loss: negative log-likelihood w.r.t. target proof success
trained end-to-end using stochastic id119
vectors are learned such that proof success is high for known facts and
low for sampled negative facts

tim rockt  aschel

end-to-end di   erentiable proving

20/30

calculation on gpu

dadof
parentof

abe
homer

q

tim rockt  aschel

end-to-end di   erentiable proving

21/30

calculation on gpu

dadof
parentof

abe
homer

q

fatherof
parentof
grandmaof

abe
homer
mona

homer
bart
lisa

tim rockt  aschel

end-to-end di   erentiable proving

21/30

calculation on gpu

dadof
parentof

abe
homer

q

fatherof
parentof
grandmaof

abe
homer
mona

homer
bart
lisa

unify

unify

tim rockt  aschel

end-to-end di   erentiable proving

21/30

calculation on gpu

dadof
parentof

abe
homer

q

unify

unify

q /

homer
bart
lisa
homer
bart
lisa

unify

(symbolic)

fatherof
parentof
grandmaof

abe
homer
mona

homer
bart
lisa

tim rockt  aschel

end-to-end di   erentiable proving

21/30

calculation on gpu

dadof
parentof

abe
homer

q

unify

unify

q /

homer
bart
lisa
homer
bart
lisa

unify

(symbolic)

fatherof
parentof
grandmaof

abe
homer
mona

homer
bart
lisa

tim rockt  aschel

end-to-end di   erentiable proving

21/30

experiments

benchmark knowledge bases: kinship, nations, umls (kok and domingos,

2007), and countries (bouchard et al., 2015)

test country

region

test country

region

locatedin
locatedin

locatedin
locatedin

locatedin

neighborof

locatedin

neighborof

locatedin

locatedin
locatedin

locatedin

locatedin

train country

subregion

locatedin

train country

subregion

tim rockt  aschel

end-to-end di   erentiable proving

22/30

experiments

benchmark knowledge bases: kinship, nations, umls (kok and domingos,

2007), and countries (bouchard et al., 2015)

test country

region

test country

region

locatedin

locatedin
locatedin

locatedin

neighborof

locatedin

neighborof

locatedin

locatedin
locatedin

locatedin

locatedin

train country

subregion

locatedin

train country

subregion

tim rockt  aschel

end-to-end di   erentiable proving

22/30

experiments

benchmark knowledge bases: kinship, nations, umls (kok and domingos,

2007), and countries (bouchard et al., 2015)

test country

region

test country

region

locatedin

locatedin
locatedin

locatedin

neighborof

locatedin

neighborof

locatedin

locatedin

locatedin

locatedin

train country

subregion

locatedin

train country

subregion

tim rockt  aschel

end-to-end di   erentiable proving

22/30

experiments

benchmark knowledge bases: kinship, nations, umls (kok and domingos,

2007), and countries (bouchard et al., 2015)

test country

region

test country

region

locatedin

locatedin

locatedin

neighborof

locatedin

neighborof

locatedin

locatedin

locatedin

locatedin

train country

subregion

locatedin

train country

subregion

tim rockt  aschel

end-to-end di   erentiable proving

22/30

details

models implemented in tensorflow

tim rockt  aschel

end-to-end di   erentiable proving

23/30

details

models implemented in tensorflow

complex neural link prediction model by trouillon et al. (2016)

tim rockt  aschel

end-to-end di   erentiable proving

23/30

details

models implemented in tensorflow

complex neural link prediction model by trouillon et al. (2016)

prover end-to-end di   erentiable prover

tim rockt  aschel

end-to-end di   erentiable proving

23/30

details

models implemented in tensorflow

complex neural link prediction model by trouillon et al. (2016)

prover end-to-end di   erentiable prover
prover   same, but representations trained with complex as auxiliary task

tim rockt  aschel

end-to-end di   erentiable proving

23/30

details

models implemented in tensorflow

complex neural link prediction model by trouillon et al. (2016)

prover end-to-end di   erentiable prover
prover   same, but representations trained with complex as auxiliary task

rule templates:
kinship, nations & umls
20 #1(x, y) :    #2(x, y).
20 #1(x, y) :    #2(y, x).
20 #1(x, y) :    #2(x, z), #3(z, y).
countries s1
3 #1(x, y) :    #1(y, x).
3 #1(x, y) :    #2(x, z), #2(z, y).
countries s2
3 #1(x, y) :    #2(x, z), #3(z, y).
countries s3
3 #1(x, y) :    #2(x, z), #3(z, w), #4(w, y).

tim rockt  aschel

end-to-end di   erentiable proving

23/30

tim rockt  aschel

end-to-end di   erentiable proving

24/30

results

complex

87

82

82

77

70

76

57

48

48

62

62

59

countries s3 kinship

nations

umls

1
@
s
t
h
/

i

y
c
a
r
u
c
c
a

100

80

60

40

20

0

tim rockt  aschel

end-to-end di   erentiable proving

25/30

results

complex

prover

87

82

82

77

70

76

57

48

48

62

62

59

countries s3 kinship

nations

umls

1
@
s
t
h
/

i

y
c
a
r
u
c
c
a

100

80

60

40

20

0

tim rockt  aschel

end-to-end di   erentiable proving

25/30

results

complex

prover

prover  

87

82

82

77

70

76

57

48

48

62

62

59

countries s3 kinship

nations

umls

1
@
s
t
h
/

i

y
c
a
r
u
c
c
a

100

80

60

40

20

0

tim rockt  aschel

end-to-end di   erentiable proving

25/30

examples of induced rules

corpus

countries

s1
s2
s3

nations

umls

induced rules and their con   dence

0.90 locatedin(x,y) :    locatedin(x,z), locatedin(z,y).
0.63 locatedin(x,y) :    neighborof(x,z), locatedin(z,y).
0.32 locatedin(x,y) :    neighborof(x,z), neighborof(z,w), locatedin(w,y).
0.68 blockpositionindex(x,y) :    blockpositionindex(y,x).
0.46 expeldiplomats(x,y) :    negativebehavior(x,y).
0.38 negativecomm(x,y) :    commonbloc0(x,y).
0.38 intergovorgs3(x,y) :    intergovorgs(y,x).
0.88 interacts with(x,y) :    interacts with(x,z), interacts with(z,y).
0.77 isa(x,y) :    isa(x,z), isa(z,y).
0.71 derivative of(x,y) :    derivative of(x,z), derivative of(z,y).

tim rockt  aschel

end-to-end di   erentiable proving

26/30

outlook

tim rockt  aschel

end-to-end di   erentiable proving

27/30

outlook

question
question
my patient is not responding after
my patient is not responding after
three days of codeine treatment.
three days of codeine treatment.
what could have happened?
what could have happened?

user

tim rockt  aschel

end-to-end di   erentiable proving

27/30

outlook

databases

structured data
structured data

question
my patient is not responding after
three days of codeine treatment.
what could have happened?

user

tim rockt  aschel

end-to-end di   erentiable proving

27/30

outlook

databases

structured data
structured data

question
my patient is not responding after
three days of codeine treatment.
what could have happened?

user

teacher

explanations
explanations

tim rockt  aschel

end-to-end di   erentiable proving

27/30

outlook

question
my patient is not responding after
three days of codeine treatment.
what could have happened?

user

databases

structured data
structured data

publications

texttext

teacher

explanations
explanations

tim rockt  aschel

end-to-end di   erentiable proving

27/30

outlook

question
my patient is not responding after
three days of codeine treatment.
what could have happened?

user

databases

structured data
structured data

publications

texttext

teacher

explanations
explanations

tim rockt  aschel

end-to-end di   erentiable proving

27/30

outlook

databases

structured data

publications

text

question
my patient is not responding after
three days of codeine treatment.
what could have happened?

user

teacher

explanations

answer
morphine intoxication

tim rockt  aschel

end-to-end di   erentiable proving

27/30

outlook

databases

structured data

publications

text

teacher

explanations

question
my patient is not responding after
three days of codeine treatment.
what could have happened?

user

answer
morphine intoxication
proof
- codeine is metabolized to morphine
- mutation in cyp2d6 can cause ultrarapid metabolization
- ultrarapid metabolization can lead to morphine overdose
- morphine overdose is an intoxication

tim rockt  aschel

end-to-end di   erentiable proving

27/30

summary

we proposed various ways of regularizing vector representations of
symbols using rules

tim rockt  aschel

end-to-end di   erentiable proving

28/30

summary

we proposed various ways of regularizing vector representations of
symbols using rules
we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base

tim rockt  aschel

end-to-end di   erentiable proving

28/30

summary

we proposed various ways of regularizing vector representations of
symbols using rules
we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols

tim rockt  aschel

end-to-end di   erentiable proving

28/30

summary

we proposed various ways of regularizing vector representations of
symbols using rules
we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
symbolic rule application but neural uni   cation

tim rockt  aschel

end-to-end di   erentiable proving

28/30

summary

we proposed various ways of regularizing vector representations of
symbols using rules
we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
symbolic rule application but neural uni   cation
learns vector representations of symbols from data via id119

tim rockt  aschel

end-to-end di   erentiable proving

28/30

summary

we proposed various ways of regularizing vector representations of
symbols using rules
we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
symbolic rule application but neural uni   cation
learns vector representations of symbols from data via id119
induces interpretable rules from data via id119

tim rockt  aschel

end-to-end di   erentiable proving

28/30

summary

we proposed various ways of regularizing vector representations of
symbols using rules
we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
symbolic rule application but neural uni   cation
learns vector representations of symbols from data via id119
induces interpretable rules from data via id119
various computational optimizations: batch proving, tree pruning etc.

tim rockt  aschel

end-to-end di   erentiable proving

28/30

summary

we proposed various ways of regularizing vector representations of
symbols using rules
we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
symbolic rule application but neural uni   cation
learns vector representations of symbols from data via id119
induces interpretable rules from data via id119
various computational optimizations: batch proving, tree pruning etc.
future research:

tim rockt  aschel

end-to-end di   erentiable proving

28/30

summary

we proposed various ways of regularizing vector representations of
symbols using rules
we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
symbolic rule application but neural uni   cation
learns vector representations of symbols from data via id119
induces interpretable rules from data via id119
various computational optimizations: batch proving, tree pruning etc.
future research:

scaling up to larger knowledge bases

tim rockt  aschel

end-to-end di   erentiable proving

28/30

summary

we proposed various ways of regularizing vector representations of
symbols using rules
we used prolog   s backward chaining as recipe for recursively constructing a
neural network to prove queries to a knowledge base
proof success di   erentiable w.r.t. vector representations of symbols
symbolic rule application but neural uni   cation
learns vector representations of symbols from data via id119
induces interpretable rules from data via id119
various computational optimizations: batch proving, tree pruning etc.
future research:

scaling up to larger knowledge bases
connecting to id56s for proving with natural language statements

tim rockt  aschel

end-to-end di   erentiable proving

28/30

thank you!

http://rockt.github.com
tim.rocktaschel@cs.ox.ac.uk
twitter: @ rockt

references i

t. r. besold, a. s. d   avila garcez, s. bader, h. bowman, p. m. domingos, p. hitzler, k. k  uhnberger, l. c. lamb, d. lowd, p. m. v.
lima, l. de penning, g. pinkas, h. poon, and g. zaverucha. neural-symbolic learning and reasoning: a survey and interpretation.
corr, abs/1711.03902, 2017. url http://arxiv.org/abs/1711.03902.

g. bouchard, s. singh, and t. trouillon. on approximate reasoning capabilities of low-rank vector spaces. in proceedings of the 2015
aaai spring symposium on id99 and reasoning (krr): integrating symbolic and neural approaches, 2015.

w. w. cohen. tensorlog: a di   erentiable deductive database. corr, abs/1605.06523, 2016. url http://arxiv.org/abs/1605.06523.
r. das, a. neelakantan, d. belanger, and a. mccallum. chains of reasoning over entities, relations, and text using recurrent neural

networks. in conference of the european chapter of the association for computational linguistics (eacl), 2017. url
http://arxiv.org/abs/1607.01426.

a. s. d   avila garcez and g. zaverucha. the connectionist inductive learning and logic programming system. appl. intell., 11(1):59   77,

1999. doi: 10.1023/a:1008328630915. url http://dx.doi.org/10.1023/a:1008328630915.

a. s. d   avila garcez, k. broda, and d. m. gabbay. neural-symbolic learning systems: foundations and applications. springer science &

business media, 2012.

t. demeester, t. rockt  aschel, and s. riedel. lifted rule injection for relation embeddings. in proceedings of the 2016 conference on

empirical methods in natural language processing, emnlp 2016, austin, texas, usa, november 1-4, 2016, pages 1389   1399, 2016.
url http://aclweb.org/anthology/d/d16/d16-1146.pdf.

l. ding. neural prolog-the concepts, construction and mechanism. in systems, man and cybernetics, 1995. intelligent systems for the

21st century., ieee international conference on, volume 4, pages 3603   3608. ieee, 1995.

r. evans and e. grefenstette. learning explanatory rules from noisy data. corr, abs/1711.04574, 2017. url

http://arxiv.org/abs/1711.04574.

s. h  olldobler. a structured connectionist uni   cation algorithm. in proceedings of the 8th national conference on arti   cial intelligence.

boston, massachusetts, july 29 - august 3, 1990, 2 volumes., pages 587   593, 1990. url
http://www.aaai.org/library/aaai/1990/aaai90-088.php.

references ii

s. kok and p. m. domingos. statistical predicate invention. in machine learning, proceedings of the twenty-fourth international

conference (icml 2007), corvallis, oregon, usa, june 20-24, 2007, pages 433   440, 2007. doi: 10.1145/1273496.1273551. url
http://doi.acm.org/10.1145/1273496.1273551.

e. komendantskaya. uni   cation neural networks: uni   cation by error-correction learning. logic journal of the igpl, 19(6):821   847, 2011.

doi: 10.1093/jigpal/jzq012. url http://dx.doi.org/10.1093/jigpal/jzq012.

p. minervini, t. demeester, t. rockt  aschel, and s. riedel. adversarial sets for regularised neural link predictors. in proceedings of the

33rd conference on uncertainty in arti   cial intelligence (uai), 2017.

t. rockt  aschel and s. riedel. end-to-end di   erentiable proving. in advances in neural information processing systems 30: annual

conference on neural information processing systems 2017, 4-9 december 2017, long beach, ca, usa, pages 3791   3803, 2017.
url http://papers.nips.cc/paper/6969-end-to-end-differentiable-proving.

t. rockt  aschel, s. singh, and s. riedel. injecting logical background knowledge into embeddings for id36. in naacl hlt

2015, the 2015 conference of the north american chapter of the association for computational linguistics: human language
technologies, denver, colorado, usa, may 31 - june 5, 2015, pages 1119   1129, 2015. url
http://aclweb.org/anthology/n/n15/n15-1118.pdf.

l. sera   ni and a. s. d   avila garcez. logic tensor networks: deep learning and logical reasoning from data and knowledge. in proceedings
of the 11th international workshop on neural-symbolic learning and reasoning (nesy   16) co-located with the joint multi-conference
on human-level arti   cial intelligence (hlai 2016), new york city, ny, usa, july 16-17, 2016., 2016. url
http://ceur-ws.org/vol-1768/nesy16_paper3.pdf.

l. shastri. neurally motivated constraints on the working memory capacity of a production system for parallel processing: implications of a

connectionist model based on temporal synchrony. in proceedings of the fourteenth annual conference of the cognitive science
society: july 29 to august 1, 1992, cognitive science program, indiana university, bloomington, volume 14, page 159. psychology
press, 1992.

j. w. shavlik and g. g. towell. an approach to combining explanation-based and neural learning algorithms. connection science, 1(3):

231   253, 1989.

references iii

g. sourek, v. aschenbrenner, f. zelezn  y, and o. kuzelka. lifted relational neural networks. in proceedings of the nips workshop on

cognitive computation: integrating neural and symbolic approaches co-located with the 29th annual conference on neural
information processing systems (nips 2015), montreal, canada, december 11-12, 2015., 2015. url
http://ceur-ws.org/vol-1583/coconips_2015_paper_7.pdf.

g. g. towell and j. w. shavlik. knowledge-based arti   cial neural networks. artif. intell., 70(1-2):119   165, 1994. doi:

10.1016/0004-3702(94)90105-8. url http://dx.doi.org/10.1016/0004-3702(94)90105-8.

t. trouillon, j. welbl, s. riedel,   e. gaussier, and g. bouchard. complex embeddings for simple link prediction. in proceedings of the

33nd international conference on machine learning, icml 2016, new york city, ny, usa, june 19-24, 2016, pages 2071   2080, 2016.
url http://jmlr.org/proceedings/papers/v48/trouillon16.html.

b. yang, w. yih, x. he, j. gao, and l. deng. embedding entities and relations for learning and id136 in knowledge bases. in

international conference on learning representations (iclr), 2015. url http://arxiv.org/abs/1412.6575.

