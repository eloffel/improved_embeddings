   #[1]github [2]recent commits to thutag:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]37
     * [35]star [36]249
     * [37]fork [38]81

[39]yedeming/[40]thutag

   [41]code [42]issues 0 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   a package of keyphrase extraction and social tag suggestion, the
   project has moved to [47]https://github.com/thunlp/thutag
   [48]keyphrase-extraction
     * [49]62 commits
     * [50]1 branch
     * [51]0 releases
     * [52]fetching contributors

    1. [53]java 65.7%
    2. [54]c++ 30.0%
    3. [55]html 2.8%
    4. [56]javascript 0.6%
    5. [57]css 0.4%
    6. [58]makefile 0.2%
    7. other 0.3%

   (button) java c++ html javascript css makefile other
   branch: master (button) new pull request
   [59]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/y
   [60]download zip

downloading...

   want to be notified of new releases in yedeming/thutag?
   [61]sign in [62]sign up

launching github desktop...

   if nothing happens, [63]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [65]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [66]download the github extension for visual studio
   and try again.

   (button) go back
   yedeming
   yedeming [67]fix analyze bug
   latest commit [68]0633b3d may 31, 2018
   [69]permalink
   type         name          latest commit message    commit time
        failed to load latest commit information.
        [70].metadata
        [71].settings
        [72].svn
        [73]basepackage/smt
        [74]bin
        [75]build           [76]fix a bug in testdemo feb 17, 2016
        [77]demo
        [78]docs
        [79]giza-pp
        [80]lib             [81]first commit          nov 26, 2015
        [82]src             [83]fix analyze bug       may 31, 2018
        [84]traindata
        [85].classpath
        [86].project
        [87]command_example
        [88]onejar.mf
        [89]build.xml       [90]first commit          nov 26, 2015
        [91]readme.md
        [92]readme.md~
        [93]report.ods

readme.md

thutag: a package of kephrase extraction and social tag suggetion

   this project has been moved to [94]https://github.com/thunlp/thutag

   ==============

table of content

   part i : thutag contents

   part ii : how to compile thutag

   part iii : how to run cross-validation of thutag

   part iv : input file formats of cross-validation

   part v : output file formats of cross-validation

   part vi : how to run ui && testing a single passage of thutag

   part vii : input file formats of ui && testing a single passage

   part viii: output file formats of ui && testing a single passage

   part ix : literature

   part x : license

   part xi : authors

   part xii : appendix

part i: thutag contents

   the package contains mutiple algorithms for keyphrase extraction and
   social tag suggestion including a cross-validation evaluator.

   build :   working directory

   giza++ mkcls plain2snt.out : essential to running wtm/wam/wam*

   basepackage : some codes achieve things such as id40,
   id95 and so on

part ii: how to compile thutag

   environment : java (support java 1.8.0) , linux

   ant : start a terminal in the directory "thutag/", input command "ant"
   and then thutag will be compiled; or you can choose the build.xml for
   "ant build" in eclipse.

part iii: how to run cross-validation of thutag

   there are a lot of examples in file "command_example".and there is a
   demo in "/demo".you'd use commandline to run the algorithm beacuse it
   need to set the working ram.

   test a single algorithm using cross evaluation : specific commands can
   be found in file "command", a training class is corresponding to
   exactly a suggesting class. (part vii appendix show the correspondence
   between training class and suggesting class)

   parameters : --dataset="input file path" --trainer_class="name of
   training class" --suggester_class="name of suggesting class"
   --num_folds="num the file divided into"
   --config="parameter1=value1;parameter2=value2;..."(the parameters can
   be datatype, k, numtopics, niter, etc.. parameters vary with models and
   no parameter means using default values) --working_dir="working
   directory,a working directory is used for storing a model for one
   algorithm" --report="path of report"

   e.g. java -xmx5g -jar tagsuggest.jar evaluation.crossvalidator
   --dataset=/data/disk1/private/ydm/data/bookpost70000.dat
   --trainer_class=trainwtm --suggester_class=smttagsuggest --num_folds=5
   --config="datatype=doubanpost;para=0.5;minwordfreq=10;mintagfreq=10;sel
   ftrans=0.2;commonlimit=2" --working_dir=/data/disk1/private/ydm/trywtm/
   --at_n=10
   --report=/data/disk1/private/ydm/report/evaluation_wtmreal.txt

   -xmx5g is set the working ram.

   the default path of book.model and chinese_stop_word.txt is the same
   with the path of tagsuggest.jar. if you need change the path of them,
   you should add model="path of both of them" to --config. "book.model"
   is used for maximum forward word-segmentation for data that focus on
   books and "chinese_stop_word" records the stop words in chinese. e.g.
   --config="model=/home/meepo/tagsuggestion;datatype=doubanpost;"

   if you want to run smt, you need another three files giza++, mkcls, and
   plain2snt.out. their default path is the same with the path of
   tagsuggest.jar.

   if you need change the path of them, you should add --giza_path="path
   of them" as a parameter to the command.

   the evaluation results on douban post dataset (m_d=3,select the three
   tags with the highest value)
      algorithm     precision recall  f1
   pmi              0.38962   0.45730 0.36692
   wtm              0.36828   0.45131 0.35410
   knn              0.33910   0.37885 0.31103
   tam              0.30758   0.34045 0.28093
   naivebayes       0.27064   0.30223 0.24671
   noisetagldamodel 0.20956   0.20757 0.18054
   tagldamodel      0.15756   0.16646 0.14054

   the evaluation results on keyword post dataset (m_d=2,select the two
   keywords with the highest value)
        algorithm      precision recall  f1
   wam                 0.30735   0.43726 0.34747
   wamsample           0.29424   0.41814 0.33254
   wamwithtitleinstead 0.26571   0.37286 0.29849
   expandrankke        0.22818   0.31578 0.25461
   tpr                 0.21913   0.3060  0.24551
   tfidf               0.25459   0.20083 0.21876
   textid95        0.19833   0.22971 0.20837

   and if you use the file "chinese_stopword_more" to clean the adv.,conj.
   and so on,you may get better evaluation score.

part iv: datasets and formats for evaluation

   we share two datasets in "traindata/" for evaluation. the both datasets
   are in chinese. the keywordpost.dot is from netease news, which can be
   used for keyphrase extraction algorithm. the bookpost70000.dat and
   post.dat are from douban book, which can be used for social tag
   suggestion algorithm. the formats of these datasets are as follows:

   datatype=post : {"id":"document id","content":"document
   content","extras":"","resourcekey":"","timestamp":0,"title":"document
   title","userid":"","tags":["tag1","tag2","tag3",...]} (focus on books)

   example :
   {"id":"1004838","content":"            1964                                                                                             1985   
      2000                                                                                                                                    ","extras":"","resourc
   ekey":"","timestamp":0,"title":"      ","userid":"","tags":["      ","      ","      ",
   "            ","      "]} (demo file is post.dat)

   datatype=doubanpost :
   {"doubantags":{"tag1":weight,"tag2":weight,"tag3":weight,...},"id":"doc
   ument id","content":"document
   content","tags":[empty],"timestamp":0,"resourcekey":"","title":"documen
   t title","userid":"","extras":""} (focus on books)

   example :
   {"doubantags":{"      ":5,"                              ":6,"      ":29,"      ":17},"id":"1000047","c
   ontent":"                                                                                                                                                                                          
                                                                                                                                                                                                                        
                                                                                                                                                                                                                       
               ","tags":[],"timestamp":0,"resourcekey":"","title":"                              
               ","userid":"","extras":""} (demo file is bookpost70000.dat)

   the difference of the above two is that bookpost70000.dat is used for
   wtm/pmi because they need to know the weight of tags.and the other
   social tag suggestion algorithm uses post.dat.(see file
   "command_example")

   datatype=keywordpost : {"date": "news date","summary":"news
   summary"   "source":"news source","id":"document id","content":"document
   content","title":"news
   title","resourcekey":"","extras":"","userid":"","tags":["tag1","tag2","
   tag3",...]} (focus on news)

   example : {"date":"2010-6-12
   3:39:39","summary":"                                                                  2010   5   13               70                                       
                                       ","source":"[95]http://news.163.com/10/0612/03/68usu60d0001
   46bd.html","id":"0","content":"            6   11         
                                                         2010   5   13               70                                                                           \n      4   14            
                                                                                                                                                                                                                     5
      21                                                                                                               \n2   25                                                                           
                                                                                                                                                                                          20                        
   40                              326                              584                  
         \n","title":"                                             ","timestamp":0,"resourcekey":"","userid"
   :"","tags":["      ","      "],"extras":""} (demo file is keywordpost.dat)

   the keywordpost.dat is used for keyphrase extraction algorithm.

part v: output file formats of cross-validation

   the output is a text file,whose first seven columns are the major
   data.from the first column to the seventh column are these in order:
   the number of keywords that we ask the algorithm to output | precision
   rate(pre.) | the variance of precision rate | recall rate(rec.) | the
   variance of recall rate | fmeans | the variance of fmeans

   we have that 2 / fmeans = 1 / pre. +1 / rec.

part vi: how to run ui & test a single passage with thutag

   command for training model : java -xmx8g -jar tagsuggest.jar
   train.trainwtm --input=/home/meepo/test/sampleui/bookpost70000.dat
   --output=/home/meepo/test/sample
   --config="datatype=doubanpost;para=0.5;minwordfreq=10;mintagfreq=10;sel
   ftrans=0.2;commonlimit=2"

   "input" is the train data's address. "output" is where the model will
   be
   set.attention:traintopicid95/traintagldamodel/trainnoisetagldamodel
   will save the model as a file (rather than a directory),for example:
   java -xmx5g -jar tagsuggest.jar train.traintopicid95
   --input=/home/meepo/test/sample/keywordpost.dat
   --output=/home/meepo/test/sample/1.rar
   --config="datatype=keywordpost;numtopics=50;mintagfreq=10"

   "config" is the config of the model.

   command for running ui : java -xmx8g -jar tagsuggest.jar
   evaluation.guifrontend --model_path=/home/meepo/test/sampleui/
   --algorithm=smttagsuggest --config="" --realtime=true

   "model_path" is the model's address. "algorith" is the train class that
   we choose. "config" is the config of thetrain class.

   test a single passage : java -xmx8g -jar tagsuggest.jar
   evaluation.testdemo --model_path=/home/meepo/test/sampleui/
   --algorithm=smttagsuggest --config=""
   --article_path=/home/meepo/text.txt --output_path=/home/meepo/tag.txt

   "model_path" is the model's address. "algorith" is the train class that
   we choose. "config" is the config of thetraiclass.

   the default path of book.model and chinese_stop_word.txt is the same
   with the path of tagsuggest.jar. if you need change the path of them,
   you should add model="path of both of them" to --config. "book.model"
   is used for maximum forward word-segmentation for data that focus on
   books and "chinese_stop_word" records the stop words in chinese. e.g.
   --config="model=/home/meepo/tagsuggestion;datatype=doubanpost;"

   if you want to run wtm/wam/wam*, you need another three files giza++,
   mkcls, and plain2snt.out. their default path is the same with the path
   of tagsuggest.jar.if you need change the path of them, you should add
   --giza_path="path of them" as a parameter to the command.

part vii: input file formats of ui & testing a single passage

   in the ui interface,you can input text directly. and when test a
   individual text file,the text file must contains two lines:the first
   line is the title of the article and the second line is the content of
   the article.you can change the format in evaluation.testdemo's
   dosuggest.

part viii: output file formats of ui & testing a single passage

   in the ui interface,our program will show the keywords to the screen
   directly. and when test a individual text file,the program will give
   back a text file with ten keywords that the algorithm forecast and
   their corresponding weights.

part ix: literature

   if you are using the package, please acknowledge the package by citing
   the paper:
xinxiong chen, deming ye, xiance si, zhiyuan liu and maosong sun. thutag: a pack
age for keyphrase extraction and social tag suggestion. 2016.

   if you   re dealing in depth with particular algorithms, you are also
   encouraged to cite the papers that cover individual algorithms as
   follows:
   keyphrase extraction papers
   wam zhiyuan liu, xinxiong chen, yabin zheng, maosong sun. automatic
   keyphrase extraction by bridging vocabulary gap. the 15th conference on
   computational natural language learning (conll 2011).
   tpr zhiyuan liu, wenyi huang, yabin zheng, maosong sun. automatic
   keyphrase extraction via topic decomposition. the conference on
   empirical methods in natural language processing (emnlp 2010), 2010.
   expandrank xiaojun wan, jianguo xiao. single document keyphrase
   extraction using neighborhood knowledge. the 23rd aaai conference on
   artificial intelligence (aaai 2008).
   textrank mihalcea, r. and tarau, p. textrank: bringing order into
   texts. the conference on empirical methods in natural language
   processing (emnlp 2004).
   social tagging papers
   pmi xinxiong chen, zhiyuan liu, maosong sun. estimating translation
   probabilities for social tag suggestion. id109 with
   applications.
   taglda xiance si, maosong sun. tag-lda for scalable real-time tag
   recommendation. journal of computational information systems 6 (1),
   23-31.
   tam xiance si, zhiyuan liu, maosong sun. modeling social annotations
   via latent reason identification. ieee intelligent systems, 2010.
   wtm zhiyuan liu, xinxiong chen, maosong sun. a simple word trigger
   method for social tag suggestion. the conference on empirical methods
   in natural language processing (emnlp 2011).

part x: license

   thutag is licensed under the gnu general public license (v3 or later).
   note that the license is the full gpl, which allows many free uses, but
   not its use in proprietary software which is distributed to others. for
   distributors of proprietary software, commercial licensing is available
   from tsinghua university. you can contact us at [96]thunlp@gmail.com .

part xi: authors

   contributors: xinxiong chen, deming ye, xiance si, zhiyuan liu.

   supervisor: prof. maosong sun.

   for any questions about this package, you can contact us at
   [97]thunlp@gmail.com .

part xii: appendix

   the correspondence between training class and suggesting class there
   are a lot of examples in file "command_example".
        training class      suggesting class
   trainexpandrank          expandrankke
   trainknn                 knntagsuggest
   trainnaivebayes          naivebayestagsuggest
   trainnoisetagldamodel    noisetagladatagsuggest
   trainpmi                 pmitagsuggest
   traintagldamodel         tagldatagsuggest
   traintam                 tamtagsuggest
   traintfidf               tfidftagsuggest
   traintopicid95       topicid95tagsuggest
   trainwam                 smtkeywordtagsuggest/smttagsuggest
   trainwamsample           smtkeywordtagsuggest/smttagsuggest
   trainwamwithtitleinstead smttagsuggest
   trainwtm                 smttagsuggest
   traintextid95        textid95tagsuggest

     *    2019 github, inc.
     * [98]terms
     * [99]privacy
     * [100]security
     * [101]status
     * [102]help

     * [103]contact github
     * [104]pricing
     * [105]api
     * [106]training
     * [107]blog
     * [108]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [109]reload to refresh your
   session. you signed out in another tab or window. [110]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/yedeming/thutag/commits/master.atom
   3. https://github.com/yedeming/thutag#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/yedeming/thutag
  32. https://github.com/join
  33. https://github.com/login?return_to=/yedeming/thutag
  34. https://github.com/yedeming/thutag/watchers
  35. https://github.com/login?return_to=/yedeming/thutag
  36. https://github.com/yedeming/thutag/stargazers
  37. https://github.com/login?return_to=/yedeming/thutag
  38. https://github.com/yedeming/thutag/network/members
  39. https://github.com/yedeming
  40. https://github.com/yedeming/thutag
  41. https://github.com/yedeming/thutag
  42. https://github.com/yedeming/thutag/issues
  43. https://github.com/yedeming/thutag/pulls
  44. https://github.com/yedeming/thutag/projects
  45. https://github.com/yedeming/thutag/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/thunlp/thutag
  48. https://github.com/topics/keyphrase-extraction
  49. https://github.com/yedeming/thutag/commits/master
  50. https://github.com/yedeming/thutag/branches
  51. https://github.com/yedeming/thutag/releases
  52. https://github.com/yedeming/thutag/graphs/contributors
  53. https://github.com/yedeming/thutag/search?l=java
  54. https://github.com/yedeming/thutag/search?l=c++
  55. https://github.com/yedeming/thutag/search?l=html
  56. https://github.com/yedeming/thutag/search?l=javascript
  57. https://github.com/yedeming/thutag/search?l=css
  58. https://github.com/yedeming/thutag/search?l=makefile
  59. https://github.com/yedeming/thutag/find/master
  60. https://github.com/yedeming/thutag/archive/master.zip
  61. https://github.com/login?return_to=https://github.com/yedeming/thutag
  62. https://github.com/join?return_to=/yedeming/thutag
  63. https://desktop.github.com/
  64. https://desktop.github.com/
  65. https://developer.apple.com/xcode/
  66. https://visualstudio.github.com/
  67. https://github.com/yedeming/thutag/commit/0633b3d724c42eff8344da2d12b3a1d043c54e46
  68. https://github.com/yedeming/thutag/commit/0633b3d724c42eff8344da2d12b3a1d043c54e46
  69. https://github.com/yedeming/thutag/tree/0633b3d724c42eff8344da2d12b3a1d043c54e46
  70. https://github.com/yedeming/thutag/tree/master/.metadata
  71. https://github.com/yedeming/thutag/tree/master/.settings
  72. https://github.com/yedeming/thutag/tree/master/.svn
  73. https://github.com/yedeming/thutag/tree/master/basepackage/smt
  74. https://github.com/yedeming/thutag/tree/master/bin
  75. https://github.com/yedeming/thutag/tree/master/build
  76. https://github.com/yedeming/thutag/commit/2b9b0bb1438c8c3db398d7f69f7c9ff39e6f65a5
  77. https://github.com/yedeming/thutag/tree/master/demo
  78. https://github.com/yedeming/thutag/tree/master/docs
  79. https://github.com/yedeming/thutag/tree/master/giza-pp
  80. https://github.com/yedeming/thutag/tree/master/lib
  81. https://github.com/yedeming/thutag/commit/89198296b0ed78a555c5453a31135820c7af2b4b
  82. https://github.com/yedeming/thutag/tree/master/src
  83. https://github.com/yedeming/thutag/commit/0633b3d724c42eff8344da2d12b3a1d043c54e46
  84. https://github.com/yedeming/thutag/tree/master/traindata
  85. https://github.com/yedeming/thutag/blob/master/.classpath
  86. https://github.com/yedeming/thutag/blob/master/.project
  87. https://github.com/yedeming/thutag/blob/master/command_example
  88. https://github.com/yedeming/thutag/blob/master/onejar.mf
  89. https://github.com/yedeming/thutag/blob/master/build.xml
  90. https://github.com/yedeming/thutag/commit/89198296b0ed78a555c5453a31135820c7af2b4b
  91. https://github.com/yedeming/thutag/blob/master/readme.md
  92. https://github.com/yedeming/thutag/blob/master/readme.md~
  93. https://github.com/yedeming/thutag/blob/master/report.ods
  94. https://github.com/thunlp/thutag
  95. http://news.163.com/10/0612/03/68usu60d000146bd.html","id":"0","content":"            6   11         
  96. mailto:thunlp@gmail.com
  97. mailto:thunlp@gmail.com
  98. https://github.com/site/terms
  99. https://github.com/site/privacy
 100. https://github.com/security
 101. https://githubstatus.com/
 102. https://help.github.com/
 103. https://github.com/contact
 104. https://github.com/pricing
 105. https://developer.github.com/
 106. https://training.github.com/
 107. https://github.blog/
 108. https://github.com/about
 109. https://github.com/yedeming/thutag
 110. https://github.com/yedeming/thutag

   hidden links:
 112. https://github.com/
 113. https://github.com/yedeming/thutag
 114. https://github.com/yedeming/thutag
 115. https://github.com/yedeming/thutag
 116. https://help.github.com/articles/which-remote-url-should-i-use
 117. https://github.com/yedeming/thutag#thutag-a-package-of-kephrase-extraction-and-social-tag-suggetion
 118. https://github.com/yedeming/thutag#table-of-content
 119. https://github.com/yedeming/thutag#part-i-thutag-contents
 120. https://github.com/yedeming/thutag#part-ii-how-to-compile-thutag
 121. https://github.com/yedeming/thutag#part-iii-how-to-run-cross-validation-of-thutag
 122. https://github.com/yedeming/thutag#part-iv-datasets-and-formats-for-evaluation
 123. https://github.com/yedeming/thutag#part-v-output-file-formats-of-cross-validation
 124. https://github.com/yedeming/thutag#part-vi-how-to-run-ui--test-a-single-passage-with-thutag
 125. https://github.com/yedeming/thutag#part-vii-input-file-formats-of-ui--testing-a-single-passage
 126. https://github.com/yedeming/thutag#part-viii-output-file-formats-of-ui--testing-a-single-passage
 127. https://github.com/yedeming/thutag#part-ix-literature
 128. https://github.com/yedeming/thutag#part-x-license
 129. https://github.com/yedeming/thutag#part-xi-authors
 130. https://github.com/yedeming/thutag#part-xii-appendix
 131. https://github.com/
