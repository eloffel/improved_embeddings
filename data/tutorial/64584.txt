   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]become a member[7]sign in[8]get started
     __________________________________________________________________

node.js meets opencv   s deep neural networks         fun with tensorflow and caffe

opencv         node.js tutorial series

   [9]go to the profile of vincent m  hler
   [10]vincent m  hler (button) blockedunblock (button) followfollowing
   dec 7, 2017
   [1*2riw3a_ehbfe-htllt1flg.jpeg]

   welcome back to yet another node.js         opencv tutorial. today we are
   going to take a look at opencv   s deep neural networks module.

   if you want to unleash the awesomeness of neural nets to recognize and
   classify objects in images, but, just like me, have absolutely no clue
   how deep learning works, let alone how to build and train a neural net
   on your own, then i have some good news for you!

so what are we going to build today?

   in this tutorial we are going to learn how to load pretrained models
   from tensorflow and caffe with opencv   s dnn module and we will dive
   into two examples for object recognition with node.js and opencv.

   first we will use tensorflow   s inception model to recognize the object
   shown in an image and after that we will use a coco ssd model to detect
   and recognize multiple different objects in a single image.

   let   s see how it works! as always the source code of the examples can
   be found on my [11]github repo.
     __________________________________________________________________

   this article is part of an [12]opencv         node.js tutorial series. make
   sure to check out my other articles as well:
     * [13]node.js + opencv for face recognition
     * [14]simple hand gesture recognition using opencv and javascript
     * [15]machine learning with opencv and javascript: recognizing
       handwritten letters using hog and id166
     __________________________________________________________________

tensorflow inception

   the [16]tensorflow inception model has been trained to recognize
   objects of ~1000 classes. if you feed an image to the network it will
   spit out the likelihood of each class for the object shown in the
   image.

   to use the inception model with opencv we have to load the binary
      tensorflow_inception_graph.pb    and the list of class names from
      id163_comp_graph_label_strings.txt   . you can get these files by
   downloading and unzipping    inception5h.zip    (see [17]sample code for
   link).

   iframe: [18]/media/1a09ae57040675bd96e813e142037436?postid=ff8d52a0f072

classifying objects in an image

   to classify the object of an image we will write the following helper
   function:

   iframe: [19]/media/313e453e524ef29fa1bf6ff0c76b04d0?postid=ff8d52a0f072

   this function does the following things:

prepare the input image

   first of all we have to know, that the tensorflow inception net accepts
   224x224 sized input images. that   s the reason why we resize the image
   such that it   s largest dimension is 224 and we pad the image   s
   remaining dimension with white pixels, such that the width = height
   (padtosquare).

pass the image through the network

   we can simply create a blob from the image and call net.forward() to
   forward pass the input and retrieve the output blob.

extract the result from the output blob

   for the purpose of generalization, the output blob is simply expressed
   as a matrix (cv.mat) and it   s dimensionality depends on the model. with
   inception it   s easy. the blob simply is a 1xn matrix (where n equals
   the number of classes), which describes the id203 distribution
   for all classes. each entry holds a floating number representing the
   confidence for the corresponding class. the entries add up to 1.0
   (100%) in total.

   we want to take a closer look at the most probable classes for our
   image, thus we are looking for the classes with a confidence larger
   than a minconfidence (5% in this example).

   that   s easy to achieve, we will simply threshold all values in the
   matrix by 0.05 and find all entries, which are not set to zero
   (findnonzero). lastly we will sort the result by confidence and return
   the pairs of classname with confidence.

test it!

   now we will read some sample data that we want the network to
   recognize:

   iframe: [20]/media/b66c5c386b0813111e8bfc687b40d9a6?postid=ff8d52a0f072

   if we run the prediction for each image we will get the following
   output (or see title image):
banana:
banana (0.95)
husky:
siberian husky (0.78)
eskimo dog (0.21)
car:
sports car (0.57)
racer (0.12)
lenna:
sombrero (0.34)
cowboy hat (0.3)

   quite interesting. we get a pretty precise description for the contents
   of the husky and banana image. for the car we may get different
   categories of cars but we can definitely say that it   s a car shown in
   the image. of course the net can not be trained on infinite classes,
   which is why it does not return some description like    woman    for the
   last image. however, it recognizes the hat.

coco ssd

   ok that worked pretty well, but how do we deal with images that show
   multiple objects. well to recognize multiple objects in a single image,
   we will utilize what   s called a single shot multibox detector (ssd). in
   our second example we will look at a ssd model trained with the
   [21]coco (common object in context) dataset. the model we are using has
   been trained on 84 different classes.

   since this one comes as a caffe model we have to load a binary
      vgg_coco_ssd_300x300_iter_400000.caffemodel    as well as a protoxt file
      deploy.prototxt   :

   iframe: [22]/media/bf567dff616f58e531cd222552a9495d?postid=ff8d52a0f072

classification with coco

   our classify function looks mostly the same as with inception, but this
   time the input will be 300x300 images and the output will be a 1x1xnx7
   matrix.

   iframe: [23]/media/490caac3dde40bb39b485c4d5b926428?postid=ff8d52a0f072

   i am not quite sure why the output is a 1x1xnx7 matrix, but we are
   actually only interested in the nx7 part. to map the 3rd and 4th
   dimension into a 2d matrix we can use the flattenfloat utility.
   comparing this one to the inception output matrix, this time n does not
   correspond to each class but to each object detected. furthermore we
   end up with 7 entries now per object.

why 7 entries?

   remember, the problem is a little bit different here. we wanted to
   detect multiple objects per image, thus we can not only give each class
   a confidence value. what we actually want to have is a rectangle
   indicating the each object   s location in the image. below you can find
   what each entry corresponds to:

   0. i actually have no clue.
   1. the class label of the object
   2. it   s confidence
   3. leftmost x of the rectangle
   4. bottom y of the rectangle
   5. rightmost x of the rectangle
   6. top y of the rectangle

   the output matrix gives us quite some information about the result,
   which is pretty neat. we can filter the result by confidences again and
   draw rectangles into the image for each recognized object.

let   s see it in action!

   for the sake of simplicity i will skip the code for drawing the
   rectangles and all the other stuffs for visualization. if you want to
   know how to do that you can look at the sample code.

   let   s feed an image with cars into the network and filter the result
   for detections with the classname    car   :
   [1*l9tmlsxsjmclrex_gnahgw.png]

   nice! and now something more difficult. let   s try uid48    a breakfast
   table maybe?
   [1*ygb0n-hbgb-we-quu7q_4q.png]

   there we go!

some final words

   that   s how you can use opencv and node.js to recognize objects in
   images with neural nets. if you want to play around it i would
   recommend checking out the [24]caffe model zoo, which offers a bunch of
   trained models for different usecases, which you can simply download.

   if you did some awesome stuff with dnns in opencv, i would love to know
   about! feel free to leave a comment below.

   if you liked this article feel free to clap and comment. i would also
   highly appreciate supporting the [25]opencv4nodejs project by leaving a
   star on github. furthermore feel free to contribute or get in touch if
   you are interested :).
     __________________________________________________________________

   opencv4nodejs is an npm package, which provides node.js bindings to
   [26]opencvand [27]opencv-contrib through an asynchronous api. the
   package brings all the performance benefits of the native opencv
   library to your node.js application and allows to easily implement
   multithreaded cv tasks via promises.

     * [28]opencv
     * [29]nodejs
     * [30]tutorial
     * [31]javascript
     * [32]deep learning

   (button)
   (button)
   (button) 2.1k claps
   (button) (button) (button) 14 (button) (button)

     (button) blockedunblock (button) followfollowing
   [33]go to the profile of vincent m  hler

[34]vincent m  hler

   bringing opencv to javascript
   [35]https://github.com/justadudewhohacks/opencv4nodejs

     * (button)
       (button) 2.1k
     * (button)
     *
     *

   [36]netscape
   never miss a story from netscape, when you sign up for medium.
   [37]learn more
   never miss a story from netscape
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/ff8d52a0f072
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/membership?source=upgrade_membership---nav_full
   7. https://medium.com/m/signin?redirect=https://medium.com/@muehler.v/node-js-meets-opencvs-deep-neural-networks-fun-with-tensorflow-and-caffe-ff8d52a0f072&source=--------------------------nav_reg&operation=login
   8. https://medium.com/m/signin?redirect=https://medium.com/@muehler.v/node-js-meets-opencvs-deep-neural-networks-fun-with-tensorflow-and-caffe-ff8d52a0f072&source=--------------------------nav_reg&operation=register
   9. https://medium.com/@muehler.v?source=post_header_lockup
  10. https://medium.com/@muehler.v
  11. https://github.com/justadudewhohacks/opencv4nodejs
  12. https://opencv.org/
  13. https://medium.com/@muehler.v/node-js-opencv-for-face-recognition-37fa7cb860e8
  14. https://medium.com/@muehler.v/simple-hand-gesture-recognition-using-opencv-and-javascript-eb3d6ced28a0
  15. https://medium.com/@muehler.v/machine-learning-with-opencv-and-javascript-part-1-recognizing-handwritten-letters-using-hog-and-88719b70efaa
  16. https://www.tensorflow.org/tutorials/image_recognition
  17. https://github.com/justadudewhohacks/opencv4nodejs/blob/master/examples/dnntensorflowinception.js
  18. https://medium.com/media/1a09ae57040675bd96e813e142037436?postid=ff8d52a0f072
  19. https://medium.com/media/313e453e524ef29fa1bf6ff0c76b04d0?postid=ff8d52a0f072
  20. https://medium.com/media/b66c5c386b0813111e8bfc687b40d9a6?postid=ff8d52a0f072
  21. http://cocodataset.org/
  22. https://medium.com/media/bf567dff616f58e531cd222552a9495d?postid=ff8d52a0f072
  23. https://medium.com/media/490caac3dde40bb39b485c4d5b926428?postid=ff8d52a0f072
  24. https://github.com/bvlc/caffe/wiki/model-zoo
  25. https://github.com/justadudewhohacks/opencv4nodejs
  26. https://opencv.org/
  27. https://docs.opencv.org/3.1.0/d3/d81/tutorial_contrib_root.html
  28. https://medium.com/tag/opencv?source=post
  29. https://medium.com/tag/nodejs?source=post
  30. https://medium.com/tag/tutorial?source=post
  31. https://medium.com/tag/javascript?source=post
  32. https://medium.com/tag/deep-learning?source=post
  33. https://medium.com/@muehler.v?source=footer_card
  34. https://medium.com/@muehler.v
  35. https://github.com/justadudewhohacks/opencv4nodejs
  36. https://medium.com/netscape
  37. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  39. https://medium.com/p/ff8d52a0f072/share/twitter
  40. https://medium.com/p/ff8d52a0f072/share/facebook
  41. https://medium.com/p/ff8d52a0f072/share/twitter
  42. https://medium.com/p/ff8d52a0f072/share/facebook
