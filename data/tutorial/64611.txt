   #[1]rubik's code    feed [2]rubik's code    comments feed [3]rubik's code
      implementation of convolutional neural network using python and keras
   comments feed [4]alternate [5]alternate

   [6]skip to content

     * [7]linkedin
     * [8]twitter
     * [9]git
     * [10]fb

   [11]rubik's code

   machine learning without tears

     * products
          + [12]introducing test driven development in c#     video course
          + [13]test driven development with c# and .net core mvc     video
            course
          + [14]real-world machine learning projects with sci-kit learn
     * [15]articles
     * [16]series
          + [17]id158s series
               o [18]introduction to id158s
               o [19]common neural network id180
               o [20]how do id158s learn?
               o [21]id26 algorithm in artificial neural
                 networks
               o [22]implementing simple neural network in c#
               o [23]introduction to tensorflow     with python example
               o [24]implementing simple neural network using keras     with
                 python example
               o [25]introduction to convolutional neural networks
               o [26]implementation of convolutional neural network using
                 python and keras
               o [27]introduction to recurrent neural networks
               o [28]understanding id137 (lstms)
               o [29]two ways to implement lstm network using python    
                 with tensorflow and keras
          + [30]gan series
               o [31]introduction to id3
                 (gans)
               o [32]implementing gan & dcgan with python
               o [33]introduction to adversarial autoencoders
               o [34]generating images using adversarial autoencoders and
                 python
               o [35]implementing cyclegan using python
               o [36]introduction to cyclegan
          + [37]machine learning with ml.net
               o [38]ultimate guide to machine learning with ml.net
               o [39]using ml.net     introduction to machine learning and
                 ml.net
               o [40]machine learning with ml.net     solving real-world
                 regression problem (bike sharing demands)
               o [41]machine learning with ml.net     solving real-world
                 classification problem (wine quality)
               o [42]machine learning in ml.net     using machine learning
                 model in asp.net core application
               o [43]machine learning with ml.net     comparing data
                 exploration in python with data exploration in ml.net
          + [44]asynchronous programming in .net
               o [45]motivation and unit testing
               o [46]common mistakes and best practices
               o [47]task-based asynchronous pattern (tap)
               o [48]benefits and tradeoffs of using valuetask
          + [49]self- organizing maps series
               o [50]introduction to self-organizing maps
               o [51]implementing self-organizing maps with python and
                 tensorflow
               o [52]implementing self-organizing maps with .net core
               o [53]credit card fraud detection using self-organizing
                 maps and python
          + [54]restricted id82 series
               o [55]introduction to restricted id82s
               o [56]implementing restricted id82 with python
                 and tensorflow
               o [57]implementing restricted id82 with .net
                 core
               o [58]generate music using tensorflow and python
          + [59]mongodb series
               o [60]introduction to nosql and polyglot persistence
               o [61]mongodb basics     part 1.
               o [62]mongo db basics     part 2.
               o [63]using mongodb in c#
               o [64]mean stack crash course     using mongodb with node.js,
                 express and angular 4
               o [65]serverless and playing around with mongodb atlas
          + [66]philosophy as motivational tool for software crafters
            series
               o [67]how to use miyamoto musashi   s philosophy to become
                 better software crafter
               o [68]how to use marcus aurelius   s meditations to become
                 better software crafter
               o [69]   how to use friedrich nietzsche   s philosophy to be
                 better software crafter
               o [70]how to use    art of war    to be better software crafter
     * categories
          + [71]ai
          + [72]machine learning
          + [73].net
          + [74]python
          + [75]nosql
     * [76]about
     * [77]contact

   (button) open a search box close a search box search for:
   ____________________ (button) search

implementation of convolutional neural network using python and keras

   [78]march 5, 2018 by [79]rubikscode [80]leave a comment

   have you ever wondered, how does snapchat detect faces? how do
   self-driving cars know where a road is? you are right, they are using
   special kind of neural networks used for id161    
   convolutional neural networks. in the [81]previous article, we had a
   chance to examine how they work. we covered layers of these networks
   and their functionalities. basically, additional layers of
   convolutional neural networks preprocess image in the format that
   standard neural network can work with. the first step in doing so is
   detecting certain features or attributes on the input image. this is
   done by convolutional layer.

   this layer use filters to detect low-level features, like edges and
   curves, as well as higher levels features, like a face or a hand. than
   convolutional neural network use additional layers to remove linearity
   from the image, something that could cause overfitting. when linearity
   is removed, additional layers for compressing the image and flattening
   the data are used. finally, this information is passed into a neural
   network, called fully-connected layer in the world of convolutional
   neural networks. again, the goal of this article is to show you how to
   implement all these concepts, so more details about these layers, how
   they work and what is the purpose of each of them can be found in
   the [82]previous article.

   [tnkq3tf.png?w=720&#038;ssl=1]

   before we wander off into the problem we are solving and the code
   itself make sure to setup your environment. as in all previous articles
   from this [83]series, i will be using python 3.6. also, i am using
   anaconda and spyder, but you can use any ide that you preffer. however,
   the important thing to do is to install tensorflow and keras.
   instructions for installing and using tensorflow can be found [84]here,
   while instructions for installing and using keras are [85]here.

mnist dataset

   so, in this article, we will teach our network how to recognize digits
   in the image. for this, we will use another famous dataset     mnist
   dataset. extending its predecessor [86]nist, this dataset has a
   training set of 60,000 samples and testing set of 10,000 images of
   handwritten digits. all digits have been size-normalized and centered.
   size of the images is also fixed, so preprocessing image data is
   minimized. this is why this dataset is so popular. it is considered to
   be a    hello world    example in the world of convolutional neural
   networks.

   [dmrut6k.png?w=720&#038;ssl=1]

mnist dataset samples

   also, using convolutional neural networks we can get almost human
   results. currently, the record is held by the parallel computing center
   (khmelnitskiy, ukraine). they used an ensemble of only 5 convolutional
   neural networks and got the error rate of 0.21 percent. pretty cool,
   isn   t it?

importing libraries and data

   like in previous articles in this [87]series, we will first import all
   necessary libraries. some of these will be familiar, but some of them
   we will explain a bit further.

   as you can see we will be using numpy, the library that we already used
   in previous examples for operations on multi-dimensional arrays and
   matrices. also, you can see that we are using some features from keras
   libraries that we already used in [88]this article, but also a couple
   of new ones. sequential and dense are used for creating the model and
   standard layers, ie. fully-connected layer.

   also, we can see some new classes we use from keras. conv2d is class
   that we will use to create a convolutional layer. maxpooling2d is class
   used for pooling layer, and flatten class is used for flattening level.
   we use to_categorical from keras utils as well. this class is used to
   convert a vector (integers) to a binary class matrix, ie. it is used
   for [89]one-hot encoding. finally, notice that we will
   use matplotlib for displaying the results.

   after we imported all necessary libraries and classes, we need to take
   care of the data. lucky for us, keras provided mnist dataset so we
   don   t need to download it. as mentioned, all these images are already
   partially preprocessed. this means that they are having same size and
   digits displayed on them are properly positioned. so, let   s import this
   dataset and prepare data for our model:

   as you can see we imported mnist dataset from the keras datasets. then
   we loaded data in train and test matrices. after that, we got the
   dimensions of images using shape property and reshaped input data so it
   represents one channel input images. basically, we are using just one
   channel of this image, not the regular three (rgb). this is done to
   simplify this implementation. then we normalized the data in the input
   matrixes. in the end, we encoded the output matrixes
   using to_categorical.

model creation

   now, when data is prepared, we can proceed to the fun stuff     the
   creation of the model:

   we used sequential for this, of course, and started off by adding
   convolutional layers using conv2d class. as you can see there are few
   parameters this class is using, so let   s explore them. the first
   parameter is defining a number of filters that will be used, ie. number
   of features that will be detected. it is a common procedure to start
   from 32 and then go to bigger number of features from that moment on.
   that is exactly what we are doing, in first convolutional layer we are
   detecting 32 features, in second 64 and in third and final 128
   features. size of the filters that will be used is defined using next
   parameter     kernel_size, and we have chosen 3 by 3 filters.

   for the activation function, we are using rectifier function. this way
   we are adding non-linearity level automatically with every
   convolutional layer. another way to achieve this, and a bit more
   advanced, is by using leakyrelu form keras.layers.advanced_activations.
   this is not like standard rectifier function, but instead of squashing
   all values that are below a certain value to 0 it has a slight negative
   slope. if you decide to use this, beware that you have to use linear
   activation in conv2d. here is an example how that would look like:

   we digressed for a bit. let   s get back to conv2d and its parameters.
   another very important parameter is input_shape. using this parameter
   we are defining dimensions of our input image. as mentioned, we are
   only using one channel, that is why the final dimension our input_shape
   is 1. other dimensions we picked up from an input image.

   also, we added other layers to our model too. dropout layer is helping
   us with overfitting, and after that, we added pooling layer by
   using maxpooling2d class. this layer is apparently using the max-pool
   algorithm, and size of the pooling filter is 2 by 2. pooling layer is
   followed by flattening layer, which is followed by fully-connected
   layer. for the final fully-connected layer we added the neural network
   with two layers, for which we used dense class. in the end, we compiled
   our model, and we used adam optimizer.

   if you are struggling with some of these concepts, you can check
   [90]previous blog post where mechanisms of convolutional layers are
   explained. also, if you have a problem with following some keras
   concepts, this [91]blog post can help you.

training

   very well, our data is pre-processed and our model created. let   s merge
   them together, and train our model. for this we are using, already
   familiar, function fit. we pass the input matrices and
   define batch_size and number of epochs. another thing we are doing is
   defining validation_split. this parameter is used to define which
   fraction of testing data is going to be used as validation data.

   basically, the model will set aside part of training data, but it will
   use it to evaluate the loss and other model metrics at the end of each
   epoch. this is not the same as testing data because we are using it
   after every epoch.

   after that our model is trained and ready. we are using evaluate method
   and pass testing set to it. here we will get the accuracy of our
   convolutional neural network.

predictions

   one more thing we could do is to gather predictions of our network on
   the test dataset. this way we can compare predicted results with actual
   ones. for this, we will use predict method. using this method we can
   also make predictions on a single input.

results

   let   s use these predictions we just gathered for the final touch of our
   implementation. we are going to display predicted digit, with the
   actual one. and we will display the image for which we made the
   prediction. basically, we will make nice visual representation for our
   implementation, after all, we are processing images here.

   here we used pyplot to display ten images with actual result and our
   predictions. and this is how it looks like when we run our
   implementation:

   [q70wn55.png?w=720&#038;ssl=1]

   we have run twenty epochs and got the accuracy     99.39%. not bad at
   all. there is always room for improvement, of course.

conclusion

   convolutional neural networks are one very interesting sub-field and
   one of the most influential innovations in the field of computer
   vision. here you could see how to implement one simple version of these
   networks and how to use it for detecting digits on mnist dataset.

   thanks for reading!
     __________________________________________________________________

   this article is a part of  [92]id158s series.
     __________________________________________________________________

   read more posts from the author at [93]rubik   s code.
     __________________________________________________________________

   [94]codeproject

share:

     * [95]click to share on twitter (opens in new window)
     * [96]click to share on facebook (opens in new window)
     *

like this:

   like loading...

   posted in: [97]ai
   tagged: [98]ai [99]artificaial inteligance [100]artificial neural
   networks [101]convolutional neural networks [102]machine learning
   [103]neural networks [104]python [105]software development

post navigation

   previous entry:[106]introduction to convolutional neural networks
   next entry:[107]introduction to recurrent neural networks

leave a reply [108]cancel reply

   iframe: [109]jetpack_remote_comment

   this site uses akismet to reduce spam. [110]learn how your comment data
   is processed.

subscribe to rubik's code via email

   email address ____________________

   (button) subscribe

video courses

     * introducing test driven development in c#
     * test driven development with c# and .net core mvc
     * real-world machine learning projects with scikit-learn

follow rubik   s code

     * [111]linkedin
     * [112]twitter
     * [113]github
     * [114]facebook

   close and accept
   privacy & cookies: this site uses cookies. by continuing to use this
   website, you agree to their use.
   to find out more, including how to control cookies, see here: [115]info

   (button) go to the top

products

     * [116]introducing test driven development in c#
     * [117]test driven development with c# and .net core mvc
     * [118]real-world machine learning projects with sci-kit learn

series

     * [119]id158s series
     * [120]machine learning with ml.net series
     * [121]asynchronous programming in .net series
     * [122]mongodb series
     * [123]philosophy as motivational tool for software crafters series

rubik   s code

     * [124]about
     * [125]contact

     * [126]linkedin
     * [127]twitter
     * [128]git
     * [129]fb

   iframe: [130]likes-master

   %d bloggers like this:

references

   visible links
   1. https://rubikscode.net/feed/
   2. https://rubikscode.net/comments/feed/
   3. https://rubikscode.net/2018/03/05/implementation-of-convolutional-neural-network-using-python-and-keras/feed/
   4. https://rubikscode.net/wp-json/oembed/1.0/embed?url=https://rubikscode.net/2018/03/05/implementation-of-convolutional-neural-network-using-python-and-keras/
   5. https://rubikscode.net/wp-json/oembed/1.0/embed?url=https://rubikscode.net/2018/03/05/implementation-of-convolutional-neural-network-using-python-and-keras/&format=xml
   6. https://rubikscode.net/2018/03/05/implementation-of-convolutional-neural-network-using-python-and-keras/#content
   7. https://www.linkedin.com/in/nmzivkovic/
   8. https://twitter.com/nmzivkovic?lang=en
   9. https://github.com/nmzivkovic
  10. https://www.facebook.com/rubikscodenet/
  11. https://rubikscode.net/
  12. https://www.packtpub.com/application-development/introducing-test-driven-development-c-video
  13. https://www.packtpub.com/application-development/test-driven-development-c-and-net-core-mvc-video
  14. https://www.packtpub.com/big-data-and-business-intelligence/real-world-machine-learning-projects-scikit-learn-video
  15. https://rubikscode.net/
  16. https://rubikscode.net/category/series/
  17. https://rubikscode.net/2018/02/19/artificial-neural-networks-series/
  18. https://rubikscode.net/2017/11/13/introduction-to-artificial-neural-networks/
  19. https://rubikscode.net/2017/11/20/common-neural-network-activation-functions/
  20. https://rubikscode.net/2018/01/15/how-artificial-neural-networks-learn/
  21. https://rubikscode.net/2018/01/22/id26-algorithm-in-artificial-neural-networks/
  22. https://rubikscode.net/2018/01/29/implementing-simple-neural-network-in-c/
  23. https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/
  24. https://rubikscode.net/2018/02/12/implementing-simple-neural-network-using-keras-with-python-example/
  25. https://rubikscode.net/2018/02/26/introduction-to-convolutional-neural-networks/
  26. https://rubikscode.net/2018/03/05/implementation-of-convolutional-neural-network-using-python-and-keras/
  27. https://rubikscode.net/2018/03/12/introuduction-to-recurrent-neural-networks/
  28. https://rubikscode.net/2018/03/19/understanding-long-short-term-memory-networks-lstms/
  29. https://rubikscode.net/2018/03/26/two-ways-to-implement-lstm-network-using-python-with-tensorflow-and-keras/
  30. http://rtrtr.com/
  31. https://rubikscode.net/2018/12/10/introduction-to-generative-adversarial-networks-gans/
  32. https://rubikscode.net/2018/12/17/implementing-gan-dcgan-with-python/
  33. https://rubikscode.net/2019/01/14/introduction-to-adversarial-autoencoders/
  34. https://rubikscode.net/2019/01/21/generating-images-using-adversarial-autoencoders-and-python/
  35. https://rubikscode.net/2019/02/11/implementing-cyclegan-using-python/
  36. https://rubikscode.net/2019/02/04/introduction-to-cyclegan/
  37. https://rubikscode.net/2018/07/23/machine-learning-with-ml-net-series/
  38. https://rubikscode.net/2019/02/18/ultimate-guide-to-machine-learning-with-ml-net/
  39. https://rubikscode.net/2018/06/18/using-ml-net-introduction-to-machine-learning-and-ml-net/
  40. https://rubikscode.net/2018/06/25/machine-learning-with-ml-net-solving-real-world-regression-problem-bike-sharing-demands/
  41. https://rubikscode.net/2018/07/02/machine-learning-with-ml-net-solving-real-world-classification-problem-wine-quality/
  42. https://rubikscode.net/2018/07/09/machine-learning-in-ml-net-using-machine-learning-model-in-asp-net-mvc-application/
  43. https://rubikscode.net/2018/07/16/machine-learning-with-ml-net-comparing-data-exploration-in-python-with-data-exploration-in-ml-net/
  44. https://rubikscode.net/2018/08/06/asynchronous-programming-in-net/
  45. https://rubikscode.net/2018/05/21/asynchronous-programming-in-net-motivation-and-unit-testing/
  46. https://rubikscode.net/2018/05/28/asynchronous-programming-in-net-common-mistakes-and-best-practices/
  47. https://rubikscode.net/2018/06/04/asynchronous-programming-in-net-task-based-asynchronous-pattern-tap/
  48. https://rubikscode.net/2018/06/11/asynchronous-programming-in-net-benefits-and-tradeoffs-of-using-valuetask/
  49. https://rubikscode.net/2018/09/26/self-organizing-maps-series/
  50. https://rubikscode.net/2018/08/20/introduction-to-self-organizing-maps/
  51. https://rubikscode.net/2018/08/27/implementing-self-organizing-maps-with-python-and-tensorflow/
  52. https://rubikscode.net/2018/09/17/implementing-self-organizing-maps-with-net-core/
  53. https://rubikscode.net/2018/09/24/credit-card-fraud-detection-using-self-organizing-maps-and-python/
  54. https://rubikscode.net/2019/01/07/restricted-boltzmann-machine-series/
  55. https://rubikscode.net/2018/10/01/introduction-to-restricted-boltzmann-machines/
  56. https://rubikscode.net/2018/10/22/implementing-restricted-boltzmann-machine-with-python-and-tensorflow/
  57. https://rubikscode.net/2018/10/15/implementing-restricted-boltzmann-machine-with-net-core/
  58. https://rubikscode.net/2018/11/12/generate-music-using-tensorflow-and-python/
  59. https://rubikscode.net/2017/10/16/mongodb-serial/
  60. https://rubikscode.net/2017/07/19/introduction-to-nosql-and-polyglot-persistence/
  61. https://rubikscode.net/2017/07/24/mongo-db-basics-part-1/
  62. https://rubikscode.net/2017/07/31/mongo-db-basics-part-2/
  63. https://rubikscode.net/2017/10/02/using-mongodb-in-c/
  64. https://rubikscode.net/2017/10/09/mean-stack-crash-course-using-mongodb-with-node-js-express-and-angular-4/
  65. https://rubikscode.net/2017/10/15/serverless-and-mongodb-atlas/
  66. https://rubikscode.net/2018/04/30/philosophy-as-motivational-tool-for-software-crafters-series/
  67. https://rubikscode.net/2018/04/23/how-to-use-miyamoto-musashis-philosophy-to-become-better-software-crafter/
  68. https://rubikscode.net/2017/11/06/how-to-use-marcus-aureliuss-meditations-to-become-better-software-craftsman/
  69. https://rubikscode.net/2017/06/22/   how-to-use-friedrich-nietzsches-philosophy-to-be-better-software-craftsman/
  70. https://rubikscode.net/2017/05/14/how-to-use-art-of-war-to-be-better-software-craftsman/
  71. https://rubikscode.net/category/ai/
  72. https://rubikscode.net/category/machine-learning/
  73. https://rubikscode.net/category/net/
  74. https://rubikscode.net/category/python/
  75. https://rubikscode.net/category/nosql/
  76. https://rubikscode.net/about/
  77. https://rubikscode.net/contact/
  78. https://rubikscode.net/2018/03/05/implementation-of-convolutional-neural-network-using-python-and-keras/
  79. https://rubikscode.net/author/rubikscode/
  80. https://rubikscode.net/2018/03/05/implementation-of-convolutional-neural-network-using-python-and-keras/#respond
  81. http://rubikscode.net/2018/02/26/introduction-to-convolutional-neural-networks/
  82. http://rubikscode.net/2018/02/26/introduction-to-convolutional-neural-networks/
  83. http://rubikscode.net/2018/02/19/artificial-neural-networks-series/
  84. http://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/
  85. http://rubikscode.net/2018/02/12/implementing-simple-neural-network-using-keras-with-python-example/
  86. https://www.nist.gov/sites/default/files/documents/srd/nistsd19.pdf
  87. http://rubikscode.net/2018/02/19/artificial-neural-networks-series/
  88. http://rubikscode.net/2018/02/12/implementing-simple-neural-network-using-keras-with-python-example/
  89. https://en.wikipedia.org/wiki/one-hot
  90. http://rubikscode.net/2018/02/26/introduction-to-convolutional-neural-networks/
  91. http://rubikscode.net/2018/02/12/implementing-simple-neural-network-using-keras-with-python-example/
  92. http://rubikscode.net/2018/02/19/artificial-neural-networks-series/
  93. https://rubikscode.net/
  94. https://www.codeproject.com/
  95. https://rubikscode.net/2018/03/05/implementation-of-convolutional-neural-network-using-python-and-keras/?share=twitter
  96. https://rubikscode.net/2018/03/05/implementation-of-convolutional-neural-network-using-python-and-keras/?share=facebook
  97. https://rubikscode.net/category/ai/
  98. https://rubikscode.net/tag/ai/
  99. https://rubikscode.net/tag/artificaial-inteligance/
 100. https://rubikscode.net/tag/artificial-neural-networks/
 101. https://rubikscode.net/tag/convolutional-neural-networks/
 102. https://rubikscode.net/tag/machine-learning/
 103. https://rubikscode.net/tag/neural-networks/
 104. https://rubikscode.net/tag/python/
 105. https://rubikscode.net/tag/software-development/
 106. https://rubikscode.net/2018/02/26/introduction-to-convolutional-neural-networks/
 107. https://rubikscode.net/2018/03/12/introuduction-to-recurrent-neural-networks/
 108. https://rubikscode.net/2018/03/05/implementation-of-convolutional-neural-network-using-python-and-keras/#respond
 109. https://jetpack.wordpress.com/jetpack-comment/?blogid=128253944&postid=8015&comment_registration=0&require_name_email=1&stc_enabled=1&stb_enabled=1&show_avatars=1&avatar_default=identicon&greeting=leave+a+reply&greeting_reply=leave+a+reply+to+%s&color_scheme=light&lang=en_us&jetpack_version=7.2.1&show_cookie_consent=10&has_cookie_consent=0&sig=e3eaf51638b3dbeed7e08ad26800bd4d654a5647#parent=https://rubikscode.net/2018/03/05/implementation-of-convolutional-neural-network-using-python-and-keras/
 110. https://akismet.com/privacy/
 111. https://www.linkedin.com/in/nmzivkovic/
 112. https://twitter.com/nmzivkovic
 113. https://github.com/nmzivkovic
 114. https://www.facebook.com/rubikscodenet
 115. https://automattic.com/cookies/
 116. https://www.packtpub.com/application-development/introducing-test-driven-development-c-video
 117. https://www.packtpub.com/application-development/test-driven-development-c-and-net-core-mvc-video
 118. https://www.packtpub.com/big-data-and-business-intelligence/real-world-machine-learning-projects-scikit-learn-video
 119. https://rubikscode.net/2018/02/19/artificial-neural-networks-series/
 120. https://rubikscode.net/2018/07/23/machine-learning-with-ml-net-series/
 121. https://rubikscode.net/2018/08/06/asynchronous-programming-in-net/
 122. https://rubikscode.net/2017/10/16/mongodb-serial/
 123. https://rubikscode.net/2018/04/30/philosophy-as-motivational-tool-for-software-crafters-series/
 124. https://rubikscode.net/about/
 125. https://rubikscode.net/contact/
 126. https://www.linkedin.com/in/nmzivkovic/
 127. https://twitter.com/nmzivkovic?lang=en
 128. https://github.com/nmzivkovic
 129. https://www.facebook.com/rubikscodenet/
 130. https://widgets.wp.com/likes/master.html?ver=201914#ver=201914

   hidden links:
 132. https://rubikscode.net/
 133. https://www.packtpub.com/application-development/introducing-test-driven-development-c-video
 134. https://www.packtpub.com/application-development/test-driven-development-c-and-net-core-mvc-video
 135. https://www.packtpub.com/big-data-and-business-intelligence/real-world-machine-learning-projects-scikit-learn-video
