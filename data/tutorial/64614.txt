   #[1]rubik's code    feed [2]rubik's code    comments feed [3]rubik's code
      introduction to tensorflow     with python example comments feed
   [4]alternate [5]alternate

   [6]skip to content

     * [7]linkedin
     * [8]twitter
     * [9]git
     * [10]fb

   [11]rubik's code

   machine learning without tears

     * products
          + [12]introducing test driven development in c#     video course
          + [13]test driven development with c# and .net core mvc     video
            course
          + [14]real-world machine learning projects with sci-kit learn
     * [15]articles
     * [16]series
          + [17]id158s series
               o [18]introduction to id158s
               o [19]common neural network id180
               o [20]how do id158s learn?
               o [21]id26 algorithm in artificial neural
                 networks
               o [22]implementing simple neural network in c#
               o [23]introduction to tensorflow     with python example
               o [24]implementing simple neural network using keras     with
                 python example
               o [25]introduction to convolutional neural networks
               o [26]implementation of convolutional neural network using
                 python and keras
               o [27]introduction to recurrent neural networks
               o [28]understanding id137 (lstms)
               o [29]two ways to implement lstm network using python    
                 with tensorflow and keras
          + [30]gan series
               o [31]introduction to id3
                 (gans)
               o [32]implementing gan & dcgan with python
               o [33]introduction to adversarial autoencoders
               o [34]generating images using adversarial autoencoders and
                 python
               o [35]implementing cyclegan using python
               o [36]introduction to cyclegan
          + [37]machine learning with ml.net
               o [38]ultimate guide to machine learning with ml.net
               o [39]using ml.net     introduction to machine learning and
                 ml.net
               o [40]machine learning with ml.net     solving real-world
                 regression problem (bike sharing demands)
               o [41]machine learning with ml.net     solving real-world
                 classification problem (wine quality)
               o [42]machine learning in ml.net     using machine learning
                 model in asp.net core application
               o [43]machine learning with ml.net     comparing data
                 exploration in python with data exploration in ml.net
          + [44]asynchronous programming in .net
               o [45]motivation and unit testing
               o [46]common mistakes and best practices
               o [47]task-based asynchronous pattern (tap)
               o [48]benefits and tradeoffs of using valuetask
          + [49]self- organizing maps series
               o [50]introduction to self-organizing maps
               o [51]implementing self-organizing maps with python and
                 tensorflow
               o [52]implementing self-organizing maps with .net core
               o [53]credit card fraud detection using self-organizing
                 maps and python
          + [54]restricted id82 series
               o [55]introduction to restricted id82s
               o [56]implementing restricted id82 with python
                 and tensorflow
               o [57]implementing restricted id82 with .net
                 core
               o [58]generate music using tensorflow and python
          + [59]mongodb series
               o [60]introduction to nosql and polyglot persistence
               o [61]mongodb basics     part 1.
               o [62]mongo db basics     part 2.
               o [63]using mongodb in c#
               o [64]mean stack crash course     using mongodb with node.js,
                 express and angular 4
               o [65]serverless and playing around with mongodb atlas
          + [66]philosophy as motivational tool for software crafters
            series
               o [67]how to use miyamoto musashi   s philosophy to become
                 better software crafter
               o [68]how to use marcus aurelius   s meditations to become
                 better software crafter
               o [69]   how to use friedrich nietzsche   s philosophy to be
                 better software crafter
               o [70]how to use    art of war    to be better software crafter
     * categories
          + [71]ai
          + [72]machine learning
          + [73].net
          + [74]python
          + [75]nosql
     * [76]about
     * [77]contact

   (button) open a search box close a search box search for:
   ____________________ (button) search

introduction to tensorflow     with python example

   [78]february 5, 2018february 26, 2018 by [79]rubikscode [80]5 comments
     __________________________________________________________________

   code that accompanies this article can be downloaded [81]here.
     __________________________________________________________________

   last week i presented to you my side-project     [82]simple neural
   network in c#. now, as i mentioned in that article, the solution
   presented there is light years away from the optimal solution. more
   math and id127 should be done in order for this
   solution to come anywhere close to anything that can be professionally
   used. lucky for us, smart people at google created a library that does
   just that     tensorflow.  this is a widely popular opensource library
   that excels at numerical computing, which is as you figured out so far,
   essential for our neural network calculations. it has a massive set of
   application interfaces for most major languages used in deep learning
   field in general.

   [z0yz6tu.png?w=720&#038;ssl=1]

   so, how tensorflow works? well, for starters their whole solution is
   revolving around tensors, primitive unit in tensorflow. tensorflow uses
   a tensor data structure to represent all data. in math, tensors
   are geometric objects that describe linear relations between other
   geometric objects. in tesnsorflow they are multi-dimensional array or
   data, ie. matrixes. ok, it   s not as simple as that, but this is whole
   tensor concept goes deeper in id202 that i   d like to go to
   right now. anyhow, we can observe tensors as n-dimensional arrays using
   which matrix operations are done easily and effectively. for example,
   in the code below, we defined two constant tensors and add one value to
   another:

   the constants, as you already figured out, are values that don   t
   change. however, tensorflow has rich api, which is well
   [83]documented and using it we can define other types of data, like
   variables:

   apart from tensors, tensorflow uses data flow graphs. nodes in the
   graph represent mathematical operations, while edges represent the
   tensors communicated between them.

installation and setup

   tensorflow provides apis for a wide range of languages, like python,
   c++, java, go, haskell and r (in a form of a third-party library).
   also, it supports different types of operating systems. in this
   article, we are going to use python on windows 10 so only installation
   process on this platform will be covered. tensorflow supports only
   [84]python 3.5 and 3.6, so make sure that you one of those versions
   installed on your system. for other operating systems and languages you
   can check [85]official installation guide. another thing we need to
   know is hardware configuration of our system. there are two options for
   installing tensorflow:
     * tensorflow with cpu support only.
     * tensorflow with gpu support.

   if your system has an nvidia   gpu then you can install tensorflow with
   gpu support. of course, gpu version is faster, but cpu is easier to
   install and to configure.

   if you are using [86]anaconda installing tensorflow can be done
   following these steps:
    1. create a conda environment    tensorflow    by running the command:
conda create -n tensorflow pip python=3.5
    2. activate created environment by issuing the command:
activate tensorflow
    3. invoke the command to install tensorflow inside your environment.
       for the cpu version run this command:
pip install --ignore-installed --upgrade tensorflow
       for gpu version run the command:
pip install --ignore-installed --upgrade tensorflow-gpu

   of course, you can install tensorflow using    native pip   , too. for the
   cpu version run:
pip3 install --upgrade tensorflow

   for gpu tensorflow version run the command:
pip3 install --upgrade tensorflow-gpu

   cool, now we have our tensorflow installed. let   s run through the
   problem we are going to solve.

iris data set classification problem

   iris data set, along with the [87]mnist dataset, is probably one of the
   best-known datasets to be found in the pattern recognition literature.
   it is sort of    hello world    example for machine learning classification
   problems. it was first introduced by [88]ronald fisher back in 1936. he
   was british statistician and botanist and he used this example in this
   paper the use of multiple measurements in taxonomic problems, which is
   often referenced to this day. the dataset contains 3 classes of 50
   instances each. each class refers to one type of iris plant: iris
   setosa, iris virginica, and iris versicolor. first class is linearly
   separable from the other two, but the latter two are not linearly
   separable from each other. each record has five attributes:
     * sepal length in cm
     * sepal width in cm
     * petal length in cm
     * petal width in cm
     * class (iris setosa, iris virginica, iris versicolor)

   the goal of the neural network, we are going to create is to predict
   the class of the iris flower based on other attributes. meaning it
   needs to create a model, which is going to describe a relationship
   between attribute values and the class.

tensorflow workflow

   most of the tensorflow codes follow this workflow:
     * import the dataset
     * extend dataset with additional columns to describe the data
     * select the type of model
     * training
     * evaluate accuracy of the model
     * predict results using the model

   if you followed my previous [89]blog posts, one could notice that
   training and evaluating processes are important parts of developing any
   id158. these processes are usually done on two
   datasets, one for training and other for testing the accuracy of the
   trained network. often, we get just one set of data, that we need to
   split into two separate datasets and that use one for training and
   other for testing. the ratio is usually 80% to 20%. this time this is
   already done for us. you can download training set and test set with
   code that accompanies this article from [90]here.

code

   before we continue, i need to mention that i use [91]spyder ide for
   development so i will explain the whole process using this environment.
   let   s dive in!

   the first thing we need to do is to import the dataset and to parse it.
   for this, we are going to use another python library     pandas. this is
   another open source library that provides easy to use data structures
   and data analysis tools for the python.

   as you can see, first we used read_csv function to import the dataset
   into local variables, and then we separated inputs (train_x, test_x)
   and expected outputs (train_y, test_y) creating four separate matrixes.
   here is how they look like:

   [hpd13hc.png?w=720&#038;ssl=1]

   great! we prepared data that is going to be used for training and for
   testing. now, we need to define feature columns, that are going to help
   our neural network.

   we now need to choose model we are going to use. in our problem, we are
   trying to predict a class of iris flower based on the attributes data.
   that is why we are going to choose one of the estimators from the
   tensorflow api. an object of the estimator class encapsulates the logic
   that builds a tensorflow graph and runs a tensorflow session. for this
   purpose, we are going to use [92]dnnclassifier. we are going to add two
   hidden layers with ten neurons in each.

   after that, we will train our neural network with the data we picked
   from the training dataset. firstly, we will define training function.
   this function needs to supply neural network with data from the
   training set by extending it and creating multiple batches. training
   works best if the training examples are in random order. that is why
   the shuffle function has been called. to sum it up,
   train_function creates batches of data using passed training dataset,
   by randomly picking data from it and supplying it back to train method
   of dnnclassifier.

   finally, we call evaluate function that will evaluate our neural
   network and give us back accuracy of the network.

   when we run this code i   ve got these results:

   [loog9fc.png?w=720&#038;ssl=1]

   so, i got the accuracy of 0.93 for my neural network, which is pretty
   good. after this, we can call our classifier using single data and get
   predictions for it.

conclusion

   neural networks have been around for a long time and almost all
   important concepts were introduced back to 1970s or 1980s. the problem
   that was stopping the whole field to take off was that back then we had
   no powerful computers and gpus to run these kinds of processes. now,
   not only we can do that, but google made neural networks popular by
   making this great tool     tensorflow publically available. today we have
   other higher-level apis that simplify implementation of neural networks
   even further. some of them run on top of the tensorflow, like keras. in
   [93]next article, you can see how to implement neural network using
   this high-level api.

   thanks for reading!
     __________________________________________________________________

   this article is a part of  id158s series, which you
   can check out [94]here.
     __________________________________________________________________

   read more posts from the author at [95]rubik   s code.
     __________________________________________________________________

   [96]codeproject

share:

     * [97]click to share on twitter (opens in new window)
     * [98]click to share on facebook (opens in new window)
     *

like this:

   like loading...

   posted in: [99]ai [100]python
   tagged: [101]ai [102]artificaial inteligance [103]artificial neural
   networks [104]machine learning [105]neural networks [106]python
   [107]software development [108]tensorflow

post navigation

   previous entry:[109]implementing simple neural network in c#
   next entry:[110]implementing simple neural network using keras     with
   python example

5 comments

    1. pingback: [111]dew drop - february 5, 2018 (#2658) - morning dew
    2. pingback: [112]introduction to tensorflow     with python example    
       collective intelligence
    3. pingback: [113]id158s series     deep in thought
    4.
   darshit parkhiya says:
       [114]november 15, 2018 at 2:06 am
       hi from where i can donload iris_train.csv and iris_test.csv
       loading...
       [115]reply
         1.
        rubikscode says:
            [116]november 15, 2018 at 2:41 pm
            hi,
            you can find it here ->
            [117]https://archive.ics.uci.edu/ml/datasets/iris
            loading...
            [118]reply

leave a reply [119]cancel reply

   iframe: [120]jetpack_remote_comment

   this site uses akismet to reduce spam. [121]learn how your comment data
   is processed.

subscribe to rubik's code via email

   email address ____________________

   (button) subscribe

video courses

     * introducing test driven development in c#
     * test driven development with c# and .net core mvc
     * real-world machine learning projects with scikit-learn

follow rubik   s code

     * [122]linkedin
     * [123]twitter
     * [124]github
     * [125]facebook

   close and accept
   privacy & cookies: this site uses cookies. by continuing to use this
   website, you agree to their use.
   to find out more, including how to control cookies, see here: [126]info

   (button) go to the top

products

     * [127]introducing test driven development in c#
     * [128]test driven development with c# and .net core mvc
     * [129]real-world machine learning projects with sci-kit learn

series

     * [130]id158s series
     * [131]machine learning with ml.net series
     * [132]asynchronous programming in .net series
     * [133]mongodb series
     * [134]philosophy as motivational tool for software crafters series

rubik   s code

     * [135]about
     * [136]contact

     * [137]linkedin
     * [138]twitter
     * [139]git
     * [140]fb

   iframe: [141]likes-master

   %d bloggers like this:

references

   visible links
   1. https://rubikscode.net/feed/
   2. https://rubikscode.net/comments/feed/
   3. https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/feed/
   4. https://rubikscode.net/wp-json/oembed/1.0/embed?url=https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/
   5. https://rubikscode.net/wp-json/oembed/1.0/embed?url=https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/&format=xml
   6. https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/#content
   7. https://www.linkedin.com/in/nmzivkovic/
   8. https://twitter.com/nmzivkovic?lang=en
   9. https://github.com/nmzivkovic
  10. https://www.facebook.com/rubikscodenet/
  11. https://rubikscode.net/
  12. https://www.packtpub.com/application-development/introducing-test-driven-development-c-video
  13. https://www.packtpub.com/application-development/test-driven-development-c-and-net-core-mvc-video
  14. https://www.packtpub.com/big-data-and-business-intelligence/real-world-machine-learning-projects-scikit-learn-video
  15. https://rubikscode.net/
  16. https://rubikscode.net/category/series/
  17. https://rubikscode.net/2018/02/19/artificial-neural-networks-series/
  18. https://rubikscode.net/2017/11/13/introduction-to-artificial-neural-networks/
  19. https://rubikscode.net/2017/11/20/common-neural-network-activation-functions/
  20. https://rubikscode.net/2018/01/15/how-artificial-neural-networks-learn/
  21. https://rubikscode.net/2018/01/22/id26-algorithm-in-artificial-neural-networks/
  22. https://rubikscode.net/2018/01/29/implementing-simple-neural-network-in-c/
  23. https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/
  24. https://rubikscode.net/2018/02/12/implementing-simple-neural-network-using-keras-with-python-example/
  25. https://rubikscode.net/2018/02/26/introduction-to-convolutional-neural-networks/
  26. https://rubikscode.net/2018/03/05/implementation-of-convolutional-neural-network-using-python-and-keras/
  27. https://rubikscode.net/2018/03/12/introuduction-to-recurrent-neural-networks/
  28. https://rubikscode.net/2018/03/19/understanding-long-short-term-memory-networks-lstms/
  29. https://rubikscode.net/2018/03/26/two-ways-to-implement-lstm-network-using-python-with-tensorflow-and-keras/
  30. http://rtrtr.com/
  31. https://rubikscode.net/2018/12/10/introduction-to-generative-adversarial-networks-gans/
  32. https://rubikscode.net/2018/12/17/implementing-gan-dcgan-with-python/
  33. https://rubikscode.net/2019/01/14/introduction-to-adversarial-autoencoders/
  34. https://rubikscode.net/2019/01/21/generating-images-using-adversarial-autoencoders-and-python/
  35. https://rubikscode.net/2019/02/11/implementing-cyclegan-using-python/
  36. https://rubikscode.net/2019/02/04/introduction-to-cyclegan/
  37. https://rubikscode.net/2018/07/23/machine-learning-with-ml-net-series/
  38. https://rubikscode.net/2019/02/18/ultimate-guide-to-machine-learning-with-ml-net/
  39. https://rubikscode.net/2018/06/18/using-ml-net-introduction-to-machine-learning-and-ml-net/
  40. https://rubikscode.net/2018/06/25/machine-learning-with-ml-net-solving-real-world-regression-problem-bike-sharing-demands/
  41. https://rubikscode.net/2018/07/02/machine-learning-with-ml-net-solving-real-world-classification-problem-wine-quality/
  42. https://rubikscode.net/2018/07/09/machine-learning-in-ml-net-using-machine-learning-model-in-asp-net-mvc-application/
  43. https://rubikscode.net/2018/07/16/machine-learning-with-ml-net-comparing-data-exploration-in-python-with-data-exploration-in-ml-net/
  44. https://rubikscode.net/2018/08/06/asynchronous-programming-in-net/
  45. https://rubikscode.net/2018/05/21/asynchronous-programming-in-net-motivation-and-unit-testing/
  46. https://rubikscode.net/2018/05/28/asynchronous-programming-in-net-common-mistakes-and-best-practices/
  47. https://rubikscode.net/2018/06/04/asynchronous-programming-in-net-task-based-asynchronous-pattern-tap/
  48. https://rubikscode.net/2018/06/11/asynchronous-programming-in-net-benefits-and-tradeoffs-of-using-valuetask/
  49. https://rubikscode.net/2018/09/26/self-organizing-maps-series/
  50. https://rubikscode.net/2018/08/20/introduction-to-self-organizing-maps/
  51. https://rubikscode.net/2018/08/27/implementing-self-organizing-maps-with-python-and-tensorflow/
  52. https://rubikscode.net/2018/09/17/implementing-self-organizing-maps-with-net-core/
  53. https://rubikscode.net/2018/09/24/credit-card-fraud-detection-using-self-organizing-maps-and-python/
  54. https://rubikscode.net/2019/01/07/restricted-boltzmann-machine-series/
  55. https://rubikscode.net/2018/10/01/introduction-to-restricted-boltzmann-machines/
  56. https://rubikscode.net/2018/10/22/implementing-restricted-boltzmann-machine-with-python-and-tensorflow/
  57. https://rubikscode.net/2018/10/15/implementing-restricted-boltzmann-machine-with-net-core/
  58. https://rubikscode.net/2018/11/12/generate-music-using-tensorflow-and-python/
  59. https://rubikscode.net/2017/10/16/mongodb-serial/
  60. https://rubikscode.net/2017/07/19/introduction-to-nosql-and-polyglot-persistence/
  61. https://rubikscode.net/2017/07/24/mongo-db-basics-part-1/
  62. https://rubikscode.net/2017/07/31/mongo-db-basics-part-2/
  63. https://rubikscode.net/2017/10/02/using-mongodb-in-c/
  64. https://rubikscode.net/2017/10/09/mean-stack-crash-course-using-mongodb-with-node-js-express-and-angular-4/
  65. https://rubikscode.net/2017/10/15/serverless-and-mongodb-atlas/
  66. https://rubikscode.net/2018/04/30/philosophy-as-motivational-tool-for-software-crafters-series/
  67. https://rubikscode.net/2018/04/23/how-to-use-miyamoto-musashis-philosophy-to-become-better-software-crafter/
  68. https://rubikscode.net/2017/11/06/how-to-use-marcus-aureliuss-meditations-to-become-better-software-craftsman/
  69. https://rubikscode.net/2017/06/22/   how-to-use-friedrich-nietzsches-philosophy-to-be-better-software-craftsman/
  70. https://rubikscode.net/2017/05/14/how-to-use-art-of-war-to-be-better-software-craftsman/
  71. https://rubikscode.net/category/ai/
  72. https://rubikscode.net/category/machine-learning/
  73. https://rubikscode.net/category/net/
  74. https://rubikscode.net/category/python/
  75. https://rubikscode.net/category/nosql/
  76. https://rubikscode.net/about/
  77. https://rubikscode.net/contact/
  78. https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/
  79. https://rubikscode.net/author/rubikscode/
  80. https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/#comments
  81. https://github.com/nmzivkovic/introuductiontotensorflow
  82. http://rubikscode.net/2018/01/29/implementing-simple-neural-network-in-c/
  83. https://www.tensorflow.org/api_docs/
  84. https://www.python.org/
  85. https://www.tensorflow.org/install/
  86. https://www.anaconda.com/download/
  87. https://en.wikipedia.org/wiki/mnist_database
  88. https://en.wikipedia.org/wiki/ronald_fisher
  89. http://rubikscode.net/2018/01/15/how-artificial-neural-networks-learn/
  90. https://github.com/nmzivkovic/introuductiontotensorflow
  91. https://pythonhosted.org/spyder/
  92. https://www.tensorflow.org/api_docs/python/tf/estimator/dnnclassifier
  93. http://rubikscode.net/2018/02/12/implementing-simple-neural-network-using-keras-with-python-example/
  94. http://rubikscode.net/2018/02/19/artificial-neural-networks-series/
  95. https://rubikscode.net/
  96. https://www.codeproject.com/
  97. https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/?share=twitter
  98. https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/?share=facebook
  99. https://rubikscode.net/category/ai/
 100. https://rubikscode.net/category/python/
 101. https://rubikscode.net/tag/ai/
 102. https://rubikscode.net/tag/artificaial-inteligance/
 103. https://rubikscode.net/tag/artificial-neural-networks/
 104. https://rubikscode.net/tag/machine-learning/
 105. https://rubikscode.net/tag/neural-networks/
 106. https://rubikscode.net/tag/python/
 107. https://rubikscode.net/tag/software-development/
 108. https://rubikscode.net/tag/tensorflow/
 109. https://rubikscode.net/2018/01/29/implementing-simple-neural-network-in-c/
 110. https://rubikscode.net/2018/02/12/implementing-simple-neural-network-using-keras-with-python-example/
 111. https://www.alvinashcraft.com/2018/02/05/dew-drop-february-5-2018-2658/
 112. https://collectiv3intelligenc3.wordpress.com/2018/02/06/introduction-to-tensorflow-with-python-example/
 113. http://deepinthought.in/artificial-neural-networks-series
 114. https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/#comment-1255
 115. https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/?replytocom=1255#respond
 116. https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/#comment-1258
 117. https://archive.ics.uci.edu/ml/datasets/iris
 118. https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/?replytocom=1258#respond
 119. https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/#respond
 120. https://jetpack.wordpress.com/jetpack-comment/?blogid=128253944&postid=7943&comment_registration=0&require_name_email=1&stc_enabled=1&stb_enabled=1&show_avatars=1&avatar_default=identicon&greeting=leave+a+reply&greeting_reply=leave+a+reply+to+%s&color_scheme=light&lang=en_us&jetpack_version=7.2.1&show_cookie_consent=10&has_cookie_consent=0&sig=9d301a17855a83c245e2820343bfa9b08f5d451d#parent=https://rubikscode.net/2018/02/05/introduction-to-tensorflow-with-python-example/
 121. https://akismet.com/privacy/
 122. https://www.linkedin.com/in/nmzivkovic/
 123. https://twitter.com/nmzivkovic
 124. https://github.com/nmzivkovic
 125. https://www.facebook.com/rubikscodenet
 126. https://automattic.com/cookies/
 127. https://www.packtpub.com/application-development/introducing-test-driven-development-c-video
 128. https://www.packtpub.com/application-development/test-driven-development-c-and-net-core-mvc-video
 129. https://www.packtpub.com/big-data-and-business-intelligence/real-world-machine-learning-projects-scikit-learn-video
 130. https://rubikscode.net/2018/02/19/artificial-neural-networks-series/
 131. https://rubikscode.net/2018/07/23/machine-learning-with-ml-net-series/
 132. https://rubikscode.net/2018/08/06/asynchronous-programming-in-net/
 133. https://rubikscode.net/2017/10/16/mongodb-serial/
 134. https://rubikscode.net/2018/04/30/philosophy-as-motivational-tool-for-software-crafters-series/
 135. https://rubikscode.net/about/
 136. https://rubikscode.net/contact/
 137. https://www.linkedin.com/in/nmzivkovic/
 138. https://twitter.com/nmzivkovic?lang=en
 139. https://github.com/nmzivkovic
 140. https://www.facebook.com/rubikscodenet/
 141. https://widgets.wp.com/likes/master.html?ver=201914#ver=201914

   hidden links:
 143. https://rubikscode.net/
 144. https://www.packtpub.com/application-development/introducing-test-driven-development-c-video
 145. https://www.packtpub.com/application-development/test-driven-development-c-and-net-core-mvc-video
 146. https://www.packtpub.com/big-data-and-business-intelligence/real-world-machine-learning-projects-scikit-learn-video
