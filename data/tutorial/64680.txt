   #[1]analytics vidhya    feed [2]analytics vidhya    comments feed
   [3]analytics vidhya    how to create a poet / writer using deep learning
   (text generation using python)? comments feed [4]alternate [5]alternate

   iframe: [6]//googletagmanager.com/ns.html?id=gtm-mpsm42v

   [7]new certified ai & ml blackbelt program (beginner to master) -
   enroll today @ launch offer (coupon: blackbelt10)

   (button) search______________
     * [8]learn
          + [9]blog archive
               o [10]machine learning
               o [11]deep learning
               o [12]career
               o [13]stories
          + [14]datahack radio
          + [15]infographics
          + [16]training
          + [17]learning paths
               o [18]sas business analyst
               o [19]learn data science on r
               o [20]data science in python
               o [21]data science in weka
               o [22]data visualization with tableau
               o [23]data visualization with qlikview
               o [24]interactive data stories with d3.js
          + [25]glossary
     * [26]engage
          + [27]discuss
          + [28]events
          + [29]datahack summit 2018
          + [30]datahack summit 2017
          + [31]student datafest
          + [32]write for us
     * [33]compete
          + [34]hackathons
     * [35]get hired
          + [36]jobs
     * [37]courses
          + [38]id161 using deep learning
          + [39]natural language processing using python
          + [40]introduction to data science
          + [41]microsoft excel
          + [42]more courses
     * [43]contact

     *
     *
     *
     *

     * [44]home
     * [45]blog archive
     * [46]trainings
     * [47]discuss
     * [48]datahack
     * [49]jobs
     * [50]corporate

     *

   [51]analytics vidhya - learn everything about analytics

learn everything about analytics

   [52][black-belt-2.gif]
   [53][black-belt-2.gif]
   [54][black-belt-2.gif]
   (button) search______________

   [55]analytics vidhya - learn everything about analytics
     * [56]learn
          + [57]blog archive
               o [58]machine learning
               o [59]deep learning
               o [60]career
               o [61]stories
          + [62]datahack radio
          + [63]infographics
          + [64]training
          + [65]learning paths
               o [66]sas business analyst
               o [67]learn data science on r
               o [68]data science in python
               o [69]data science in weka
               o [70]data visualization with tableau
               o [71]data visualization with qlikview
               o [72]interactive data stories with d3.js
          + [73]glossary
     * [74]engage
          + [75]discuss
          + [76]events
          + [77]datahack summit 2018
          + [78]datahack summit 2017
          + [79]student datafest
          + [80]write for us
     * [81]compete
          + [82]hackathons
     * [83]get hired
          + [84]jobs
     * [85]courses
          + [86]id161 using deep learning
          + [87]natural language processing using python
          + [88]introduction to data science
          + [89]microsoft excel
          + [90]more courses
     * [91]contact

   [92]home [93]deep learning [94]how to create a poet / writer using deep
   learning (text generation using python)?

   [95]deep learning[96]machine learning[97]nlp[98]python

how to create a poet / writer using deep learning (text generation using
python)?

   [99]pranjal srivastava, march 6, 2018

introduction

   from short stories to writing 50,000 word novels, machines are churning
   out words like never before. there are tons of examples available on
   the web where developers have used machine learning to write pieces of
   text, and the results range from the absurd to delightfully funny.

   thanks to major advancements in the field of natural language
   processing (nlp), machines are able to understand the context and spin
   up tales all by themselves.


                                                  source: the verge

   examples of text generation include machines writing entire chapters of
   popular novels like game of thrones and harry potter, with varying
   degrees of success.

   in this article, we will use python and the concept of text generation
   to build a machine learning model that can write sonnets in the style
   of william shakespeare.

   let   s get into it!


table of contents

    1. what are text generators?
    2. the different steps of text generation
          + importing dependencies
          + loading the data
          + creating character/word mappings
          + id174
          + modelling
          + generating text
    3. experimenting with different models
          + a more trained model
          + a deeper model
          + a wider model
          + a gigantic model


what are text generators?

   nowadays, there is a huge amount of data that can be categorized as
   sequential. it is present in the form of audio, video, text, time
   series, sensor data, etc. a special thing about this type of data is
   that if two events are occurring in a particular time frame, the
   occurrence of event a before event b is an entirely different scenario
   as compared to the occurrence of event a after event b.

   however, in conventional machine learning problems, it hardly matters
   whether a particular data point was recorded before the other. this
   consideration gives our sequence prediction problems a different
   solving approach.

   text, a stream of characters lined up one after another, is a difficult
   thing to crack. this is because when handling text, a model may be
   trained to make very accurate predictions using the sequences that have
   occurred previously, but one wrong prediction has the potential to make
   the entire sentence meaningless. however, in case of a numerical
   sequence prediction problem, even if a prediction goes entirely south,
   it could still be considered a valid prediction (maybe with a high
   bias). but, it would not strike the eye.

   this is what makes text generators tricky!

   for a better understanding of the code please go through my
   [100]previous article, where i have discussed the theory behind lstms.


different steps of text generation

   text generation usually involves the following steps:
    1. importing dependencies
    2. loading of data
    3. creating character/word mappings
    4. id174
    5. modelling
    6. generating text

   let   s look at each one in detail.


importing dependencies

import numpy as np
import pandas as pd
from keras.models import sequential
from keras.layers import dense
from keras.layers import dropout
from keras.layers import lstm
from keras.utils import np_utils

   this is self-explanatory. we are importing all libraries required for
   our study.


loading the data

text=(open("/users/pranjal/desktop/text_generator/sonnets.txt").read())
text=text.lower()

   here, we are loading a combined collection of all shakespearean sonnets
   that can be downloaded from [101]here. i cleaned up this file to remove
   the start and end credits, and it can be downloaded from my git
   repository.

   the text file is opened and saved in text. this content is then
   converted into lowercase, to reduce the number of possible words (more
   on this later).


creating character/word mappings

   mapping is a step in which we assign an arbitrary number to a
   character/word in the text. in this way, all unique characters/words
   are mapped to a number. this is important, because machines understand
   numbers far better than text, and this subsequently makes the training
   process easier.
characters = sorted(list(set(text)))
n_to_char = {n:char for n, char in enumerate(characters)}
char_to_n = {char:n for n, char in enumerate(characters)}

   i have created a dictionary with a number assigned to each unique
   character present in the text. all unique characters are first stored
   in characters and are then enumerated.

   it must also be noted here that i have used character level mappings
   and not word mappings. however, when compared with each other, a
   word-based model shows much higher accuracy as compared to a
   character-based model. this is because the latter model requires a much
   larger network to learn long-term dependencies as it not only has to
   remember the sequences of words, but also has to learn to predict a
   grammatically correct word. however, in case of a word-based model, the
   latter has already been taken care of.

   but since this is a small dataset (with 17,670 words), and the number
   of unique words (4,605 in number) constitute around one-fourth of the
   data, it would not be a wise decision to train on such a mapping. this
   is because if we assume that all unique words occurred equally in
   number (which is not true), we would have a word occurring roughly four
   times in the entire training dataset, which is just not sufficient to
   build a text generator.


id174

   this is the most tricky part when it comes to building lstm models.
   transforming the data at hand into a relatable format is a difficult
   task.

   i   ll break down the process into small parts to make it easier for you.
x = []
 y = []
length = len(text)
seq_length = 100
  for i in range(0, length-seq_length, 1):
     sequence = text[i:i + seq_length]
     label =text[i + seq_length]
     x.append([char_to_n[char] for char in sequence])
     y.append(char_to_n[label])

   here, x is our train array, and y is our target array.

   seq_length is the length of the sequence of characters that we want to
   consider before predicting a particular character.

   the for loop is used to iterate over the entire length of the text and
   create such sequences (stored in x) and their true values (stored in
   y). now, it   s difficult to visualize the concept of true values here.
   let   s understand this with an example:

   for a sequence length of 4 and the text    hello india   , we would have
   our x and y (not encoded as numbers for ease of understanding) as
   below:
   x            y
   [h, e, l, l] [o]
   [e, l, l, o] [ ]
   [l, l, o,  ] [i]
   [l, o,  , i] [n]
      .              .

   now, lstms accept input in the form of (number_of_sequences,
   length_of_sequence, number_of_features) which is not the current format
   of the arrays. also, we need to transform the array y into a one-hot
   encoded format.
x_modified = np.reshape(x, (len(x), seq_length, 1))
x_modified = x_modified / float(len(characters))
y_modified = np_utils.to_categorical(y)

   we first reshape the array x into our required dimensions. then, we
   scale the values of our x_modified so that our neural network can train
   faster and there is a lesser chance of getting stuck in a local minima.
   also, our y_modified is one-hot encoded to remove any ordinal
   relationship that may have been introduced in the process of mapping
   the characters. that is,    a    might be assigned a lower number as
   compared to    z   , but that doesn   t signify any relationship between the
   two.

   our final arrays will look like:
   x_modified y_modified
   [[ 0.44444444],
   [ 0.33333333],
   [ 0.66666667],
   [ 0.66666667]] [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]
   [[ 0.33333333],
   [ 0.66666667],
   [ 0.66666667],
   [ 0.88888889]] [ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]
   [[ 0.66666667],
   [ 0.66666667],
   [ 0.88888889],
   [ 0.        ]] [ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]
   [[ 0.66666667],
   [ 0.88888889],
   [ 0.        ] [ 0.55555556]] [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,
   0.]


modelling

model = sequential()
model.add(lstm(400, input_shape=(x_modified.shape[1], x_modified.shape[2]), retu
rn_sequences=true))
model.add(dropout(0.2))
model.add(lstm(400))
model.add(dropout(0.2))
model.add(dense(y_modified.shape[1], activation='softmax'))
model.compile(loss='categorical_crossid178', optimizer='adam')

   we are building a sequential model with two lstm layers having 400
   units each. the first layer needs to be fed in with the input shape. in
   order for the next lstm layer to be able to process the same sequences,
   we enter the return_sequences parameter as true.

   also, dropout layers with a 20% dropout have been added to check for
   over-fitting. the last layer outputs a one hot encoded vector which
   gives the character output.


generating text

string_mapped = x[99]
# generating characters
for i in range(seq_length):
    x = np.reshape(string_mapped,(1,len(string_mapped), 1))
    x = x / float(len(characters))
    pred_index = np.argmax(model.predict(x, verbose=0))
    seq = [n_to_char[value] for value in string_mapped]
    string_mapped.append(pred_index)
    string_mapped = string_mapped[1:len(string_mapped)]

   we start off with a random row from the x array, that is an array of
   100 characters. after this, we target predicting another 100 characters
   following x. the input is reshaped and scaled as previously and the
   next character with maximum id203 is predicted.

   seq is used to store the decoded format of the string that has been
   predicted till now. next, the new string is updated, such that the
   first character is removed and the new predicted character is included.

   you can find the entire code on my git repo [102]here. i   ve provided
   the training file, notebooks and trained model weights for your
   reference.


experimenting with different models

   the baseline model, when trained for 1 epoch with a batch size of 100,
   gave the following output:
's the riper should by time decease,
his tender heir might bear his memory:
but thou, contracted toet she the the the the the the the the
thi the the the the the the the the the the the the the the the the the
thi the the the the the the the the the the the the the the the the the
thi the the the the the the the the the the the the the the the the the
thi the the the the the the the the the the the the the the the the the
thi the the the the the the the the th'

   this output doesn   t make much sense. it is nothing but a repetition of
   the same prediction, as if it   s stuck in a loop. this is because
   language prediction models are way too complex when compared to the
   miniature model that we have trained.

   let   s try to train the very same model, but for a longer period of
   time.


a more trained model

   this time we trained our model for 100 epochs and a batch size of 50.
   we at least obtained a non-repetitive sequence of characters, which
   contains a decent number of legitimate words. also, the model learnt to
   produce a sonnet-like word structure.
'the riper should by time decease,
his tender heir might bear his memory:
but thou, contracted to thine own besire,
that in the breath ther doomownd wron to ray,
dorh part nit backn oy steresc douh dxcel;
for that i have beauty lekeng norirness,
for all the foowing of a former sight,
which in the remame douh a foure to his,
that in the very bumees of toue mart detenese;
how ap i am nnw love, he past doth fiamee.
to diserace but in the orsths of are orider,
waie agliemt would have me '

   however, this model is still not good enough to produce quality
   content. so now we   ll do what everyone does when a deep learning model
   is not producing decent results. build a deeper architecture!


a deeper model

   a wise man once said: if the model is not doing good, increase the
   number of layers! i   m going to do the same with my model. let   s add
   another lstm layer with 400 units followed by a dropout layer of 0.2
   fraction and see what we get.
"the riper should by time decease,
his tender heir might bear his memory:
but thou, contracted to the world's false sporoe,
with eyes so dond touls be thy domfornds,
which for memorion of the seasons new;
mike own self-love to shou art constant
how can i then be oy love doth give,
the rose looks fair, but fairer bomments age.
now with the seas that i have seen dychl
that mot to teed of you, if h ho bontent,
and all the ress of the heartai thee;
the world will was iis bound and farty "

   the result is interesting. the grammar has enhanced itself, keeping the
   sonnet structure and punctuation intact. however, this still requires a
   lot of improvement. let   s try and explore a wider network, one with
   more number of units.


a wider model

   i increased the number of units to 700 on each of the two lstm layers.
   this tweak produced the following poetry:
"the riper should by time decease,
his tender heir might bear his memory:
but thou, contracted to thine own bright eyes,
feed'st thy sigh aare so beuider poise,
oor maty dis surre that gairs mot me love thee;
when i braye the would and lays in the eesire.
than thmu disgrmed stand with my bootr still nsentente;
tell ia to thou art thou wilt woon'thy sook,
and touain then tor, give thy soue semping.
whose whod the better of your befaiss nu sante,
though i, suoll oas, and i lose bouh twa"

   this is a little disappointing at first, because the words have lost
   their meaning. but, what   s interesting to note here is that there is
   some rhyme that is building up. the model is trying to understand
   poetry after all! but, we cannot compromise with meaningful words,
   right?

   let   s put it all together in a one gigantic model.


a gigantic model

   i increased the number of layers to three, each having 700 units and
   trained it for 100 epochs. the result produced is a magnificent piece
   of poetry. take a look:
"the riper should by time decease,
his tender heir might bear his memory:
but thou, contracted to thine own bright eyes,
feed'st thy light's flame with self-substantial fuel,
my beept is she breat oe bath dasehr ill:
tirse do i pine and turfeit day by day,
or gluttoning on all, or all away.
lxxvi
why is my verse so barren of new pride,
so far from variation or quick change?
why with the time do i not glance aside
to new-found methods, and to compounds strange?
why write i stil"

   this not only has sensible words, but has also learnt to rhyme. we
   could have had a more sensible piece of art had the data that was fed
   into the network been cleaned properly! but as a starting piece, this
   model has more than done what it was asked. it is way more poetic than
   most humans could ever get!


end notes

   what makes a text generator more efficient is its capability to
   generate relevant stories. this is being implemented by many models at
   the output level, to generate actual language-like text, which can be
   difficult to differentiate from one written by humans.

   [103]andrej karpathy   s character level id56 model is one such
   masterpiece, a sufficiently trained model on this framework gives some
   eye-popping [104]results. also, there are models which can
   [105]generate clickbaits via an automated process and grab people   s
   attention!

   in all, text generators can find great applications, right from
   creating original art, to regenerating content that has been lost. one
   revolutionary application of such text generators could be the point
   where we could train them to write and manipulate code. imagine a world
   where computer programs and algorithms can modify themselves, as and
   when required.

   please use the below comments section to ask any questions or leave any
   feedback.

[106]learn, [107]engage, [108]compete & [109]get hired.

   you can also read this article on analytics vidhya's android app
   [110]get it on google play

share this:

     * [111]click to share on linkedin (opens in new window)
     * [112]click to share on facebook (opens in new window)
     * [113]click to share on twitter (opens in new window)
     * [114]click to share on pocket (opens in new window)
     * [115]click to share on reddit (opens in new window)
     *

like this:

   like loading...

related articles

   [ins: :ins]

   tags : [116]data science, [117]deep learning, [118]deep learning
   application, [119]lstm, [120]machine learning, [121]nlp, [122]python,
   [123]text generation
   next article

commit assistant, an ai from ubisoft, can now predict errors in the code
before you make them

   previous article

intela launches farrago, an online tool to deal with dirty data

[124]pranjal srivastava

   i am a senior undergraduate at iit (bhu), varanasi and a deep learning
   enthusiast. data is surely going to be the biggest thing of this
   century, instead of witnessing this as a mere spectator, i chose to be
   a part of this revolution.
     *
     *
     *

   this article is quite old and you might not get a prompt response from
   the author. we request you to post this comment on analytics vidhya's
   [125]discussion portal to get your queries resolved

17 comments

     * shrishty chandra says:
       [126]march 6, 2018 at 2:32 pm
       good article.
       [127]reply
          + pranjal srivastava says:
            [128]march 7, 2018 at 9:21 am
            thanks shrishty!
            [129]reply
     * [130]hassine saidane says:
       [131]march 6, 2018 at 3:26 pm
       great topic. how about generating music? can you write an article
       on magenta?
       thanks
       [132]reply
          + pranjal srivastava says:
            [133]march 8, 2018 at 11:03 am
            i am actually planning to write something on that. thanks.
            [134]reply
     * solo says:
       [135]march 7, 2018 at 7:29 am
       good article!
       did not find a link to the github
       [136]reply
          + pranjal srivastava says:
            [137]march 7, 2018 at 10:29 am
            thanks. please find the github repo at
            [138]https://github.com/pranjal52/text_generators
            [139]reply
     * carlos says:
       [140]march 7, 2018 at 8:35 am
       shouldn   t the function char_to_n be char_to_n = {char: n for n,
       char in enumerate(characters)} ?
       i believe some random text got mixed with the code.
       [141]reply
          + pranjal srivastava says:
            [142]march 9, 2018 at 12:20 pm
            that was some typo, corrected it. thanks for pointing it out.
            [143]reply
     * carlos says:
       [144]march 7, 2018 at 8:40 am
       missing: from keras.utils import np_utils
       [145]reply
          + pranjal srivastava says:
            [146]march 9, 2018 at 11:48 am
            thanks for pointing it out. made the necessary changes.
            [147]reply
     * [148]varsha says:
       [149]march 7, 2018 at 4:16 pm
       this helped me a lot.
       thanks for sharing.
       [150]reply
          + pranjal srivastava says:
            [151]march 9, 2018 at 11:35 am
            glad it could help. thanks.
            [152]reply
     * [153]varsha says:
       [154]march 7, 2018 at 4:18 pm
       thank you for sharing. it helped me a lot
       [155]reply
     * sparsha says:
       [156]april 10, 2018 at 3:09 pm
       nice post..
       [157]reply
     * sajid chaudhry says:
       [158]may 29, 2018 at 12:02 pm
       this is brilliant pranjal. thanks for sharing it.
       [159]reply
     * valentin says:
       [160]may 29, 2018 at 11:22 pm
       thanks for sharing the information above, very useful guide that
       helped me a lot.
       [161]reply
     * bob says:
       [162]october 17, 2018 at 10:56 pm
       the line that actually trains the model:
       model.fit(x_modified, y_modified, epochs=1, batch_size=100)
       should be included in this blog article.
       [163]reply

   [ins: :ins]

top analytics vidhya users

   rank                  name                  points
   1    [1.jpg?date=2019-04-06] [164]srk       3924
   2    [2.jpg?date=2019-04-06] [165]mark12    3510
   3    [3.jpg?date=2019-04-06] [166]nilabha   3261
   4    [4.jpg?date=2019-04-06] [167]nitish007 3237
   5    [5.jpg?date=2019-04-06] [168]tezdhar   3082
   [169]more user rankings
   [ins: :ins]
   [ins: :ins]

popular posts

     * [170]24 ultimate data science projects to boost your knowledge and
       skills (& can be accessed freely)
     * [171]understanding support vector machine algorithm from examples
       (along with code)
     * [172]essentials of machine learning algorithms (with python and r
       codes)
     * [173]a complete tutorial to learn data science with python from
       scratch
     * [174]7 types of regression techniques you should know!
     * [175]6 easy steps to learn naive bayes algorithm (with codes in
       python and r)
     * [176]a simple introduction to anova (with applications in excel)
     * [177]stock prices prediction using machine learning and deep
       learning techniques (with python codes)

   [ins: :ins]

recent posts

   [178]top 5 machine learning github repositories and reddit discussions
   from march 2019

[179]top 5 machine learning github repositories and reddit discussions from
march 2019

   april 4, 2019

   [180]id161 tutorial: a step-by-step introduction to image
   segmentation techniques (part 1)

[181]id161 tutorial: a step-by-step introduction to image
segmentation techniques (part 1)

   april 1, 2019

   [182]nuts and bolts of id23: introduction to temporal
   difference (td) learning

[183]nuts and bolts of id23: introduction to temporal
difference (td) learning

   march 28, 2019

   [184]16 opencv functions to start your id161 journey (with
   python code)

[185]16 opencv functions to start your id161 journey (with python
code)

   march 25, 2019

   [186][ds-finhack.jpg]

   [187][hikeathon.png]

   [av-white.d14465ee4af2.png]

analytics vidhya

     * [188]about us
     * [189]our team
     * [190]career
     * [191]contact us
     * [192]write for us

   [193]about us
   [194]   
   [195]our team
   [196]   
   [197]careers
   [198]   
   [199]contact us

data scientists

     * [200]blog
     * [201]hackathon
     * [202]discussions
     * [203]apply jobs
     * [204]leaderboard

companies

     * [205]post jobs
     * [206]trainings
     * [207]hiring hackathons
     * [208]advertising
     * [209]reach us

   don't have an account? [210]sign up here.

join our community :

   [211]46336 [212]followers
   [213]20222 [214]followers
   [215]followers
   [216]7513 [217]followers
   ____________________ >

      copyright 2013-2019 analytics vidhya.
     * [218]privacy policy
     * [219]terms of use
     * [220]refund policy

   don't have an account? [221]sign up here

   iframe: [222]likes-master

   %d bloggers like this:

   [loading.gif]
   ____________________

   ____________________

   ____________________
   [button input] (not implemented)_________________

   download resource

join the nextgen data science ecosystem

     * learn: get access to some of the best courses on data science
       created by us
     * engage: interact with thousands of data science professionals
       across the globe!
     * compete: compete in our hackathons and win exciting prizes
     * get hired: get information of jobs in data science community and
       build your profile

   [223](button) join now

   subscribe!

   iframe: [224]likes-master

   %d bloggers like this:

   [loading.gif]
   ____________________

   ____________________

   ____________________
   [button input] (not implemented)_________________

   download resource

join the nextgen data science ecosystem

     * learn: get access to some of the best courses on data science
       created by us
     * engage: interact with thousands of data science professionals
       across the globe!
     * compete: compete in our hackathons and win exciting prizes
     * get hired: get information of jobs in data science community and
       build your profile

   [225](button) join now

   subscribe!

references

   visible links
   1. https://www.analyticsvidhya.com/feed/
   2. https://www.analyticsvidhya.com/comments/feed/
   3. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/feed/
   4. https://www.analyticsvidhya.com/wp-json/oembed/1.0/embed?url=https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/
   5. https://www.analyticsvidhya.com/wp-json/oembed/1.0/embed?url=https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/&format=xml
   6. https://googletagmanager.com/ns.html?id=gtm-mpsm42v
   7. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=blog&utm_medium=flashstrip
   8. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/
   9. https://www.analyticsvidhya.com/blog-archive/
  10. https://www.analyticsvidhya.com/blog/category/machine-learning/
  11. https://www.analyticsvidhya.com/blog/category/deep-learning/
  12. https://www.analyticsvidhya.com/blog/category/career/
  13. https://www.analyticsvidhya.com/blog/category/stories/
  14. https://www.analyticsvidhya.com/blog/category/podcast/
  15. https://www.analyticsvidhya.com/blog/category/infographics/
  16. https://courses.analyticsvidhya.com/?utm_source=home_blog_navbar
  17. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/
  18. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-business-analyst-sas/
  19. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-r-data-science/
  20. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-data-science-python/
  21. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/weka-gui-learn-machine-learning/
  22. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/tableau-learning-path/
  23. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/qlikview-learning-path/
  24. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/newbie-d3-js-expert-complete-path-create-interactive-visualization-d3-js/
  25. https://www.analyticsvidhya.com/glossary-of-common-statistics-and-machine-learning-terms/
  26. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/
  27. https://discuss.analyticsvidhya.com/
  28. https://www.analyticsvidhya.com/blog/category/events/
  29. https://www.analyticsvidhya.com/datahack-summit-2018/
  30. https://www.analyticsvidhya.com/datahacksummit/
  31. https://www.analyticsvidhya.com/student-datafest-2018/?utm_source=homepage_menu
  32. http://www.analyticsvidhya.com/about-me/write/
  33. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/
  34. https://datahack.analyticsvidhya.com/contest/all
  35. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/
  36. https://www.analyticsvidhya.com/jobs/
  37. https://courses.analyticsvidhya.com/
  38. https://courses.analyticsvidhya.com/courses/computer-vision-using-deep-learning/?utm_source=blog-navbar&utm_medium=web
  39. https://courses.analyticsvidhya.com/courses/natural-language-processing-nlp/?utm_source=blog-navbar&utm_medium=web
  40. https://courses.analyticsvidhya.com/courses/introduction-to-data-science-2/?utm_source=blog-navbar&utm_medium=web
  41. https://courses.analyticsvidhya.com/courses/microsoft-excel-beginners-to-advanced/?utm_source=blog-navbar&utm_medium=web
  42. https://courses.analyticsvidhya.com/collections/?utm_source=blog-navbar&utm_medium=web
  43. https://www.analyticsvidhya.com/contact/
  44. https://www.analyticsvidhya.com/
  45. https://www.analyticsvidhya.com/blog-archive/
  46. https://courses.analyticsvidhya.com/?utm_source=home_blog_navbar
  47. https://discuss.analyticsvidhya.com/
  48. https://datahack.analyticsvidhya.com/
  49. https://www.analyticsvidhya.com/jobs/
  50. https://www.analyticsvidhya.com/corporate/
  51. https://www.analyticsvidhya.com/blog/
  52. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=avtopbanner&utm_medium=display
  53. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=avtopbanner&utm_medium=display
  54. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=avtopbanner&utm_medium=display
  55. https://www.analyticsvidhya.com/blog/
  56. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/
  57. https://www.analyticsvidhya.com/blog-archive/
  58. https://www.analyticsvidhya.com/blog/category/machine-learning/
  59. https://www.analyticsvidhya.com/blog/category/deep-learning/
  60. https://www.analyticsvidhya.com/blog/category/career/
  61. https://www.analyticsvidhya.com/blog/category/stories/
  62. https://www.analyticsvidhya.com/blog/category/podcast/
  63. https://www.analyticsvidhya.com/blog/category/infographics/
  64. https://courses.analyticsvidhya.com/?utm_source=home_blog_navbar
  65. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/
  66. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-business-analyst-sas/
  67. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-r-data-science/
  68. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-data-science-python/
  69. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/weka-gui-learn-machine-learning/
  70. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/tableau-learning-path/
  71. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/qlikview-learning-path/
  72. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/newbie-d3-js-expert-complete-path-create-interactive-visualization-d3-js/
  73. https://www.analyticsvidhya.com/glossary-of-common-statistics-and-machine-learning-terms/
  74. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/
  75. https://discuss.analyticsvidhya.com/
  76. https://www.analyticsvidhya.com/blog/category/events/
  77. https://www.analyticsvidhya.com/datahack-summit-2018/
  78. https://www.analyticsvidhya.com/datahacksummit/
  79. https://www.analyticsvidhya.com/student-datafest-2018/?utm_source=homepage_menu
  80. http://www.analyticsvidhya.com/about-me/write/
  81. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/
  82. https://datahack.analyticsvidhya.com/contest/all
  83. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/
  84. https://www.analyticsvidhya.com/jobs/
  85. https://courses.analyticsvidhya.com/
  86. https://courses.analyticsvidhya.com/courses/computer-vision-using-deep-learning/?utm_source=blog-navbar&utm_medium=web
  87. https://courses.analyticsvidhya.com/courses/natural-language-processing-nlp/?utm_source=blog-navbar&utm_medium=web
  88. https://courses.analyticsvidhya.com/courses/introduction-to-data-science-2/?utm_source=blog-navbar&utm_medium=web
  89. https://courses.analyticsvidhya.com/courses/microsoft-excel-beginners-to-advanced/?utm_source=blog-navbar&utm_medium=web
  90. https://courses.analyticsvidhya.com/collections/?utm_source=blog-navbar&utm_medium=web
  91. https://www.analyticsvidhya.com/contact/
  92. https://www.analyticsvidhya.com/
  93. https://www.analyticsvidhya.com/blog/category/deep-learning/
  94. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/
  95. https://www.analyticsvidhya.com/blog/category/deep-learning/
  96. https://www.analyticsvidhya.com/blog/category/machine-learning/
  97. https://www.analyticsvidhya.com/blog/category/nlp/
  98. https://www.analyticsvidhya.com/blog/category/python-2/
  99. https://www.analyticsvidhya.com/blog/author/pranj52/
 100. https://www.analyticsvidhya.com/blog/2017/12/fundamentals-of-deep-learning-introduction-to-lstm/
 101. http://www.gutenberg.org/cache/epub/1041/pg1041.txt
 102. https://github.com/pranjal52/text_generators
 103. https://github.com/karpathy/char-id56
 104. https://cs.stanford.edu/people/karpathy/char-id56/pg.txt
 105. https://larseidnes.com/2015/10/13/auto-generating-clickbait-with-recurrent-neural-networks/
 106. https://www.analyticsvidhya.com/blog/
 107. https://discuss.analyticsvidhya.com/
 108. https://datahack.analyticsvidhya.com/contest/all/
 109. http://analyticsvidhya.com/jobs
 110. https://play.google.com/store/apps/details?id=com.analyticsvidhya.android&utm_source=blog_article&utm_campaign=blog&pcampaignid=mkt-other-global-all-co-prtnr-py-partbadge-mar2515-1
 111. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/?share=linkedin
 112. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/?share=facebook
 113. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/?share=twitter
 114. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/?share=pocket
 115. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/?share=reddit
 116. https://www.analyticsvidhya.com/blog/tag/data-science/
 117. https://www.analyticsvidhya.com/blog/tag/deep-learning/
 118. https://www.analyticsvidhya.com/blog/tag/deep-learning-application/
 119. https://www.analyticsvidhya.com/blog/tag/lstm/
 120. https://www.analyticsvidhya.com/blog/tag/machine-learning/
 121. https://www.analyticsvidhya.com/blog/tag/nlp/
 122. https://www.analyticsvidhya.com/blog/tag/python/
 123. https://www.analyticsvidhya.com/blog/tag/text-generation/
 124. https://www.analyticsvidhya.com/blog/author/pranj52/
 125. https://discuss.analyticsvidhya.com/
 126. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151721
 127. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151721
 128. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151737
 129. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151737
 130. http://h/
 131. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151722
 132. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151722
 133. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151758
 134. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151758
 135. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151733
 136. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151733
 137. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151739
 138. https://github.com/pranjal52/text_generators
 139. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151739
 140. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151735
 141. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151735
 142. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151794
 143. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151794
 144. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151736
 145. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151736
 146. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151793
 147. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151793
 148. https://www.it-skillstraining.com/blog/how-to-build-career-in-data-science/
 149. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151745
 150. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151745
 151. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151792
 152. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151792
 153. https://www.it-skillstraining.com/blog/how-to-build-career-in-data-science/
 154. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151746
 155. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-151746
 156. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-152490
 157. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-152490
 158. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-153635
 159. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-153635
 160. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-153662
 161. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-153662
 162. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-155361
 163. https://www.analyticsvidhya.com/blog/2018/03/text-generation-using-python-nlp/#comment-155361
 164. https://datahack.analyticsvidhya.com/user/profile/srk
 165. https://datahack.analyticsvidhya.com/user/profile/mark12
 166. https://datahack.analyticsvidhya.com/user/profile/nilabha
 167. https://datahack.analyticsvidhya.com/user/profile/nitish007
 168. https://datahack.analyticsvidhya.com/user/profile/tezdhar
 169. https://datahack.analyticsvidhya.com/top-competitor/?utm_source=blog-navbar&utm_medium=web
 170. https://www.analyticsvidhya.com/blog/2018/05/24-ultimate-data-science-projects-to-boost-your-knowledge-and-skills/
 171. https://www.analyticsvidhya.com/blog/2017/09/understaing-support-vector-machine-example-code/
 172. https://www.analyticsvidhya.com/blog/2017/09/common-machine-learning-algorithms/
 173. https://www.analyticsvidhya.com/blog/2016/01/complete-tutorial-learn-data-science-python-scratch-2/
 174. https://www.analyticsvidhya.com/blog/2015/08/comprehensive-guide-regression/
 175. https://www.analyticsvidhya.com/blog/2017/09/naive-bayes-explained/
 176. https://www.analyticsvidhya.com/blog/2018/01/anova-analysis-of-variance/
 177. https://www.analyticsvidhya.com/blog/2018/10/predicting-stock-price-machine-learningnd-deep-learning-techniques-python/
 178. https://www.analyticsvidhya.com/blog/2019/04/top-5-machine-learning-github-reddit/
 179. https://www.analyticsvidhya.com/blog/2019/04/top-5-machine-learning-github-reddit/
 180. https://www.analyticsvidhya.com/blog/2019/04/introduction-image-segmentation-techniques-python/
 181. https://www.analyticsvidhya.com/blog/2019/04/introduction-image-segmentation-techniques-python/
 182. https://www.analyticsvidhya.com/blog/2019/03/reinforcement-learning-temporal-difference-learning/
 183. https://www.analyticsvidhya.com/blog/2019/03/reinforcement-learning-temporal-difference-learning/
 184. https://www.analyticsvidhya.com/blog/2019/03/opencv-functions-computer-vision-python/
 185. https://www.analyticsvidhya.com/blog/2019/03/opencv-functions-computer-vision-python/
 186. https://datahack.analyticsvidhya.com/contest/ltfs-datascience-finhack-an-online-hackathon/?utm_source=sticky_banner1&utm_medium=display
 187. https://datahack.analyticsvidhya.com/contest/hikeathon/?utm_source=sticky_banner2&utm_medium=display
 188. http://www.analyticsvidhya.com/about-me/
 189. https://www.analyticsvidhya.com/about-me/team/
 190. https://www.analyticsvidhya.com/career-analytics-vidhya/
 191. https://www.analyticsvidhya.com/contact/
 192. https://www.analyticsvidhya.com/about-me/write/
 193. http://www.analyticsvidhya.com/about-me/
 194. https://www.analyticsvidhya.com/about-me/team/
 195. https://www.analyticsvidhya.com/about-me/team/
 196. https://www.analyticsvidhya.com/about-me/team/
 197. https://www.analyticsvidhya.com/career-analytics-vidhya/
 198. https://www.analyticsvidhya.com/about-me/team/
 199. https://www.analyticsvidhya.com/contact/
 200. https://www.analyticsvidhya.com/blog
 201. https://datahack.analyticsvidhya.com/
 202. https://discuss.analyticsvidhya.com/
 203. https://www.analyticsvidhya.com/jobs/
 204. https://datahack.analyticsvidhya.com/users/
 205. https://www.analyticsvidhya.com/corporate/
 206. https://trainings.analyticsvidhya.com/
 207. https://datahack.analyticsvidhya.com/
 208. https://www.analyticsvidhya.com/contact/
 209. https://www.analyticsvidhya.com/contact/
 210. https://datahack.analyticsvidhya.com/signup/
 211. https://www.facebook.com/analyticsvidhya/
 212. https://www.facebook.com/analyticsvidhya/
 213. https://twitter.com/analyticsvidhya
 214. https://twitter.com/analyticsvidhya
 215. https://plus.google.com/+analyticsvidhya
 216. https://in.linkedin.com/company/analytics-vidhya
 217. https://in.linkedin.com/company/analytics-vidhya
 218. https://www.analyticsvidhya.com/privacy-policy/
 219. https://www.analyticsvidhya.com/terms/
 220. https://www.analyticsvidhya.com/refund-policy/
 221. https://id.analyticsvidhya.com/accounts/signup/
 222. https://widgets.wp.com/likes/master.html?ver=201914#ver=201914
 223. https://id.analyticsvidhya.com/accounts/login/?next=https://www.analyticsvidhya.com/blog/&utm_source=blog-subscribe&utm_medium=web
 224. https://widgets.wp.com/likes/master.html?ver=201914#ver=201914
 225. https://id.analyticsvidhya.com/accounts/login/?next=https://www.analyticsvidhya.com/blog/&utm_source=blog-subscribe&utm_medium=web

   hidden links:
 227. https://www.facebook.com/analyticsvidhya
 228. https://twitter.com/analyticsvidhya
 229. https://plus.google.com/+analyticsvidhya/posts
 230. https://in.linkedin.com/company/analytics-vidhya
 231. https://www.analyticsvidhya.com/blog/2018/03/commit-assistant-ubisoft-ai-predict-errors-code/
 232. https://www.analyticsvidhya.com/blog/2018/03/intela-launched-farrago-deal-dirty-data/
 233. https://www.analyticsvidhya.com/blog/author/pranj52/
 234. https://www.analyticsvidhya.com/cdn-cgi/l/email-protection#047476656a6e65682a77766d726577706572652a6761763530446d6d70666c712a65672a6d6a
 235. https://www.facebook.com/pranjal.srivastava3
 236. https://www.linkedin.com/in/pranjal52/
 237. http://www.edvancer.in/certified-data-scientist-with-python-course?utm_source=av&utm_medium=avads&utm_campaign=avadsnonfc&utm_content=pythonavad
 238. https://www.facebook.com/analyticsvidhya/
 239. https://twitter.com/analyticsvidhya
 240. https://plus.google.com/+analyticsvidhya
 241. https://plus.google.com/+analyticsvidhya
 242. https://in.linkedin.com/company/analytics-vidhya
 243. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 244. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 245. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 246. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 247. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 248. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 249. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 250. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 251. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 252. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 253. javascript:void(0);
 254. javascript:void(0);
 255. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 256. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 257. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 258. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 259. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 260. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 261. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 262. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 263. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 264. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f03%2ftext-generation-using-python-nlp%2f&linkname=how%20to%20create%20a%20poet%20%2f%20writer%20using%20deep%20learning%20%28text%20generation%20using%20python%29%3f
 265. javascript:void(0);
 266. javascript:void(0);
