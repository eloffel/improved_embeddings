   #[1]needlessly complex

   [2]needlessly complex

   [3]about

   why do it by hand if you can code it in just quadruple the time?

why every gfx/cv/robotics programmer should love sympy (part 1)

   apr 6, 2018

   tips and tricks for being an effective (aka lazy) mathematical
   programmer.

   if you   re looking for [4]a basic tutorial of sympy, this is not the
   best place to begin. instead, my goal is to provide a series of case
   studies of actual instances where i   ve used symbolic math in
      real-world    projects.^[5]1 part 1 (this post) will cover equation
   solving using sympy. a future post will delve further into derivatives
   and gradients.

   update: [6]part 2 and [7]part 3 of this series have now been posted.

who should read this, what   s sympy, and why do i care?

   this series of posts assumes a working knowledge of id202,
   trigonometry, and derivatives, as well as familiarity with programming
   in python. the target audience is coders working in math-heavy domains
   who occasionally need to:
     * solve systems of (possibly nonlinear) equations
     * figure out expressions for derivatives and gradients
     * verify their code agrees with an analytic solution

   i routinely use [8]sympy to do all of these. from its own description,

     sympy is a python library for symbolic mathematics. it aims to
     become a full-featured computer algebra system (cas) while keeping
     the code as simple as possible in order to be comprehensible and
     easily extensible. sympy is written entirely in python.

   the crux of symbolic mathematics is defining variables that, instead of
   storing a particular integer or string, are abstract placeholders for
   mathematical quantities. we can reason about these placeholder
   variables just as we can reason about the equation without needing to
   know the particlar values of , , or .

   getting started with symbolic math can be awkward because it goes
   against our experience as programmers of a variable being a    storage
   slot    that holds a concrete value; however, it   s a powerful framework
   because abstract symbol manipulation is exactly how we do
   pencil-and-paper math.

   you can think of a computer algebra system (cas) as combining these
   symbols with a set of [9]production rules or [10]id136 rules that
   represent the laws of mathematics. so if you feed your cas an equation
   of the form , it    knows    that it can multiply both sides by to obtain .

   now add to that knowledge every trig identity you   ve ever forgotten
   from high school, all of the exp/log identities, rules for limits,
   derivatives (including chain rule, product rule, etc.) and integrals,
   and you can begin to see why this type of software might be
   particularly useful.

case study 1: finding the general form of a function and its inverse

   when i was studying [11]approximately area-preserving cube-to-sphere
   projections for [12]cool procedural texturing applications, i came
   across a function designed by [13]cass everitt designed to prewarp cube
   faces in order to equalize projected area for cubemap textures.

     i like this cube distortion function. better sampling in the center
     of each face, and hardware cheap. [14]pic.twitter.com/8yj5lkquxv
         cass everitt (@casseveritt) [15]january 1, 2015

   in case you can   t see the tweet above, the forward and inverse
   functions are given by:

   (note i swap the roles of and in the second equation to make the
   forward/inverse relationship clearer.) everitt also has a [16]github
   repo where you can find a similar-looking forward/inverse pair:

   looking at these two pairs, i suspected they were two particular cases
   of some more general formula.

   goal: derive the general formula for the forward and inverse mapping
   from these two examples.

   well, looking at the forward equations, we can guess that the general
   form for the forward function is

   for some . actually, that makes sense for the domain because when , we
   get , and when we get , so the center and edge of the cube map are
   fixed in place.

   what   s the inverse of this little quadratic function? we could find it
   [17]by hand, but let   s just fire up sympy:
from __future__ import print_function # still using python 2.7
import sympy

# create a symbolic variable for each symbol in our equation
y, x, k = sympy.symbols('y, x, k', real=true)

# define the equation y = kx - (1-k)x^2
fwd_equation = sympy.eq(y, k*x - (k - 1)*x**2)

# solve the equation for x and print solutions
inverse = sympy.solve(fwd_equation, x)
print('found {} solutions for x:'.format(len(inverse)))
print('\n'.join([str(s) for s in inverse]))

   it outputs
found 2 solutions for x:
(k - sqrt(k**2 - 4*k*y + 4*y))/(2*(k - 1))
(k + sqrt(k**2 - 4*k*y + 4*y))/(2*(k - 1))

   let   s see how that first solution looks when we substitute in or :
print(inverse[0].subs(k, 1.5).simplify())
print(inverse[0].subs(k, 1.375).simplify())

   this gives
-1.0*sqrt(-2.0*y + 2.25) + 1.5
-1.33333333333333*sqrt(-1.5*y + 1.890625) + 1.83333333333333

   although these aren   t identical to the formulas everitt provides,
   plotting them over the range for reveals they are equivalent. so we   ve
   accomplished our goal of finding the general forward and inverse
   functions.

   let   s conclude this example with a nice trick for any users of latex or
   [18]mathjax: we   ll ask sympy to typeset the inverse formula for us.
print('x =', sympy.latex(inverse[0]))

   it gives the output
x = \frac{1}{2 \left(k - 1\right)} \left(k - \sqrt{k^{2} - 4 k y + 4 y}\right)

   the result looks like this:

   now you can write a python script to spit its output directly into your
   next graphics paper!

case study 2: solving systems of equations

   for my [19]wythoff explorer shader on shadertoy (pictured below),

   [20]wythoff explorer shader screenshot

   all of the rendering begins by constructing a triangle on the unit
   sphere with angles of , , and (these angles are set by the spin boxes
   surrounding the numbers in the graphic above). call the corresponding
   vertices of this triangle , , and .

   goal: solve for these vertices such that the desired angles are formed.

   the sides of a spherical triangle on the unit sphere can be represented
   as planes passing through the origin, therefore we can represent each
   side using only its unit-length normal vector . call the three sides ,
   , and according to which angle they lie opposite from.

   to pin down the triangle on the sphere, let   s fix and also fix to be
   normal to the -axis. note that passes through by construction because .
   overall, the situation looks like this:

   a spherical triangle diagram

   our solution strategy will be to find the remaining sides of the
   triangle and , and then solve for the points from there because we can
   just write

   that is, and are the unit vectors lying on the intersections of the
   respective edges shown above.

   so now let   s solve for . we will tell sympy to find the values of that
   satisfy three constraints:
     * the edge contains .
     * the dihedral angle formed by the planes with normals and is .
     * is a unit vector.

   note that taking the dot product of two planes    normal vectors gives
   the negative cosine of their dihedral angle, so the middle constraint
   above can be expressed as . here   s the corresponding sympy code:
from __future__ import print_function # still using python 2.7
import sympy

# create some symbols for angles
p, q, r = sympy.symbols('p, q, r', real=true)

# create some symbols for unknown elements of lq
x1, y1, z1 = sympy.symbols('x1, y1, z1')

# define vectors we know so far
p = sympy.matrix([0, 0, 1])
lr = sympy.matrix([1, 0, 0])
lq = sympy.matrix([x1, y1, z1])

lq_equations = [
    sympy.eq(lq.dot(p), 0),              # lq contains p
    sympy.eq(lq.dot(lr), -sympy.cos(p)), # angle at point p
    sympy.eq(lq.dot(lq), 1)              # lq is a unit vector
]

s = sympy.solve(lq_equations, x1, y1, z1, dict=true, simplify=true)
print('found {} solutions for lq:'.format(len(s)))
print('\n'.join([sympy.pretty(sln) for sln in s])) # ask for pretty output

lq = lq.subs(s[1])
print('now lq is {}'.format(lq))

      and its output (note fancy unicode subscripts thanks to sympy.pretty):
found 2 solutions for lq:
{x   : -cos(p), y   : -   sin(p)   , z   : 0}
{x   : -cos(p), y   :    sin(p)   , z   : 0}
now lq is matrix([[-cos(p)], [abs(sin(p))], [0]])

   a couple notes about the code above: we define symbols using real=true
   because it enables some trigonometric simplifications that sympy won   t
   apply if it thinks variables might be complex numbers (which is the
   default assumption). also we provide sympy.solve the options dict=true
   and simplify=true     the former provides the solutions as a list of
   python dictionaries that are easy to use with subs, and the latter
   because it applies useful trig identities like (which was actually
   needed to get a succinct solution here).

   one of sympy   s quirks is that it sometimes adds extraneous details to
   solutions like the absolute value above (not needed here because and
   are equivalent sets of values). removing these is quick once you notice
   them. here   s the code to get rid of the stray abs:
lq = lq.subs(sympy.abs(sympy.sin(p)), sympy.sin(p))
print('after subbing out abs, lq is {}'.format(lq))

      once more, the output:
after subbing out abs, lq is matrix([[-cos(p)], [sin(p)], [0]])

   this raises the important point that using a cas is not always a
   turn-key operation. it   s better to think of it more as a collaboration
   or conversation between you and the computer. it   s great at blindly
   applying rules, but doesn   t always know exactly what you want. so you
   write your program incrementally, working with the cas as you go. it   s
   the perfect use case for the [21]read-eval-print loop (repl) or even an
   interactive python shell like [22]jupyter notebook.

   anyways, let   s manually verify that the solution worked. this is
   absolutely unnecessary because sympy.solve doesn   t return incorrect
   solutions, but it can be a nice sanity check, and the code is short,
   anyways:
print('checking our work:')
print('  lq . p  =', lq.dot(p))
print('  lq . lr =', lq.dot(lr))
print('  lq . lq =', lq.dot(lq)))

   gives the output:
  lq . p  = 0
  lq . lr = -cos(p)
  lq . lq = sin(p)**2 + cos(p)**2

   oops, looks like that last item could be simplified. let   s try that
   again:
print('  lq . lq =', lq.dot(lq).simplify())

   it yields
  lq . lq = 1

   phew. all the constraints were satisfied, and i got to show you
   sympy.simplify in action.

   now we can go through a similar process to solve for , except this time
   we will explicitly encode the unit-length constraint into its
   -coordinate.^[23]2
x2, y2 = sympy.symbols('x2, y2')
z2 = sympy.sqrt(1 - x2**2 - y2**2)

lp = sympy.matrix([x2, y2, z2])
print('||lp||^2 =', lp.dot(lp))

lp_equations = [
    sympy.eq(lp.dot(lr), -sympy.cos(q)),
    sympy.eq(lp.dot(lq), -sympy.cos(r)),
]

s = sympy.solve(lp_equations, x2, y2, dict=true, simplify=true)
print('got {} solutions for lp'.format(len(s)))
print('\n'.join([sympy.pretty(sln) for sln in s]))

lp = lp.subs(s[0])
print('now lp is {}'.format(lp))

   and the output (now with fancy ascii fractions thanks to sympy.pretty):
||lp||^2 = 1
got 1 solutions for lp
                    -(cos(p)   cos(q) + cos(r))    
   x   : -cos(q), y   :                                                                                  
                              sin(p)             
now lp is matrix([[-cos(q)], [-(cos(p)*cos(q) + cos(r))/sin(p)], [sqrt(-(cos(p)*
cos(q) + cos(r))**2/sin(p)**2 - cos(q)**2 + 1)]])

   here   s the relvant glsl snippet from the shader linked above,
   reflecting the full solution we obtained:
vec3 lr = vec3(1, 0, 0);
vec3 lq = vec3(-cp, sp, 0);
vec3 lp = vec3(-cq, -(cr + cp*cq)/sp, 0);
lp.z = sqrt(1.0 - dot(lp.xy, lp.xy));

vec3 p = normalize(cross(lr, lq));
vec3 q = normalize(cross(lp, lr));
vec3 r = normalize(cross(lq, lp));

   yeah, i know this is all fundamentally id202 and trig, but for
   me, coding it up in sympy can be much faster than pencil-and-paper
   derivation, and it   s guaranteed to be correct     provided i set up the
   problem faithfully in the first place.

next time   

   that   s the end of part 1! next time we   re going to take an in-depth
   look at using sympy to compute symbolic derivatives and gradients, with
   applications in nonlinear least squares and deriving id203
   density functions. stay tuned!

   questions/comments? chime in on [24]this twitter thread!
    1.    to the extent that making pretty pictures on a computer screen is
       a    real-world    use-case. [25]   
    2. if we specified this constraint as a third equation and unknown,
       sympy would find multiple solutions; this just gives us a single,
       more concise expression. [26]   

references

   visible links
   1. https://mzucker.github.io/feed.xml
   2. https://mzucker.github.io/
   3. https://mzucker.github.io/about/
   4. http://docs.sympy.org/latest/tutorial/index.html
   5. https://mzucker.github.io/2018/04/06/why-every-gfx-cv-robotics-programmer-should-love-sympy.html#fn:1
   6. https://mzucker.github.io/2018/04/11/sympy-case-studies-part-2-derivatives.html
   7. https://mzucker.github.io/2018/04/12/sympy-part-3-moar-derivatives.html
   8. http://www.sympy.org/
   9. https://en.wikipedia.org/wiki/production_(computer_science)
  10. https://en.wikipedia.org/wiki/rule_of_id136
  11. https://www.shadertoy.com/view/xdlfdl
  12. https://www.shadertoy.com/view/mtbgrd
  13. https://twitter.com/casseveritt
  14. http://t.co/8yj5lkquxv
  15. https://twitter.com/casseveritt/status/550483976243412993?ref_src=twsrc^tfw
  16. https://github.com/casseveritt/projection/blob/ee0c792a748d6786ce6010d839f4f1f43e71184b/envmap.h#l197
  17. https://en.wikipedia.org/wiki/quadratic_formula
  18. https://www.mathjax.org/
  19. https://www.shadertoy.com/view/md3yrb
  20. https://www.shadertoy.com/view/md3yrb
  21. https://en.wikipedia.org/wiki/read   eval   print_loop
  22. http://jupyter.org/
  23. https://mzucker.github.io/2018/04/06/why-every-gfx-cv-robotics-programmer-should-love-sympy.html#fn:2
  24. https://twitter.com/matt_zucker/status/982327904871833601
  25. https://mzucker.github.io/2018/04/06/why-every-gfx-cv-robotics-programmer-should-love-sympy.html#fnref:1
  26. https://mzucker.github.io/2018/04/06/why-every-gfx-cv-robotics-programmer-should-love-sympy.html#fnref:2

   hidden links:
  28. https://mzucker.github.io/2018/04/06/why-every-gfx-cv-robotics-programmer-should-love-sympy.html
