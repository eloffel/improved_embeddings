   data science and machine learning company
   [1]hello@activewizards.com

[2]activewizards: data science and engineering lab

     * [3]home
     * [4]services
     * [5]clients
     * [6]technology
     * [7]our blog
     * [8]contact us

   [9]back to our blog [10]next article

a comparative analysis of chatbots apis

   [11]ai, [12]data science, [13]machine learning, [14]trends
     __________________________________________________________________

   a comparative analysis of chatbots apis

table of contents:

     * [15]chatbots: what are they today?
     * [16]why, where, and when to use chatbots?
     * [17]chatbot as a new user interface: the contemporary vision of
       bots
     * [18]how do chatbots understand tasks?
     * [19]types of bots: open / closed domain, generative /
       retrieval-based
     * [20]how to build chatbots
     * [21]prominent bot frameworks: botkit, microsoft bot framework, rasa
       nlu
     * [22]prominent ai services: wit.ai, api.ai, luis.ai, ibm watson
     * [23]conclusion

chatbots: what are they today?

   artificial intelligence is on the rise! not as a machine rebellion
   against human creators in the distant future, but as a growing modern
   trend of using machine-based predictions and decision-making in
   informational technologies. ai hype is everywhere: self-driving cars,
   smart image processing (e.g. [24]prisma), and communication domain use
   like conversational ai a.k.a. chatbots.

   the chatbot industry is expanding fast, yet the technologies are still
   young. conversational bots used to be rather vacant like the old school
   text-based game    i smell a wumpus   , but now they evolved into a top
   quality business tool. chatbots offer a new type of simple and friendly
   interface imperative for browsing information and receiving services.
   it experts and industry giants including google, microsoft, and
   facebook agree that this technology will play a huge role in the
   future.

   to enjoy the marvels of conversational artificial intelligence tools
   (or chatbots, if you are into brevity things), you must master the
   basics and understand the typical stack. in this article, we will
   discuss all kinds of instruments you can gear up with, how they are
   similar and at the same time different from each other, as well as
   their ups and downs.

   but before we hop on the journey of discovering these, let   s get into
   the deeper understanding of the chatbots and their topology.

why, where, and when to use chatbots?

   diverse chatbots facilitate a myriad of business tasks from advertising
   to team building operations, often sharing core common features.

personal assistant bots

   business matters require professional organizational assistance, but
   not all of us can afford a secretary to handle the basic tasks.
   luckily, chatbots are now here to help. they might be programmed to
   keep track of our work schedule and remind us about any upcoming
   events. this type of bots is useful since it is very simple in its
   foundation and uses the fast communication platforms - messaging
   systems as its interface.

customer support bots

   the chatbot may take on a more formidable task - being representative
   of a company in conducting interaction with actual clients. the
   customer support workflows are mostly predictable and scripted even for
   human staff, therefore easy to implement into a chatbot. the typical
   bot behavior algorithm is to accept the user   s query, parse it for
   information, find the similar cases in the database, and respond with a
   prebuilt answer.

team collaboration bots

   team collaboration bots

   using bots to support a team of developers is now extremely popular due
   to several reasons. it dwells in the development environment and thus
   is constantly under the scrutinous gaze of software engineers whose
   requirements for quality are much higher. however, the bot resolves a
   very strict set of tasks and accordingly does not require the
   complexity of commercial bots. they usually represent some simple
   scorekeepers, sentient chatbots that guard the development servers and
   report the commit information, simple schedulers and so on.

publisher / news bots

   publisher type of bot is gathering more and more interest daily. many
   grand news sources ([25]wsj, [26]nyt), as well as technological outlets
   ([27]techcrunch, [28]mit technology review) share content in a
   convenient form of brief text messages via major platforms like
   facebook messenger. the principle behind this bot is pretty simple: it
   gathers subscription information from the user, schedules the delivery
   of relevant news, and handles other user requests (e.g. unsubscribe,
   change the topic of subscription, explore).

entertainment bots

   entertainment bots are still rare and serve a peculiar purpose: to
   manage reservations of events/cinema/theater tickets in a
   dialogue-style workflow. some bots can also provide a full-fledged
   immersive experience of entertainment website via messenger. for
   example, fandango facebook bot allows users to watch new movie
   trailers, read reviews, and find cinema theaters in their proximity.
   cozy!

travel bots

   yet another popular and fast-growing use case for the bots is the
   assistance with travel. in this case, the customer-oriented chatbot
   strives to help people with sometimes strenuous work of selecting the
   optimal transportation mode and transforms the workflow of tedious form
   completion into a casual chat in the messenger app. the travel chatbot
   is not only able to retrieve and confirm the booking information, but
   also notify about the times like check-in beginning and boarding,
   update on the status of the flight, and gather valuable feedback from
   the customers.

chatbot as a new user interface: the contemporary vision of bots

   well, ultimately, the chatbot is a program, designed to handle
   communication with the human user via conventional conversation by
   textual means (chat platforms). it waits for the user to say something
   and answers it as programmed. this constitutes the bare bones of
   chatbot with the simple algorithm on its surface: accept and interpret
   the input, provide a relevant response to the output.

   however, chatbots are a bit more complicated than that since they now
   possess the power of context, either local (persistent in one
   conversation), or global (persistent across many dialogues, extending
   beyond the linguistic context, e.g. a pizza ordering bot that processes
   your current orders, location, timezone, etc.). while the former is
   usually saved in temporary memory like cookies or sessions, the latter
   is stored in databases or accessed inside party services via apis.

   having introduced the concept of context, we also threw in some web
   application terminology (cookies, sessions, databases), which gives a
   hint of what the chatbot is alike now. the chatbots share many traits
   with web applications, which serve pages online (they similarly accept
   requests and respond to them, they use many standard tools like
   databases). so in a sense, chatbots are web applications.

   accordingly, chatbots become a new type of interface to the information
   and services that exist. this interface is compact, easily accessible,
   and very simple. it also promotes your service far more from its
   residence (your website) to a variety of platforms, facilitating user
   access to it without the effect of advertising and marketing (the
   mechanism before: user sees the ad in the messenger chat, navigates the
   link to the website of the ad, orders product; the mechanism now: user
   sees the ad in the messenger chat, orders product right in the
   conversation).

how do chatbots understand tasks?

   the internal work of chatbots seems simple on the surface, yet, in
   practice, it is not so easy.

   the internal work of chatbots

   the bot must first understand what the user says. there are several
   options here: pattern matching of user input and classification of the
   intents with natural language processing (nlp). the former is fairly
   simple and straightforward in use, but rather hard to maintain at a
   bigger scale with flexible inputs. the latter relies on machine
   learning in interpreting the inputs and is harder to implement (at
   least without the help of platforms that already applied the
   technique). a set of examples is required to classify possible intents
   and identify the purpose of the particular input from a range of
   possibilities.

   luckily, there are some platforms that implement such logic, and you
   need not worry about every aspect of it and may use their services.
   however, you need to be familiar with the main nlp categories and their
   essence:
     * entities are specific mappings of natural language word
       combinations in the human discourse (verbal or written) to standard
       phrases conveying their unobscured meaning. these are much like
       extracted variables, for example, datetime specified like christmas
       will imply 2017-12-25.
     * intents, on an opposite, are general traits that map the user   s
       message to the corresponding bot action (prediction workflow). for
       example, the phrase    what is the weather today?    will map to
          weather_inquery    intent by its entire wording, and not some
       particular part.
     * actions are the steps that bot is capable of committing as a
       response to the corresponding intent. these are usually the
       conventional functions, which may take optional parameters from the
       caller with detailed information (context).

   contexts vary depending on the platform and do not have some strict
   form or topology. they are most commonly represented as key/value
   mappings. they keep track of current implications of entities and
   differentiate the meanings/intents of phrases.

virtual machines for data science

   [29]download

types of bots: open / closed domain, generative / retrieval-based

   well, we understand that chatbots constitute kind of web interfaces,
   but it is important to remember that it is an application of artificial
   intelligence and this implies the taxonomy, natural to it.

   having introduced the methods of bot   s language comprehensions, let   s
   take a look at a typology of bots with the regard of their purpose and
   responses.

   a typology of bots

   first of all, we can differentiate types of conversational ai basing on
   the sphere of the operation (whether it is strictly specialized in one
   domain, e.g. weather bot or pizza bot, or just a general
   conversationalist) and on the way it computes the response to the user
   from the input (will it retrieve the predefined response or will
   generate the response corresponding to the input).

   regarding the way of retrieval based response, it is important to make
   a distinction between static and dynamic responses. the former is the
   simplest, much like a template filling, where to every input there is
   the corresponding answer. the latter is a kind of knowledge base, which
   returns the list of possible responses with the scoring of relevance.

   with the closed domain chatbot, you will strive to solve a finite
   problem of communication - make a reservation for
   hotel/restaurant/flight, order pizza, buy shoes, etc. thus, it is
   apparent that the inputs are the limit and we do not expect the user to
   talk about politics, psychology, or philosophy with a pizza ordering
   bot.

   whereas open domain bots are mainly focused on the conversation with
   the user itself, it does not seek to understand every aspect of what
   user says, it does not retrieve the entities and intents, nor it needs
   to keep track of the context. it only aims at imitating real-life
   conversation. its main purpose is entertaining or answering general
   faq-style questions.

how to build chatbots

   once you understand the basics it is time to build; however, before you
   need to decide what platform or tool to use to make it.

   how to build chatbots

   if you want a jumpstart, but not yet ready to get to code it is
   recommended for you to start off with non-programming chatbot builders.
   they are oriented on nontechnical users and quite easy to apprehend and
   use. you do not get into much of the technical details, but rather work
   with the pure concepts (some learning curve is in place though). they
   are ideal for building simple bots and do not suit for complex
   commercial purposes. the major let down here is that they have little
   or no nlp features at all (thus not good for complex bots). some
   notable platforms to look at include: [30]chatfuel, [31]manychat,
   [32]octane ai, [33]massively ai.

   for the purposes of more serious development, we would like to
   disambiguate bot frameworks and ai services.

   frameworks constitute an abstraction for the generic functionality of
   chatbot workflows in a packaged and convenient way. the chatbot
   frameworks are much like any other software frameworks (e.g. web
   application frameworks), they provide us with tools and utilities. they
   are usually implemented for a certain programming language. in
   addition, some of the bot frameworks also have hosted and interactive
   development environments to facilitate creating bots to even bigger
   extent.

   ai services are independent, cloud-hosted platforms, often exposing gui
   for interactive creation of chatbot logic, featuring machine learning
   powered nlp capabilities, and enabling communication via restful api.

   another emerging option is to incorporate a chatbot and interactive
   voice response (ivr) system right into the web service building kits or
   frameworks. one of the latest developments in this area was made by
   aspect and their customer experience platform (cxp) solution for
   building web services. they made it easy to bring up data backed sites
   and provision them with textual and voice bot-interfaces. more on this
   approach can be found [34]here.

prominent bot frameworks: botkit, microsoft bot framework, rasa nlu

   prominent bot frameworks

   as we mentioned, frameworks are libraries for certain programming
   languages. we will be looking at three major frameworks: botkit for
   node.js, microsoft bot framework with the bot builder sdk for .net
   (also available for node.js, but we will focus .net, in particular,
   c#), and rasa nlu for python.

   major frameworks

botkit

   let   s start with [35]botkit. it is designed to help busy people build
   bots for their needs fast and easy, without having to dig deeply into
   the gears that roll under the hood. it provides a unified interface for
   sending and receiving messages. initially intended for slack, it now
   has extended functionality to support connection to various messaging
   platforms. the framework has intuitive workflows organized in a clear
   and concise manner, it   s well documented and provides an abundance of
   live chatbot examples for you to explore, so it is really easy to get
   started with and use furthermore.

   it   s important to note, that the framework has no nlp capabilities, but
   it can be resolved by connecting existing or custom-built services of
   nlp via middlewares.

   the library constitutes of core functionality and connectors that
   support different platforms. the core functionality is implemented in
   the form of event listeners, e.g. .on_message_receive, .hears, etc. the
   connector   s implementation varies depending on the platform it serves
   for.

   it is super easy to start building with botkit. first, you need to
   install botkit, which can be done via npm installation: `npm install
   --save botkit`. then, create a file and put your code there (an example
   of a basic console bot can be found [36]here) and run it with node.js:
   `node my_bot.js`.

microsoft bot framework

   microsoft, willing to keep up with emerging trend, gave the world a new
   vision of chatbot construction. [37]microsoft bot framework is
   comprehensive and easy to use building sdk, which is composed of two
   main components: the framework itself - the bot connector sdk that
   responsible for integration and basics of bot logic and luis.ai, which
   corresponds for natural language understanding, giving the bots a
   human-like sense.

   although luis.ai is featured as a component, the framework itself may
   be used without it and is really impressive on its own. the tools are
   robust, and possibilities for integration are almost limitless
   (messenger, skype, etc.). the development environment features great
   tool for interactive and simple testing. you may also publish the
   chatbot you built to the public, send for review and, if it passes, it
   will get into the bot directory ([38]https://bots.botframework.com/) -
   one coin to the microsoft   s pot - easy to share bots.

rasa nlu

   not quite framework appointed explicitly for building chatbots,
   however, [39]rasa nlu is one of the solutions that facilitate their
   back-end. while botkit and microsoft bot connect to messengers, rasa
   nlu is similar to nlp services, providing processing power on premises.
   additionally, rasa has python interface to integrate the entity
   extractors directly into applications written in python. it can also
   run as a service within other frameworks, exposing rest api endpoints.

   please see the table below for a brief comparison of pros and cons of
   these tools.

   a brief comparison of pros and cons

prominent ai services: wit.ai, api.ai, luis.ai, ibm watson

   ai services, as we mentioned before, are cloud-hosted solutions for nlp
   needs and building smart bots that can predict flows of complex
   conversations. they provide ui for construction of prediction models
   and training models of the machine learning based understanding of
   language entities.

   let   s look at the top players in this circle.

   a brief comparison of pros and cons

wit.ai

   [40]wit.ai is a platform that, according to its website, makes it easy
   for developers to build applications that you can talk or text to. it
   was recently bought by facebook and became the ground for building
   facebook   s bot api.

   wit.ai

   wit.ai makes it easy to define bot   s behavior abstracted away from the
   inner logic via registrable bot actions implemented in the language of
   your choice.

   the key concept for defining behaviors in wit.ai is so-called
      stories   . they represent basic skeleton of the possible dialogue by
   one example of it. a    story    is a grouping of related intents, while
   the intent itself is a user-defined entity of trait type that does not
   define the entire flow.

   the machine learning model of nlp is trained by examples, which is
   really great. just show wit.ai what can be expected, and when the user
   sends similar requests, it will respond accordingly.

   wit.ai has a powerful mechanism for understanding language entities.
   another great feature is assigning a role to the entities, which
   greatly helps with processing on the server-side.

   as to interaction with the server-side, the wit.ai implements the    bot
   sends    commands and offers webhooks integration for custom bot actions,
   like calls to api.

api.ai

   [41]api.ai is yet another platform that gives you the ability to build
   bots with nlp support.

   unlike wit.ai, it heavily relies on the intents for prediction. in
   fact, the two main concepts of api.ai are intents and context (wit.ai
   also has context, but it is used in a different scope). the intent
   makes a connection linking the user   s request with the corresponding
   action. the context, represented by a string value, makes a distinction
   between requests with small deviations from intent.

   the basic workflow of api.ai is different from wit.ai. when api.ai
   receives a request from the user, it first matches it with an intent
   (if no intent is matched then default intent is implied) and then calls
   the corresponding action. the intent matching may be restricted by
   listing contexts that must be present for intent to match (the match
   can produce or delete the contexts) creating a workflow like an
   application with different states.

   just as wit.ai, api.ai provides a possibility for intent extraction.
   moreover, it implements the slot-filling system out of the box (the
   slot-filling system is a method of requesting the information from the
   user and extracting them as entities by pertaining the list of already
   acquired entities and asking for missing ones).

   the server-side logic is also completed with the webhooks and api.ai is
   basically calling services to get the response. an important note here,
   the server-side code can modify the contexts and thus affect the flow
   of prediction.

microsoft language understanding intelligent service

   [42]luis may be relatively named a newcomer to the game of ai services,
   as it was introduced to the world at the microsoft build 2016 event.

   like its competitors, luis provides an entity recognition and training
   system featuring a hierarchy of entities for subdivision of their
   meaning (like roles in wit.ai).

   luis relies on intents in the prediction of the actions to be taken and
   uses the same logic as api.ai.

   luis

   the training section is also in the form of ui and gives flexibility in
   the way of training. the logs of user requests conveniently allow
   interpreting and correct the interpretation to train the model further.

   luis also features action fulfillment support gathering needed intents
   and contexts to perform chains of actions. it is still in beta and
   allows only simple testing. another beta feature which also needs
   proper attendance is the dialogue support designed to help organize the
   related request and group the questions from the bot to the user in a
   concise form.

ibm watson

   [43]ibm watson is a cognitive cloud service that enables a multitude of
   operations from natural language processing, id103,
   id31, conversing, and more. you may (or may not) remember
   ibm watson as a cognitive supercomputer system that beat the man in
   jeopardy. well, you are right thinking that they have some connection,
   because they do - ibm brought the power of that supercomputer into a
   cloud creating a broad platform to help master countless tasks.

   the downside of this though is that the great number of features may
   rather be puzzling and you will likely spend a lot of time figuring out
   what to use. and even after that you most probably will have to invest
   a great deal of resources into getting into the technology in order to
   use it.

   it is also quite expensive (around 2 cents per api call) and thus is
   not very good beginner   s tool. it is better to consider ibm watson as
   working solution if the use case for it in the company will be broad
   and finitely defined.

   a summary of the key information about these tools is provided in the
   following table.

   ali services pros and cons

conclusion

   chatbots are rising and evolving to be more user-oriented, integrating
   with other existing technologies. profound understanding of their
   essence, functionality, and operation helps build efficient bots that
   will boost marketing, advertising, and overall consumer experience of
   your product.

   the variety of platforms for chatbots creation is both astonishing and
   daunting, but each is developed for different use cases and plays a
   particular role in bot development. as the deep learning techniques
   advance, we expect the conversational ais to utilize them in the near
   future, making a huge leap towards passing the turing test.
   ____________________ subscribe to email updates

improve your skills with data science school

   [44]learn more
     * [45]ai, [46]data science, [47]machine learning, [48]trends

   [49]back to our blog [50]next article

related posts

   [51]top 10 technology trends of 2018

[52]top 10 technology trends of 2018

   the list of modern trends that took off well on the market by the end
   of 2017 and discuss the major breakthroughs expected in 2018.
   [53]read more
   [54]a comparative analysis of top 6 bi and data visualization tools in
   2018

[55]a comparative analysis of top 6 bi and data visualization tools   

   in this article, we will compare the most commonly used platforms and
   analyze their main features, pros and cons.
   [56]read more
   [57]top 15 scala libraries for data science in 2018

[58]top 15 scala libraries for data science in 2018

   in this article we wanted to outline some most useful scala libraries,
   which has recently become another prominent language for data
   scientists.
   [59]read more
   [60]

comments (0)

add a new comment:

   comment *
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   name * ____________________
   e-mail * ____________________
   submit

related services

   [61]data engineering
   [62]

data engineering

   big data engineering services, data cleaning, transformation, storage.
   api design and development
   [63]data science applications
   [64]

data science applications

   building end-to-end data pipelines, machine learning application, ai
   consulting
   [65]machine learning solutions
   [66]

machine learning solutions

   we apply machine learning algorithms and models to solve business
   challenges from prototyping phase to integration of models into
   production systems.

about us

   activewizards specialized on data science, machine learning, data
   visualizations and big data applications services.

get the data science digest

   we gather the best data science materials and occasionally send them
   into your inbox
   ____________________ subscribe

core services

     * [67]django developers
     * [68]machine learning developers
     * [69]data engineers
     * [70]angular engineers
     * [71]d3.js developers
     * [72]mongodb engineers
     * [73]data scientists
     * [74]elastic search consultants
     * [75]scikit learn experts
     * [76]data visualization experts
     * [77]flask developers
     * [78]spark developers

contact us

     * level 19 & 20, tower 2, 1 raffles place
       048616, singapore

     * 57 west 57th street, 4th floor
       10019, ny, new york

     [79]hello@activewizards.com

     *
     *
     *
     *
     *
     *
     *
     *

      2010-2019 activewizards: data science and engineering lab
   made with     by [80]mylandingpage.website

   iframe: [81]https://www.googletagmanager.com/ns.html?id=gtm-5rj3225

   yandex

references

   visible links
   1. mailto:hello@activewizards.com
   2. https://activewizards.com/
   3. https://activewizards.com/#index
   4. https://activewizards.com/#services
   5. https://activewizards.com/#our-clients
   6. https://activewizards.com/#how-it-works
   7. https://activewizards.com/#blog
   8. https://activewizards.com/#contact-us
   9. https://activewizards.com/blog/
  10. https://activewizards.com/blog/top-7-data-science-use-cases-in-healthcare/
  11. https://activewizards.com/blog/tag-search/?tag=ai&key=
  12. https://activewizards.com/blog/tag-search/?tag=data+science&key=
  13. https://activewizards.com/blog/tag-search/?tag=machine+learning&key=
  14. https://activewizards.com/blog/tag-search/?tag=trends&key=
  15. https://activewizards.com/blog/a-comparative-analysis-of-chatbots-apis#one
  16. https://activewizards.com/blog/a-comparative-analysis-of-chatbots-apis#h2
  17. https://activewizards.com/blog/a-comparative-analysis-of-chatbots-apis#h3
  18. https://activewizards.com/blog/a-comparative-analysis-of-chatbots-apis#h4
  19. https://activewizards.com/blog/a-comparative-analysis-of-chatbots-apis#h5
  20. https://activewizards.com/blog/a-comparative-analysis-of-chatbots-apis#h6
  21. https://activewizards.com/blog/a-comparative-analysis-of-chatbots-apis#h7
  22. https://activewizards.com/blog/a-comparative-analysis-of-chatbots-apis#h8
  23. https://activewizards.com/blog/a-comparative-analysis-of-chatbots-apis#h9
  24. https://prisma-ai.com/
  25. https://www.wsj.com/
  26. https://www.nytimes.com/
  27. https://techcrunch.com/
  28. https://www.technologyreview.com/
  29. https://vm.datascience-school.com/
  30. https://chatfuel.com/
  31. https://manychat.com/
  32. https://octaneai.com/
  33. http://www.massively.ai/
  34. https://www.aspect.com/company/news/press-releases/aspect-softwares-aspect-cxp-17-makes-development-of-customer-service-chatbots-and-modern-ivr-fast-and-simple
  35. https://github.com/howdyai/botkit
  36. https://github.com/howdyai/botkit/blob/master/console_bot.js
  37. https://dev.botframework.com/
  38. https://bots.botframework.com/
  39. https://nlu.rasa.ai/
  40. https://wit.ai/
  41. https://dialogflow.com/
  42. https://www.luis.ai/
  43. https://www.ibm.com/watson/
  44. https://datascience-school.com/
  45. https://activewizards.com/blog/tag-search/?tag=ai&key=
  46. https://activewizards.com/blog/tag-search/?tag=data+science&key=
  47. https://activewizards.com/blog/tag-search/?tag=machine+learning&key=
  48. https://activewizards.com/blog/tag-search/?tag=trends&key=
  49. https://activewizards.com/blog/
  50. https://activewizards.com/blog/top-7-data-science-use-cases-in-healthcare/
  51. https://activewizards.com/blog/the-top-10-technology-trends-of-2018/
  52. https://activewizards.com/blog/the-top-10-technology-trends-of-2018/
  53. https://activewizards.com/blog/the-top-10-technology-trends-of-2018/
  54. https://activewizards.com/blog/a-comparative-analysis-of-top-6-bi-and-data-visualization-tools-in-2018/
  55. https://activewizards.com/blog/a-comparative-analysis-of-top-6-bi-and-data-visualization-tools-in-2018/
  56. https://activewizards.com/blog/a-comparative-analysis-of-top-6-bi-and-data-visualization-tools-in-2018/
  57. https://activewizards.com/blog/top-15-scala-libraries-for-data-science/
  58. https://activewizards.com/blog/top-15-scala-libraries-for-data-science/
  59. https://activewizards.com/blog/top-15-scala-libraries-for-data-science/
  60. https://activewizards.com/blog/a-comparative-analysis-of-chatbots-apis/?utm_source=facebook&utm_medium=deep_learning&utm_campaign=chatbots
  61. https://activewizards.com/big-data-engineers/
  62. https://activewizards.com/big-data-engineers/
  63. https://activewizards.com/data-science-consultants/
  64. https://activewizards.com/data-science-consultants/
  65. https://activewizards.com/machine-learning-engineers/
  66. https://activewizards.com/machine-learning-engineers/
  67. https://activewizards.com/python-django-developers
  68. https://activewizards.com/machine-learning-engineers
  69. https://activewizards.com/big-data-engineers
  70. https://activewizards.com/hire-angular-js-developers
  71. https://activewizards.com/d3-js-developers
  72. https://activewizards.com/mongodb-consulting-services
  73. https://activewizards.com/data-science-consultants
  74. https://activewizards.com/elasticsearch-consultants
  75. https://activewizards.com/scikit-learn
  76. https://activewizards.com/data-visualization
  77. https://activewizards.com/flask-developers
  78. https://activewizards.com/spark-consulting-developers
  79. mailto:hello@activewizards.com
  80. https://mylandingpage.website/
  81. https://www.googletagmanager.com/ns.html?id=gtm-5rj3225

   hidden links:
  83. javascript:close_reply()
  84. https://activewizards.com/blog/a-comparative-analysis-of-chatbots-apis/?utm_source=facebook&utm_medium=deep_learning&utm_campaign=chatbots#to-top
  85. https://www.facebook.com/activewizards/
  86. https://twitter.com/activewizards
  87. https://www.linkedin.com/company/4790078
  88. https://github.com/activewizardslab
  89. http://www.slideshare.net/activewizards
  90. https://medium.com/activewizards-machine-learning-company
