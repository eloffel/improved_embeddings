   #[1]analytics vidhya    feed [2]analytics vidhya    comments feed
   [3]analytics vidhya    an introduction to id207 and network
   analysis (with python codes) comments feed [4]alternate [5]alternate

   iframe: [6]//googletagmanager.com/ns.html?id=gtm-mpsm42v

   [7]new certified ai & ml blackbelt program (beginner to master) -
   enroll today @ launch offer (coupon: blackbelt10)

   (button) search______________
     * [8]learn
          + [9]blog archive
               o [10]machine learning
               o [11]deep learning
               o [12]career
               o [13]stories
          + [14]datahack radio
          + [15]infographics
          + [16]training
          + [17]learning paths
               o [18]sas business analyst
               o [19]learn data science on r
               o [20]data science in python
               o [21]data science in weka
               o [22]data visualization with tableau
               o [23]data visualization with qlikview
               o [24]interactive data stories with d3.js
          + [25]glossary
     * [26]engage
          + [27]discuss
          + [28]events
          + [29]datahack summit 2018
          + [30]datahack summit 2017
          + [31]student datafest
          + [32]write for us
     * [33]compete
          + [34]hackathons
     * [35]get hired
          + [36]jobs
     * [37]courses
          + [38]id161 using deep learning
          + [39]natural language processing using python
          + [40]introduction to data science
          + [41]microsoft excel
          + [42]more courses
     * [43]contact

     *
     *
     *
     *

     * [44]home
     * [45]blog archive
     * [46]trainings
     * [47]discuss
     * [48]datahack
     * [49]jobs
     * [50]corporate

     *

   [51]analytics vidhya - learn everything about analytics

learn everything about analytics

   [52][black-belt-2.gif]
   [53][black-belt-2.gif]
   [54][black-belt-2.gif]
   (button) search______________

   [55]analytics vidhya - learn everything about analytics
     * [56]learn
          + [57]blog archive
               o [58]machine learning
               o [59]deep learning
               o [60]career
               o [61]stories
          + [62]datahack radio
          + [63]infographics
          + [64]training
          + [65]learning paths
               o [66]sas business analyst
               o [67]learn data science on r
               o [68]data science in python
               o [69]data science in weka
               o [70]data visualization with tableau
               o [71]data visualization with qlikview
               o [72]interactive data stories with d3.js
          + [73]glossary
     * [74]engage
          + [75]discuss
          + [76]events
          + [77]datahack summit 2018
          + [78]datahack summit 2017
          + [79]student datafest
          + [80]write for us
     * [81]compete
          + [82]hackathons
     * [83]get hired
          + [84]jobs
     * [85]courses
          + [86]id161 using deep learning
          + [87]natural language processing using python
          + [88]introduction to data science
          + [89]microsoft excel
          + [90]more courses
     * [91]contact

   [92]home [93]data science [94]an introduction to id207 and
   network analysis (with python codes)

   [95]data science[96]python

an introduction to id207 and network analysis (with python codes)

   [97]guest blog, april 19, 2018

introduction

      a picture speaks a thousand words    is one of the most commonly used
   phrases. but a graph speaks so much more than that. a visual
   representation of data, in the form of graphs, helps us gain actionable
   insights and make better data driven decisions based on them.

   but to truly understand what graphs are and why they are used, we will
   need to understand a concept known as id207. understanding this
   concept makes us better programmers (and better [98]data science
   professionals!).


   source: quantdare

   but if you have tried to understand this concept before, you   ll have
   come across tons of formulae and dry theoretical concepts. that is why
   we decided to write this blog post. we have explained the concepts and
   then provided illustrations so you can follow along and intuitively
   understand how the functions are performing. this is a detailed post,
   because we believe that providing a proper explanation of this concept
   is a much preferred option over succinct definitions.

   in this article, we will look at what graphs are, their applications
   and a bit of history about them. we   ll also cover some id207
   concepts and then take up a case study using python to cement our
   understanding.

   ready? let   s dive into it.


table of contents

     * graphs and their applications
     * history and why graphs?
     * terminologies you need to know
     * id207 concepts
     * getting familiar with graphs in python
     * analysis on a dataset


graphs and their applications

   let us look at a simple graph to understand the concept. look at the
   image below    

   consider that this graph represents the places in a city that people
   generally visit, and the path that was followed by a visitor of that
   city. let us consider v as the places and e as the path to travel from
   one place to another.
v = {v1, v2, v3, v4, v5}

e = {(v1,v2), (v2,v5), (v5, v5), (v4,v5), (v4,v4)}

   the edge (u,v) is the same as the edge (v,u)     they are unordered
   pairs.

   concretely     graphs are mathematical structures used to study pairwise
   relationships between objects and entities. it is a branch of discrete
   mathematics and has found multiple applications in computer science,
   chemistry, linguistics, operations research, sociology etc.

   the [99]data science and analytics field has also used graphs to model
   various structures and problems. as a data scientist, you should be
   able to solve problems in an efficient manner and graphs provide a
   mechanism to do that in cases where the data is arranged in a specific
   way.

   formally,
     * a graph is a pair of sets. g = (v,e). v is the set of vertices. e
       is a set of edges. e is made up of pairs of elements from v
       (unordered pair)
     * a digraph is also a pair of sets. d = (v,a). v is the set of
       vertices. a is the set of arcs. a is made up of pairs of elements
       from v (ordered pair)

   in the case of digraphs, there is a distinction between `(u,v)` and
   `(v,u)`. usually the edges are called arcs in such cases to indicate a
   notion of direction.

   there are packages that exist in r and python to analyze data using
   id207 concepts. in this article we will be briefly looking at
   some of the concepts and analyze a dataset using networkx python
   package.
from ipython.display import image
image('images/network.png')

image('images/usecase.png')

   from the above examples it is clear that the applications of graphs in
   data analytics are numerous and vast. let us look at a few use cases:
     * marketing analytics     graphs can be used to figure out the most
       influential people in a social network. advertisers and marketers
       can estimate the biggest bang for the marketing buck by routing
       their message through the most influential people in a social
       network
     * banking transactions     graphs can be used to find unusual patterns
       helping in mitigating fraudulent transactions. there have been
       examples where terrorist activity has been detected by analyzing
       the flow of money across interconnected banking networks
     * supply chain     graphs help in identifying optimum routes for your
       delivery trucks and in identifying locations for warehouses and
       delivery centres
     * pharma     pharma companies can optimize the routes of the salesman
       using id207. this helps in cutting costs and reducing the
       travel time for salesman
     * telecom     telecom companies typically use graphs (voronoi diagrams)
       to understand the quantity and location of cell towers to ensure
       maximum coverage


history and why graphs?

history of graphs

   if you want to know more on how the ideas from graph has been formlated
       read on!

   the origin of the theory can be traced back to the konigsberg bridge
   problem (circa 1730s). the problem asks if the seven bridges in the
   city of konigsberg can be traversed under the following constraints
     * no doubling back
     * you end at the same place you started

   this is the same as asking if the multigraph of 4 nodes and 7 edges has
   an eulerian cycle (an eulerian cycle is an eulerian path that starts
   and ends on the same vertex. and an eulerian path is a path in a graph
   that traverses each edge exactly once. more terminology is given
   below). this problem led to the concept of eulerian graph. in the case
   of the konigsberg bridge problem the answer is no and it was first
   answered by (you guessed it) euler.

   in 1840, a.f mobius gave the idea of complete graph and bipartite graph
   and kuratowski proved that they are planar by means of recreational
   problems. the concept of tree, (a connected graph without cycles) was
   implemented by gustav kirchhoff in 1845, and he employed graph
   theoretical ideas in the calculation of currents in electrical networks
   or circuits.

   in 1852, thomas gutherie found the famous four color problem. then in
   1856, thomas. p. kirkman and william r.hamilton studied cycles on
   polyhydra and invented the concept called hamiltonian graph by studying
   trips that visited certain sites exactly once. in 1913, h.dudeney
   mentioned a puzzle problem. eventhough the four color problem was
   invented it was solved only after a century by kenneth appel and
   wolfgang haken. this time is considered as the birth of id207.

   caley studied particular analytical forms from id128 to
   study the trees. this had many implications in theoretical chemistry.
   this lead to the invention of enumerative id207. any how the
   term    graph    was introduced by sylvester in 1878 where he drew an
   analogy between    quantic invariants    and covariants of algebra and
   molecular diagrams.

   in 1941, ramsey worked on colorations which lead to the identification
   of another branch of id207 called extremel id207. in
   1969, the four color problem was solved using computers by heinrich.
   the study of asymptotic graph connectivity gave rise to random graph
   theory. the histories of id207 and topology are also closely
   related. they share many common concepts and theorems.
image('images/konigsberg.png', width = 800)

why graphs?

   here are a few points that help you motivate to use graphs in your
   day-to-day [100]data science problems    
    1. graphs provide a better way of dealing with abstract concepts like
       relationships and interactions. they also offer an intuitively
       visual way of thinking about these concepts. graphs also form a
       natural basis for analyzing relationships in a social context
    2. graph databases have become common computational tools and
       alternatives to sql and nosql databases
    3. graphs are used to model analytics workflows in the form of dags
       (directed acyclic graphs)
    4. some neural network frameworks also use dags to model the various
       operations in different layers
    5. id207 concepts are used to study and model social networks,
       fraud patterns, power consumption patterns, virality and influence
       in social media. social network analysis (sna) is probably the best
       known application of id207 for [101]data science
    6. it is used in id91 algorithms     specifically id116
    7. system dynamics also uses some id207 concepts     specifically
       loops
    8. path optimization is a subset of the optimization problem that also
       uses graph concepts
    9. from a computer science perspective     graphs offer computational
       efficiency. the big o complexity for some algorithms is better for
       data arranged in the form of graphs (compared to tabular data)


terminology you should know

   before you go any further into the article, it is recommended that you
   should get familiar with these terminologies.
    1. the vertices u and v are called the end vertices of the edge (u,v)
    2. if two edges have the same end vertices they are parallel
    3. an edge of the form (v,v) is a loop
    4. a graph is simple if it has no parallel edges and loops
    5. a graph is said to be empty if it has no edges. meaning e is empty
    6. a graph is a null graph if it has no vertices. meaning v and e is
       empty
    7. a graph with only 1 vertex is a trivial graph
    8. edges are adjacent if they have a common
       vertex. vertices are adjacent if they have a common edge
    9. the degree of the vertex v, written as d(v), is the number
       of edges with v as an end vertex. by convention, we count a loop
       twice and parallel edges contribute separately
   10. isolated vertices are vertices with degree 1. d(1) vertices are
       isolated
   11. a graph is complete if its edge set contains every possible edge
       between all of the vertices
   12. a walk in a graph g = (v,e) is a finite, alternating sequence of
       the form vieiviei consisting of vertices and edges of the graph g
   13. a walk is open if the initial and final vertices are different. a
       walk is closed if the initial and final vertices are the same
   14. a walk is a trail if any edge is traversed atmost once
   15. a trail is a path if any vertex is traversed atmost once (except
       for a closed walk)
   16. a closed path is a circuit     analogous to electrical circuits


id207 concepts

   in this section, we   ll look at some of the concepts useful for data
   analysis (in no particular order). please note that there are a lot
   more concepts that require a depth which is out of scope of this
   article. so let   s get into it.


average path length

   the average of the shortest path lengths for all possible node pairs.
   gives a measure of    tightness    of the graph and can be used to
   understand how quickly/easily something flows in this network.


bfs and dfs

   breadth first search and depth first search are two different
   algorithms used to search for nodes in a graph. they are typically used
   to figure out if we can reach a node from a given node. this is also
   known as graph traversal

   the aim of the bfs is to traverse the graph as close as possible to the
   root node, while the dfs algorithm aims to move as far as possible away
   from the root node.


centrality

   one of the most widely used and important conceptual tools for
   analysing networks. centrality aims to find the most important nodes in
   a network. there may be different notions of    important    and hence
   there are many centrality measures. centrality measures themselves have
   a form of classification (or types of centrality measures). there are
   measures that are characterized by flow along the edges and those that
   are characterized by walk structure.

   some of the most commonly used ones are:
    1. degree centrality     the first and conceptually the simplest
       centrality definition. this is the number of edges connected to a
       node. in the case of a directed graph, we can have 2 degree
       centrality measures. inflow and outflow centrality
    2. closeness centrality     of a node is the average length of the
       shortest path from the node to all other nodes
    3. betweenness centrality     number of times a node is present in the
       shortest path between 2 other nodes

   these centrality measures have variants and the definitions can be
   implemented using various algorithms. all in all, this means a large
   number of definitions and algorithms.


network density

   a measure of how many edges a graph has. the actual definition will
   vary depending on type of graph and the context in which the question
   is asked. for a complete undirected graph the density is 1, while it is
   0 for an empty graph. graph density can be greater than 1 in some
   situations (involving loops).


graph randomizations

   while the definitions of some graph metrics maybe easy to calculate, it
   is not easy to understand their relative importance. we use
   network/graph randomizations in such cases. we calculate the metric for
   the graph at hand and for another similar graph that is randomly
   generated. this similarity can for example be the same number of
   density and nodes. typically we generate a 1000 similar random graphs
   and calculate the graph metric for each of them and then compare it
   with the same metric for the graph at hand to arrive at some notion of
   a benchmark.

   in data science when trying to make a claim about a graph it helps if
   it is contrasted with some randomly generated graphs.


getting familiar with graphs in python

   we will be using the networkx package in python. it can be installed in
   the root environment of anaconda (if you are using the anaconda
   distribution of python). you can also pip install it.

   let us look at some common things that can be done with the networkx
   package. these include importing and creating a graph and ways to
   visualize it.

graph creation

import networkx as nx

# creating a graph
g = nx.graph() # right now g is empty

# add a node
g.add_node(1)
g.add_nodes_from([2,3]) # you can also add a list of nodes by passing a list arg
ument

# add edges
g.add_edge(1,2)

e = (2,3)
g.add_edge(*e) # * unpacks the tuple
g.add_edges_from([(1,2), (1,3)]) # just like nodes we can add edges from a list

   node and edge attributes can be added along with the creation of nodes
   and edges by passing a tuple containing node and attribute dict.

   in addition to constructing graphs node-by-node or edge-by-edge, they
   can also be generated by applying classic graph operations, such as:
subgraph(g, nbunch)      - induced subgraph view of g on nodes in nbunch
union(g1,g2)             - graph union
disjoint_union(g1,g2)    - graph union assuming all nodes are different
cartesian_product(g1,g2) - return cartesian product graph
compose(g1,g2)           - combine graphs identifying nodes common to both
complement(g)            - graph complement
create_empty_copy(g)     - return an empty copy of the same graph class
convert_to_undirected(g) - return an undirected representation of g
convert_to_directed(g)   - return a directed representation of g

   separate classes exist for different types of graphs. for example
   the nx.digraph() class allows you to create a directed graph. specific
   graphs containing paths can be created directly using a single method.
   for a full list of graph creation methods please refer to the full
   documentation. link is given at the end of the article.
image('images/graphclasses.png', width = 400)

accessing edges and nodes

   nodes and edges can be accessed together using
   the g.nodes() and g.edges() methods. individual nodes and edges can be
   accessed using the bracket/subscript notation.
g.nodes()

   nodeview((1, 2, 3))
g.edges()

   edgeview([(1, 2), (1, 3), (2, 3)])
g[1] # same as g.adj[1]

   atlasview({2: {}, 3: {}})
g[1][2]

   {}
g.edges[1, 2]

   {}


graph visualization

   networkx provides basic functionality for visualizing graphs, but its
   main goal is to enable graph analysis rather than perform graph
   visualization. graph visualization is hard and we will have to use
   specific tools dedicated for this task. matplotlib offers some
   convenience functions. but graphviz is probably the best tool for us as
   it offers a python interface in the form of pygraphviz (link to
   documentation below).
%matplotlib inline
import matplotlib.pyplot as plt
nx.draw(g)

   you will first have to install graphviz from the website (link below).
   and then pip install pygraphviz --install-option=" <>. in the install
   options you will have to provide the path to the
   graphviz lib and include folders.
import pygraphviz as pgv
d={'1': {'2': none}, '2': {'1': none, '3': none}, '3': {'1': none}}
a = pgv.agraph(data=d)
print(a) # this is the 'string' or simple representation of the graph

output:
strict graph "" {
        1 -- 2;
        2 -- 3;
        3 -- 1;
}

   pygraphviz provides great control over the individual attributes of the
   edges and nodes. we can get very beautiful visualizations using it.
# let us create another graph where we can individually control the colour of ea
ch node
b = pgv.agraph()

# setting node attributes that are common for all nodes
b.node_attr['style']='filled'
b.node_attr['shape']='circle'
b.node_attr['fixedsize']='true'
b.node_attr['fontcolor']='#ffffff'

# creating and setting node attributes that vary for each node (using a for loop
)
for i in range(16):
 b.add_edge(0,i)
 n=b.get_node(i)
 n.attr['fillcolor']="#%2x0000"%(i*16)
 n.attr['height']="%s"%(i/16.0+0.5)
 n.attr['width']="%s"%(i/16.0+0.5)
b.draw('star.png',prog="circo") # this creates a .png file in the local director
y. displayed below.

image('images/star.png', width=650) # the graph visualization we created above.

   usually, visualization is thought of as a separate task from graph
   analysis. a graph once analyzed is exported as a dotfile. this dotfile
   is then visualized separately to illustrate a specific point we are
   trying to make.


analysis on a dataset

   we will be looking to take a generic dataset (not one that is
   specifically intended to be used for graphs) and do some manipulation
   (in pandas) so that it can be ingested into a graph in the form of a
   edgelist. and edgelist is a list of tuples that contain the vertices
   defining every edge

   the dataset we will be looking at comes from the airlines industry. it
   has some basic information on the airline routes. there is a source of
   a journey and a destination. there are also a few columns indicating
   arrival and departure times for each journey. as you can imagine this
   dataset lends itself beautifully to be analysed as a graph. imagine a
   few cities (nodes) connected by airline routes (edges). if you are an
   airline carrier, you can then proceed to ask a few questions like
    1. what is the shortest way to get from a to b? in terms of distance
       and in terms of time
    2. is there a way to go from c to d?
    3. which airports have the heaviest traffic?
    4. which airport in    in between    most other airports? so that it can
       be converted into a local hub

import pandas as pd
import numpy as np

data = pd.read_csv('data/airlines.csv')

data.shape
(100, 16)

data.dtypes
year                int64
month               int64
day                 int64
dep_time          float64
sched_dep_time      int64
dep_delay         float64
arr_time          float64
sched_arr_time      int64
arr_delay         float64
carrier            object
flight              int64
tailnum            object
origin             object
dest               object
air_time          float64
distance            int64
dtype: object
    1. we notice that origin and destination look like good choices for
       nodes. everything can then be imagined as either node or edge
       attributes. a single edge can be thought of as a journey. and such
       a journey will have various times, a flight number, an airplane
       tail number etc associated with it
    2. we notice that the year, month, day and time information is spread
       over many columns. we want to create one datetime column containing
       all of this information. we also need to keep scheduled and actual
       time of arrival and departure separate. so we should finally have 4
       datetime columns (scheduled and actual times of arrival and
       departure)
    3. additionally, the time columns are not in a proper format. 4:30 pm
       is represented as 1630 instead of 16:30. there is no delimiter to
       split that column. one approach is to use pandas string methods and
       id157
    4. we should also note that sched_dep_time and sched_arr_time are
       int64 dtype and dep_time and arr_time are float64 dtype
    5. an additional complication is nan values

# converting sched_dep_time to 'std' - scheduled time of departure
data['std'] = data.sched_dep_time.astype(str).str.replace('(\d{2}$)', '') + ':'
+ data.sched_dep_time.astype(str).str.extract('(\d{2}$)', expand=false) + ':00'
# converting sched_arr_time to 'sta' - scheduled time of arrival
data['sta'] = data.sched_arr_time.astype(str).str.replace('(\d{2}$)', '') + ':'
+ data.sched_arr_time.astype(str).str.extract('(\d{2}$)', expand=false) + ':00'

# converting dep_time to 'atd' - actual time of departure
data['atd'] = data.dep_time.fillna(0).astype(np.int64).astype(str).str.replace('
(\d{2}$)', '') + ':' + data.dep_time.fillna(0).astype(np.int64).astype(str).str.
extract('(\d{2}$)', expand=false) + ':00'
# converting arr_time to 'ata' - actual time of arrival
data['ata'] = data.arr_time.fillna(0).astype(np.int64).astype(str).str.replace('
(\d{2}$)', '') + ':' + data.arr_time.fillna(0).astype(np.int64).astype(str).str.
extract('(\d{2}$)', expand=false) + ':00'

   we now have time columns in the format we wanted. finally we may want
   to combine the year, month and day columns into a date column. this is
   not an absolutely necessary step. but we can easily obtain the year,
   month and day (and other) information once it is converted
   into datetime format.
data['date'] = pd.to_datetime(data[['year', 'month', 'day']])
# finally we drop the columns we don't need
data = data.drop(columns = ['year', 'month', 'day'])

   now import the dataset using the networkx function that ingests a
   pandas dataframe directly. just like graph creation there are multiple
   ways data can be ingested into a graph from multiple formats.
import networkx as nx
fg = nx.from_pandas_edgelist(data, source='origin', target='dest', edge_attr=tru
e,)
fg.nodes()

   output:
nodeview(('ewr', 'mem', 'lga', 'fll', 'sea', 'jfk', 'den', 'ord', 'mia', 'pbi',
'mco', 'cmh', 'msp', 'iad', 'clt', 'tpa', 'dca', 'sju', 'atl', 'bhm', 'srq', 'ms
y', 'dtw', 'lax', 'jax', 'rdu', 'mdw', 'dfw', 'iah', 'sfo', 'stl', 'cvg', 'ind',
 'rsw', 'bos', 'cle'))


fg.edges()

   output:
edgeview([('ewr', 'mem'), ('ewr', 'sea'), ('ewr', 'mia'), ('ewr', 'ord'), ('ewr'
, 'msp'), ('ewr', 'tpa'), ('ewr', 'msy'), ('ewr', 'dfw'), ('ewr', 'iah'), ('ewr'
, 'sfo'), ('ewr', 'cvg'), ('ewr', 'ind'), ('ewr', 'rdu'), ('ewr', 'iad'), ('ewr'
, 'rsw'), ('ewr', 'bos'), ('ewr', 'pbi'), ('ewr', 'lax'), ('ewr', 'mco'), ('ewr'
, 'sju'), ('lga', 'fll'), ('lga', 'ord'), ('lga', 'pbi'), ('lga', 'cmh'), ('lga'
, 'iad'), ('lga', 'clt'), ('lga', 'mia'), ('lga', 'dca'), ('lga', 'bhm'), ('lga'
, 'rdu'), ('lga', 'atl'), ('lga', 'tpa'), ('lga', 'mdw'), ('lga', 'den'), ('lga'
, 'msp'), ('lga', 'dtw'), ('lga', 'stl'), ('lga', 'mco'), ('lga', 'cvg'), ('lga'
, 'iah'), ('fll', 'jfk'), ('sea', 'jfk'), ('jfk', 'den'), ('jfk', 'mco'), ('jfk'
, 'tpa'), ('jfk', 'sju'), ('jfk', 'atl'), ('jfk', 'srq'), ('jfk', 'dca'), ('jfk'
, 'dtw'), ('jfk', 'lax'), ('jfk', 'jax'), ('jfk', 'clt'), ('jfk', 'pbi'), ('jfk'
, 'cle'), ('jfk', 'iad'), ('jfk', 'bos')])
nx.draw_networkx(fg, with_labels=true) # quick view of the graph. as expected we
 see 3 very busy airports

nx.algorithms.degree_centrality(fg) # notice the 3 airports from which all of ou
r 100 rows of data originates
nx.density(fg) # average edge density of the graphs

   output:
0.09047619047619047
nx.average_shortest_path_length(fg) # average shortest path length for all paths
 in the graph

   output:
2.36984126984127
nx.average_degree_connectivity(fg) # for a node of degree k - what is the averag
e of its neighbours' degree?

   output:
{1: 19.307692307692307, 2: 19.0625, 3: 19.0, 17: 2.0588235294117645, 20: 1.95}

   as is obvious from looking at the graph visualization (way above)    
   there are multiple paths from some airports to others. let us say we
   want to calculate the shortest possible route between 2 such airports.
   right off the bat we can think of a couple of ways of doing it
    1. there is the shortest path by distance
    2. there is the shortest path by flight time

   what we can do is to calculate the shortest path algorithm by weighing
   the paths with either the distance or airtime. please note that this is
   an approximate solution     the actual problem to solve is to calculate
   the shortest path factoring in the availability of a flight when you
   reach your transfer airport + wait time for the transfer. this is a
   more complete approach and this is how humans normally plan their
   travel. for the purposes of this article we will just assume that is
   flight is readily available when you reach an airport and calculate the
   shortest path using the airtime as the weight

   let us take the example of jax and dfw airports:
# let us find all the paths available
for path in nx.all_simple_paths(fg, source='jax', target='dfw'):
 print(path)
# let us find the dijkstra path from jax to dfw.
# you can read more in-depth on how dijkstra works from this resource - https://
courses.csail.mit.edu/6.006/fall11/lectures/lecture16.pdf
dijpath = nx.dijkstra_path(fg, source='jax', target='dfw')
dijpath

   output:
['jax', 'jfk', 'sea', 'ewr', 'dfw']
# let us try to find the dijkstra path weighted by airtime (approximate case)
shortpath = nx.dijkstra_path(fg, source='jax', target='dfw', weight='air_time')
shortpath

   output:
['jax', 'jfk', 'bos', 'ewr', 'dfw']


conclusion

   this article has at best only managed a superficial introduction to the
   very interesting field of id207 and network analysis. knowledge
   of the theory and the python packages will add a valuable toolset to
   any data scientist   s arsenal. for the dataset used above, a series of
   other questions can be asked like:
    1. find the shortest path between two airports given cost, airtime and
       availability?
    2. you are an airline carrier and you have a fleet of airplanes. you
       have an idea of the demand available for your flights. given that
       you have permission to operate 2 more airplanes (or add 2 airplanes
       to your fleet) which routes will you operate them on to maximize
       profitability?
    3. can you rearrange the flights and schedules to optimize a certain
       parameter (like timeliness or profitability etc)

   if you do solve them, let us know in the comments below!

   network analysis will help in solving some common data science problems
   and visualizing them at a much grander scale and abstraction. please
   leave a comment if you would like to know more about anything else in
   particular.


bibiliography and references

    1. [102]history of id207 || s.g. shrinivas et. al
    2. [103]big o notation cheatsheet
    3. [104]networkx reference documentation
    4. [105]graphviz download
    5. [106]pygraphvix
    6. [107]star visualization
    7. [108]dijkstra algorithm


about the author

   srivatsa currently works for themathcompany and has over 7.5 years of
   experience in decision sciences and analytics. he has grown, led &
   scaled global teams across functions, industries & geographies. he has
   led india delivery for a cross industry portfolio totalling $10m in
   revenues. he has also conducted several client workshops and training
   sessions to help level up technical and business domain knowledge.

   during his career span, he has led premium client engagements with
   industry leaders in technology, e-commerce and retail. he helped set up
   the analytics center of excellence for one of the world   s largest
   insurance companies.


   you can also read this article on analytics vidhya's android app
   [109]get it on google play

share this:

     * [110]click to share on linkedin (opens in new window)
     * [111]click to share on facebook (opens in new window)
     * [112]click to share on twitter (opens in new window)
     * [113]click to share on pocket (opens in new window)
     * [114]click to share on reddit (opens in new window)
     *

related articles

   [ins: :ins]

   tags : [115]id207, [116]network analysis, [117]python
   next article

an overview of id173 techniques in deep learning (with python code)

   previous article

here   s a deep learning algorithm that transforms an image into a completely
different category

[118]guest blog

   this article is quite old and you might not get a prompt response from
   the author. we request you to post this comment on analytics vidhya's
   [119]discussion portal to get your queries resolved

8 comments

     * justice asare says:
       [120]april 19, 2018 at 11:21 am
       hello srivatsa,
       that was an awesome introduction to id207 and visualization.
       i have a few related questions though.
       1. can a framework be built for representing a criminal network
       interactively ?
       2. how can i make my graph interactive ? which tools would i
       require ?
       3. how do i predict interactions/activities in the network ? how do
       i incorporate this predictive feature in the network framework ?
       [121]reply
          + hruday kommareddy says:
            [122]april 19, 2018 at 4:17 pm
            use python bokeh
            [123]reply
     * seva says:
       [124]april 19, 2018 at 5:43 pm
       hello srivatsa. could you please give a link to download the
       dataset you used in your article.
       [125]reply
     * koji nakata says:
       [126]april 20, 2018 at 6:43 am
       can you provide the airlines data in the article so that we can
       reproduce it completely?
       [127]reply
     * srivatsa says:
       [128]april 20, 2018 at 5:28 pm
       here is the link to the dataset
       [129]https://bitbucket.org/dipolemoment/analyticsvidhya/src
       [130]reply
     * manu says:
       [131]july 5, 2018 at 4:42 pm
       hi srivatsa,
       edges are represented as
       e = {(v1,v2), (v2,v5), (v5, v5), (v4,v5), (v4,v5)}
       guessing this should be
       e = {(v1,v2), (v2,v5), (v5, v5), (v4,v5), (v4,v4)}
       [132]reply
          + pulkit sharma says:
            [133]july 5, 2018 at 5:01 pm
            hi manu,
            thanks for pointing it out. we will update the same
            [134]reply
     * nektarios mitakidis says:
       [135]september 27, 2018 at 10:46 pm
       thank you very much. it will help me a lot with my master thesis.
       [136]reply

   [ins: :ins]

top analytics vidhya users

   rank                  name                  points
   1    [1.jpg?date=2019-04-06] [137]srk       3924
   2    [2.jpg?date=2019-04-06] [138]mark12    3510
   3    [3.jpg?date=2019-04-06] [139]nilabha   3261
   4    [4.jpg?date=2019-04-06] [140]nitish007 3237
   5    [5.jpg?date=2019-04-06] [141]tezdhar   3082
   [142]more user rankings
   [ins: :ins]
   [ins: :ins]

popular posts

     * [143]24 ultimate data science projects to boost your knowledge and
       skills (& can be accessed freely)
     * [144]understanding support vector machine algorithm from examples
       (along with code)
     * [145]essentials of machine learning algorithms (with python and r
       codes)
     * [146]a complete tutorial to learn data science with python from
       scratch
     * [147]7 types of regression techniques you should know!
     * [148]6 easy steps to learn naive bayes algorithm (with codes in
       python and r)
     * [149]a simple introduction to anova (with applications in excel)
     * [150]stock prices prediction using machine learning and deep
       learning techniques (with python codes)

   [ins: :ins]

recent posts

   [151]top 5 machine learning github repositories and reddit discussions
   from march 2019

[152]top 5 machine learning github repositories and reddit discussions from
march 2019

   april 4, 2019

   [153]id161 tutorial: a step-by-step introduction to image
   segmentation techniques (part 1)

[154]id161 tutorial: a step-by-step introduction to image
segmentation techniques (part 1)

   april 1, 2019

   [155]nuts and bolts of id23: introduction to temporal
   difference (td) learning

[156]nuts and bolts of id23: introduction to temporal
difference (td) learning

   march 28, 2019

   [157]16 opencv functions to start your id161 journey (with
   python code)

[158]16 opencv functions to start your id161 journey (with python
code)

   march 25, 2019

   [159][ds-finhack.jpg]

   [160][hikeathon.png]

   [av-white.d14465ee4af2.png]

analytics vidhya

     * [161]about us
     * [162]our team
     * [163]career
     * [164]contact us
     * [165]write for us

   [166]about us
   [167]   
   [168]our team
   [169]   
   [170]careers
   [171]   
   [172]contact us

data scientists

     * [173]blog
     * [174]hackathon
     * [175]discussions
     * [176]apply jobs
     * [177]leaderboard

companies

     * [178]post jobs
     * [179]trainings
     * [180]hiring hackathons
     * [181]advertising
     * [182]reach us

   don't have an account? [183]sign up here.

join our community :

   [184]46336 [185]followers
   [186]20224 [187]followers
   [188]followers
   [189]7513 [190]followers
   ____________________ >

      copyright 2013-2019 analytics vidhya.
     * [191]privacy policy
     * [192]terms of use
     * [193]refund policy

   don't have an account? [194]sign up here

   [loading.gif]
   ____________________

   ____________________

   ____________________
   [button input] (not implemented)_________________

   download resource

join the nextgen data science ecosystem

     * learn: get access to some of the best courses on data science
       created by us
     * engage: interact with thousands of data science professionals
       across the globe!
     * compete: compete in our hackathons and win exciting prizes
     * get hired: get information of jobs in data science community and
       build your profile

   [195](button) join now

   subscribe!

   [loading.gif]
   ____________________

   ____________________

   ____________________
   [button input] (not implemented)_________________

   download resource

join the nextgen data science ecosystem

     * learn: get access to some of the best courses on data science
       created by us
     * engage: interact with thousands of data science professionals
       across the globe!
     * compete: compete in our hackathons and win exciting prizes
     * get hired: get information of jobs in data science community and
       build your profile

   [196](button) join now

   subscribe!

references

   visible links
   1. https://www.analyticsvidhya.com/feed/
   2. https://www.analyticsvidhya.com/comments/feed/
   3. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/feed/
   4. https://www.analyticsvidhya.com/wp-json/oembed/1.0/embed?url=https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/
   5. https://www.analyticsvidhya.com/wp-json/oembed/1.0/embed?url=https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/&format=xml
   6. https://googletagmanager.com/ns.html?id=gtm-mpsm42v
   7. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=blog&utm_medium=flashstrip
   8. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/
   9. https://www.analyticsvidhya.com/blog-archive/
  10. https://www.analyticsvidhya.com/blog/category/machine-learning/
  11. https://www.analyticsvidhya.com/blog/category/deep-learning/
  12. https://www.analyticsvidhya.com/blog/category/career/
  13. https://www.analyticsvidhya.com/blog/category/stories/
  14. https://www.analyticsvidhya.com/blog/category/podcast/
  15. https://www.analyticsvidhya.com/blog/category/infographics/
  16. https://courses.analyticsvidhya.com/?utm_source=home_blog_navbar
  17. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/
  18. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-business-analyst-sas/
  19. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-r-data-science/
  20. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-data-science-python/
  21. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/weka-gui-learn-machine-learning/
  22. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/tableau-learning-path/
  23. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/qlikview-learning-path/
  24. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/newbie-d3-js-expert-complete-path-create-interactive-visualization-d3-js/
  25. https://www.analyticsvidhya.com/glossary-of-common-statistics-and-machine-learning-terms/
  26. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/
  27. https://discuss.analyticsvidhya.com/
  28. https://www.analyticsvidhya.com/blog/category/events/
  29. https://www.analyticsvidhya.com/datahack-summit-2018/
  30. https://www.analyticsvidhya.com/datahacksummit/
  31. https://www.analyticsvidhya.com/student-datafest-2018/?utm_source=homepage_menu
  32. http://www.analyticsvidhya.com/about-me/write/
  33. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/
  34. https://datahack.analyticsvidhya.com/contest/all
  35. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/
  36. https://www.analyticsvidhya.com/jobs/
  37. https://courses.analyticsvidhya.com/
  38. https://courses.analyticsvidhya.com/courses/computer-vision-using-deep-learning/?utm_source=blog-navbar&utm_medium=web
  39. https://courses.analyticsvidhya.com/courses/natural-language-processing-nlp/?utm_source=blog-navbar&utm_medium=web
  40. https://courses.analyticsvidhya.com/courses/introduction-to-data-science-2/?utm_source=blog-navbar&utm_medium=web
  41. https://courses.analyticsvidhya.com/courses/microsoft-excel-beginners-to-advanced/?utm_source=blog-navbar&utm_medium=web
  42. https://courses.analyticsvidhya.com/collections/?utm_source=blog-navbar&utm_medium=web
  43. https://www.analyticsvidhya.com/contact/
  44. https://www.analyticsvidhya.com/
  45. https://www.analyticsvidhya.com/blog-archive/
  46. https://courses.analyticsvidhya.com/?utm_source=home_blog_navbar
  47. https://discuss.analyticsvidhya.com/
  48. https://datahack.analyticsvidhya.com/
  49. https://www.analyticsvidhya.com/jobs/
  50. https://www.analyticsvidhya.com/corporate/
  51. https://www.analyticsvidhya.com/blog/
  52. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=avtopbanner&utm_medium=display
  53. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=avtopbanner&utm_medium=display
  54. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=avtopbanner&utm_medium=display
  55. https://www.analyticsvidhya.com/blog/
  56. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/
  57. https://www.analyticsvidhya.com/blog-archive/
  58. https://www.analyticsvidhya.com/blog/category/machine-learning/
  59. https://www.analyticsvidhya.com/blog/category/deep-learning/
  60. https://www.analyticsvidhya.com/blog/category/career/
  61. https://www.analyticsvidhya.com/blog/category/stories/
  62. https://www.analyticsvidhya.com/blog/category/podcast/
  63. https://www.analyticsvidhya.com/blog/category/infographics/
  64. https://courses.analyticsvidhya.com/?utm_source=home_blog_navbar
  65. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/
  66. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-business-analyst-sas/
  67. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-r-data-science/
  68. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-data-science-python/
  69. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/weka-gui-learn-machine-learning/
  70. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/tableau-learning-path/
  71. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/qlikview-learning-path/
  72. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/newbie-d3-js-expert-complete-path-create-interactive-visualization-d3-js/
  73. https://www.analyticsvidhya.com/glossary-of-common-statistics-and-machine-learning-terms/
  74. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/
  75. https://discuss.analyticsvidhya.com/
  76. https://www.analyticsvidhya.com/blog/category/events/
  77. https://www.analyticsvidhya.com/datahack-summit-2018/
  78. https://www.analyticsvidhya.com/datahacksummit/
  79. https://www.analyticsvidhya.com/student-datafest-2018/?utm_source=homepage_menu
  80. http://www.analyticsvidhya.com/about-me/write/
  81. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/
  82. https://datahack.analyticsvidhya.com/contest/all
  83. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/
  84. https://www.analyticsvidhya.com/jobs/
  85. https://courses.analyticsvidhya.com/
  86. https://courses.analyticsvidhya.com/courses/computer-vision-using-deep-learning/?utm_source=blog-navbar&utm_medium=web
  87. https://courses.analyticsvidhya.com/courses/natural-language-processing-nlp/?utm_source=blog-navbar&utm_medium=web
  88. https://courses.analyticsvidhya.com/courses/introduction-to-data-science-2/?utm_source=blog-navbar&utm_medium=web
  89. https://courses.analyticsvidhya.com/courses/microsoft-excel-beginners-to-advanced/?utm_source=blog-navbar&utm_medium=web
  90. https://courses.analyticsvidhya.com/collections/?utm_source=blog-navbar&utm_medium=web
  91. https://www.analyticsvidhya.com/contact/
  92. https://www.analyticsvidhya.com/
  93. https://www.analyticsvidhya.com/blog/category/data-science/
  94. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/
  95. https://www.analyticsvidhya.com/blog/category/data-science/
  96. https://www.analyticsvidhya.com/blog/category/python-2/
  97. https://www.analyticsvidhya.com/blog/author/guest-blog/
  98. https://courses.analyticsvidhya.com/courses/introduction-to-data-science-2?utm_source=blog&utm_medium=introductiongraphtheoryarticle
  99. https://courses.analyticsvidhya.com/courses/introduction-to-data-science-2?utm_source=blog&utm_medium=introductiongraphtheoryarticle
 100. https://courses.analyticsvidhya.com/courses/introduction-to-data-science-2?utm_source=blog&utm_medium=introductiongraphtheoryarticle
 101. https://courses.analyticsvidhya.com/courses/introduction-to-data-science-2?utm_source=blog&utm_medium=introductiongraphtheoryarticle
 102. http://www.cs.xu.edu/csci390/12s/ijest10-02-09-124.pdf
 103. http://bigocheatsheet.com/
 104. https://networkx.github.io/documentation/stable/reference/index.html
 105. http://www.graphviz.org/download/
 106. http://pygraphviz.github.io/
 107. https://github.com/pygraphviz/pygraphviz/blob/master/examples/star.py
 108. https://en.wikipedia.org/wiki/dijkstra's_algorithm
 109. https://play.google.com/store/apps/details?id=com.analyticsvidhya.android&utm_source=blog_article&utm_campaign=blog&pcampaignid=mkt-other-global-all-co-prtnr-py-partbadge-mar2515-1
 110. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/?share=linkedin
 111. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/?share=facebook
 112. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/?share=twitter
 113. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/?share=pocket
 114. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/?share=reddit
 115. https://www.analyticsvidhya.com/blog/tag/graph-theory/
 116. https://www.analyticsvidhya.com/blog/tag/network-analysis/
 117. https://www.analyticsvidhya.com/blog/tag/python/
 118. https://www.analyticsvidhya.com/blog/author/guest-blog/
 119. https://discuss.analyticsvidhya.com/
 120. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-152675
 121. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-152675
 122. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-152692
 123. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-152692
 124. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-152696
 125. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-152696
 126. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-152702
 127. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-152702
 128. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-152725
 129. https://bitbucket.org/dipolemoment/analyticsvidhya/src
 130. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-152725
 131. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-154064
 132. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-154064
 133. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-154065
 134. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-154065
 135. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-155107
 136. https://www.analyticsvidhya.com/blog/2018/04/introduction-to-graph-theory-network-analysis-python-codes/#comment-155107
 137. https://datahack.analyticsvidhya.com/user/profile/srk
 138. https://datahack.analyticsvidhya.com/user/profile/mark12
 139. https://datahack.analyticsvidhya.com/user/profile/nilabha
 140. https://datahack.analyticsvidhya.com/user/profile/nitish007
 141. https://datahack.analyticsvidhya.com/user/profile/tezdhar
 142. https://datahack.analyticsvidhya.com/top-competitor/?utm_source=blog-navbar&utm_medium=web
 143. https://www.analyticsvidhya.com/blog/2018/05/24-ultimate-data-science-projects-to-boost-your-knowledge-and-skills/
 144. https://www.analyticsvidhya.com/blog/2017/09/understaing-support-vector-machine-example-code/
 145. https://www.analyticsvidhya.com/blog/2017/09/common-machine-learning-algorithms/
 146. https://www.analyticsvidhya.com/blog/2016/01/complete-tutorial-learn-data-science-python-scratch-2/
 147. https://www.analyticsvidhya.com/blog/2015/08/comprehensive-guide-regression/
 148. https://www.analyticsvidhya.com/blog/2017/09/naive-bayes-explained/
 149. https://www.analyticsvidhya.com/blog/2018/01/anova-analysis-of-variance/
 150. https://www.analyticsvidhya.com/blog/2018/10/predicting-stock-price-machine-learningnd-deep-learning-techniques-python/
 151. https://www.analyticsvidhya.com/blog/2019/04/top-5-machine-learning-github-reddit/
 152. https://www.analyticsvidhya.com/blog/2019/04/top-5-machine-learning-github-reddit/
 153. https://www.analyticsvidhya.com/blog/2019/04/introduction-image-segmentation-techniques-python/
 154. https://www.analyticsvidhya.com/blog/2019/04/introduction-image-segmentation-techniques-python/
 155. https://www.analyticsvidhya.com/blog/2019/03/reinforcement-learning-temporal-difference-learning/
 156. https://www.analyticsvidhya.com/blog/2019/03/reinforcement-learning-temporal-difference-learning/
 157. https://www.analyticsvidhya.com/blog/2019/03/opencv-functions-computer-vision-python/
 158. https://www.analyticsvidhya.com/blog/2019/03/opencv-functions-computer-vision-python/
 159. https://datahack.analyticsvidhya.com/contest/ltfs-datascience-finhack-an-online-hackathon/?utm_source=sticky_banner1&utm_medium=display
 160. https://datahack.analyticsvidhya.com/contest/hikeathon/?utm_source=sticky_banner2&utm_medium=display
 161. http://www.analyticsvidhya.com/about-me/
 162. https://www.analyticsvidhya.com/about-me/team/
 163. https://www.analyticsvidhya.com/career-analytics-vidhya/
 164. https://www.analyticsvidhya.com/contact/
 165. https://www.analyticsvidhya.com/about-me/write/
 166. http://www.analyticsvidhya.com/about-me/
 167. https://www.analyticsvidhya.com/about-me/team/
 168. https://www.analyticsvidhya.com/about-me/team/
 169. https://www.analyticsvidhya.com/about-me/team/
 170. https://www.analyticsvidhya.com/career-analytics-vidhya/
 171. https://www.analyticsvidhya.com/about-me/team/
 172. https://www.analyticsvidhya.com/contact/
 173. https://www.analyticsvidhya.com/blog
 174. https://datahack.analyticsvidhya.com/
 175. https://discuss.analyticsvidhya.com/
 176. https://www.analyticsvidhya.com/jobs/
 177. https://datahack.analyticsvidhya.com/users/
 178. https://www.analyticsvidhya.com/corporate/
 179. https://trainings.analyticsvidhya.com/
 180. https://datahack.analyticsvidhya.com/
 181. https://www.analyticsvidhya.com/contact/
 182. https://www.analyticsvidhya.com/contact/
 183. https://datahack.analyticsvidhya.com/signup/
 184. https://www.facebook.com/analyticsvidhya/
 185. https://www.facebook.com/analyticsvidhya/
 186. https://twitter.com/analyticsvidhya
 187. https://twitter.com/analyticsvidhya
 188. https://plus.google.com/+analyticsvidhya
 189. https://in.linkedin.com/company/analytics-vidhya
 190. https://in.linkedin.com/company/analytics-vidhya
 191. https://www.analyticsvidhya.com/privacy-policy/
 192. https://www.analyticsvidhya.com/terms/
 193. https://www.analyticsvidhya.com/refund-policy/
 194. https://id.analyticsvidhya.com/accounts/signup/
 195. https://id.analyticsvidhya.com/accounts/login/?next=https://www.analyticsvidhya.com/blog/&utm_source=blog-subscribe&utm_medium=web
 196. https://id.analyticsvidhya.com/accounts/login/?next=https://www.analyticsvidhya.com/blog/&utm_source=blog-subscribe&utm_medium=web

   hidden links:
 198. https://www.facebook.com/analyticsvidhya
 199. https://twitter.com/analyticsvidhya
 200. https://plus.google.com/+analyticsvidhya/posts
 201. https://in.linkedin.com/company/analytics-vidhya
 202. https://s3-ap-south-1.amazonaws.com/av-blog-media/wp-content/uploads/2018/04/spek3-1-1.png
 203. https://www.analyticsvidhya.com/blog/2018/04/fundamentals-deep-learning-id173-techniques/
 204. https://www.analyticsvidhya.com/blog/2018/04/framework-for-unsupervised-image-to-image-translation/
 205. https://www.analyticsvidhya.com/blog/author/guest-blog/
 206. http://www.edvancer.in/certified-data-scientist-with-python-course?utm_source=av&utm_medium=avads&utm_campaign=avadsnonfc&utm_content=pythonavad
 207. https://www.facebook.com/analyticsvidhya/
 208. https://twitter.com/analyticsvidhya
 209. https://plus.google.com/+analyticsvidhya
 210. https://plus.google.com/+analyticsvidhya
 211. https://in.linkedin.com/company/analytics-vidhya
 212. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 213. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 214. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 215. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 216. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 217. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 218. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 219. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 220. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 221. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 222. javascript:void(0);
 223. javascript:void(0);
 224. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 225. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 226. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 227. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 228. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 229. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 230. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 231. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 232. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 233. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2018%2f04%2fintroduction-to-graph-theory-network-analysis-python-codes%2f&linkname=an%20introduction%20to%20graph%20theory%20and%20network%20analysis%20%28with%20python%20codes%29
 234. javascript:void(0);
 235. javascript:void(0);
