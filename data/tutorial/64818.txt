   #[1]github [2]recent commits to pg_query:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]10
     * [35]star [36]368
     * [37]fork [38]35

[39]lfittl/[40]pg_query

   [41]code [42]issues 20 [43]pull requests 9 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   ruby extension to parse, deparse and normalize sql queries using the
   postgresql query parser
     * [47]380 commits
     * [48]4 branches
     * [49]54 releases
     * [50]fetching contributors
     * [51]bsd-3-clause

    1. [52]ruby 98.2%
    2. [53]c 1.8%

   (button) ruby c
   branch: master (button) new pull request
   [54]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/l
   [55]download zip

downloading...

   want to be notified of new releases in lfittl/pg_query?
   [56]sign in [57]sign up

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [60]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [61]download the github extension for visual studio
   and try again.

   (button) go back
   [62]@lfittl
   [63]lfittl [64]release 1.1.0
   latest commit [65]c2b1859 oct 5, 2018
   [66]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [67]ext/pg_query
   [68]lib [69]release 1.1.0 oct 4, 2018
   [70]spec
   [71].gitignore [72]ignore pg_query.so in git checkout ([73]#100[74])
   sep 28, 2018
   [75].rspec
   [76].rubocop.yml
   [77].travis.yml
   [78]changelog.md
   [79]gemfile
   [80]gemfile.lock
   [81]license
   [82]readme.md
   [83]rakefile [84]prefer __dir__ over file.dirname(__file__)
   ([85]#104[86]) oct 2, 2018
   [87]pg_query.gemspec

readme.md

pg_query

   this ruby extension uses the actual postgresql server source to parse
   sql queries and return the internal postgresql parsetree.

   in addition the extension allows you to normalize queries (replacing
   constant values with ?) and parse these normalized queries into a
   parsetree again.

   when you build this extension, it builds parts of the postgresql server
   source (see [88]libpg_query), and then statically links it into this
   extension.

   this is slightly crazy, but is the only reliable way of parsing all
   valid postgresql queries.

   you can find further examples and a longer rationale here:
   [89]https://pganalyze.com/blog/parse-postgresql-queries-in-ruby.html

installation

gem install pg_query

   due to compiling parts of postgresql, installation might take a while
   on slower systems. expect up to 5 minutes.

usage

parsing a query

pgquery.parse("select 1")

=> #<pgquery:0x007fe92b27ea18
 @tree=
  [{"selectstmt"=>
     {"targetlist"=>
       [{"restarget"=>
          {"val"=>{"a_const"=>{"val"=>{"integer"=>{"ival"=>1}}, "location"=>7}},
           "location"=>7}}],
      "op"=>0,
  }}],
 @query="select 1",
 @warnings=[]>

modifying a parsed query and turning it into sql again

parsed_query = pgquery.parse("select * from users")

=> #<pgquery:0x007ff3e956c8b0
 @tree=
  [{"selectstmt"=>
    {"targetlist"=>
      [{"restarget"=>
        {"val"=>
          {"columnref"=> {"fields"=>[{"a_star"=>{}}], "location"=>7}},
         "location"=>7}
      }],
     "fromclause"=>
      [{"rangevar"=>
        {"relname"=>"users",
         "inhopt"=>2,
         "relpersistence"=>"p",
         "location"=>14}}],
   }}],
 @query="select * from users",
 @warnings=[]>

# modify the parse tree in some way
parsed_query.tree[0]['selectstmt']['fromclause'][0]['rangevar']['relname'] = 'ot
her_users'

# turn it into sql again
parsed_query.deparse
=> "select * from \"other_users\""

   note: the deparsing feature is experimental and does not support
   outputting all sql yet.

parsing a normalized query

# normalizing a query (like pg_stat_statements in postgres 10+)
pgquery.normalize("select 1 from x where y = 'foo'")

=> "select $1 from x where y = $2"

# parsing a normalized query (pre-postgres 10 style)
pgquery.parse("select ? from x where y = ?")

=> #<pgquery:0x007fb99455a438
 @tree=
  [{"selectstmt"=>
     {"targetlist"=>
       [{"restarget"=>
          {"val"=>{"paramref"=>{"location"=>7}},
           "location"=>7}}],
      "fromclause"=>
       [{"rangevar"=>
          {"relname"=>"x",
           "inhopt"=>2,
           "relpersistence"=>"p",
           "location"=>14}}],
      "whereclause"=>
       {"a_expr"=>
         {"kind"=>0,
          "name"=>[{"string"=>{"str"=>"="}}],
          "lexpr"=>{"columnref"=>{"fields"=>[{"string"=>{"str"=>"y"}}], "locatio
n"=>22}},
          "rexpr"=>{"paramref"=>{"location"=>26}},
          "location"=>24}},
  }}],
 @query="select ? from x where y = ?",
 @warnings=[]>

extracting tables from a query

pgquery.parse("select ? from x join y using (id) where z = ?").tables

=> ["x", "y"]

extracting columns from a query

pgquery.parse("select ? from x where x.y = ? and z = ?").filter_columns

=> [["x", "y"], [nil, "z"]]

fingerprinting a query

pgquery.parse("select 1").fingerprint

=> "8e1acac181c6d28f4a923392cf1c4eda49ee4cd2"

pgquery.parse("select 2; --- comment").fingerprint

=> "8e1acac181c6d28f4a923392cf1c4eda49ee4cd2"

# faster fingerprint method that is implemented inside the native library
pgquery.fingerprint("select ?")

=> "8e1acac181c6d28f4a923392cf1c4eda49ee4cd2"

differences from upstream postgresql

   this gem is based on [90]libpg_query, which uses the latest stable
   postgresql version, but with a patch applied to support parsing
   normalized queries containing ? replacement characters.

supported ruby versions

   currently tested and officially supported ruby versions:
     * mri 2.1
     * mri 2.2
     * mri 2.3
     * mri 2.4

resources

   see [91]libpg_query for pg_query in other languages, as well as
   products/tools built on pg_query.

original author

     * [92]lukas fittl

special thanks to

     * [93]jack danger canty, for significantly improving deparsing

license

   copyright (c) 2015, pganalyze team [94]team@pganalyze.com
   pg_query is licensed under the 3-clause bsd license, see license file
   for details.

   query id172 code:
   copyright (c) 2008-2015, postgresql global development group

     *    2019 github, inc.
     * [95]terms
     * [96]privacy
     * [97]security
     * [98]status
     * [99]help

     * [100]contact github
     * [101]pricing
     * [102]api
     * [103]training
     * [104]blog
     * [105]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [106]reload to refresh your
   session. you signed out in another tab or window. [107]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/lfittl/pg_query/commits/master.atom
   3. https://github.com/lfittl/pg_query#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/lfittl/pg_query
  32. https://github.com/join
  33. https://github.com/login?return_to=/lfittl/pg_query
  34. https://github.com/lfittl/pg_query/watchers
  35. https://github.com/login?return_to=/lfittl/pg_query
  36. https://github.com/lfittl/pg_query/stargazers
  37. https://github.com/login?return_to=/lfittl/pg_query
  38. https://github.com/lfittl/pg_query/network/members
  39. https://github.com/lfittl
  40. https://github.com/lfittl/pg_query
  41. https://github.com/lfittl/pg_query
  42. https://github.com/lfittl/pg_query/issues
  43. https://github.com/lfittl/pg_query/pulls
  44. https://github.com/lfittl/pg_query/projects
  45. https://github.com/lfittl/pg_query/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/lfittl/pg_query/commits/master
  48. https://github.com/lfittl/pg_query/branches
  49. https://github.com/lfittl/pg_query/releases
  50. https://github.com/lfittl/pg_query/graphs/contributors
  51. https://github.com/lfittl/pg_query/blob/master/license
  52. https://github.com/lfittl/pg_query/search?l=ruby
  53. https://github.com/lfittl/pg_query/search?l=c
  54. https://github.com/lfittl/pg_query/find/master
  55. https://github.com/lfittl/pg_query/archive/master.zip
  56. https://github.com/login?return_to=https://github.com/lfittl/pg_query
  57. https://github.com/join?return_to=/lfittl/pg_query
  58. https://desktop.github.com/
  59. https://desktop.github.com/
  60. https://developer.apple.com/xcode/
  61. https://visualstudio.github.com/
  62. https://github.com/lfittl
  63. https://github.com/lfittl/pg_query/commits?author=lfittl
  64. https://github.com/lfittl/pg_query/commit/c2b18590107a30e7c3195a95a114adc3caea9b22
  65. https://github.com/lfittl/pg_query/commit/c2b18590107a30e7c3195a95a114adc3caea9b22
  66. https://github.com/lfittl/pg_query/tree/c2b18590107a30e7c3195a95a114adc3caea9b22
  67. https://github.com/lfittl/pg_query/tree/master/ext/pg_query
  68. https://github.com/lfittl/pg_query/tree/master/lib
  69. https://github.com/lfittl/pg_query/commit/c2b18590107a30e7c3195a95a114adc3caea9b22
  70. https://github.com/lfittl/pg_query/tree/master/spec
  71. https://github.com/lfittl/pg_query/blob/master/.gitignore
  72. https://github.com/lfittl/pg_query/commit/d1605f7a0ef969809a24c1489fbf2b81019c8984
  73. https://github.com/lfittl/pg_query/pull/100
  74. https://github.com/lfittl/pg_query/commit/d1605f7a0ef969809a24c1489fbf2b81019c8984
  75. https://github.com/lfittl/pg_query/blob/master/.rspec
  76. https://github.com/lfittl/pg_query/blob/master/.rubocop.yml
  77. https://github.com/lfittl/pg_query/blob/master/.travis.yml
  78. https://github.com/lfittl/pg_query/blob/master/changelog.md
  79. https://github.com/lfittl/pg_query/blob/master/gemfile
  80. https://github.com/lfittl/pg_query/blob/master/gemfile.lock
  81. https://github.com/lfittl/pg_query/blob/master/license
  82. https://github.com/lfittl/pg_query/blob/master/readme.md
  83. https://github.com/lfittl/pg_query/blob/master/rakefile
  84. https://github.com/lfittl/pg_query/commit/feec888ff8ad0510da6d9da537451df1289f38d4
  85. https://github.com/lfittl/pg_query/pull/104
  86. https://github.com/lfittl/pg_query/commit/feec888ff8ad0510da6d9da537451df1289f38d4
  87. https://github.com/lfittl/pg_query/blob/master/pg_query.gemspec
  88. https://github.com/lfittl/libpg_query
  89. https://pganalyze.com/blog/parse-postgresql-queries-in-ruby.html
  90. https://github.com/lfittl/libpg_query
  91. https://github.com/lfittl/libpg_query/blob/10-latest/readme.md#resources
  92. mailto:lukas@fittl.com
  93. https://github.com/jackdanger
  94. mailto:team@pganalyze.com
  95. https://github.com/site/terms
  96. https://github.com/site/privacy
  97. https://github.com/security
  98. https://githubstatus.com/
  99. https://help.github.com/
 100. https://github.com/contact
 101. https://github.com/pricing
 102. https://developer.github.com/
 103. https://training.github.com/
 104. https://github.blog/
 105. https://github.com/about
 106. https://github.com/lfittl/pg_query
 107. https://github.com/lfittl/pg_query

   hidden links:
 109. https://github.com/
 110. https://github.com/lfittl/pg_query
 111. https://github.com/lfittl/pg_query
 112. https://github.com/lfittl/pg_query
 113. https://help.github.com/articles/which-remote-url-should-i-use
 114. https://github.com/lfittl/pg_query#pg_query------
 115. https://rubygems.org/gems/pg_query
 116. https://rubygems.org/gems/pg_query
 117. https://travis-ci.org/lfittl/pg_query
 118. https://github.com/lfittl/pg_query#installation
 119. https://github.com/lfittl/pg_query#usage
 120. https://github.com/lfittl/pg_query#parsing-a-query
 121. https://github.com/lfittl/pg_query#modifying-a-parsed-query-and-turning-it-into-sql-again
 122. https://github.com/lfittl/pg_query#parsing-a-normalized-query
 123. https://github.com/lfittl/pg_query#extracting-tables-from-a-query
 124. https://github.com/lfittl/pg_query#extracting-columns-from-a-query
 125. https://github.com/lfittl/pg_query#fingerprinting-a-query
 126. https://github.com/lfittl/pg_query#differences-from-upstream-postgresql
 127. https://github.com/lfittl/pg_query#supported-ruby-versions
 128. https://github.com/lfittl/pg_query#resources
 129. https://github.com/lfittl/pg_query#original-author
 130. https://github.com/lfittl/pg_query#special-thanks-to
 131. https://github.com/lfittl/pg_query#license
 132. https://github.com/
