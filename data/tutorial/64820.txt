   #[1]github [2]recent commits to sqlite-parser:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]35
     * [35]star [36]222
     * [37]fork [38]43

[39]codeschool/[40]sqlite-parser

   [41]code [42]issues 14 [43]pull requests 1 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   javascript implentation of sqlite 3 query parser
     * [47]430 commits
     * [48]2 branches
     * [49]27 releases
     * [50]fetching contributors
     * [51]mit

    1. [52]plpgsql 91.7%
    2. [53]javascript 5.4%
    3. [54]sqlpl 2.5%
    4. other 0.4%

   (button) plpgsql javascript sqlpl other
   branch: master (button) new pull request
   [55]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/c
   [56]download zip

downloading...

   want to be notified of new releases in codeschool/sqlite-parser?
   [57]sign in [58]sign up

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [60]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [61]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [62]download the github extension for visual studio
   and try again.

   (button) go back
   [63]@nwronski
   [64]nwronski [65]release v1.0.1.
   latest commit [66]a50aabe jun 15, 2017
   [67]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [68]bin [69]release v1.0.1. jun 15, 2017
   [70]dist
   [71]lib
   [72]src
   [73]test [74]rewrite extended suite for and / or grammar change jan 23,
   2017
   [75].babelrc
   [76].gitignore
   [77].npmignore
   [78]changelog.md
   [79]contributing.md
   [80]gruntfile.js
   [81]license
   [82]readme.md
   [83]todo.md
   [84]package.json

readme.md

sqlite-parser

   [85]npm version image [86]dependencies status image [87]devdependencies
   status image [88]license type image

   this javascript library parses sqlite queries to generate abstract
   syntax tree (ast) representations of the parsed statements.

   try out the [89]interactive demo to see it in action.

   this parser is written against the [90]sqlite 3 spec.

install

npm install sqlite-parser

install as a global module (since v1.0.0)

   use the command-line interface of the parser by installing it as a
   global module. the sqlite-parser command is then available to use to
   parse input sql files and write the results to stdout or a json file.
   additional usage instructions and options available through
   sqlite-parser --help.
npm i -g sqlite-parser

basic usage

   the library exposes a function that accepts two arguments: a string
   containing sql to parse and a callback function. if an ast cannot be
   generated from the input string then a descriptive error is generated.

   if invoked without a callback function the parser will runs
   synchronously and return the resulting ast or throw an error if one
   occurs.
var sqliteparser = require('sqlite-parser');
var query = 'select pants from laundry;';
// sync
var ast = sqliteparser(query);
console.log(ast);

// async
sqliteparser(query, function (err, ast) {
  if (err) {
    console.error(err);
    return;
  }
  console.log(ast);
});

use parser on node streams (experimental) (since v1.0.0)

   this library also includes experimental support as a [91]stream
   transform that can accept a readable stream of sql statements and
   produce a json string, representing the ast of each statement, as it is
   read and transformed. using this method, the parser can handle files
   containing hundreds or thousands of queries at once without running
   into memory limitations. the ast for each statement is pushed down the
   stream as soon as it is read and parsed instead of reading the entire
   file into memory before parsing begins.
var parsertransform = require('sqlite-parser').createparser();
var readstream = require('fs').createreadstream('./large-input-file.sql');

readstream.pipe(parsertransform);
parsertransform.pipe(process.stdout);

parsertransform.on('error', function (err) {
  console.error(err);
  process.exit(1);
});

parsertransform.on('finish', function () {
  process.exit(0);
});

   to pipe the output into a file that contains a single valid json
   structure, the output of the parser steam transform needs to be wrapped
   in statement list node where every statement is separated by a comma.
var fs = require('fs');
var sqliteparser = require('sqlite-parser');
var parsertransform = sqliteparser.createparser();
var singlenodetransform = sqliteparser.createstitcher();
var readstream = fs.createreadstream('./large-input-file.sql');
var writestream = fs.createwritestream('./large-output-file.json');

readstream.pipe(parsertransform);
parsertransform.pipe(singlenodetransform);
singlenodetransform.pipe(writestream);

parsertransform.on('error', function (err) {
  console.error(err);
  process.exit(1);
});

writestream.on('finish', function () {
  process.exit(0);
});

ast

   the ast is stable as of release 1.0.0. however, if changes need to be
   made to improve consistency between node types, they will be explicitly
   listed in the [92]changelog.

example

   you can provide one or more sql statements at a time. the resulting ast
   object has, at the highest level, a statement list node that contains
   an array of statements.

input sql

select
 max(honey) as "max honey"
from
 beehive

result ast

{
  "type": "statement",
  "variant": "list",
  "statement": [
    {
      "type": "statement",
      "variant": "select",
      "result": [
        {
          "type": "function",
          "name": {
            "type": "identifier",
            "variant": "function",
            "name": "max"
          },
          "args": {
            "type": "expression",
            "variant": "list",
            "expression": [
              {
                "type": "identifier",
                "variant": "column",
                "name": "honey"
              }
            ]
          },
          "alias": "max honey"
        }
      ],
      "from": {
        "type": "identifier",
        "variant": "table",
        "name": "beehive"
      }
    }
  ]
}

syntax errors

   this parser will try to create descriptive error messages when it
   cannot parse some input sql. in addition to an approximate location for
   the syntax error, the parser will attempt to describe the area of
   concern (e.g.: syntax error found near column identifier (where
   clause)).

contributing

   contributions are welcome! you can get started by checking out the
   [93]contributing guidelines.

     *    2019 github, inc.
     * [94]terms
     * [95]privacy
     * [96]security
     * [97]status
     * [98]help

     * [99]contact github
     * [100]pricing
     * [101]api
     * [102]training
     * [103]blog
     * [104]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [105]reload to refresh your
   session. you signed out in another tab or window. [106]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/codeschool/sqlite-parser/commits/master.atom
   3. https://github.com/codeschool/sqlite-parser#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/codeschool/sqlite-parser
  32. https://github.com/join
  33. https://github.com/login?return_to=/codeschool/sqlite-parser
  34. https://github.com/codeschool/sqlite-parser/watchers
  35. https://github.com/login?return_to=/codeschool/sqlite-parser
  36. https://github.com/codeschool/sqlite-parser/stargazers
  37. https://github.com/login?return_to=/codeschool/sqlite-parser
  38. https://github.com/codeschool/sqlite-parser/network/members
  39. https://github.com/codeschool
  40. https://github.com/codeschool/sqlite-parser
  41. https://github.com/codeschool/sqlite-parser
  42. https://github.com/codeschool/sqlite-parser/issues
  43. https://github.com/codeschool/sqlite-parser/pulls
  44. https://github.com/codeschool/sqlite-parser/projects
  45. https://github.com/codeschool/sqlite-parser/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/codeschool/sqlite-parser/commits/master
  48. https://github.com/codeschool/sqlite-parser/branches
  49. https://github.com/codeschool/sqlite-parser/releases
  50. https://github.com/codeschool/sqlite-parser/graphs/contributors
  51. https://github.com/codeschool/sqlite-parser/blob/master/license
  52. https://github.com/codeschool/sqlite-parser/search?l=plpgsql
  53. https://github.com/codeschool/sqlite-parser/search?l=javascript
  54. https://github.com/codeschool/sqlite-parser/search?l=sqlpl
  55. https://github.com/codeschool/sqlite-parser/find/master
  56. https://github.com/codeschool/sqlite-parser/archive/master.zip
  57. https://github.com/login?return_to=https://github.com/codeschool/sqlite-parser
  58. https://github.com/join?return_to=/codeschool/sqlite-parser
  59. https://desktop.github.com/
  60. https://desktop.github.com/
  61. https://developer.apple.com/xcode/
  62. https://visualstudio.github.com/
  63. https://github.com/nwronski
  64. https://github.com/codeschool/sqlite-parser/commits?author=nwronski
  65. https://github.com/codeschool/sqlite-parser/commit/a50aabea6b1289aa85a88fc7664de1753f4d034e
  66. https://github.com/codeschool/sqlite-parser/commit/a50aabea6b1289aa85a88fc7664de1753f4d034e
  67. https://github.com/codeschool/sqlite-parser/tree/a50aabea6b1289aa85a88fc7664de1753f4d034e
  68. https://github.com/codeschool/sqlite-parser/tree/master/bin
  69. https://github.com/codeschool/sqlite-parser/commit/a50aabea6b1289aa85a88fc7664de1753f4d034e
  70. https://github.com/codeschool/sqlite-parser/tree/master/dist
  71. https://github.com/codeschool/sqlite-parser/tree/master/lib
  72. https://github.com/codeschool/sqlite-parser/tree/master/src
  73. https://github.com/codeschool/sqlite-parser/tree/master/test
  74. https://github.com/codeschool/sqlite-parser/commit/89fed99a5e206bd9f3560e588e0d836c32b4934c
  75. https://github.com/codeschool/sqlite-parser/blob/master/.babelrc
  76. https://github.com/codeschool/sqlite-parser/blob/master/.gitignore
  77. https://github.com/codeschool/sqlite-parser/blob/master/.npmignore
  78. https://github.com/codeschool/sqlite-parser/blob/master/changelog.md
  79. https://github.com/codeschool/sqlite-parser/blob/master/contributing.md
  80. https://github.com/codeschool/sqlite-parser/blob/master/gruntfile.js
  81. https://github.com/codeschool/sqlite-parser/blob/master/license
  82. https://github.com/codeschool/sqlite-parser/blob/master/readme.md
  83. https://github.com/codeschool/sqlite-parser/blob/master/todo.md
  84. https://github.com/codeschool/sqlite-parser/blob/master/package.json
  85. https://www.npmjs.com/package/sqlite-parser
  86. https://github.com/codeschool/sqlite-parser/
  87. https://github.com/codeschool/sqlite-parser/
  88. https://github.com/codeschool/sqlite-parser/blob/master/license
  89. http://codeschool.github.io/sqlite-parser/demo/
  90. https://www.sqlite.org/lang.html
  91. https://nodejs.org/api/stream.html
  92. https://github.com/codeschool/sqlite-parser/blob/master/changelog.md
  93. https://github.com/codeschool/sqlite-parser/blob/master/contributing.md
  94. https://github.com/site/terms
  95. https://github.com/site/privacy
  96. https://github.com/security
  97. https://githubstatus.com/
  98. https://help.github.com/
  99. https://github.com/contact
 100. https://github.com/pricing
 101. https://developer.github.com/
 102. https://training.github.com/
 103. https://github.blog/
 104. https://github.com/about
 105. https://github.com/codeschool/sqlite-parser
 106. https://github.com/codeschool/sqlite-parser

   hidden links:
 108. https://github.com/
 109. https://github.com/codeschool/sqlite-parser
 110. https://github.com/codeschool/sqlite-parser
 111. https://github.com/codeschool/sqlite-parser
 112. https://help.github.com/articles/which-remote-url-should-i-use
 113. https://github.com/codeschool/sqlite-parser#sqlite-parser
 114. https://github.com/codeschool/sqlite-parser#install
 115. https://github.com/codeschool/sqlite-parser#install-as-a-global-module-since-v100
 116. https://github.com/codeschool/sqlite-parser#basic-usage
 117. https://github.com/codeschool/sqlite-parser#use-parser-on-node-streams-experimental-since-v100
 118. https://github.com/codeschool/sqlite-parser#ast
 119. https://github.com/codeschool/sqlite-parser#example
 120. https://github.com/codeschool/sqlite-parser#input-sql
 121. https://github.com/codeschool/sqlite-parser#result-ast
 122. https://github.com/codeschool/sqlite-parser#syntax-errors
 123. https://github.com/codeschool/sqlite-parser#contributing
 124. https://github.com/
