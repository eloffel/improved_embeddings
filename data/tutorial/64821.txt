   semantic designs^sm
       automated tools
   for software engineering

   code search (find, follow), analysis (metrics, static, dynamic, bugs)
   and change (modernization, migration, generation, optimization,
   rearchitecting)
     * [1]home
     * [2]services
          + [3]automated migration
          + [4]custom analysis and transformation
          + [5]custom development toolkit
          + [6]application modernization
          + [7]software quality analysis
          + [8]understanding software structure
     * [9]products
          + [10]dms^  
          + [11]by language
               o [12]c
               o [13]c++
               o [14]java
               o [15]cobol
               o [16]c#/.net
               o [17]php
               o [18]vhdl
               o [19]verilog
               o [20]more...
          + [21]by tool
               o [22]search engine
               o [23]clone detection
               o [24]test coverage
               o [25]formatters
               o [26]obfuscators
               o [27]metrics
               o [28]profilers
               o [29]smart differencer
               o [30]more...
          + [31]by application
               o [32]hogan (banking) analysis
               o [33]more effective testing
               o [34]detecting infringement
               o [35]agile testing
          + [36]why buy
          + [37]prices
          + [38]register
          + [39]downloads
     * [40]company
          + [41]about sd
          + [42]success stories
          + [43]news and events
          + [44]partners
          + [45]customers
          + [46]careers
          + [47]papers
          + [48]visions
     * [49]support
          + [50]support policies
          + [51]register
          + [52]downloads
     * [53]contact

dms^   software reengineering toolkit  

   ... is a sophisticated set of infrastructure and highly customizable
   tools for automating:
     * source program analysis
     * modification of source code
     * generation of software

   dms/srt (or just "dms") can operate at large scale, on arbitrary
   mixtures of [54]domains (computer languages, e.g., c++, java, cobol,
   sql, html, verilog, ...).

   the purpose of dms is to provide sufficient infrastructure so that a
   custom tool builder can spend her time working on the custom tool
   details, [55]rather than trying to build the necessary infrastructure
   machinery from the ground floor up. this can save the tool builder
   literally years of engineering by leveraging the man-century already
   invested by sd. sophisticated infrastructure enables the tool builder
   to produce more effective results than what could be obtained from a
   custom standalone tool.

   the term "software" for dms is very broad and covers any formal
   notation, including programming languages, markup languages, hardware
   description languages, design notations, data descriptions, and
   [56]domain-specific languages. this toolkit is the first step towards
   the implementation of the [57]design maintenance system^  , an ambitious
   vision of a 21st century software engineering environment that supports
   the incremental construction and maintenance of large application
   systems, driven by semantics and captured designs.

dms: generalized compiler infrastructure

   a very simple model (see figure below) of dms is that of an extremely
   generalized compiler, having
     * a parser (producing compiler-like data structures capturing code),
     * a set of semantic analyzers,
       including a variety of pattern matching (using surface syntax)
       engines
     * a set of compiler data structure modification engines,
       including a [58]source-to-source program transformation engine
       (using surface syntax)
     * and final output formatting components (converting compiler data
       structures back to valid source code rather than binary code),

   parameterized by descriptions of computer languages to process. unlike
   a conventional compiler, in which each component is specific to its
   task of translating one source language to one target machine language,
   each dms component is highly parameterized by the desired task,
   enabling a stunningly wide variety of effects. this means one can
   change the input language, change the analysis, change the transforms,
   and change the output in arbitrary ways.

   dms can be used "just" to construct analyzers that generate reports.
   or, it can be used to find and fix coding and structural issues. using
   analyzer output (analysis focus arc) to locate issues, and choose/apply
   transformations to resolve them.

   unlike a conventional compiler, dms can process thousands of files from
   multiple languages at the same moment, allowing analyses and/or
   consistent code changes across complex systems of files.

   an interesting property is that dms reads formal descriptions of
   languages, analyses and transforms. dms is consequently used to support
   itself, including producing new language descriptions.
   [dms.png]

   see a [59]comparison of dms to other well-known types of compiler
   technologies.

   the software reengineering toolkit can be used to implement [60]a wide
   variety of program enhancing tools. a very simple, but [61]detailed
   example, shows how dms can be easily used to define and manipulate a
   notation system that is equivalent to standard algebra. a white paper
   on how dms can be used to enhance software quality is available
   [62](pdf, 100kb). think of dms as [63]life after parsing.

   our [64]clonedr is an example of a dms-enabled custom reengineering
   application. the clonedr has a particular dms configuration designed to
   find exact and almost-identical blocks of code ("clones") in large
   systems, and remove them by replacing them with invocations of
   abstractions (macros, procedures, etc.). the technology is generic
   enough so we have applied it to cobol, c/c++, java, fortran 90, and to
   vhdl. you can download a demo cobol clone detector/reporter.

dms capabilities

   dms provides a [65]large set of robust, integrated facilities for
   building software analysis and modification tools, [66]proven on dozens
   of real languages:
     * full unicode-based parser and lexer generation with automatic error
       recovery. accepts/generates files encoded in utf-8 and utf-16, 7
       bit ascii (iso-646-us), 8 bit ascii (iso-8859-1 thru -16), ebcdic
       (cp-37, cp-500), a number of microsoft code pages (cp-1250 thru
       -1258), and japanese shift-jis (cp-932 and jis-0208). standard
       support is included for reading multiple source files to enable
       include file management and construct suitable preprocessors. the
       parser technology is based on glr, and can handle any context-free
       language, even with ambiguities (much stronger than yacc/lalr).
       (see [67]details here.)
     * automatic construction of abstract (not concrete) syntax trees
       (non-value-carrying terminals and unit productions are suppressed;
       syntax-lists are converted into ast list nodes). literal values
       (numbers, escaped strings) are converted to native, normalized
       binary values for fast internal manipulation. source comments are
       captured and attached to ast nodes. (see [68]details here.)
     * pretty-printer generation converts asts back to nicely formatted
       legal source file form, according to a specified layout
       information, including source comments. in fidelity-printing mode,
       comments, spacing and lexical formatting information of unchanged
       code is preserved. (see [69]details here.) customizing allows
       generation of source code [70]html form, or even as [71]obfuscated
       source text. trees may be output directly in xml format.
     * multi-pass attribute-evaluator generation from grammar, to allow
       arbitrary analysis (including name/type analysis procedures) to be
       specified in terms of the concrete grammar provided. attributes may
       be local or long-distance. (see [72]details here.)
     * sophisticated symbol-table support facilities for global, local,
       inherited, overloaded and other language-dependent name lookup and
       namespace management rules. this handles even the complexity of
       c++14. (see [73]details here.)
     * control-flow graph construction including traditional
       entry/exit/action/condition nodes, but also fork/join nodes to
       model parallelism and/or indeterminate order (e.g., c sequence
       points). there predefined analyzers for constructing (post)
       dominators, and inducing structured control-flow regions.
       additional machinery can compute compilation-unit local and
       system/global call graphs.
     * data flow analysis framework, to allow data-flow analysis problems
       to be posed and answered, including predefined analyzers for
       constructing use-def and def-use chains. [74](see sample control
       and data flow graphs)
     * points-to analysis for computing local or global points-to data,
       tested on systems of 13+ million lines of code.
     * symbolic range analysis computing range constraints on program
       variables in terms of other variables. this is useful to detecting
       array-access errors, determining which switch case is selected, ...
       in conjunction with other analyses.
     * binary- (and finite) decision diagrams are used to construct and
       combine symbolic boolean formulas (or formulas over exclusive sets
       of choices) efficiently. it is straightforward to convert an ast
       representing a boolean formula to a bdd, and vice-versa.
     * multiple domains (notations/languages) can be represented at the
       same time. this enables processing or generating systems composed
       of parts from more than one domain (cobol and jcl, c and makefiles,
       etc.), and/or translation from one domain language to another.
     * transforms and patterns can be written directly in
       surface-to-surface domain syntax form. patterns can be matched
       against syntax trees and return bindings for parameter subtrees.
       alternatively, procedural code can implement transforms, or refer
       to existing transforms and patterns to enable construction of very
       sophisticated transforms. (see [75]details here.)
     * a full associative/commutative rewrite engine that operates on
       trees and dags, which can be used to apply sets of transforms.
     * a metaprogramming language, xcl, provides the ability to control
       the sequencing of the application of transforms and sets of
       transforms. (future release)
     * an algebraic specification subsystem can be used to specify
       arbitrary algebras (this is just a dms domain!). the axioms can be
       treated as a set of rewrite rules. (this allows one to code
       arbitrary simplification procedures. (we have done simplification
       on boolean equations that are essentially 1 million terms in size;
       we have also modeled optimization of transistor [not gates!]
       circuits this way).

   a technical paper detailing these facilities was published at the
   [76]2004 international conference of software engineering. you can get
   a paper [77]reprint and the corresponding [78]slides. to get a concrete
   feel for dms, we provide an [79]example of how aspects of dms are
   specified for the oberon language.

industrial scale

   these foundations have been used for an amazing variety of industrial
   tasks, including quality analysis, restructuring, automated porting,
   pretty printing and highly optimized [80]code generation.

   dms is designed to work on large scale source systems
     * with up to several million lines of source code or specification
     * across tens of thousands of source files
     * having multiple languages at the same time

   [81]dms is implemented using our parallel language, parlanse, to
   provide computational horsepower consistent with this scale. while dms
   runs on a single processor system at unit speed, it also runs on
   symmetric multiple processor workstations with enhanced performance. as
   an example, the attribute evaluation process is automatically
   parallelized, and can often provide a linear speedup on an n-way smp
   system.

   dms is hosted on windows (any version) using intel or amd single or
   symmetric multiprocessing (smp) hardware. using wine, dms runs on
   linux, solaris and mac os x.

   if you are still reading, you will probabably like this [82]invited
   google tech talk video on dms.

available languages

   while complex legacy grammars can be defined quickly to enable dms to
   operate on source programs in those languages, sd already has
   [83]language modules and grammars available for many languages.

business focus

   we are primarily interested in training our customers to use dms for
   their own purposes, whether that be for internal applications or
   external services. sd will provide expert advice and implementation
   support as desired by the customer.

   while we can train interested customers to use dms, for some customers
   this may not be appropriate. semantic designs will contract dms-related
   [84]service activities for customers.

   semantic designs offers [85]training classes on dms. sd also offers
   [86]a number of public tutorials about program transformation systems
   in general, including some discussion of dms. research licenses are
   also available.

platform

   dms is designed to run on symmetric multiple processor x86
   architectures.
   [intel-software_partner-logo-swp_rgb_85.gif]

   the intel logo is a registered trademark of intel corporation.
   [87]semantic designs, inc. logo
     * [88]request a free migration consultation

   ____________________ search sd

topics

     * [89]re-engineering
     * [90]documentation
     * [91]assessment
     * [92]improvement
     * [93]code generation
     * [94]hardware description languages
     * [95]all topics

   language:
   [language]
   product:
   [products] [button input] (not implemented)___

semantic designs- our goal

   to enable our customers to produce and maintain timely, robust and
   economical software by providing world-class software engineering tools
   using deep language and problem knowledge with high degrees of
   automation.

   for more information: [96]info@semanticdesigns.com    follow us at
   twitter: [97]@semanticdesigns
   copyright 1995-2018 semantic designs, incorporated
   dms, "design maintenance system" and refactor++ are registered
   trademarks of semantic designs, inc.
   the sd logo and "semantic designs" are registered service marks of
   semantic designs, inc.
   software reengineering toolkit, clonedr, parlanse, jovial2c, thicket,
   smart differencer, checkpointer are trademarks of semantic designs,
   inc.
   the omg logo is a registered trademark of the object management group,
   inc. in the united states and other countries.
   to view our privacy policy, click [98]here
   comments or problems: [99]webmaster@semanticdesigns.com

   dms
   software reengineering toolkit

references

   visible links
   1. http://www.semanticdesigns.com/index.html
   2. http://www.semanticdesigns.com/products/services
   3. http://www.semanticdesigns.com/products/services/legacymigration.html
   4. http://www.semanticdesigns.com/products/dms/dmstoolkit.html
   5. http://www.semanticdesigns.com/products/frontends/
   6. http://www.semanticdesigns.com/products/services/softwaremodernization.html
   7. http://www.semanticdesigns.com/products/tools.html
   8. http://www.semanticdesigns.com/products/understanding/index.html
   9. http://www.semanticdesigns.com/products
  10. http://www.semanticdesigns.com/products/dms/dmstoolkit.html
  11. http://www.semanticdesigns.com/products/languagetools
  12. http://www.semanticdesigns.com/products/languagetools/ctools.html
  13. http://www.semanticdesigns.com/products/languagetools/cpptools.html
  14. http://www.semanticdesigns.com/products/languagetools/javatools.html
  15. http://www.semanticdesigns.com/products/languagetools/coboltools.html
  16. http://www.semanticdesigns.com/products/languagetools/csharptools.html
  17. http://www.semanticdesigns.com/products/languagetools/phptools.html
  18. http://www.semanticdesigns.com/products/languagetools/vhdltools.html
  19. http://www.semanticdesigns.com/products/languagetools/verilogtools.html
  20. http://www.semanticdesigns.com/products/languagetools
  21. http://www.semanticdesigns.com/products/tools.html
  22. http://www.semanticdesigns.com/products/searchengine/
  23. http://www.semanticdesigns.com/products/clone/
  24. http://www.semanticdesigns.com/products/testcoverage/
  25. http://www.semanticdesigns.com/products/formatters/
  26. http://www.semanticdesigns.com/products/obfuscators/
  27. http://www.semanticdesigns.com/products/metrics/index.html
  28. http://www.semanticdesigns.com/products/profilers/index.html
  29. http://www.semanticdesigns.com/products/smartdifferencer/
  30. http://www.semanticdesigns.com/products/tools.html
  31. http://www.semanticdesigns.com/products/applications/
  32. http://www.semanticdesigns.com/products/architecture/hogansystems.html
  33. http://www.semanticdesigns.com/products/applications/moreeffectivetesting.html
  34. http://www.semanticdesigns.com/products/applications/patentinfringement/
  35. http://www.semanticdesigns.com/products/applications/agile/agiletesting.html
  36. http://www.semanticdesigns.com/purchase/justifications.html
  37. http://www.semanticdesigns.com/purchase
  38. http://www.semanticdesigns.com/registration
  39. http://www.semanticdesigns.com/products/downloads.html
  40. http://www.semanticdesigns.com/company
  41. http://www.semanticdesigns.com/company
  42. http://www.semanticdesigns.com/successstories/index.html
  43. http://www.semanticdesigns.com/announce
  44. http://www.semanticdesigns.com/partners
  45. http://www.semanticdesigns.com/company/customerlist.html
  46. http://www.semanticdesigns.com/careers
  47. http://www.semanticdesigns.com/company/publications
  48. http://www.semanticdesigns.com/company/visions
  49. http://www.semanticdesigns.com/contact/support.html
  50. http://www.semanticdesigns.com/contact/support.html
  51. http://www.semanticdesigns.com/registration
  52. http://www.semanticdesigns.com/products/downloads.html
  53. http://www.semanticdesigns.com/contact
  54. http://www.semanticdesigns.com/products/frontends/index.html?home=dmstoolkit
  55. http://www.semanticdesigns.com/products/dms/lifeafterparsing.html?home=dmstoolkit
  56. http://www.semanticdesigns.com/products/dms/domainspecificlanguage.html
  57. http://www.semanticdesigns.com/products/dms/index.html?home=dmstoolkit
  58. http://www.semanticdesigns.com/products/dms/programtransformation.html?home=dmstoolkit
  59. http://www.semanticdesigns.com/products/dms/dmscomparison.html
  60. http://www.semanticdesigns.com/products/dms/dmsapplicationideas.html?home=dmstoolkit
  61. http://www.semanticdesigns.com/products/dms/simpledmsdomainexample.html?home=dmstoolkit
  62. http://www.semanticdesigns.com/products/dms/whydmsforsoftwarequality.pdf?home=dmstoolkit
  63. http://www.semanticdesigns.com/products/dms/lifeafterparsing.html?home=dmstoolkit
  64. http://www.semanticdesigns.com/products/clonedr/index.html?home=dmstoolkit
  65. http://www.semanticdesigns.com/products/dms/dmsdomains.html?home=dmstoolkit
  66. http://www.semanticdesigns.com/products/frontends/index.html?home=dmstoolkit
  67. http://www.semanticdesigns.com/products/dms/dmslexers.html?home=dmstoolkit
  68. http://www.semanticdesigns.com/products/dms/dmsparsers.html#dmsasts?home=dmstoolkit
  69. http://www.semanticdesigns.com/products/dms/dmsprettyprinters.html?home=dmstoolkit
  70. http://www.semanticdesigns.com/products/formatters/javabrowser.html?home=dmstoolkit
  71. http://www.semanticdesigns.com/products/obfuscators/index.html?home=dmstoolkit
  72. http://www.semanticdesigns.com/products/dms/dmsattributegrammars.html?home=dmstoolkit
  73. http://www.semanticdesigns.com/products/dms/dmssymboltables.html?home=dmstoolkit
  74. http://www.semanticdesigns.com/products/dms/flowanalysis.html?home=dmstoolkit
  75. http://www.semanticdesigns.com/products/dms/dmsrewriterules.html?home=dmstoolkit
  76. http://conferences.iee.org/icse2004/welcome.html
  77. http://www.semanticdesigns.com/company/publications/dms-for-icse2004-reprint.pdf
  78. http://www.semanticdesigns.com/company/publications/dms-for-icse2004-slides.pdf
  79. http://www.semanticdesigns.com/products/dms/dmsdomains.html?home=dmstoolkit
  80. http://www.semanticdesigns.com/products/dms/codegenerator.html?home=dmstoolkit
  81. http://www.semanticdesigns.com/products/dms/parlansefordms.html?home=dmstoolkit
  82. http://www.youtube.com/watch?v=c-_dw9iezha
  83. http://www.semanticdesigns.com/products/frontends/index.html?home=dmsdomains
  84. http://www.semanticdesigns.com/products/services/index.html?home=dmstoolkit
  85. http://www.semanticdesigns.com/purchase/index.html#dmstraining
  86. http://www.semanticdesigns.com/index.html#upcomingactivities
  87. http://www.semanticdesigns.com/index.html
  88. http://www.semanticdesigns.com/contact/freeconsultation.jsp
  89. http://www.semanticdesigns.com/index.html
  90. http://www.semanticdesigns.com/index.html
  91. http://www.semanticdesigns.com/index.html
  92. http://www.semanticdesigns.com/index.html
  93. http://www.semanticdesigns.com/index.html
  94. http://www.semanticdesigns.com/index.html
  95. http://www.semanticdesigns.com/index.html
  96. mailto:info@semanticdesigns.com
  97. http://twitter.com/semanticdesigns
  98. http://www.semanticdesigns.com/privacypolicy.html
  99. mailto:webmaster@semanticdesigns.com

   hidden links:
 101. http://www.semanticdesigns.com/index.html
