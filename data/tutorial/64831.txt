   #[1]github [2]recent commits to faiss:master

   [3]skip to content

   [4]facebookresearch / [5]faiss
   [6]sign up (button)
   (button)

     * why github?
       [7]features    
          + [8]code review
          + [9]project management
          + [10]integrations
          + [11]actions
          + [12]team management
          + [13]social coding
          + [14]documentation
          + [15]code hosting
          + [16]customer stories    
          + [17]security    
     * [18]enterprise
     * explore
          + [19]explore github    

learn & contribute
          + [20]topics
          + [21]collections
          + [22]trending
          + [23]learning lab
          + [24]open source guides

connect with others
          + [25]events
          + [26]community forum
          + [27]github education
     * [28]marketplace
     * pricing
       [29]plans    
          + [30]compare plans
          + [31]contact sales
          + [32]nonprofit    
          + [33]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [34]sign in [35]sign up

     * [36]watch [37]349
     * [38]star [39]6,120
     * [40]fork [41]1,160

[42]facebookresearch/[43]faiss

   [44]code [45]issues 43 [46]pull requests 1 [47]projects 4 [48]wiki
   [49]insights

   [50]code [51]issues 43 [52]pull requests 1 [53]projects 4 [54]wiki
   [55]pulse
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [56]sign up

home

   [57]jump to bottom
   matthijs douze edited this page mar 27, 2019    [58]11 revisions

faiss

   faiss is a library for efficient similarity search and id91 of
   dense vectors. it contains algorithms that search in sets of vectors of
   any size, up to ones that possibly do not fit in ram. it also contains
   supporting code for evaluation and parameter tuning. faiss is written
   in c++ with complete wrappers for python (versions 2 and 3). some of
   the most useful algorithms are implemented on the gpu. it is developed
   by [59]facebook ai research.

what is similarity search?

   given a set of vectors x_i in dimension d, faiss build a data structure
   from it. after the structure is constructed, when given a new vector x
   in dimension d it performs efficiently the operation:

   i = argmin_i ||x - x_i||

   where ||.|| is the euclidean distance (l2).

   if faiss terms, the data structure is an index, an object that has an
   add method to add x_i vectors. note that the x_i's are assumed to be
   fixed.

   computing the argmin is the search operation on the index.

   this is all what faiss is about. it can also:
     * return not just the nearest neighbor, but also the 2nd nearest,
       3rd, ..., k-th nearest neighbor
     * search several vectors at a time rather than one (batch
       processing). for many index types, this is faster than searching
       one vector after another
     * trade precision for speed, ie. give an incorrect result 10% of the
       time with a method that's 10x faster or uses 10x less memory
     * perform maximum inner product search argmax_i <x, x_i> instead of
       minimum euclidean search.
     * return all elements that are within a given radius of the query
       point (range search)

research foundations of faiss

   faiss is based on years of research. most notably it implements:
     * the inverted file from [60]   video google: a text retrieval approach
       to object matching in videos.   , sivic & zisserman, iccv 2003. this
       is the key to non-exhaustive search in large datasets. otherwise
       all searches would need to scan all elements in the index, which is
       prohibitive even if the operation to apply for each element is fast
     * the product quantization (pq) method from [61]   product quantization
       for nearest neighbor search   , j  gou & al., pami 2011. this can be
       seen as a lossy compression technique for high-dimensional vectors,
       that allows relatively accurate reconstructions and distance
       computations in the compressed domain.
     * the three-level quantization (ivfadc-r aka indexivfpqr) method from
       [62]"searching in one billion vectors: re-rank with source coding",
       tavenard & al., icassp'11.
     * the inverted multi-index from [63]   the inverted multi-index   ,
       babenko & lempitsky, cvpr 2012. this method greatly improves the
       speed of inverted indexing for fast/less accurate operating points.
     * the optimized pq from [64]   optimized product quantization   , he &
       al, cvpr 2013. this method can be seen as a linear transformation
       of the vector space to make it more amenable for indexing with a
       product quantizer.
     * the pre-filtering of product quantizer distances from
       [65]   polysemous codes   , douze & al., eccv 2016. this technique
       performs a binary filtering stage before computing pq distances.
     * the gpu implementation and fast k-selection is described in
       [66]   billion-scale similarity search with gpus   , johnson & al,
       arxiv 1702.08734, 2017
     * the hnsw indexing method from [67]"efficient and robust approximate
       nearest neighbor search using hierarchical navigable small world
       graphs", malkov & al., arxiv 1603.09320, 2016

this wiki

   this wiki contains high-level information about faiss and a tutorial.
   navigate it using the sidebar.

   most examples are in python for brievity, but the c++ api is exactly
   the same, so the translation for one to the other is trivial most of
   the times.

pages 25

   ____________________
     * [68]home
     * [69]brute force search without an index
     * [70]comparison with lsh
     * [71]faiss building blocks: id91, pca, quantization
     * [72]faiss code structure
     * [73]faiss indexes
     * [74]faiss indexes (composite)
     * [75]faiss on the gpu
     * [76]faq
     * [77]faster search
     * [78]getting started
     * [79]gpu id116 example
     * [80]guidelines to choose an index
     * [81]implementation notes
     * [82]index io, index factory, cloning and hyper parameter tuning
     * [83]indexing 1g vectors
     * [84]indexing 1m vectors
     * [85]inverted list objects and scanners
     * [86]low level benchmarks
     * [87]lower memory footprint
     * [88]pre and post processing
     * [89]running on gpus
     * [90]special operations on indexes
     * [91]threads and asynchronous calls
     * [92]troubleshooting
     * (button) show 10 more pages   

   [93]home

tutorial

   [94]getting started

   [95]faster search

   [96]lower memory footprint

   [97]running on gpus

basics

   [98]faiss building blocks: id91, pca, quantization

   [99]guidelines to choose an index

faiss indexes

   [100]basic indexes

   [101]composite indexes

   [102]pre- and post-processing

   [103]index io, index factory, cloning and hyper parameter tuning

   [104]special operations on indexes

gpu faiss

   [105]gpu overview

   [106]sample: gpu id116

advanced topics

   [107]faiss code structure

   [108]threads and asynchronous calls

   [109]inverted list objects and scanners

   [110]brute force search without an index

   [111]implementation notes

typical use cases and benchmarks

   [112]low level benchmarks

   [113]indexing 1m vectors

   [114]indexing 1g vectors

additional information

   [115]faq

   [116]troubleshooting

clone this wiki locally

   https://github.com/f

     *    2019 github, inc.
     * [117]terms
     * [118]privacy
     * [119]security
     * [120]status
     * [121]help

     * [122]contact github
     * [123]pricing
     * [124]api
     * [125]training
     * [126]blog
     * [127]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [128]reload to refresh your
   session. you signed out in another tab or window. [129]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/facebookresearch/faiss/commits/master.atom
   3. https://github.com/facebookresearch/faiss/wiki#start-of-content
   4. https://github.com/facebookresearch
   5. https://github.com/facebookresearch/faiss
   6. https://github.com/join?source=header-repo
   7. https://github.com/features
   8. https://github.com/features/code-review/
   9. https://github.com/features/project-management/
  10. https://github.com/features/integrations
  11. https://github.com/features/actions
  12. https://github.com/features#team-management
  13. https://github.com/features#social-coding
  14. https://github.com/features#documentation
  15. https://github.com/features#code-hosting
  16. https://github.com/customer-stories
  17. https://github.com/security
  18. https://github.com/enterprise
  19. https://github.com/explore
  20. https://github.com/topics
  21. https://github.com/collections
  22. https://github.com/trending
  23. https://lab.github.com/
  24. https://opensource.guide/
  25. https://github.com/events
  26. https://github.community/
  27. https://education.github.com/
  28. https://github.com/marketplace
  29. https://github.com/pricing
  30. https://github.com/pricing#feature-comparison
  31. https://enterprise.github.com/contact
  32. https://github.com/nonprofit
  33. https://education.github.com/
  34. https://github.com/login?return_to=/facebookresearch/faiss/wiki
  35. https://github.com/join?source=header-repo
  36. https://github.com/login?return_to=/facebookresearch/faiss
  37. https://github.com/facebookresearch/faiss/watchers
  38. https://github.com/login?return_to=/facebookresearch/faiss
  39. https://github.com/facebookresearch/faiss/stargazers
  40. https://github.com/login?return_to=/facebookresearch/faiss
  41. https://github.com/facebookresearch/faiss/network/members
  42. https://github.com/facebookresearch
  43. https://github.com/facebookresearch/faiss
  44. https://github.com/facebookresearch/faiss
  45. https://github.com/facebookresearch/faiss/issues
  46. https://github.com/facebookresearch/faiss/pulls
  47. https://github.com/facebookresearch/faiss/projects
  48. https://github.com/facebookresearch/faiss/wiki
  49. https://github.com/facebookresearch/faiss/pulse
  50. https://github.com/facebookresearch/faiss
  51. https://github.com/facebookresearch/faiss/issues
  52. https://github.com/facebookresearch/faiss/pulls
  53. https://github.com/facebookresearch/faiss/projects
  54. https://github.com/facebookresearch/faiss/wiki
  55. https://github.com/facebookresearch/faiss/pulse
  56. https://github.com/join?source=prompt-wiki-show
  57. https://github.com/facebookresearch/faiss/wiki#wiki-pages-box
  58. https://github.com/facebookresearch/faiss/wiki/home/_history
  59. https://research.fb.com/category/facebook-ai-research-fair/
  60. http://ieeexplore.ieee.org/abstract/document/1238663/
  61. https://hal.inria.fr/inria-00514462v2/document
  62. https://arxiv.org/pdf/1102.3828
  63. http://ieeexplore.ieee.org/abstract/document/6248038/
  64. http://ieeexplore.ieee.org/abstract/document/6678503/
  65. http://link.springer.com/chapter/10.1007/978-3-319-46475-6_48
  66. https://arxiv.org/abs/1702.08734
  67. https://arxiv.org/abs/1603.09320
  68. https://github.com/facebookresearch/faiss/wiki
  69. https://github.com/facebookresearch/faiss/wiki/brute-force-search-without-an-index
  70. https://github.com/facebookresearch/faiss/wiki/comparison-with-lsh
  71. https://github.com/facebookresearch/faiss/wiki/faiss-building-blocks:-id91,-pca,-quantization
  72. https://github.com/facebookresearch/faiss/wiki/faiss-code-structure
  73. https://github.com/facebookresearch/faiss/wiki/faiss-indexes
  74. https://github.com/facebookresearch/faiss/wiki/faiss-indexes-(composite)
  75. https://github.com/facebookresearch/faiss/wiki/faiss-on-the-gpu
  76. https://github.com/facebookresearch/faiss/wiki/faq
  77. https://github.com/facebookresearch/faiss/wiki/faster-search
  78. https://github.com/facebookresearch/faiss/wiki/getting-started
  79. https://github.com/facebookresearch/faiss/wiki/gpu-id116-example
  80. https://github.com/facebookresearch/faiss/wiki/guidelines-to-choose-an-index
  81. https://github.com/facebookresearch/faiss/wiki/implementation-notes
  82. https://github.com/facebookresearch/faiss/wiki/index-io,-index-factory,-cloning-and-hyper-parameter-tuning
  83. https://github.com/facebookresearch/faiss/wiki/indexing-1g-vectors
  84. https://github.com/facebookresearch/faiss/wiki/indexing-1m-vectors
  85. https://github.com/facebookresearch/faiss/wiki/inverted-list-objects-and-scanners
  86. https://github.com/facebookresearch/faiss/wiki/low-level-benchmarks
  87. https://github.com/facebookresearch/faiss/wiki/lower-memory-footprint
  88. https://github.com/facebookresearch/faiss/wiki/pre--and-post-processing
  89. https://github.com/facebookresearch/faiss/wiki/running-on-gpus
  90. https://github.com/facebookresearch/faiss/wiki/special-operations-on-indexes
  91. https://github.com/facebookresearch/faiss/wiki/threads-and-asynchronous-calls
  92. https://github.com/facebookresearch/faiss/wiki/troubleshooting
  93. https://github.com/facebookresearch/faiss/wiki/
  94. https://github.com/facebookresearch/faiss/wiki/getting-started
  95. https://github.com/facebookresearch/faiss/wiki/faster-search
  96. https://github.com/facebookresearch/faiss/wiki/lower-memory-footprint
  97. https://github.com/facebookresearch/faiss/wiki/running-on-gpus
  98. https://github.com/facebookresearch/faiss/wiki/faiss-building-blocks:-id91,-pca,-quantization
  99. https://github.com/facebookresearch/faiss/wiki/guidelines-to-choose-an-index
 100. https://github.com/facebookresearch/faiss/wiki/faiss-indexes
 101. https://github.com/facebookresearch/faiss/wiki/faiss-indexes-(composite)
 102. https://github.com/facebookresearch/faiss/wiki/pre--and-post-processing
 103. https://github.com/facebookresearch/faiss/wiki/index-io,-index-factory,-cloning-and-hyper-parameter-tuning
 104. https://github.com/facebookresearch/faiss/wiki/special-operations-on-indexes
 105. https://github.com/facebookresearch/faiss/wiki/faiss-on-the-gpu
 106. https://github.com/facebookresearch/faiss/wiki/gpu-id116-example
 107. https://github.com/facebookresearch/faiss/wiki/faiss-code-structure
 108. https://github.com/facebookresearch/faiss/wiki/threads-and-asynchronous-calls
 109. https://github.com/facebookresearch/faiss/wiki/inverted-list-objects-and-scanners
 110. https://github.com/facebookresearch/faiss/wiki/brute-force-search-without-an-index
 111. https://github.com/facebookresearch/faiss/wiki/implementation-notes
 112. https://github.com/facebookresearch/faiss/wiki/low-level-benchmarks
 113. https://github.com/facebookresearch/faiss/wiki/indexing-1m-vectors
 114. https://github.com/facebookresearch/faiss/wiki/indexing-1g-vectors
 115. https://github.com/facebookresearch/faiss/wiki/faq
 116. https://github.com/facebookresearch/faiss/wiki/troubleshooting
 117. https://github.com/site/terms
 118. https://github.com/site/privacy
 119. https://github.com/security
 120. https://githubstatus.com/
 121. https://help.github.com/
 122. https://github.com/contact
 123. https://github.com/pricing
 124. https://developer.github.com/
 125. https://training.github.com/
 126. https://github.blog/
 127. https://github.com/about
 128. https://github.com/facebookresearch/faiss/wiki
 129. https://github.com/facebookresearch/faiss/wiki

   hidden links:
 131. https://github.com/
 132. https://github.com/facebookresearch/faiss/wiki
 133. https://github.com/facebookresearch/faiss/wiki
 134. https://github.com/facebookresearch/faiss/wiki
 135. https://github.com/facebookresearch/faiss/wiki#faiss
 136. https://github.com/facebookresearch/faiss/wiki#what-is-similarity-search
 137. https://github.com/facebookresearch/faiss/wiki#research-foundations-of-faiss
 138. https://github.com/facebookresearch/faiss/wiki#this-wiki
 139. https://github.com/facebookresearch/faiss/wiki#tutorial
 140. https://github.com/facebookresearch/faiss/wiki#basics
 141. https://github.com/facebookresearch/faiss/wiki#faiss-indexes
 142. https://github.com/facebookresearch/faiss/wiki#gpu-faiss
 143. https://github.com/facebookresearch/faiss/wiki#advanced-topics
 144. https://github.com/facebookresearch/faiss/wiki#typical-use-cases-and-benchmarks
 145. https://github.com/facebookresearch/faiss/wiki#additional-information
 146. https://github.com/
