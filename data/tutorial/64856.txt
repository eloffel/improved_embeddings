   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]towards data science
     * [9]data science
     * [10]machine learning
     * [11]programming
     * [12]visualization
     * [13]ai
     * [14]data journalism
     * [15]contribute
     __________________________________________________________________

id21

   [16]go to the profile of niklas donges
   [17]niklas donges (button) blockedunblock (button) followfollowing
   apr 23, 2018

   id21 is the reuse of a pre-trained model on a new problem.
   it is currently very popular in the field of deep learning because it
   enables you to train deep neural networks with comparatively little
   data. this is very useful since most real-world problems typically do
   not have millions of labeled data points to train such complex models.
   this blog post is intended to give you an overview of what transfer
   learning is, how it works, why you should use it and when you can use
   it. it will introduce you to the different approaches of transfer
   learning and provide you with some resources on already pre-trained
   models.
   [1*e2odga58h5krsrzd4m-ypa.jpeg]

table of contents:

     * what is it?
     * how it works
     * why it is used?
     * when you should use it
     * approaches to id21 (training a model to reuse it,
       using a pre-trained model, feature extraction)
     * summary

what is it?

   in id21, the knowledge of an already trained machine
   learning model is applied to a different but related problem. for
   example, if you trained a simple classifier to predict whether an image
   contains a backpack, you could use the knowledge that the model gained
   during its training to recognize other objects like sunglasses.

   with id21, we basically try to exploit what has been
   learned in one task to improve generalization in another. we transfer
   the weights that a network has learned at task a to a new task b.
   [0*ljjq33v6pe_j-k5d.png]

   the general idea is to use knowledge, that a model has learned from a
   task where a lot of labeled training data is available, in a new task
   where we don   t have a lot of data. instead of starting the learning
   process from scratch, you start from patterns that have been learned
   from solving a related task.

   id21 is mostly used in id161 and natural
   language processing tasks like id31, because of the huge
   amount of computational power that is needed for them.

   it is not really a machine learning technique. id21 can be
   seen as a    design methodology    within machine learning like for
   example, active learning. it is also not an exclusive part or
   study-area of machine learning. nevertheless, it has become quite
   popular in the combination with neural networks, since they require
   huge amounts of data and computational power.

how it works

   for example, in id161, neural networks usually try to detect
   edges in their earlier layers, shapes in their middle layer and some
   task-specific features in the later layers. with id21, you
   use the early and middle layers and only re-train the latter layers. it
   helps us to leverage the labeled data of the task it was initially
   trained on.

   let   s go back to the example of a model trained for recognizing a
   backpack on an image, which will be used to identify sunglasses. in the
   earlier layers, the model has learned to recognize objects and because
   of that, we will only re-train the latter layers, so that it will learn
   what separates sunglasses from other objects.
   [1*ffqwl0pfb1frgfvaux5nwq.jpeg]

   in id21, we try to transfer as much knowledge as possible
   from the previous task, the model was trained on, to the new task at
   hand. this knowledge can be in various forms depending on the problem
   and the data. for example, it could be how models are composed which
   would allow us to more easily identify novel objects.

why it is used?

   using id21 has several benefits that we will discuss in
   this section. the main advantages are basically that you save training
   time, that your neural network performs better in most cases and that
   you don   t need a lot of data.

   usually, you need a lot of data to train a neural network from scratch
   but you don   t always have access to enough data. that is where transfer
   learning comes into play because with it you can build a solid machine
   learning model with comparatively little training data because the
   model is already pre-trained. this is especially valuable in natural
   language processing (nlp) because there is mostly expert knowledge
   required to created large labeled datasets. therefore you also save a
   lot of training time, because it can sometimes take days or even weeks
   to train a deep neural network from scratch on a complex task.

   according to demis hassabis, the ceo of deepmind technologies, transfer
   is also one of the most promising techniques that could someday lead us
   to artificial general intelligence (agi):
   [0*hwa-8brez53zebgb.png]

when you should use it

   as it is always the case in machine learning, it is hard to form rules
   that are generally applicable. but i will provide you with some
   guidelines.

   you would typically use id21 when (a) you don   t have
   enough labeled training data to train your network from scratch and/or
   (b) there already exists a network that is pre-trained on a similar
   task, which is usually trained on massive amounts of data. another case
   where its use would be appropriate is when task-1 and task-2 have the
   same input.

   if the original model was trained using tensorflow, you can simply
   restore it and re-train some layers for your task. note that transfer
   learning only works if the features learned from the first task are
   general, meaning that they can be useful for another related task as
   well. also, the input of the model needs to have the same size as it
   was initially trained with. if you don   t have that, you need to add a
   preprocessing step to resize your input to the needed size.

approaches to id21

   now we will discuss different approaches to id21. note
   that these have different names throughout literature but the overall
   concept is mostly the same.

1. training a model to reuse it

   imagine you want to solve task a but don   t have enough data to train a
   deep neural network. one way around this issue would be to find a
   related task b, where you have an abundance of data. then you could
   train a deep neural network on task b and use this model as starting
   point to solve your initial task a. if you have to use the whole model
   or only a few layers of it, depends heavily on the problem you are
   trying to solve.

   if you have the same input in both tasks, you could maybe just reuse
   the model and make predictions for your new input. alternatively, you
   could also just change and re-train different task-specific layers and
   the output layer.

2. using a pre-trained model

   approach 2 would be to use an already pre-trained model. there are a
   lot of these models out there, so you have to do a little bit of
   research. how many layers you reuse and how many you are training
   again, depends like i already said on your problem and it is therefore
   hard to form a general rule.

   keras, for example, provides nine pre-trained models that you can use
   for id21, prediction, feature extraction and fine-tuning.
   you can find these models and also some brief tutorial on how to use
   them [18]here.

   there are also many research institutions that released models they
   have trained. this type of id21 is most commonly used
   throughout deep learning.

3. feature extraction

   another approach is to use deep learning to discover the best
   representation of your problem, which means finding the most important
   features. this approach is also known as representation learning and
   can often result in a much better performance than can be obtained with
   hand-designed representation.
   [0*z50ti1rcdpgjpdyo.gif]

   most of the time in machine learning, features are manually
   hand-crafted by researchers and domain experts. fortunately, deep
   learning can extract features automatically. note that this does not
   mean that feature engineering and domain knowledge isn   t important
   anymore because you still have to decide which features you put into
   your network. but neural networks have the ability to learn which
   features, you have put into it, are really important and which ones
   aren   t. a representation learning algorithm can discover a good
   combination of features within a very short timeframe, even for complex
   tasks which would otherwise require a lot of human effort.

   the learned representation can then be used for other problems as well.
   you simply use the first layers to spot the right representation of
   features but you don   t use the output of the network because it is too
   task-specific. simply feed data into your network and use one of the
   intermediate layers as the output layer. this layer can then be
   interpreted as a representation of the raw data.

   this approach is mostly used in id161 because it can reduce
   the size of your dataset, which decreases computation time and makes it
   more suitable for traditional algorithms as well.

popular pre-trained models

   there are a some pre-trained machine learning models out there that
   became quite popular. one of them is the inception-v3 model, which was
   trained for the [19]id163    large visual recognition challenge   . in
   this challenge, participants had to classify images into [20]1000
   classes, like    zebra   ,    dalmatian   , and    dishwasher   .

   [21]here you can see a very good tutorial from tensorflow on how to
   retrain image classifiers.

   microsoft also offers some pre-trained models which are available for
   both r and python development, through the [22]microsoftml r package
   and the [23]microsoftml python package.

   other quite popular models are resnet and alexnet. i also encourage you
   to visit [24]pretrained.ml which is a sortable and searchable
   compilation of pre-trained deep learning models, along with demos and
   code.

summary

   in this post, you have learned what id21 is and why it
   matters. you also discovered how it is done along with some of its
   benefits. we talked about why it can reduce the size of your dataset,
   why it decreases training time and why you also need less data when you
   use it. we discussed when it is appropriate to do id21 and
   what are the different approaches to it. lastly, i provided you with a
   collection of models that are already pre-trained.

resources

   [25]https://medium.com/@14prakash/transfer-learning-using-keras-d804b2e
   04ef8

   [26]http://ruder.io/transfer-learning/

   [27]https://www.datacamp.com/community/tutorials/transfer-learning

   [28]https://machinelearningmastery.com/transfer-learning-for-deep-learn
   ing/

   [29]hands-on machine learning with scikit-learn and tensorflow:
   concepts, tools, and techniques for building intelligent systems

   [30]deep learning (adaptive computation and machine learning)

     * [31]machine learning
     * [32]towards data science
     * [33]data science
     * [34]deep learning
     * [35]id21

   (button)
   (button)
   (button) 1.95k claps
   (button) (button) (button) 3 (button) (button)

     (button) blockedunblock (button) followfollowing
   [36]go to the profile of niklas donges

[37]niklas donges

   co-founder: markov-solutions.com     ai solutions & consulting |
   linkedin.com/in/niklas-donges | machinelearning-blog.com

     (button) follow
   [38]towards data science

[39]towards data science

   sharing concepts, ideas, and codes.

     * (button)
       (button) 1.95k
     * (button)
     *
     *

   [40]towards data science
   never miss a story from towards data science, when you sign up for
   medium. [41]learn more
   never miss a story from towards data science
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://towardsdatascience.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/946518f95666
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://towardsdatascience.com/transfer-learning-946518f95666&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://towardsdatascience.com/transfer-learning-946518f95666&source=--------------------------nav_reg&operation=register
   8. https://towardsdatascience.com/?source=logo-lo_x6w3hegtdd1o---7f60cf5620c9
   9. https://towardsdatascience.com/data-science/home
  10. https://towardsdatascience.com/machine-learning/home
  11. https://towardsdatascience.com/programming/home
  12. https://towardsdatascience.com/data-visualization/home
  13. https://towardsdatascience.com/artificial-intelligence/home
  14. https://towardsdatascience.com/data-journalism/home
  15. https://towardsdatascience.com/contribute/home
  16. https://towardsdatascience.com/@n.donges?source=post_header_lockup
  17. https://towardsdatascience.com/@n.donges
  18. https://keras.io/applications/
  19. http://image-net.org/
  20. http://image-net.org/challenges/lsvrc/2014/browse-synsets
  21. https://www.tensorflow.org/tutorials/image_retraining
  22. https://docs.microsoft.com/en-us/machine-learning-server/r-reference/microsoftml/microsoftml-package
  23. https://docs.microsoft.com/en-us/machine-learning-server/python-reference/microsoftml/microsoftml-package
  24. http://pretrained.ml/
  25. https://medium.com/@14prakash/transfer-learning-using-keras-d804b2e04ef8
  26. http://ruder.io/transfer-learning/
  27. https://www.datacamp.com/community/tutorials/transfer-learning
  28. https://machinelearningmastery.com/transfer-learning-for-deep-learning/
  29. https://www.amazon.de/hands-machine-learning-scikit-learn-tensorflow/dp/1491962291/ref=sr_1_sc_1?s=books-intl-de&ie=utf8&qid=1523873619&sr=1-1-spell&keywords=hands+on+ml
  30. https://www.amazon.de/deep-learning-adaptive-computation-machine/dp/0262035618/ref=sr_1_1?s=books-intl-de&ie=utf8&qid=1523873635&sr=1-1&keywords=deep+learning
  31. https://towardsdatascience.com/tagged/machine-learning?source=post
  32. https://towardsdatascience.com/tagged/towards-data-science?source=post
  33. https://towardsdatascience.com/tagged/data-science?source=post
  34. https://towardsdatascience.com/tagged/deep-learning?source=post
  35. https://towardsdatascience.com/tagged/transfer-learning?source=post
  36. https://towardsdatascience.com/@n.donges?source=footer_card
  37. https://towardsdatascience.com/@n.donges
  38. https://towardsdatascience.com/?source=footer_card
  39. https://towardsdatascience.com/?source=footer_card
  40. https://towardsdatascience.com/
  41. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  43. https://medium.com/p/946518f95666/share/twitter
  44. https://medium.com/p/946518f95666/share/facebook
  45. https://medium.com/p/946518f95666/share/twitter
  46. https://medium.com/p/946518f95666/share/facebook
