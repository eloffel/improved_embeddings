   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]towards data science
     * [9]data science
     * [10]machine learning
     * [11]programming
     * [12]visualization
     * [13]ai
     * [14]data journalism
     * [15]contribute
     __________________________________________________________________

hello world in tensorflow

   [16]go to the profile of sidath asiri
   [17]sidath asiri (button) blockedunblock (button) followfollowing
   mar 6, 2018
   [1*zrzslinjy8-srpkmn1bqra.jpeg]

   tensorflow is an open-source software library developed by google which
   is used for machine learning. it is capable of running on both cpu and
   gpu in all linux, windows and macos platforms. tensorflow can be used
   to design, implement and train deep learning models which are inspired
   by the structure and function of the brain.

   in this article, i am going to give a step by step guide to implement a
   simple neural network using tensorflow. the famous iris flower data set
   is used here to train and then classify a given flower to the correct
   type.

   iris dataset contains 3 types of flowers as    setosa   ,    versicolor    and
      virginica   . to identify each flower type there are 4 properties of a
   flower given which are sepal length, sepal width, petal length and
   petal width. we are going to implement a neural network to identify the
   correct type using these factors.

   first, we will train our model using the training data set and then we
   will test its accuracy using the testing data set. you can download the
   training data set from [18]here and testing data set from [19]here.

   step 1

   first, we need to read the data in .csv files and import them. pandas
   library can be used to easily handle this.
   [1*f_jq9ystmg7cjcdimgmkug.png]
   importing data

   read_csv() function in pandas will read the file and load content to
   the assigned variable. as parameters to the function, we need to
   specify the path to the file and the names parameter can be used to
   specify the column name for each.

   step 2

   each type of flower is encoded as 0,1 and 2 in the data set. we need to
   encode them using one hot method as [1,0,0], [0,1,0] and [0,0,1]. this
   will make easy to train and optimize the network as the output from the
   network is also generated in one hot format.

   then we need to define the x, y of the training set and x,y of test set
   [1*hwm5fzxfxye-saeu9jc8sw.png]
   encoding classes and data separation

   step 3

   then its time to define the placeholders for inputs (x), outputs (y)
   and define the weights and bias of network. here we have 4 columns in
   inputs as the data set has 4 features and 3 columns in output to map 3
   types of flowers. the shape of placeholders should satisfy that.
   further, the shape of weight matrix has to be 4x3 and bias has to be a
   vector of 3 to map the input to output (no hidden layers).
   [1*yijrladiwkxguclj0ym9pq.png]
   defining weights, bias and placeholders

   step 4

   then we need to send the output via an activation function and here i
   have used the soft-max function which is available in tensorflow. to
   train the model we need to calculate the cost which is how much error
   in the output created by the model. here we calculate the mean squared
   error for that. then we can train the model such that the cost is
   reduced using the adamoptimizer.
   [1*ezkojg3a8uyzwceqb1i2la.png]
   training tensor definition

   step 5

   after training to check how much our model is accurate, we need to
   compare our model predictions with the actual results. then we can
   calculate the accuracy of our model by computing how much correct
   results we got.
   [1*iif0m2bisyoegx6pg_ptga.png]
   calculate accuracy

   here we are checking whether the outputs generated by our model is
   equal to the actual results(y) or not. the model will calculate a value
   for each type of flower which can be considered as a id203 to
   each type. we select the type which has the most id203. the
   argmax function will return the index of the maximum value. remember,
   the results are in one hot format and this method will easily allow us
   to check correctness.

   after this, we have to start training the model. before that, we need
   to initialize all the global variables first and
   global_variables_initializer function serves that.

   step 6

   now let   s train our model. every tensor execution has to be done within
   a session in tensorflow. therefore, before training that we need to
   create a session and after everything is finished we need to close the
   session.
   [1*xlj_lsj-l21dw1kqn8iajg.png]
   training model

   above code block is added to create the tensorflow session and
   everything in that block will have the session. further, this code
   block is capable of closing the session automatically when everything
   is finished.

   first, the variable initialing tensor is executed and then the model is
   trained for 1000 times. when training we need to specify the training
   data set as x and corresponding results as y because the training
   tensor is expecting them to perform. here when passing y, i have
   iterated and created a new array to make sure that it has the same
   shape which we have defined above. in each iteration, the cost is
   tracked to plot a graph to see the actual training.

   final step

   finally, when training process is over, the cost variation graph is
   plotted and the accuracy of the model is tested by passing the test
   data set.
   [1*euk9edvxv_79azpj2y31tq.png]
   plot graph and check accuracy

   after 1000 training iterations it is possible to gain 96.67% accuracy
   which is really impressive and the cost variation graph shows a
   significant development of the model by reducing the cost in each
   iteration.
   [1*2brojkiczqmfeihvnscjjq.png]
   cost reduction due to training

   following is the full code for the program

   iframe: [20]/media/66ac56051c3570ce87361b5fcb0fb581?postid=973e6c38e8ed

   this article will be helpful for newbies of tensorflow to understand
   its concept via this simple example and will be a start to dive into
   the sea.

   keep reading

   cheers!

     * [21]machine learning
     * [22]tensorflow
     * [23]python
     * [24]id158
     * [25]iris

   (button)
   (button)
   (button) 485 claps
   (button) (button) (button) 3 (button) (button)

     (button) blockedunblock (button) followfollowing
   [26]go to the profile of sidath asiri

[27]sidath asiri

   undergraduate at department of computer science and engineering
   university of moratuwa

     (button) follow
   [28]towards data science

[29]towards data science

   sharing concepts, ideas, and codes.

     * (button)
       (button) 485
     * (button)
     *
     *

   [30]towards data science
   never miss a story from towards data science, when you sign up for
   medium. [31]learn more
   never miss a story from towards data science
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://towardsdatascience.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/973e6c38e8ed
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://towardsdatascience.com/hello-world-in-tensorflow-973e6c38e8ed&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://towardsdatascience.com/hello-world-in-tensorflow-973e6c38e8ed&source=--------------------------nav_reg&operation=register
   8. https://towardsdatascience.com/?source=logo-lo_n1skrrntqrad---7f60cf5620c9
   9. https://towardsdatascience.com/data-science/home
  10. https://towardsdatascience.com/machine-learning/home
  11. https://towardsdatascience.com/programming/home
  12. https://towardsdatascience.com/data-visualization/home
  13. https://towardsdatascience.com/artificial-intelligence/home
  14. https://towardsdatascience.com/data-journalism/home
  15. https://towardsdatascience.com/contribute/home
  16. https://towardsdatascience.com/@sidathasiri?source=post_header_lockup
  17. https://towardsdatascience.com/@sidathasiri
  18. http://download.tensorflow.org/data/iris_training.csv
  19. http://download.tensorflow.org/data/iris_test.csv
  20. https://towardsdatascience.com/media/66ac56051c3570ce87361b5fcb0fb581?postid=973e6c38e8ed
  21. https://towardsdatascience.com/tagged/machine-learning?source=post
  22. https://towardsdatascience.com/tagged/tensorflow?source=post
  23. https://towardsdatascience.com/tagged/python?source=post
  24. https://towardsdatascience.com/tagged/artificial-neural-network?source=post
  25. https://towardsdatascience.com/tagged/siri?source=post
  26. https://towardsdatascience.com/@sidathasiri?source=footer_card
  27. https://towardsdatascience.com/@sidathasiri
  28. https://towardsdatascience.com/?source=footer_card
  29. https://towardsdatascience.com/?source=footer_card
  30. https://towardsdatascience.com/
  31. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  33. https://medium.com/p/973e6c38e8ed/share/twitter
  34. https://medium.com/p/973e6c38e8ed/share/facebook
  35. https://medium.com/p/973e6c38e8ed/share/twitter
  36. https://medium.com/p/973e6c38e8ed/share/facebook
