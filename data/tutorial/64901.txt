   #[1]github [2]recent commits to
   ai-research-keyphrase-extraction:6c222b1c58576675e712385707e8c0425cd049
   57

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]26
     * [35]star [36]127
     * [37]fork [38]25

[39]swisscom/[40]ai-research-keyphrase-extraction

   [41]code [42]issues 1 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   embedrank: unsupervised keyphrase extraction using sentence embeddings
   (official implementation)
     * [47]33 commits
     * [48]1 branch
     * [49]0 releases
     * [50]fetching contributors
     * [51]apache-2.0

    1. [52]python 94.7%
    2. [53]dockerfile 5.3%

   (button) python dockerfile
   tree: 6c222b1c58 (button) new pull request
   [54]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/s
   [55]download zip

downloading...

   want to be notified of new releases in
   swisscom/ai-research-keyphrase-extraction?
   [56]sign in [57]sign up

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [60]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [61]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [62]permalink
   type           name          latest commit message commit time
        failed to load latest commit information.
        [63]swisscom_ai
        [64].gitignore
        [65].python-version
        [66]dockerfile
        [67]license
        [68]readme.md
        [69]config.ini.template
        [70]embedrank.gif
        [71]launch.py
        [72]requirements.txt
        [73]setup.id18
        [74]setup.py

readme.md

   this is the implementation of the following paper:
   [75]https://arxiv.org/abs/1801.04470

installation

local installation

    1. download full stanford tagger version 3.8.0
       [76]https://nlp.stanford.edu/software/tagger.shtml
    2. install sent2vec from [77]https://github.com/epfml/sent2vec
          + clone/download the directory
          + go to sent2vec directory and make
          + download a pre-trained model (see readme of sent2vec repo) ,
            for example wiki_bigrams.bin
    3. install requirements pip -r requirements.txt
    4. download nltk data

import nltk
nltk.download('punkt')

    5. set the paths in config.ini.template
          + for [stanfordtagger] :
               o set jar_path to your_stanford_path/stanford-postagger.jar
               o set model_directory_path to your_stanford_path/models
          + for [sent2vec]:
               o set bin_path to the executable
                 your_sent2vec_path/sent2vec/fasttext
               o set your model_path to the pretrained model
                 your_path_to_model/wiki_bigrams.bin (if you choosed
                 wiki_bigrams.bin)
          + rename config.ini.template to config.ini

docker

   probably the easiest way to get started is by using the provided docker
   image. from the project's root directory, the image can be built like
   so:
$ docker build . -t keyphrase-extraction

   this can take a few minutes to finish. also, keep in mind that
   pre-trained sent2vec models will not be downloaded since each model is
   several gbs in size and don't forget to allocate enough memory to your
   docker container (models are loaded in ram).

   to extract key phrases from raw text, simply run
$ docker run -v {path to wiki_bigrams.bin}:/sent2vec/pretrained_model.bin keyphr
ase-extraction launch.py -raw_text 'the quick brown fox jumps over the lazy dog'
 -n 2

   to launch the model in an interactive mode, in order to use your own
   code, run
$ docker run -v {path to wiki_bigrams.bin}:/sent2vec/pretrained_model.bin -it ke
yphrase-extraction
>>> import launch

   in both cases, you have to specify the path to your sent2vec model
   using the -v argument. if, for example, you should choose not to use
   the wiki_bigrams.bin model, adjust your path accordingly (and of
   course, remember to remove the curly brackets).

usage

   you can launch the script to extract keyphrases from one document
   either by giving the raw text directly using -raw_text

   python launch.py -raw_text 'the quick brown fox jumps over the lazy
   dog' -n 2

   or you can specify a the path of a text file using -text_file argument
   :

   python launch.py -text_file 'path/to/your/textfile' -n 10

   if you have several documents in which you want to extract keyphrases
   the previous approach will be very slow because it will load the
   embedding model and the part of speech tagger each time. if you have
   several documents it is better to load the embedding model and the part
   of speech tagger once :
import launch

embedding_distributor = launch.load_local_embedding_distributor('en')
pos_tagger = launch.load_local_pos_tagger('en')

kp1 = launch.extract_keyphrases(embedding_distributor, pos_tagger, raw_text, 10,
 'en')  #extract 10 keyphrases
kp2 = launch.extract_keyphrases(embedding_distributor, pos_tagger, raw_text2, 10
, 'en')
...

   this return for each text a tuple containing three lists:
    1. the top n candidates (string) i.e keyphrases
    2. for each keyphrase the associated relevance score
    3. for each keyphrase a list of alias (other candidates very similar
       to the one selected as keyphrase)

method

   this is the implementation of the following paper:
   [78]https://arxiv.org/abs/1801.04470

   [79]embedrank

   by using sentence embeddings , embedrank embeds both the document and
   candidate phrases into the same embedding space.

   n candidates are selected as keyphrases by using maximal margin
   relevance using the cosine similarity between the candidates and the
   document in order to model the informativness and the cosine similarity
   between the candidates is used to model the diversity.

   an hyperparameter, beta (default=0.55), controls the importance given
   to informativness and diversity when extracting keyphrases. (beta = 1
   only informativness , beta = 0 only diversity) you can change the beta
   hyperparameter value when calling extract_keyphrases:
kp1 = launch.extract_keyphrases(embedding_distributor, pos_tagger, raw_text, 10,
 'en', beta=0.8)  #extract 10 keyphrases with beta=0.8


     *    2019 github, inc.
     * [80]terms
     * [81]privacy
     * [82]security
     * [83]status
     * [84]help

     * [85]contact github
     * [86]pricing
     * [87]api
     * [88]training
     * [89]blog
     * [90]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [91]reload to refresh your
   session. you signed out in another tab or window. [92]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/swisscom/ai-research-keyphrase-extraction/commits/6c222b1c58576675e712385707e8c0425cd04957.atom
   3. https://github.com/swisscom/ai-research-keyphrase-extraction/tree/6c222b1c58576675e712385707e8c0425cd04957#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/swisscom/ai-research-keyphrase-extraction/tree/6c222b1c58576675e712385707e8c0425cd04957
  32. https://github.com/join
  33. https://github.com/login?return_to=/swisscom/ai-research-keyphrase-extraction
  34. https://github.com/swisscom/ai-research-keyphrase-extraction/watchers
  35. https://github.com/login?return_to=/swisscom/ai-research-keyphrase-extraction
  36. https://github.com/swisscom/ai-research-keyphrase-extraction/stargazers
  37. https://github.com/login?return_to=/swisscom/ai-research-keyphrase-extraction
  38. https://github.com/swisscom/ai-research-keyphrase-extraction/network/members
  39. https://github.com/swisscom
  40. https://github.com/swisscom/ai-research-keyphrase-extraction
  41. https://github.com/swisscom/ai-research-keyphrase-extraction
  42. https://github.com/swisscom/ai-research-keyphrase-extraction/issues
  43. https://github.com/swisscom/ai-research-keyphrase-extraction/pulls
  44. https://github.com/swisscom/ai-research-keyphrase-extraction/projects
  45. https://github.com/swisscom/ai-research-keyphrase-extraction/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/swisscom/ai-research-keyphrase-extraction/commits/6c222b1c58576675e712385707e8c0425cd04957
  48. https://github.com/swisscom/ai-research-keyphrase-extraction/branches
  49. https://github.com/swisscom/ai-research-keyphrase-extraction/releases
  50. https://github.com/swisscom/ai-research-keyphrase-extraction/graphs/contributors
  51. https://github.com/swisscom/ai-research-keyphrase-extraction/blob/master/license
  52. https://github.com/swisscom/ai-research-keyphrase-extraction/search?l=python
  53. https://github.com/swisscom/ai-research-keyphrase-extraction/search?l=dockerfile
  54. https://github.com/swisscom/ai-research-keyphrase-extraction/find/6c222b1c58576675e712385707e8c0425cd04957
  55. https://github.com/swisscom/ai-research-keyphrase-extraction/archive/6c222b1c58576675e712385707e8c0425cd04957.zip
  56. https://github.com/login?return_to=https://github.com/swisscom/ai-research-keyphrase-extraction/tree/6c222b1c58576675e712385707e8c0425cd04957
  57. https://github.com/join?return_to=/swisscom/ai-research-keyphrase-extraction
  58. https://desktop.github.com/
  59. https://desktop.github.com/
  60. https://developer.apple.com/xcode/
  61. https://visualstudio.github.com/
  62. https://github.com/swisscom/ai-research-keyphrase-extraction/tree/6c222b1c58576675e712385707e8c0425cd04957
  63. https://github.com/swisscom/ai-research-keyphrase-extraction/tree/6c222b1c58576675e712385707e8c0425cd04957/swisscom_ai
  64. https://github.com/swisscom/ai-research-keyphrase-extraction/blob/6c222b1c58576675e712385707e8c0425cd04957/.gitignore
  65. https://github.com/swisscom/ai-research-keyphrase-extraction/blob/6c222b1c58576675e712385707e8c0425cd04957/.python-version
  66. https://github.com/swisscom/ai-research-keyphrase-extraction/blob/6c222b1c58576675e712385707e8c0425cd04957/dockerfile
  67. https://github.com/swisscom/ai-research-keyphrase-extraction/blob/6c222b1c58576675e712385707e8c0425cd04957/license
  68. https://github.com/swisscom/ai-research-keyphrase-extraction/blob/6c222b1c58576675e712385707e8c0425cd04957/readme.md
  69. https://github.com/swisscom/ai-research-keyphrase-extraction/blob/6c222b1c58576675e712385707e8c0425cd04957/config.ini.template
  70. https://github.com/swisscom/ai-research-keyphrase-extraction/blob/6c222b1c58576675e712385707e8c0425cd04957/embedrank.gif
  71. https://github.com/swisscom/ai-research-keyphrase-extraction/blob/6c222b1c58576675e712385707e8c0425cd04957/launch.py
  72. https://github.com/swisscom/ai-research-keyphrase-extraction/blob/6c222b1c58576675e712385707e8c0425cd04957/requirements.txt
  73. https://github.com/swisscom/ai-research-keyphrase-extraction/blob/6c222b1c58576675e712385707e8c0425cd04957/setup.id18
  74. https://github.com/swisscom/ai-research-keyphrase-extraction/blob/6c222b1c58576675e712385707e8c0425cd04957/setup.py
  75. https://arxiv.org/abs/1801.04470
  76. https://nlp.stanford.edu/software/tagger.shtml
  77. https://github.com/epfml/sent2vec
  78. https://arxiv.org/abs/1801.04470
  79. https://github.com/swisscom/ai-research-keyphrase-extraction/blob/6c222b1c58576675e712385707e8c0425cd04957/embedrank.gif
  80. https://github.com/site/terms
  81. https://github.com/site/privacy
  82. https://github.com/security
  83. https://githubstatus.com/
  84. https://help.github.com/
  85. https://github.com/contact
  86. https://github.com/pricing
  87. https://developer.github.com/
  88. https://training.github.com/
  89. https://github.blog/
  90. https://github.com/about
  91. https://github.com/swisscom/ai-research-keyphrase-extraction/tree/6c222b1c58576675e712385707e8c0425cd04957
  92. https://github.com/swisscom/ai-research-keyphrase-extraction/tree/6c222b1c58576675e712385707e8c0425cd04957

   hidden links:
  94. https://github.com/
  95. https://github.com/swisscom/ai-research-keyphrase-extraction/tree/6c222b1c58576675e712385707e8c0425cd04957
  96. https://github.com/swisscom/ai-research-keyphrase-extraction/tree/6c222b1c58576675e712385707e8c0425cd04957
  97. https://github.com/swisscom/ai-research-keyphrase-extraction/tree/6c222b1c58576675e712385707e8c0425cd04957
  98. https://help.github.com/articles/which-remote-url-should-i-use
  99. https://github.com/swisscom/ai-research-keyphrase-extraction/tree/6c222b1c58576675e712385707e8c0425cd04957#installation
 100. https://github.com/swisscom/ai-research-keyphrase-extraction/tree/6c222b1c58576675e712385707e8c0425cd04957#local-installation
 101. https://github.com/swisscom/ai-research-keyphrase-extraction/tree/6c222b1c58576675e712385707e8c0425cd04957#docker
 102. https://github.com/swisscom/ai-research-keyphrase-extraction/tree/6c222b1c58576675e712385707e8c0425cd04957#usage
 103. https://github.com/swisscom/ai-research-keyphrase-extraction/tree/6c222b1c58576675e712385707e8c0425cd04957#method
 104. https://github.com/
