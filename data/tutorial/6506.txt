   #[1]betterexplained    feed [2]betterexplained    comments feed
   [3]betterexplained    an interactive guide to the fourier transform
   comments feed

   [4]betterexplained betterexplained
   ____________________
      
   menu

     * [5]home
     * [6]all articles
     * [7]popular
     * [8]calculus guide
     * [9]contact
     * [10]newsletter
     * [11]about
     * [12]feedback

   ____________________
      

an interactive guide to the fourier transform

   [13]home   [14]math, [15]popular   an interactive guide to the fourier
   transform

   the fourier transform is one of deepest insights ever made.
   unfortunately, the meaning is buried within dense equations:

   \displaystyle{x_k = \sum_{n=0}^{n-1} x_n \cdot e^{-i 2 \pi k n / n}}

   \displaystyle{x_n = \frac{1}{n} \sum_{k=0}^{n-1} x_k \cdot e^{i 2 \pi k
   n / n}}

   yikes. rather than jumping into the symbols, let's experience the key
   idea firsthand. here's a plain-english metaphor:
     * what does the fourier transform do? given a smoothie, it finds the
       recipe.
     * how? run the smoothie through filters to extract each ingredient.
     * why? recipes are easier to analyze, compare, and modify than the
       smoothie itself.
     * how do we get the smoothie back? blend the ingredients.

   here's the "math english" version of the above:
     * the fourier transform takes a time-based pattern, measures every
       possible cycle, and returns the overall "cycle recipe" (the
       amplitude, offset, & rotation speed for every cycle that was
       found).

   time for the equations? no! let's get our hands dirty and experience
   how any pattern can be built with cycles, with live simulations.

   if all goes well, we'll have an aha! moment and intuitively realize why
   the fourier transform is possible. we'll save the detailed math
   analysis for the follow-up.

   this isn't a force-march through the equations, it's the casual stroll
   i wish i had. onward!

   iframe: [16]https://www.youtube.com/embed/in0vg9n2q0u?ecver=2

from smoothie to recipe

   a math transformation is a change of perspective. we change our notion
   of quantity from "single items" (lines in the sand, tally system) to
   "groups of 10" (decimal) depending on what we're counting. scoring a
   game? tally it up. multiplying? decimals, please.

   the fourier transform changes our perspective from consumer to
   producer, turning what do i have? into how was it made?

   in other words: given a smoothie, let's find the recipe.

   why? well, recipes are great descriptions of drinks. you wouldn't share
   a drop-by-drop analysis, you'd say "i had an orange/banana smoothie". a
   recipe is more easily categorized, compared, and modified than the
   object itself.

   so... given a smoothie, how do we find the recipe?

   fourier transform analogy smoothie to recipe

   well, imagine you had a few filters lying around:
     * pour through the "banana" filter. 1 oz of bananas are extracted.
     * pour through the "orange" filter. 2 oz of oranges.
     * pour through the "milk" filter. 3 oz of milk.
     * pour through the "water" filter. 3 oz of water.

   we can reverse-engineer the recipe by filtering each ingredient. the
   catch?
     * filters must be independent. the banana filter needs to capture
       bananas, and nothing else. adding more oranges should never affect
       the banana reading.
     * filters must be complete. we won't get the real recipe if we leave
       out a filter ("there were mangoes too!"). our collection of filters
       must catch every possible ingredient.
     * ingredients must be combine-able. smoothies can be separated and
       re-combined without issue (a cookie? not so much. who wants
       crumbs?). the ingredients, when separated and combined in any
       order, must make the same result.

see the world as cycles

   the fourier transform takes a specific viewpoint: what if any signal
   could be filtered into a bunch of circular paths?

   whoa. this concept is mind-blowing, and poor joseph fourier had his
   idea rejected at first. (really joe, even a staircase pattern can be
   made from circles?)

   and despite [17]decades of debate in the math community, we expect
   students to internalize the idea without issue. ugh. let's walk through
   the intuition.

   the fourier transform finds the recipe for a signal, like our smoothie
   process:
     * start with a time-based signal
     * apply filters to measure each possible "circular ingredient"
     * collect the full recipe, listing the amount of each "circular
       ingredient"

   stop. here's where most tutorials excitedly throw engineering
   applications at your face. don't get scared; think of the examples as
   "wow, we're finally seeing the source code (dna) behind previously
   confusing ideas".
     * if earthquake vibrations can be separated into "ingredients"
       (vibrations of different speeds & amplitudes), buildings can be
       designed to avoid interacting with the strongest ones.
     * if sound waves can be separated into ingredients (bass and treble
       frequencies), we can boost the parts we care about, and hide the
       ones we don't. the crackle of random noise can be removed. maybe
       similar "sound recipes" can be compared (music recognition services
       compare recipes, not the raw audio clips).
     * if computer data can be represented with oscillating patterns,
       perhaps the least-important ones can be ignored. this "lossy
       compression" can drastically shrink file sizes (and why jpeg and
       mp3 files are much smaller than raw .bmp or .wav files).
     * if a radio wave is our signal, we can use filters to listen to a
       particular channel. in the smoothie world, imagine each person paid
       attention to a different ingredient: adam looks for apples, bob
       looks for bananas, and charlie gets cauliflower (sorry bud).

   the fourier transform is useful in engineering, sure, but it's a
   metaphor about finding the root causes behind an observed effect.

think with circles, not just sinusoids

   one of my giant confusions was separating the definitions of "sinusoid"
   and "circle".
     * a "sinusoid" is a specific back-and-forth pattern (a [18]sine or
       cosine wave), and 99% of the time, it refers to motion in one
       dimension.
     * a "circle" is a round, 2d pattern you probably know. if you enjoy
       using 10-dollar words to describe 10-cent ideas, you might call a
       circular path a "complex sinusoid".

   labeling a circular path as a "complex sinusoid" is like describing a
   word as a "multi-letter". you zoomed into the wrong level of detail.
   words are about concepts, not the letters they can be split into!

   the fourier transform is about circular paths (not 1-d sinusoids) and
   [19]euler's formula is a clever way to generate one:

   euler path

   must we use imaginary exponents to move in a circle? nope. but it's
   convenient and compact. and sure, we can describe our path as
   coordinated motion in two dimensions (real and imaginary), but don't
   forget the big picture: we're just moving in a circle.

following circular paths

   let's say we're chatting on the phone and, like usual, i want us to
   draw the same circle simultaneously. (you promised!) what should i say?
     * how big is the circle? (amplitude, i.e. size of radius)
     * how fast do we draw it? (frequency. 1 circle/second is a frequency
       of 1 hertz (hz) or 2*pi radians/sec)
     * where do we start? (phase angle, where 0 degrees is the x-axis)

   i could say "2-inch radius, start at 45 degrees, 1 circle per second,
   go!". after half a second, we should each be pointing to: starting
   point + amount traveled = 45 + 180 = 225 degrees (on a 2-inch circle).

   circular path with parameters

   every circular path needs a size, speed, and starting angle
   (amplitude/frequency/phase). we can even combine paths: imagine tiny
   motorcars, driving in circles at different speeds.

   the combined position of all the cycles is our signal, just like the
   combined flavor of all the ingredients is our smoothie.

   here's a simulation of a basic circular path:

   iframe: [20]https://betterexplained.com/examples/fourier/?cycles=0,1

   (based on [21]this animation, here's [22]the source code. modern
   browser required. click the graph to pause/unpause.)

   the magnitude of each cycle is listed in order, starting at 0hz. cycles
   [0 1] means
     * 0 amplitude for the 0hz cycle (0hz = a constant cycle, stuck on the
       x-axis at zero degrees)
     * 1 amplitude for the 1hz cycle (completes 1 cycle per time interval)

   now the tricky part:
     * the blue graph measures the real part of the cycle. another lovely
       math confusion: the real axis of the circle, which is usually
       horizontal, has its magnitude shown on the vertical axis. you can
       mentally rotate the circle 90 degrees if you like.
     * the time points are spaced at the fastest frequency. a 1hz signal
       needs 2 time points for a start and stop (a single data point
       doesn't have a frequency). the time values [1 -1] shows the
       amplitude at these equally-spaced intervals.

   with me? [0 1] is a pure 1hz cycle.

   now let's add a 2hz cycle to the mix. [0 1 1] means "nothing at 0hz,
   1hz of amplitude 1, 2hz of amplitude 1":

   iframe: [23]https://betterexplained.com/examples/fourier/?cycles=0,1,1

   whoa. the little motorcars are getting wild: the green lines are the
   1hz and 2hz cycles, and the blue line is the combined result. try
   toggling the green checkbox to see the final result clearly. the
   combined "flavor" is a sway that starts at the max and dips low for the
   rest of the interval.

   the yellow dots are when we actually measure the signal. with 3 cycles
   defined (0hz, 1hz, 2hz), each dot is 1/3 of the way through the signal.
   in this case, cycles [0 1 1] generate the time values [2 -1 -1], which
   starts at the max (2) and dips low (-1).

   oh! we can't forget phase, the starting angle! use magnitude:angle to
   set the phase. so [0 1:45] is a 1hz cycle that starts at 45 degrees:

   iframe: [24]https://betterexplained.com/examples/fourier/?cycles=0,1:45

   this is a shifted version of [0 1]. on the time side we get [.7 -.7]
   instead of [1 -1], because our cycle isn't exactly lined up with our
   measuring intervals, which are still at the halfway point (this could
   be desired!).

   the fourier transform finds the set of cycle speeds, amplitudes and
   phases to match any time signal.

   our signal becomes an abstract notion that we consider as "observations
   in the time domain" or "ingredients in the frequency domain".

   enough talk: try it out! in the simulator, type any time or cycle
   pattern you'd like to see. if it's time points, you'll get a collection
   of cycles (that combine into a "wave") that matches your desired
   points.

   [25]fourier transform examples

   but    doesn't the combined wave have strange values between the yellow
   time intervals? sure. but who's to say whether a signal travels in
   straight lines, or curves, or zips into other dimensions when we aren't
   measuring it? it behaves exactly as we need at the equally-spaced
   moments we asked for.

making a spike in time

   can we make a spike in time, like (4 0 0 0), using cycles? i'll use
   parentheses () for a sequence of time points, and brackets [] for a
   sequence of cycles.

   although the spike seems boring to us time-dwellers (one data point,
   that's it?), think about the complexity in the cycle world. our cycle
   ingredients must start aligned (at the max value, 4) and then "explode
   outwards", each cycle with partners that cancel it in the future. every
   remaining point is zero, which is a tricky balance with multiple cycles
   running around (we can't just "turn them off").

   let's walk through each time point:
     * at time 0, the first instant, every cycle ingredient is at its max.
       ignoring the other time points, (4 ? ? ?) can be made from 4 cycles
       (0hz 1hz 2hz 3hz), each with a magnitude of 1 and phase of 0 (i.e.,
       1 + 1 + 1 + 1 = 4).
     * at every future point (t = 1, 2, 3), the sum of all cycles must
       cancel.

   here's the trick: when two cycles are on opposites sides of the circle
   (north & south, east & west, etc.) their combined position is zero (3
   cycles can cancel if they're spread evenly at 0, 120, and 240 degrees).

   imagine a constellation of points moving around the circle. here's the
   position of each cycle at every instant:
time 0 1 2 3
------------
0hz: 0 0 0 0
1hz: 0 1 2 3
2hz: 0 2 0 2
3hz: 0 3 2 1

   notice how the the 3hz cycle starts at 0, gets to position 3, then
   position "6" (with only 4 positions, 6 [26]modulo 4 = 2), then position
   "9" (9 modulo 4 = 1).

   when our cycle is 4 units long, cycle speeds a half-cycle apart (2
   units) will either be lined up (difference of 0, 4, 8   ) or on opposite
   sides (difference of 2, 6, 10   ).

   ok. let's drill into each time point:
     * time 0: all cycles at their max (total of 4)
     * time 1: 1hz and 3hz cancel (positions 1 & 3 are opposites), 0hz and
       2hz cancel as well. the net is 0.
     * time 2: 0hz and 2hz line up at position 0, while 1hz and 3hz line
       up at position 2 (the opposite side). the total is still 0.
     * time 3: 0hz and 2hz cancel. 1hz and 3hz cancel.
     * time 4 (repeat of t=0): all cycles line up.

   the trick is having individual speeds cancel (0hz vs 2hz, 1hz vs 3hz),
   or having the lined-up pairs cancel (0hz + 2hz vs 1hz + 3hz).

   when every cycle has equal power and 0 phase, we start aligned and
   cancel afterwards. (i don't have a nice proof yet -- any takers? -- but
   you can see it yourself. try [1 1], [1 1 1], [1 1 1 1] and notice the
   signals we generate: (2 0), (3 0 0), (4 0 0 0)).

   in my head, i label these signals as "time spikes": they have a value
   for a single instant, and are zero otherwise (the fancy name is a
   [27]delta function.)

   here's how i visualize the initial alignment, followed by a net
   cancellation:

   fourier transform constructive and destructive interference

moving the time spike

   not everything happens at t=0. can we change our spike to (0 4 0 0)?

   it seems the cycle ingredients should be similar to (4 0 0 0), but the
   cycles must align at t=1 (one second in the future). here's where phase
   comes in.

   imagine a race with 4 runners. normal races have everyone lined up at
   the starting line, the (4 0 0 0) time pattern. boring.

   what if we want everyone to finish at the same time? easy. just move
   people forward or backwards by the appropriate distance. maybe granny
   can start 2 feet in front of the finish line, usain bolt can start 100m
   back, and they can cross the tape holding hands.

   phase shifts, the starting angle, are delays in the cycle universe.
   here's how we adjust the starting position to delay every cycle 1
   second:
     * a 0hz cycle doesn't move, so it's already aligned
     * a 1hz cycle goes 1 revolution in the entire 4 seconds, so a
       1-second delay is a quarter-turn. phase shift it 90 degrees
       backwards (-90) and it gets to phase=0, the max value, at t=1.
     * a 2hz cycle is twice as fast, so give it twice the angle to cover
       (-180 or 180 phase shift -- it's across the circle, either way).
     * a 3hz cycle is 3x as fast, so give it 3x the distance to move (-270
       or +90 phase shift)

   if time points (4 0 0 0) are made from cycles [1 1 1 1], then time
   points (0 4 0 0) are made from [1 1:-90 1:180 1:90]. (note: i'm using
   "1hz", but i mean "1 cycle over the entire time period").

   whoa -- we're working out the cycles in our head!

   the interference visualization is similar, except the alignment is at
   t=1.

   fourier transform time spike

   test your intuition: can you make (0 0 4 0), i.e. a 2-second delay? 0hz
   has no phase. 1hz has 180 degrees, 2hz has 360 (aka 0), and 3hz has 540
   (aka 180), so it's [1 1:180 1 1:180].

discovering the full transform

   the big insight: our signal is just a bunch of time spikes! if we merge
   the recipes for each time spike, we should get the recipe for the full
   signal.

   the fourier transform builds the recipe frequency-by-frequency:
     * separate the full signal (a b c d) into "time spikes": (a 0 0 0) (0
       b 0 0) (0 0 c 0) (0 0 0 d)
     * for any frequency (like 2hz), the tentative recipe is "a/4 + b/4 +
       c/4 + d/4" (the amplitude of each spike is split among all
       frequencies)
     * wait! we need to offset each spike with a phase delay (the angle
       for a "1 second delay" depends on the frequency).
     * actual recipe for a frequency = a/4 (no offset) + b/4 (1 second
       offset) + c/4 (2 second offset) + d/4 (3 second offset).

   we can then loop through every frequency to get the full transform.

   here's the conversion from "math english" to full math:

   fourier transform plain english

   a few notes:
     * n = number of time samples we have
     * n = current sample we're considering (0 .. n-1)
     * x[n] = value of the signal at time n
     * k = current frequency we're considering (0 hertz up to n-1 hertz)
     * x[k] = amount of frequency k in the signal (amplitude and phase, a
       complex number)
     * the 1/n factor is usually moved to the reverse transform (going
       from frequencies back to time). this [28]is allowed, though i
       prefer 1/n in the forward transform since it gives the actual sizes
       for the time spikes. you can get wild and even use $1/\sqrt{n}$ on
       both transforms (going forward and back creates the 1/n factor).
     * n/n is the percent of the time we've gone through. 2 * pi * k is
       our speed in radians / sec. e^-ix is our backwards-moving circular
       path. the combination is how far we've moved, for this speed and
       time.
     * the raw equations for the fourier transform just say "add the
       complex numbers". many programming languages cannot handle complex
       numbers directly, so you convert everything to rectangular
       coordinates and add those.

onward

   this was my most challenging article yet. the fourier transform has
   several flavors (discrete/continuous/finite/infinite), covers deep math
   (dirac delta functions), and it's easy to get lost in details. i was
   constantly bumping into the edge of my knowledge.

   but there's always simple analogies out there -- i refuse to think
   otherwise. whether it's a smoothie or usain bolt & granny crossing the
   finish line, take a simple understanding and refine it. the analogy is
   flawed, and that's ok: it's a raft to use, and leave behind once we
   cross the river.

   i realized how feeble my own understanding was when i couldn't work out
   the transform of (1 0 0 0) in my head. for me, it was like saying i
   knew addition but, gee whiz, i'm not sure what "1 + 1 + 1 + 1" would
   be. why not? shouldn't we have an intuition for the simplest of
   operations?

   that discomfort led me around the web to build my intuition. in
   addition to the references in the article, i'd like to thank:
     * [29]scott young, for the initial impetus for this post
     * [30]shaheen gandhi, roger cheng, and [31]brit cruise for kicking
       around ideas & refining the analogy
     * [32]steve lehar for great examples of the fourier transform on
       images
     * [33]charan langton for her detailed walkthrough
     * [34]julius smith for a fantastic walkthrough of the discrete
       fourier transform (what we covered today)
     * [35]bret victor for his techniques on visualizing learning

   today's goal was to experience the fourier transform. we'll save the
   advanced analysis for next time.

   happy math.

appendix: projecting onto cycles

   stuart riffle has a [36]great interpretation of the fourier transform:

   fourier transform colorized

   imagine spinning your signal in a centrifuge and checking for a bias. i
   have a correction: we must spin backwards (the exponent in the equation
   above should be $e^{-i 2 \pi...}$). you already know why: we need a
   phase delay so spikes appear in the future.

appendix: another awesome visualization

   [37]lucas vieira, author of excellent [38]wikipedia animations, was
   [39]inspired to make this interactive animation:

   [40]fourier toy - click to download, requires flash

   [41]fourier_toy

   ([42]detailed list of control options)

   the fourier transform is about cycles added to cycles added to cycles.
   try making a "time spike" by setting a amplitude of 1 for every
   component (press enter after inputting each number). fun fact: with
   enough terms, you can draw any shape, even [43]homer simpson.

   iframe: [44]https://www.youtube.com/embed/qvuu2ycwhjw

   check out [45]http://www.jezzamon.com/fourier/ for a great tool to draw
   any shape using epicycles.

   [46]an interactive guide to the fourier transform

appendix: article with r code samples

   jo  o neto made a great writeup, with technical (r) code samples here:

   [47]http://www.di.fc.ul.pt/~jpn/r/fourier/fourier.html

appendix: using the code

   all the code and examples are open source (mit licensed, do what you
   like).
     * [48]interactive example (view source)
     * [49]github gist
     * [50]reddit discussion on details of the computation, i'm
       pb_zeppelin

other posts in this series

    1. [51]a visual, intuitive guide to imaginary numbers
    2. [52]intuitive arithmetic with complex numbers
    3. [53]understanding why complex multiplication works
    4. [54]intuitive guide to angles, degrees and radians
    5. [55]intuitive understanding of euler's formula
    6. [56]an interactive guide to the fourier transform
    7. [57]intuitive understanding of sine waves
    8. [58]an intuitive guide to id202
    9. [59]a programmer's intuition for id127
   10. [60]imaginary multiplication vs. imaginary exponents

   [61]445 comments

in this series

    1. [62]a visual, intuitive guide to imaginary numbers
    2. [63]intuitive arithmetic with complex numbers
    3. [64]understanding why complex multiplication works
    4. [65]intuitive guide to angles, degrees and radians
    5. [66]intuitive understanding of euler's formula
    6. [67]an interactive guide to the fourier transform
    7. [68]intuitive understanding of sine waves
    8. [69]an intuitive guide to id202
    9. [70]a programmer's intuition for id127
   10. [71]imaginary multiplication vs. imaginary exponents

about the site

   betterexplained helps 450k monthly readers with friendly, insightful
   math lessons ([72]more).
   [ins: :ins] [ins: :ins] [ins: :ins] [ins: :ins] [ins: :ins] [ins: :ins]
   [ins: :ins] [ins: :ins]

      if you can't explain it simply, you don't understand it well enough.   
      einstein ([73]more) | [74]privacy | [75]cc-by-nc-sa
   [76]twitter[77]youtube[78]reddit[79]rss

   iframe: [80]https://www.googletagmanager.com/ns.html?id=gtm-82fl

references

   visible links
   1. https://betterexplained.com/feed/
   2. https://betterexplained.com/comments/feed/
   3. https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/feed/
   4. https://betterexplained.com/
   5. https://betterexplained.com/
   6. https://betterexplained.com/archives/
   7. https://betterexplained.com/cheatsheet/
   8. https://betterexplained.com/guides/calculus/
   9. https://betterexplained.com/contact/
  10. https://betterexplained.com/newsletter/
  11. https://betterexplained.com/about/
  12. https://betterexplained.com/feedback/
  13. https://betterexplained.com/
  14. https://betterexplained.com/articles/category/math/
  15. https://betterexplained.com/articles/category/popular/
  16. https://www.youtube.com/embed/in0vg9n2q0u?ecver=2
  17. https://wiki.answers.com/q/what_is_the_history_of_fourier_series
  18. https://betterexplained.com/articles/intuitive-understanding-of-sine-waves/
  19. https://betterexplained.com/articles/intuitive-understanding-of-eulers-formula/
  20. https://betterexplained.com/examples/fourier/?cycles=0,1
  21. http://treeblurb.com/dev_math/sin_canv00.html
  22. https://gist.github.com/kazad/8bb682da198db597558c
  23. https://betterexplained.com/examples/fourier/?cycles=0,1,1
  24. https://betterexplained.com/examples/fourier/?cycles=0,1:45
  25. https://betterexplained.com/wp-content/uploads/images/time-patterns-20121205-164541.png
  26. https://betterexplained.com/articles/fun-with-modular-arithmetic/
  27. https://en.wikipedia.org/wiki/dirac_delta_function
  28. https://math.stackexchange.com/questions/58163/dft-why-are-the-definitions-for-inverse-and-forward-commonly-switched
  29. http://www.scotthyoung.com/blog/
  30. http://shaheengandhi.com/
  31. http://britcruise.com/
  32. http://cns-alumni.bu.edu/~slehar/fourier/fourier.html
  33. http://www.complextoreal.com/chapters/fft1.pdf
  34. https://ccrma.stanford.edu/~jos/log/
  35. http://worrydream.com/#!/learnableprogramming
  36. https://web.archive.org/web/20120418231513/http://www.altdevblogaday.com/2011/05/17/understanding-the-fourier-transform/
  37. http://toxicdump.org/blog/
  38. https://en.wikipedia.org/wiki/user:kieff/gallery
  39. http://blog.matthen.com/post/42112703604/the-smooth-motion-of-rotating-circles-can-be-used
  40. https://web.archive.org/web/20170201145911/http://toxicdump.org/stuff/fouriertoy.swf
  41. http://toxicdump.org/stuff/fouriertoy.swf
  42. https://www.reddit.com/r/math/comments/17v8cv/visualized_fourier/c89c3pa
  43. https://www.youtube.com/watch?v=qvuu2ycwhjw&feature=youtu.be
  44. https://www.youtube.com/embed/qvuu2ycwhjw
  45. http://www.jezzamon.com/fourier/
  46. http://www.jezzamon.com/fourier/
  47. http://www.di.fc.ul.pt/~jpn/r/fourier/fourier.html
  48. https://betterexplained.com/examples/fourier/
  49. https://gist.github.com/129d477ddb1c8025c9ac
  50. https://www.reddit.com/r/programming/comments/156a9i/an_interactive_guide_to_the_fourier_transform/c7k9b1t?context=3
  51. https://betterexplained.com/articles/a-visual-intuitive-guide-to-imaginary-numbers/
  52. https://betterexplained.com/articles/intuitive-arithmetic-with-complex-numbers/
  53. https://betterexplained.com/articles/understanding-why-complex-multiplication-works/
  54. https://betterexplained.com/articles/intuitive-guide-to-angles-degrees-and-radians/
  55. https://betterexplained.com/articles/intuitive-understanding-of-eulers-formula/
  56. https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/
  57. https://betterexplained.com/articles/intuitive-understanding-of-sine-waves/
  58. https://betterexplained.com/articles/linear-algebra-guide/
  59. https://betterexplained.com/articles/matrix-multiplication/
  60. https://betterexplained.com/articles/imaginary-multiplication-exponents/
  61. https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/#comments
  62. https://betterexplained.com/articles/a-visual-intuitive-guide-to-imaginary-numbers/
  63. https://betterexplained.com/articles/intuitive-arithmetic-with-complex-numbers/
  64. https://betterexplained.com/articles/understanding-why-complex-multiplication-works/
  65. https://betterexplained.com/articles/intuitive-guide-to-angles-degrees-and-radians/
  66. https://betterexplained.com/articles/intuitive-understanding-of-eulers-formula/
  67. https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/
  68. https://betterexplained.com/articles/intuitive-understanding-of-sine-waves/
  69. https://betterexplained.com/articles/linear-algebra-guide/
  70. https://betterexplained.com/articles/matrix-multiplication/
  71. https://betterexplained.com/articles/imaginary-multiplication-exponents/
  72. https://betterexplained.com/about/
  73. https://betterexplained.com/philosophy
  74. https://betterexplained.com/privacy
  75. https://betterexplained.com/about
  76. https://twitter.com/betterexplained
  77. https://www.youtube.com/user/betterexplained
  78. https://reddit.com/r/betterexplained
  79. https://betterexplained.com/feed/
  80. https://www.googletagmanager.com/ns.html?id=gtm-82fl

   hidden links:
  82. https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/
