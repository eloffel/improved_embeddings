   #[1]bernardo pires    feed [2]bernardo pires    comments feed [3]bernardo
   pires    try logic programming! a gentle introduction to prolog comments
   feed [4]rails vs django: an in-depth technical comparison [5]alternate
   [6]alternate

   [7]bernardo pires
   menu
     * [8]home
     * [9]about

   yet another developer's point of view
   browse: [10]home    [11]2013    [12]october    try logic programming! a
   gentle introduction to prolog

try logic programming! a gentle introduction to prolog

   [13]october 13, 2013    by [14]bernardo pires    in [15]logic programming

   i had a fun ride attending a very interesting lecture this semester
   called programming paradigms. i learned about the four main paradigms
   that exist: imperative, object-oriented, functional and logic
   programming. now, i   m sure every developer has heard about imperative,
   oo and functional, but to be honest i had no idea what logic
   programming was about. i couldn   t even name one language in the logic
   programming paradigm. i was intrigued, what could this paradigm i had
   never heard about be, what does it excel in and could it be useful for
   day-to-day programming problems?

why should i learn logic programming?

   the book [16]the pragmatic programmer has a tip called    invest
   regularly in your knowledge portfolio   :

     learn at least one new language every year. different languages
     solve the same problems in different ways. by learning several
     different approaches, you can help broaden your thinking and avoid
     getting stuck in a rut. additionally, learning many languages is far
     easier now, thanks to the wealth of freely available software on the
     internet.

   we are so used to and immersed in the imperative and the
   object-oriented paradigm that we completely forget that there are other
   ways of solving the same problem. rather than simply learning a new
   language  in a paradigm you already know, it is even more enriching
   learning a new paradigm. this will be a new thought pattern, a way of a
   seeing the same problem from a completely new angle.

so what is logic programming?

   i   d like to start with a phrase that i think that best describes this
   new thought pattern:

     say what you want, not how you want it done.

   get ready to have your mind blown as you will no longer be directly
   writing how to solve a problem, but rather expressing it in terms of
   facts and rules. in this post you will learn how to solve the [17]graph
   coloring problem in six lines with prolog. logic programming excels in
   scenarios where an exhaustive search is needed, as it basically builds
   in backtracking for your problems automatically.

a gentle introduction to prolog

   our language of choice will be prolog, the most popular logic
   programming language. a program in prolog is initiated by running a
   query and seeing if it can be proven using the relations defined. in a
   sense, logic programming isn   t much different from the database query
   language [18]sql.

installing prolog

   executables for windows and macos x can be downloaded [19]here and for
   ubuntu/debian [20]here. i   m not going to go into details here, but you
   should have no problems running prolog. post a comment if you   re having
   any troubles.

prolog relations

   relations are defined by means of clauses and lucky us, we only have
   two types of clauses: facts and rules!

prolog facts

   facts are nothing more than statements, they are the truths of our
   program and have a very simple syntax. they always start with a
   lowercase letter and end with a period.
sunny.
logic_programming_is_cool.
tomorrow_will_rain.

   sunny. logic_programming_is_cool. tomorrow_will_rain.

   so far everything that prolog knows is that it   s sunny, that logic
   programming is cool and that tomorrow will rain. facts can also have
   arguments in the form relation(argument1, argument2, ... argumentn).
likes(alice,bob).
likes(bob,carol).
likes(james,mary).
likes(mary,james).

   likes(alice,bob). likes(bob,carol). likes(james,mary).
   likes(mary,james).

   the first line is for example a relationship that links alice and bob.
   we are free to pick the interpretation of our relationships, as long as
   we are consistent. this means you can   t change the interpretation from
   one line to another! in our case we will read it as     alice likes bob   ,
      bob likes carol   , etc.

prolog shell and queries

   so, to start doing something interesting, we need to learn how to start
   writing our queries. if you write a file called facts.pl containing the
   four clauses above, you can load it on your shell by calling
   consult('facts.pl').

   consult('facts.pl').

   we can ask prolog if alice likes bob.
?- likes(alice,bob). /* our first query! */
true. /* prolog matches it with the known fact that alice likes bob. */

   ?- likes(alice,bob). /* our first query! */ true. /* prolog matches it
   with the known fact that alice likes bob. */

   where ?- is the prolog shell. let   s make some more queries.
?- likes(bob,alice).
false. /* poor alice isn't liked by bob :( */
?- likes(mary,john).
false. /* we don't even have a john on our list! */

   ?- likes(bob,alice). false. /* poor alice isn't liked by bob :( */ ?-
   likes(mary,john). false. /* we don't even have a john on our list! */

   simple, right?
   [21]prolog queries in a terminal.

   prolog queries in a terminal.

   it is important to note that [22]on the shell you can only make
   queries, you are not allowed to declare new facts or rules. the best
   way to load your relations is using the consult command, as mentioned
   above.

variables

   before we get to rules, let   s introduce variables. how do we know who
   alice likes? one idea would be to run the following query
?- likes(alice,who).
false. /* well, we did ask if alice liked a person named who */

   ?- likes(alice,who). false. /* well, we did ask if alice liked a person
   named who */

   who will not match bob because who is not a variable. variables in
   prolog start with an uppercase letter.
?- likes(alice,who). /* who does alice like? */
who = bob. /* yes! we got it! */

   ?- likes(alice,who). /* who does alice like? */ who = bob. /* yes! we
   got it! */

   finally we did something useful with prolog! did you notice the key
   difference in how a variable works between the logic paradigm and the
   other paradigms? on the imperative, oo and functional paradigms we
   always have to say exactly how a variable is defined. on logic
   programming we are allowed to pass uninstantiated arguments and the
   interpreter will try to instantiate the variables for us respecting the
   facts previously defined. this powerful process of matching variables
   with items is known as [23]unification and is exactly where logic
   programming shines. i   m not going to explain on this post how
   unification works as this is a complex topic on its own, so for now
   let   s just say who was unified and is now bound to bob.

rules

   now that we have learned how to express facts and how to query them
   using variables, we can take a look at rules. rules are a key concept
   in prolog and allow us to make conclusions about our world. a rule has
   the form
conclusion(arg1, arg2, ... argn) :- relation1, relation2, ... relationn.

   the conclusion is only valid if all the relations are also true. commas
   work exactly like the logical and. so this can be read as conclusion is
   true if everything that comes after the :- can also be proven true. we
   call what comes before the :- head, and what comes after, body. the
   next examples will help understanding this new concept, so don   t worry
   if you didn   t get this.

   suppose we want to create a matchmaking agency, so let   s write a nice
   rule called love_compatible using the facts we already defined above
love_compatible(x, y) :- likes(x, y), likes(y, x).

   this can be read as: x and y are a love_compatible if x likes y and y
   likes x. an equivalent intepretation would be: to prove that x and y
   are love_compatible, prove that x likes y and that y likes x. now let   s
   make some queries
?- love_compatible(james,who). /* is james compatible with someone? */
who = mary. /* james and mary sitting on a tree, k-i-s-s-i-n-g */

   ?- love_compatible(james,who). /* is james compatible with someone? */
   who = mary. /* james and mary sitting on a tree, k-i-s-s-i-n-g */

   in the example above we forced the x argument of love_compatible to be
   james, but it is important to note that we don   t have to instantiate
   all arguments.  in fact, we don   t have to instantiate any parameters.
   we can pass variables to all arguments and prolog will work its magic.
   it will not only find the first match, but all matches that exist!
?- love_compatible(x,y). /* prolog, please find me all love pairs with the facts
 you know! */
x = james,
y = mary

   ?- love_compatible(x,y). /* prolog, please find me all love pairs with
   the facts you know! */ x = james, y = mary

   because of inherent symmetry in our rule love_compatible, prolog will
   actually find two matches for our world.
?- love_compatible(x,y).
x = james,
y = mary ; /* typing semicolon causes prolog to find the next match */
x = mary,
y = james. /* our love pairs are (x=james, y=mary) and (x=mary, y=james) */

   ?- love_compatible(x,y). x = james, y = mary ; /* typing semicolon
   causes prolog to find the next match */ x = mary, y = james. /* our
   love pairs are (x=james, y=mary) and (x=mary, y=james) */

   you may be wondering how this is even working. as i   ve mentioned
   before, prolog builds in backtracking automatically for you and will do
   an exhaustive search until it finds a match. i   ll repost our clauses
   and rules below to easen the comprehension.
likes(alice,bob).
likes(bob,carol).
likes(james,mary).
likes(mary,james).
love_compatible(x, y) :- likes(x, y), likes (y, x).

   likes(alice,bob). likes(bob,carol). likes(james,mary).
   likes(mary,james). love_compatible(x, y) :- likes(x, y), likes (y, x).

   when we call love_compatible(x,y)., the first goal is to match likes(x,
   y). as x and y weren   t instantiated yet, prolog will simply pick the
   first clause of likes, likes(bob,carol).. this binds x to bob and y to
   carol. the second goal is likes(y, x). this time x and y are already
   instantiated to bob and carol respectively. prolog then checks in it   s
   world of knowledge if carol likes bob, that is, if it has a clause in
   the form likes(carol, bob). this is not the case, so it fails and
   prolog backtracks automatically to the first goal, x and y become
   uninstantiated again. prolog then tries the second clause of likes and
   binds x to james and y to mary. the second goal then also succeeds
   because likes(mary,james)., resulting in our first match.

   let   s take a look at a more complex example. first we define some facts
mother(alice,lea).
mother(john,julia).
mother(lea,alberta).
father(james,alfred).
father(lea,john).

   mother(alice,lea). mother(john,julia). mother(lea,alberta).
   father(james,alfred). father(lea,john).

   the first line can be read as alice   s mother is lea and the fourth as
   james    father is alfred. now let   s define some rules.
parent(x, y) :- father(x, y).
parent(x, y) :- mother(x, y).

   parent(x, y) :- father(x, y). parent(x, y) :- mother(x, y).

   prolog has no problem having multiple definitions of a rule, so if the
   first clause of parent fails, it will try the second one.  we can also
   define a rule in term of other rules. in fact, for prolog there isn   t
   any difference between a fact and a rule. a fact is simply a rule that
   is always true. let   s define a rule using other rules.
   grandparent(x, y) :- parent(x, z), parent(z, y).

   grandparent(x, y) :- parent(x, z), parent(z, y).

   this can be read as x   s grandparent is y. did you follow the logic of
   grandparent? get a piece of paper and you   ll be able to easily follow
   this. z is x   s parent and y is z   s parent, therefore y is x   s
   grandparent. time to use our new rule on the shell!
?- grandparent(x, y).
x=alice,
y=alberta ; /* alberta is alice's grandma */
x=alice,
y=john. /* john is alice's grandpa */

   ?- grandparent(x, y). x=alice, y=alberta ; /* alberta is alice's
   grandma */ x=alice, y=john. /* john is alice's grandpa */

   isn   t it amazing that we didn   t even have to tell prolog how to solve
   this? we only defined very intuitively what family relations are and it
   finds the matches for us.

   we now have all the tools required to start solving real world
   problems, let   s get cracking!

the graph coloring problem

   given a map divided into regions, can you color the map using a defined
   amount of colors such that no two adjacent regions have the same color?
   in the image below, we start with the left map, uncolored, and try to
   find a map coloring using only four different colors. the right map is
   one of the possible solutions.
   [24]germany map coloring

   the map coloring problem applied to germany and it   s states. click on
   it for a larger version.

   first things first, let   s get our facts straight (pun intended)!
color(red).
color(green).
color(blue).
color(yellow).

   color(red). color(green). color(blue). color(yellow).

   now prolog knows that the four colors red, green, blue and yellow
   exist. so how do we express that no two adjacent states in our map can
   share the same color? we create a rule.
neighbor(stateacolor, statebcolor) :- color(stateacolor),
    color(statebcolor),
    stateacolor \= statebcolor. /* \= is the not equal operator */

   neighbor(stateacolor, statebcolor) :- color(stateacolor),
   color(statebcolor), stateacolor \= statebcolor. /* \= is the not equal
   operator */

   alright, so what   s happening here? the first two clauses,
   color(stateacolor) and color(statebcolor) simply associate colors to
   our variables stateacolor and statebcolor. the interesting part is the
   third clause, stateacolor \= statebcolor, that forces the two states to
   have different colors.

   the only thing we   re missing now is a relation that defines the
   topology of our map, that is, which states are adjacent. looking at the
   bottom of our map we can see for example that the states bw and by are
   adjacent. so we start writing
   germany(bw, by) :- neighbor(bw, by).

   germany(bw, by) :- neighbor(bw, by).

   bw is however also adjacent to rp and he. let   s expand germany.
germany(bw, by, sl, rp, he) :- neighbor(bw, by), neighbor(bw, rp), neighbor(bw,
he).

   germany(bw, by, sl, rp, he) :- neighbor(bw, by), neighbor(bw, rp),
   neighbor(bw, he).

   when we add in all adjacencies we have
germany(sh, mv, hh, hb, ni, st, be, bb, sn, nw, he, th, rp, sl, bw, by) :-
neighbor(sh, ni), neighbor(sh, hh), neighbor(sh, mv),
neighbor(hh, ni),
neighbor(mv, ni), neighbor(mv, bb),
neighbor(ni, hb), neighbor(ni, bb), neighbor(ni, st), neighbor(ni, th),
neighbor(ni, he), neighbor(ni, nw),
neighbor(st, bb), neighbor(st, sn), neighbor(st, th),
neighbor(bb, be), neighbor(bb, sn),
neighbor(nw, he), neighbor(nw, rp),
neighbor(sn, th), neighbor(sn, by),
neighbor(rp, sl), neighbor(rp, he), neighbor(rp, bw),
neighbor(he, bw), neighbor(he, th), neighbor(he, by),
neighbor(th, by),
neighbor(bw, by).

   germany(sh, mv, hh, hb, ni, st, be, bb, sn, nw, he, th, rp, sl, bw, by)
   :- neighbor(sh, ni), neighbor(sh, hh), neighbor(sh, mv), neighbor(hh,
   ni), neighbor(mv, ni), neighbor(mv, bb), neighbor(ni, hb), neighbor(ni,
   bb), neighbor(ni, st), neighbor(ni, th), neighbor(ni, he), neighbor(ni,
   nw), neighbor(st, bb), neighbor(st, sn), neighbor(st, th), neighbor(bb,
   be), neighbor(bb, sn), neighbor(nw, he), neighbor(nw, rp), neighbor(sn,
   th), neighbor(sn, by), neighbor(rp, sl), neighbor(rp, he), neighbor(rp,
   bw), neighbor(he, bw), neighbor(he, th), neighbor(he, by), neighbor(th,
   by), neighbor(bw, by).

   alright, so how do we get a valid map coloring of germany now? simple!
   ?- germany(sh, mv, hh, hb, ni, st, be, bb, sn, nw, he, th, rp, sl, bw, by).

   ?- germany(sh, mv, hh, hb, ni, st, be, bb, sn, nw, he, th, rp, sl, bw,
   by).

   just execute the query above on your prolog shell! there you go, a
   solution to the graph coloring problem using only 6 lines (4 facts, 2
   rules). so how do we test if we can get a coloring with three colors?
   simply remove one from our facts list.

where to go from here

   if you   re like me and found it very mind-blowing that we used our real
   life, intuitive definitions to express a problem and prolog simply
   comes and just solves it, there are still many goodies to be learned
   about logic programming. we didn   t learn about [25]lists (the common
   data-structure, known from the other paradigms), [26]cuts (a way to
   control backtracking) and unification. we also didn   t solve any
   problems using recursion, a very important and useful tool. here are
   some interesting problems/puzzles solved using prolog: [27]towers of
   hanoi, [28]a day at the river (also known as crossing the river: sheep,
   wolf and cabbage) and [29]n queens.

learning resources

   [30]the art of prolog is generally considered    the book    for learning
   prolog. if you   re looking for something free i can recommend my
   favorite tutorial, [31]a short tutorial on prolog, from the goldsmiths
   college and the free book [32]learn prolog now!.

   the fun thing about paradigms is wrapping your head around a new way of
   thinking. i hope you have liked this tutorial and that you gained a
   fresh perspective on solving problems! your feedback in form of a
   comment is very welcome.

reddit discussions

     * on [33]r/coding
     * on [34]r/programming
     * on [35]r/prolog

     * pingback: [36]writing an http server in prolog     things james
       does()
     * pingback: [37]writing an http server in prolog | things james
       does()
     * pingback: [38]adventures in prolog     patterns and stuff()

   [39]rails vs django: an in-depth technical comparison    

recent posts

     * [40]rails vs django: an in-depth technical comparison
     * [41]try logic programming! a gentle introduction to prolog

github

                  bernardopires [42]bernardopires @ github

     * [1726375?v=4] [43]django-tenant-schemas
       tenant support for django using postgresql schemas.
       april 5, 2019 - 4:19 pm utc
     * [1726375?v=4] [44]twitch-chat-logger
       a simple app for logging twitch's chat to a postgresql database.
       february 12, 2019 - 1:12 pm utc

meta

     * [45]log in
     * [46]entries rss
     * [47]comments rss
     * [48]wordpress.org

   copyright    2019 [49]bernardo pires

   powered by [50]wordpress and [51]origin

references

   1. https://bernardopires.com/feed/
   2. https://bernardopires.com/comments/feed/
   3. https://bernardopires.com/2013/10/try-logic-programming-a-gentle-introduction-to-prolog/feed/
   4. https://bernardopires.com/2014/03/rails-vs-django-an-in-depth-technical-comparison/
   5. https://bernardopires.com/wp-json/oembed/1.0/embed?url=https://bernardopires.com/2013/10/try-logic-programming-a-gentle-introduction-to-prolog/
   6. https://bernardopires.com/wp-json/oembed/1.0/embed?url=https://bernardopires.com/2013/10/try-logic-programming-a-gentle-introduction-to-prolog/&format=xml
   7. https://bernardopires.com/
   8. http://bernardopires.com/
   9. https://bernardopires.com/about/
  10. https://bernardopires.com/
  11. https://bernardopires.com/2013/
  12. https://bernardopires.com/2013/10/
  13. https://bernardopires.com/2013/10/try-logic-programming-a-gentle-introduction-to-prolog/
  14. https://bernardopires.com/author/bernardo/
  15. https://bernardopires.com/category/logic-programming/
  16. http://www.amazon.com/the-pragmatic-programmer-journeyman-master/dp/020161622x
  17. http://en.wikipedia.org/wiki/graph_coloring
  18. http://en.wikipedia.org/wiki/sql
  19. http://www.swi-prolog.org/download.html
  20. http://www.swi-prolog.org/build/debian.html
  21. https://bernardopires.com/wp-content/uploads/2013/10/prolog_clauses.png
  22. http://www.swi-prolog.org/faq/toplevelmode.html
  23. http://en.wikipedia.org/wiki/unification_(computer_science)
  24. https://bernardopires.com/wp-content/uploads/2013/09/map_coloring_germany.png
  25. http://www.doc.gold.ac.uk/~mas02gw/prolog_tutorial/prologpages/lists.html
  26. http://www.learnprolognow.org/lpnpage.php?pagetype=html&pageid=lpn-htmlse44
  27. http://www.csupomona.edu/~jrfisher/www/prolog_tutorial/2_3.html
  28. http://www.tjhsst.edu/~rlatimer/assignments2004/farmerprologbak.html
  29. http://rosettacode.org/wiki/n-queens_problem#prolog
  30. http://www.amazon.com/art-prolog-advanced-programming-techniques/dp/0262691639
  31. http://www.doc.gold.ac.uk/~mas02gw/prolog_tutorial/prologpages/
  32. http://www.learnprolognow.org/
  33. http://www.reddit.com/r/coding/comments/1od21d/try_logic_programming_a_gentle_introduction_to/
  34. http://www.reddit.com/r/programming/comments/1ohq3m/try_logic_programming_a_gentle_introduction_to/
  35. http://www.reddit.com/r/prolog/comments/1ohx7u/try_logic_programming_a_gentle_introduction_to/
  36. http://jamesbvaughan.com/writing-an-http-server-in-prolog/
  37. https://jamesbvaughan.com/prolog-http-server/
  38. https://petbrontosaurus.wordpress.com/2017/07/10/adventures-in-prolog/
  39. https://bernardopires.com/2014/03/rails-vs-django-an-in-depth-technical-comparison/
  40. https://bernardopires.com/2014/03/rails-vs-django-an-in-depth-technical-comparison/
  41. https://bernardopires.com/2013/10/try-logic-programming-a-gentle-introduction-to-prolog/
  42. http://github.com/bernardopires
  43. https://github.com/bernardopires/django-tenant-schemas
  44. https://github.com/bernardopires/twitch-chat-logger
  45. https://bernardopires.com/wp-login.php
  46. https://bernardopires.com/feed/
  47. https://bernardopires.com/comments/feed/
  48. https://wordpress.org/
  49. https://bernardopires.com/
  50. http://wordpress.org/
  51. http://alienwp.com/
