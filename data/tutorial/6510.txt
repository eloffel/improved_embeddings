   #[1]github [2]recent commits to wikisql:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]48
     * [35]star [36]462
     * [37]fork [38]110

[39]salesforce/[40]wikisql

   [41]code [42]issues 3 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   a large annotated id29 corpus for developing natural
   language interfaces.
   [47]natural-language [48]dataset [49]database [50]machine-learning
   [51]natural-language-processing [52]natural-language-interface
     * [53]59 commits
     * [54]3 branches
     * [55]1 release
     * [56]10 contributors
     * [57]bsd-3-clause

    1. [58]html 50.4%
    2. [59]python 49.1%
    3. [60]dockerfile 0.5%

   (button) html python dockerfile
   branch: master (button) new pull request
   [61]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/s
   [62]download zip

downloading...

   want to be notified of new releases in salesforce/wikisql?
   [63]sign in [64]sign up

launching github desktop...

   if nothing happens, [65]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [66]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [67]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [68]download the github extension for visual studio
   and try again.

   (button) go back
   [69]@vzhong
   [70]vzhong [71]merge pull request [72]#38 [73]from yi-mao/xsql (button)
      
add xsql results

   latest commit [74]5b6c5ad mar 4, 2019
   [75]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [76]collection [77]add annotation interface example for [78]#21 aug 20,
   2018
   [79]lib [80]fix travis ci build failed mar 4, 2019
   [81]test [82]fix typo is test may 24, 2018
   [83].dockerignore [84]initial aug 12, 2017
   [85].gitattributes
   [86].gitignore [87]enable travis oct 17, 2017
   [88].travis.yml [89]enable travis oct 17, 2017
   [90]license [91]initial aug 12, 2017
   [92]readme.md [93]add xsql results mar 4, 2019
   [94]annotate.py [95]update annotate.py sep 13, 2017
   [96]data.tar.bz2
   [97]evaluate.py [98]ordered option + stringify all numbers aug 8, 2018
   [99]requirements.txt [100]initial aug 12, 2017
   [101]version.txt [102]update to remove examples that have mismatch
   between logical form con    oct 17, 2017

readme.md

wikisql

   [103]build status

   a large crowd-sourced dataset for developing natural language
   interfaces for id208. wikisql is the dataset released
   along with our work [104]seq2sql: generating structured queries from
   natural language using id23.

citation

   if you use wikisql, please cite the following work:

     victor zhong, caiming xiong, and richard socher. 2017. seq2sql:
     generating structured queries from natural language using
     id23.

@article{zhongseq2sql2017,
  author    = {victor zhong and
               caiming xiong and
               richard socher},
  title     = {seq2sql: generating structured queries from natural language usin
g
               id23},
  journal   = {corr},
  volume    = {abs/1709.00103},
  year      = {2017}
}

leaderboard

   if you submit papers on wikisql, please consider sending a pull request
   to merge your results onto the leaderboard. by submitting, you
   acknowledge that your results are obtained purely by training on the
   training split and tuned on the dev split (e.g. you only evaluted on
   the test set once). moreover, you acknowledge that your models only use
   the table schema and question during id136. that is they do not use
   the table content.
   model dev
   logical form
   accuracy dev
   execution
   accuracy test
   logical form
   accuracy test
   execution
   accuracy uses execution
   [105]x-sql
   +execution-guided decoding
   (he 2019) 86.2 92.3 86.0 91.8 id136
   [106]sqlova
   +execution-guided decoding
   (hwang 2019) 84.2 90.2 83.6 89.6 id136
   [107]incsql
   +execution-guided decoding
   (shi 2018) 51.3 87.2 51.1 87.1 id136
   [108]execution-guided decoding
   (wang 2018) 76.0 84.0 75.4 83.8 id136
   [109]x-sql
   (he 2019) 83.8 89.5 83.3 88.7
   [110]sqlova
   (hwang 2019) 81.6 87.2 80.7 86.2
   [111]incsql
   (shi 2018) 49.9 84.0 49.9 83.7
   [112]mqan (unordered)
   (mccann 2018) 76.1 82.0 75.4 81.4
   [113]mqan (ordered)
   (mccann 2018) 73.5 82.0 73.2 81.4
   [114]coarse2fine
   (dong 2018) 72.5 79.0 71.7 78.5
   [115]typesql
   (yu 2018) - 74.5 - 73.5
   [116]pt-maml
   (huang 2018) 63.1 68.3 62.8 68.0
   [117]sqlnet
   (xu 2017) - 69.8 - 68.0
   [118]wang 2017^ 62.0 67.1 61.5 66.8
   [119]seq2sql
   (zhong 2017) 49.5 60.8 48.3 59.4 training
   [120]baseline
   (zhong 2017) 23.3 37.0 23.4 35.9

   ^ indicates that table content is used directly by the model during
   training.
   * indicates that the order in where conditions is ignored.

installation

   both the evaluation script as well as the dataset are stored within the
   repo. only python 3 is supported at the moment - i would very much
   welcome a pull request that ports the code to work with python 2. the
   installation steps are as follows:
git clone https://github.com/metamind/wikisql
cd wikisql
pip install -r requirements.txt
tar xvjf data.tar.bz2

   this will unpack the data files into a directory called data.

content and format

   inside the data folder you will find the files in jsonl and db format.
   the former can be read line by line, where each line is a serialized
   json object. the latter is a sqlite3 database.

question, query and table id

   these files are contained in the *.jsonl files. a line looks like the
   following:
{
   "phase":1,
   "question":"who is the manufacturer for the order year 1998?",
   "sql":{
      "conds":[
         [
            0,
            0,
            "1998"
         ]
      ],
      "sel":1,
      "agg":0
   },
   "table_id":"1-10007452-3"
}

   the fields represent the following:
     * phase: the phase in which the dataset was collection. we collected
       wikisql in two phases.
     * question: the natural language question written by the worker.
     * table_id: the id of the table to which this question is addressed.
     * sql: the sql query corresponding to the question. this has the
       following subfields:
          + sel: the numerical index of the column that is being selected.
            you can find the actual column from the table.
          + agg: the numerical index of the aggregation operator that is
            being used. you can find the actual operator from
            query.agg_ops in lib/query.py.
          + conds: a list of triplets (column_index, operator_index,
            condition) where:
               o column_index: the numerical index of the condition column
                 that is being used. you can find the actual column from
                 the table.
               o operator_index: the numerical index of the condition
                 operator that is being used. you can find the actual
                 operator from query.cond_ops in lib/query.py.
               o condition: the comparison value for the condition, in
                 either string or float type.

tables

   these files are contained in the *.tables.jsonl files. a line looks
   like the following:
{
   "id":"1-1000181-1",
   "header":[
      "state/territory",
      "text/background colour",
      "format",
      "current slogan",
      "current series",
      "notes"
   ],
   "types":[
      "text",
      "text",
      "text",
      "text",
      "text",
      "text"
   ],
   "rows":[
      [
         "australian capital territory",
         "blue/white",
         "yaa\u00b7nna",
         "act \u00b7 celebration of a century 2013",
         "yil\u00b700a",
         "slogan screenprinted on plate"
      ],
      [
         "new south wales",
         "black/yellow",
         "aa\u00b7nn\u00b7aa",
         "new south wales",
         "bx\u00b799\u00b7hi",
         "no slogan on current series"
      ],
      [
         "new south wales",
         "black/white",
         "aaa\u00b7nna",
         "nsw",
         "cpx\u00b712a",
         "optional white slimline series"
      ],
      [
         "northern territory",
         "ochre/white",
         "ca\u00b7nn\u00b7aa",
         "nt \u00b7 outback australia",
         "cb\u00b706\u00b7zz",
         "new series began in june 2011"
      ],
      [
         "queensland",
         "maroon/white",
         "nnn\u00b7aaa",
         "queensland \u00b7 sunshine state",
         "999\u00b7tlg",
         "slogan embossed on plate"
      ],
      [
         "south australia",
         "black/white",
         "snnn\u00b7aaa",
         "south australia",
         "s000\u00b7azd",
         "no slogan on current series"
      ],
      [
         "victoria",
         "blue/white",
         "aaa\u00b7nnn",
         "victoria - the place to be",
         "zzz\u00b7562",
         "current series will be exhausted this year"
      ]
   ]
}

   the fields represent the following:
     * id: the table id.
     * header: a list of column names in the table.
     * rows: a list of rows. each row is a list of row entries.

   tables are also contained in a corresponding *.db file. this is a sql
   database with the same information. note that due to the flexible
   format of html tables, the column names of tables in the database has
   been symbolized. for example, for a table with the columns ['foo',
   'bar'], the columns in the database are actually col0 and col1.

scripts

   evaluate.py contains the evaluation script, whose options are:
usage: evaluate.py [-h] source_file db_file pred_file

positional arguments:
  source_file  source file for the prediction
  db_file      source database for the prediction
  pred_file    predictions by the model

optional arguments:
  -h, --help   show this help message and exit

   the pred_file, which is supplied by the user, should contain lines of
   serialized json objects. each json object should contain a query field
   which corresponds to the query predicted for a line in the input
   *.jsonl file and should be similar to the sql field of the input. in
   particular, it should contain:
     * sel: the numerical index of the column that is being selected. you
       can find the actual column from the table.
     * agg: the numerical index of the aggregation operator that is being
       used. you can find the actual operator from query.agg_ops in
       lib/query.py.
     * conds: a list of triplets (column_index, operator_index, condition)
       where:
          + column_index: the numerical index of the condition column that
            is being used. you can find the actual column from the table.
          + operator_index: the numerical index of the condition operator
            that is being used. you can find the actual operator from
            query.cond_ops in lib/query.py.
          + condition: the comparison value for the condition, in either
            string or float type.

   an example predictions file can be found in
   test/example.pred.dev.jsonl. the lib directory contains dependencies of
   evaluate.py.

integration test

   we supply a sample predictions file for the dev set in
   test/example.pred.dev.jsonl.bz2. you can unzip this file using bunzip2
   test/example.pred.dev.jsonl.bz2 -k to look at what a real predictions
   file should look like. we distribute a docker file which installs the
   necessary dependencies of this library and runs the evaluation script
   on this file. the docker file also serves as an example of how to use
   the evaluation script.

   to run the test, first build the image from the root directory:
docker build -t wikisqltest -f test/dockerfile .

   next, run the image
docker run --rm --name wikisqltest wikisqltest

   if everything works correctly, the output should be:
{
  "ex_accuracy": 0.5380596128725804,
  "lf_accuracy": 0.35375846099038116
}

annotation

   in addition to the raw data dump, we also release an optional
   annotation script that annotates wikisql using [121]stanford corenlp.
   the annotate.py script will annotate the query, question, and sql
   table, as well as a sequence to sequence construction of the input and
   output for convenience of using id195 models. to use annotate.py, you
   must set up the corenlp python client using [122]stanford stanza. one
   docker image of the corenlp server that this works with is here:
docker run --name corenlp -d -p 9000:9000 vzhong/corenlp-server

   note that the sequence output contain symbols to delineate the
   boundaries of fields. in lib/query.py you will also find accompanying
   functions to reconstruct a query given a sequence output in the
   annotated format.

faq

   i will update this list with frequently asked questions.

   how do you convert html table columns to sql table columns?

     web tables are noisy and are not directly transferrable into a
     database. one problem is that sql column names need to be symbolic
     whereas web table columns usually have unicode characters,
     whitespaces etc. to handle this problem, we convert table columns to
     symbols (e.g. player name to col1) just before executing the query.
     for the implementation details, please see evaluate.py.

changelog

     * 1.1: removed examples from each split that have gloss mismatch
       between the logical form conditions and the annotated question
       utterance.

     *    2019 github, inc.
     * [123]terms
     * [124]privacy
     * [125]security
     * [126]status
     * [127]help

     * [128]contact github
     * [129]pricing
     * [130]api
     * [131]training
     * [132]blog
     * [133]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [134]reload to refresh your
   session. you signed out in another tab or window. [135]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/salesforce/wikisql/commits/master.atom
   3. https://github.com/salesforce/wikisql#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/salesforce/wikisql
  32. https://github.com/join
  33. https://github.com/login?return_to=/salesforce/wikisql
  34. https://github.com/salesforce/wikisql/watchers
  35. https://github.com/login?return_to=/salesforce/wikisql
  36. https://github.com/salesforce/wikisql/stargazers
  37. https://github.com/login?return_to=/salesforce/wikisql
  38. https://github.com/salesforce/wikisql/network/members
  39. https://github.com/salesforce
  40. https://github.com/salesforce/wikisql
  41. https://github.com/salesforce/wikisql
  42. https://github.com/salesforce/wikisql/issues
  43. https://github.com/salesforce/wikisql/pulls
  44. https://github.com/salesforce/wikisql/projects
  45. https://github.com/salesforce/wikisql/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/topics/natural-language
  48. https://github.com/topics/dataset
  49. https://github.com/topics/database
  50. https://github.com/topics/machine-learning
  51. https://github.com/topics/natural-language-processing
  52. https://github.com/topics/natural-language-interface
  53. https://github.com/salesforce/wikisql/commits/master
  54. https://github.com/salesforce/wikisql/branches
  55. https://github.com/salesforce/wikisql/releases
  56. https://github.com/salesforce/wikisql/graphs/contributors
  57. https://github.com/salesforce/wikisql/blob/master/license
  58. https://github.com/salesforce/wikisql/search?l=html
  59. https://github.com/salesforce/wikisql/search?l=python
  60. https://github.com/salesforce/wikisql/search?l=dockerfile
  61. https://github.com/salesforce/wikisql/find/master
  62. https://github.com/salesforce/wikisql/archive/master.zip
  63. https://github.com/login?return_to=https://github.com/salesforce/wikisql
  64. https://github.com/join?return_to=/salesforce/wikisql
  65. https://desktop.github.com/
  66. https://desktop.github.com/
  67. https://developer.apple.com/xcode/
  68. https://visualstudio.github.com/
  69. https://github.com/vzhong
  70. https://github.com/salesforce/wikisql/commits?author=vzhong
  71. https://github.com/salesforce/wikisql/commit/5b6c5ad8e07e9cf5d1d325afac0953a12c5ae998
  72. https://github.com/salesforce/wikisql/pull/38
  73. https://github.com/salesforce/wikisql/commit/5b6c5ad8e07e9cf5d1d325afac0953a12c5ae998
  74. https://github.com/salesforce/wikisql/commit/5b6c5ad8e07e9cf5d1d325afac0953a12c5ae998
  75. https://github.com/salesforce/wikisql/tree/5b6c5ad8e07e9cf5d1d325afac0953a12c5ae998
  76. https://github.com/salesforce/wikisql/tree/master/collection
  77. https://github.com/salesforce/wikisql/commit/1eba791e223e2734f882acdc86a4a8ec1f7815d3
  78. https://github.com/salesforce/wikisql/issues/21
  79. https://github.com/salesforce/wikisql/tree/master/lib
  80. https://github.com/salesforce/wikisql/commit/a4dea08372560f9c255fd4b13ab165a0f95ccb39
  81. https://github.com/salesforce/wikisql/tree/master/test
  82. https://github.com/salesforce/wikisql/commit/f3c408778a81f0966b57474ac6b71c143019488d
  83. https://github.com/salesforce/wikisql/blob/master/.dockerignore
  84. https://github.com/salesforce/wikisql/commit/2f890b4b26ec20ff2020f6261b9093fb099a72a9
  85. https://github.com/salesforce/wikisql/blob/master/.gitattributes
  86. https://github.com/salesforce/wikisql/blob/master/.gitignore
  87. https://github.com/salesforce/wikisql/commit/c790ce4f2abf4166ebfdaf0cbc400e2d06906d6b
  88. https://github.com/salesforce/wikisql/blob/master/.travis.yml
  89. https://github.com/salesforce/wikisql/commit/c790ce4f2abf4166ebfdaf0cbc400e2d06906d6b
  90. https://github.com/salesforce/wikisql/blob/master/license
  91. https://github.com/salesforce/wikisql/commit/2f890b4b26ec20ff2020f6261b9093fb099a72a9
  92. https://github.com/salesforce/wikisql/blob/master/readme.md
  93. https://github.com/salesforce/wikisql/commit/4b6b1800b24e092c063b80a6968590ee206d3d23
  94. https://github.com/salesforce/wikisql/blob/master/annotate.py
  95. https://github.com/salesforce/wikisql/commit/e5b2a2eef0f9081f83d0db3ef9bd365253cb04b1
  96. https://github.com/salesforce/wikisql/blob/master/data.tar.bz2
  97. https://github.com/salesforce/wikisql/blob/master/evaluate.py
  98. https://github.com/salesforce/wikisql/commit/6bb764533636ebbf39ba50ba784fec6618d7783b
  99. https://github.com/salesforce/wikisql/blob/master/requirements.txt
 100. https://github.com/salesforce/wikisql/commit/2f890b4b26ec20ff2020f6261b9093fb099a72a9
 101. https://github.com/salesforce/wikisql/blob/master/version.txt
 102. https://github.com/salesforce/wikisql/commit/bfdef4a0429f793f3bbcc17425b83130beabb743
 103. https://travis-ci.org/salesforce/wikisql
 104. http://arxiv.org/abs/1709.00103
 105. https://www.microsoft.com/en-us/research/publication/x-sql-reinforce-context-into-schema-representation/
 106. https://ssl.pstatic.net/static/clova/service/clova_ai/research/publications/sqlova.pdf
 107. https://arxiv.org/pdf/1809.05054.pdf
 108. https://arxiv.org/abs/1807.03100
 109. https://www.microsoft.com/en-us/research/publication/x-sql-reinforce-context-into-schema-representation/
 110. https://ssl.pstatic.net/static/clova/service/clova_ai/research/publications/sqlova.pdf
 111. https://arxiv.org/pdf/1809.05054.pdf
 112. https://arxiv.org/abs/1806.08730
 113. https://arxiv.org/abs/1806.08730
 114. https://arxiv.org/abs/1805.04793
 115. https://arxiv.org/abs/1804.09769
 116. https://arxiv.org/abs/1803.02400
 117. https://arxiv.org/abs/1711.04436
 118. https://www.microsoft.com/en-us/research/publication/pointing-sql-queries-text/
 119. https://arxiv.org/abs/1709.00103
 120. https://arxiv.org/abs/1709.00103
 121. https://stanfordnlp.github.io/corenlp/
 122. https://github.com/stanfordnlp/stanza
 123. https://github.com/site/terms
 124. https://github.com/site/privacy
 125. https://github.com/security
 126. https://githubstatus.com/
 127. https://help.github.com/
 128. https://github.com/contact
 129. https://github.com/pricing
 130. https://developer.github.com/
 131. https://training.github.com/
 132. https://github.blog/
 133. https://github.com/about
 134. https://github.com/salesforce/wikisql
 135. https://github.com/salesforce/wikisql

   hidden links:
 137. https://github.com/
 138. https://github.com/salesforce/wikisql
 139. https://github.com/salesforce/wikisql
 140. https://github.com/salesforce/wikisql
 141. https://help.github.com/articles/which-remote-url-should-i-use
 142. https://github.com/salesforce/wikisql#wikisql
 143. https://github.com/salesforce/wikisql#citation
 144. https://github.com/salesforce/wikisql#leaderboard
 145. https://github.com/salesforce/wikisql#installation
 146. https://github.com/salesforce/wikisql#content-and-format
 147. https://github.com/salesforce/wikisql#question-query-and-table-id
 148. https://github.com/salesforce/wikisql#tables
 149. https://github.com/salesforce/wikisql#scripts
 150. https://github.com/salesforce/wikisql#integration-test
 151. https://github.com/salesforce/wikisql#annotation
 152. https://github.com/salesforce/wikisql#faq
 153. https://github.com/salesforce/wikisql#changelog
 154. https://github.com/
