   #[1]pyimagesearch    feed [2]pyimagesearch    comments feed
   [3]pyimagesearch    pre-configured amazon aws deep learning ami with
   python comments feed [4]alternate [5]alternate

[6]navigation

   [7]pyimagesearch [8]pyimagesearch be awesome at opencv, python, deep
   learning, and id161

   [9]home

main menu

     * [10]start here
     * [11]practical python and opencv
     * [12]pyimagesearch gurus
     * [13]opencv 3 & 4 tutorials
     * [14]free crash course
     * [15]about
     * [16]contact

   [17]return to content

pre-configured amazon aws deep learning ami with python

   by [18]adrian rosebrock on september 20, 2017 in [19]deep learning,
   [20]dl4cv

   [dl4cv_amazon_ami_header.png]

   [21]image credit

   the ubuntu virtualbox virtual machine that comes with my book, [22]deep
   learning for id161 with python, includes all the necessary
   deep learning and id161 libraries you need (such as keras,
   tensorflow, scikit-learn, scikit-image, opencv, etc.) pre-installed.

   however, while the deep learning virtual machine is easy to use, it
   also has a number of drawbacks, including:
     * being significantly slower than executing instructions on your
       native machine.
     * unable to access your gpu (and other peripherals attached to your
       host).

   what the virtual machine has in convenience you end up paying for in
   performance     this makes it a great for readers who are getting their
   feet wet, but if you want to be able to dramatically boost speed while
   still maintaining the pre-configured environment, you should consider
   using amazon web services (aws) and my pre-built deep learning amazon
   machine image (ami).

   using the steps outlined in this tutorial you   ll learn how to login (or
   create) your aws account, spin up a new instance (with or without a
   gpu), and install my pre-configured deep learning image. this will
   enable you to enjoy the pre-built deep learning environment without
   sacrificing speed.

   (2019-01-07) release v2.1 of dl4cv: ami version 2.1 is released with
   more environments to accompany bonus chapters of my deep learning book.

   to learn how to use my deep learning ami, just keep reading.

pre-configured amazon aws deep learning ami with python

   in this tutorial i will show you how to:
    1. login/create your aws account.
    2. launch my pre-configured deep learning ami.
    3. login to the server and execute your code.
    4. stop the machine when you are done.

   however, before we get too far i want to mention that:
     * the deep learning ami is linux-based so i would recommend having
       some basic knowledge of unix environments, especially the command
       line.
     * aws is not free and costs an hourly rate. exactly how much the
       hourly rate depends is on which machine you choose to spin up (no
       gpu, one gpu, eight gpus, etc.). for less than $1/hour you can use
       a machine with a gpu which will dramatically speedup the training
       of deep neural networks. you pay for only the time the machine is
       running. you can then shut down your machine when you are done.

step #1: setup amazon web services (aws) account

   in order to launch my pre-configured deep learning you first need an
   amazon web services account.

   to start, head to the [23]amazon web services homepage and click the
      sign in to the console    link:

   figure 1: the amazon web services homepage.

   if you already have an account you can login using your email address
   and password. otherwise you will need to click the    create a new aws
   account    button and create your account:

   figure 2: logging in to your amazon web services account.

   i would encourage you to use an existing amazon.com login as this will
   expedite the process.

step #2: select and launch your deep learning aws instance

   you are now ready to launch your pre-configured deep learning aws
   instance.

   first, you should set your region/zone to    us west (oregon)   . i created
   the deep learning ami in the oregon region so you   ll need to be in this
   region to find it, launch it, and access it:

   figure 3: setting your aws region to    us west (oregon)   .

   after you have set your region to oregon, click the    services    tab and
   then select    ec2    (elastic cloud compute):

   figure 4: accessing the amazon ec2 dashboard.

   from there you should click the    launch instance    button:

   figure 5: launching an amazon aws instance for deep learning.

   then select the    community amis    and search for either
      deep-learning-for-computer-vision-with-python-v2.1    
   ami-089c8796ad90c7807   :

   figure 6: searching for the deep learning for id161 with
   python ami.

   click    select    next to the ami.

   you are now ready to select your instance type. amazon provides a huge
   number of virtual servers that are designed to run a wide array of
   applications. these instances have varying amount of cpu power,
   storage, network capacity, or gpus, so you should consider:
    1. what type of machine you would like to launch.
    2. your particular budget.

   gpu instances tend to cost much more than standard cpu instances.
   however, they can train deep neural networks in a fraction of the time.
   when you average out the amount of time it takes to train a network on
   a cpu versus on a gpu you may realize that using the gpu instance will
   save you money.

   for cpu instances i recommend you use the    compute optimized    c4.*
   instances. in particular, the c4.xlarge instance is a good option to
   get your feet wet.

   if you would like to use a gpu, i would highly recommend the    gpu
   compute    instances. the p2.xlarge instance has a single nvidia k80
   (12gb of memory).

   the p2.8xlarge sports 8 gpus. while the p2.16xlarge has 16 gpus.

   i have included the pricing (at the time of this writing) for each of
   the instances below:
     * c4.xlarge: $0.199/hour
     * p2.xlarge: $0.90/hour
     * p2.8xlarge: $7.20/hour
     * p2.16xlarge: $14.40/hour

   as you can see, the gpu instances are much more expensive; however, you
   are able to train networks in a fraction of the cost, making them a
   more economically viable option. because of this i recommend using the
   p2.xlarge instance if this is your first time using a gpu for deep
   learning.

   in the example screenshot below you can see that i have chosen the
   p2.xlarge instance:

   figure 7: selecting the p2.xlarge instance for deep learning using the
   gpu.

   (2019-01-07) release v2.1 of dl4cv: aws currently has their p2
   instances under    gpu instances    rather than    gpu compute   .

   next, i can click    review and launch    followed by    launch    to boot my
   instance.

   after clicking    launch    you   ll be prompted to select your key pair or
   create a new key pair:
   [dl4cv_amazon_ami_key_pair.png]

   figure 8: selecting a key pair for our elastic cloud compute instance.

   if you have an existing key pair you can select    choose an existing key
   pair    from the drop down. otherwise you   ll need to select the    create a
   new key pair    and then download the pair. the key pair is used to login
   to your aws instance.

   after acknowledging and accepting login note from amazon your instance
   will start to boot. scroll down to the bottom of the page and click
      view instances   . it will take a minute or so for your instance to
   boot.

   once the instance is online you   ll see the    instance state    column be
   changed to    running    for the instance.

   select it and you   ll be able to view information on the instance,
   including the ip address:

   figure 9: examining the ip address of my deep learning aws instance.

   here you can see that my ip address is 52.88.146.157 . your ip address
   will be different.

   fire up a terminal and you can ssh into your aws instance:
   pre-configured amazon aws deep learning ami with python
   shell

   $ ssh -i ec2keypair.pem ubuntu@52.88.146.157________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ ssh -i ec2keypair.pem ubuntu@52.88.146.157

   you   ll want to update the command above to:
    1. use the filename you created for the key pair.
    2. use the ip address of your instance.

step #3: (gpu only & only for ami version 1.0 and 1.2) re-install nvidia deep
learning driver

   (2019-01-07) release v2.1 of dl4cv: this step is not required for ami
   version 2.1. neither a driver update nor a reboot is required. just
   launch and go. however, take note of the nvidia-smi  command below as
   it is useful to verify driver operation.

   if you selected a gpu instance you will need to:
    1. reboot your ami via the command line
    2. reinstall the nvidia driver

   the reason for these two steps is because instances launched from
   a pre-configured ami can potentially restart with a slightly different
   kernel, therefore causing the nouveau (default) driver to be loaded
   instead of the nvidia driver.

   to avoid this situation you can either:
    1. reboot your system now, essentially    locking in    the current kernel
       and then reinstalling the nvida driver once.
    2. reinstall the nvidia driver each time you launch/reboot your
       instance from the aws admin.

   both methods have their pros and cons, but i would recommend the first
   one.

   to start, reboot your instance via the command line:
   pre-configured amazon aws deep learning ami with python
   shell

   $ sudo reboot_______________________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ sudo reboot

   your ssh connection will terminate during the reboot process.

   once the instance has rebooted, re-ssh into the instance, and reinstall
   the nvidia kernel drivers. luckily this is easy as i have included the
   driver file in the home directory of the instance.

   if you list the contents of the installers  directory you   ll see three
   files:
   pre-configured amazon aws deep learning ami with python
   shell

   $ ls -l installers/_________________________________________
   total 1435300_______________________________________________
   -rwxr-xr-x 1 root root 1292835953 sep  6 14:03 cuda-linux64-
   -rwxr-xr-x 1 root root  101033340 sep  6 14:03 cuda-samples-
   -rwxr-xr-x 1 root root   75869960 sep  6 14:03 nvidia-linux-
   1
   2
   3
   4
   5
   $ ls -l installers/
   total 1435300
   -rwxr-xr-x 1 root root 1292835953 sep  6 14:03
   cuda-linux64-rel-8.0.61-21551265.run
   -rwxr-xr-x 1 root root  101033340 sep  6 14:03
   cuda-samples-linux-8.0.61-21551265.run
   -rwxr-xr-x 1 root root   75869960 sep  6 14:03
   nvidia-linux-x86_64-375.26.run

   change directory into installers  and then execute the following
   command:
   pre-configured amazon aws deep learning ami with python
   shell

   $ cd installers_____________________________________________
   $ sudo ./nvidia-linux-x86_64-375.26.run --silent____________
   ____________________________________________________________
   ____________________________________________________________
   1
   2
   $ cd installers
   $ sudo ./nvidia-linux-x86_64-375.26.run --silent

   follow the prompts on screen (including overwriting any existing nvidia
   driver files) and your nvidia deep learning driver will be installed.

   you can validate the nvidia driver installed successfully by running
   the nvidia-smi  command:
   pre-configured amazon aws deep learning ami with python
   shell

   $ nvidia-smi________________________________________________
   wed sep 13 12:51:43 2017       _____________________________
   +-----------------------------------------------------------
   | nvidia-smi 375.26                 driver version: 375.26  
   |-------------------------------+----------------------+----
   | gpu  name        persistence-m| bus-id        disp.a | vol
   | fan  temp  perf  pwr:usage/cap|         memory-usage | gpu
   |===============================+======================+====
   |   0  tesla k80           off  | 0000:00:1e.0     off |    
   | n/a   43c    p0    59w / 149w |      0mib / 11439mib |    
   +-------------------------------+----------------------+----
                                                               
   +-----------------------------------------------------------
   | processes:                                                
   |  gpu       pid  type  process name                        
   |===========================================================
   |  no running processes found                               
   +-----------------------------------------------------------
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   $ nvidia-smi
   wed sep 13 12:51:43 2017
   +----------------------------------------------------------------------
   -------+
   | nvidia-smi 375.26                 driver version:
   375.26                    |
   |-------------------------------+----------------------+---------------
   -------+
   | gpu  name        persistence-m| bus-id        disp.a | volatile
   uncorr. ecc |
   | fan  temp  perf  pwr:usage/cap|         memory-usage |
   gpu-util  compute m. |
   |===============================+======================+===============
   =======|
   |   0  tesla k80           off  | 0000:00:1e.0     off
   |                    0 |
   | n/a   43c    p0    59w / 149w |      0mib / 11439mib |
   97%      default |
   +-------------------------------+----------------------+---------------
   -------+


   +----------------------------------------------------------------------
   -------+
   | processes:                                                       gpu
   memory |
   |  gpu       pid  type  process name
   usage      |
   |======================================================================
   =======|
   |  no running processes
   found                                                 |
   +----------------------------------------------------------------------
   -------+

step #4: access deep learning python virtual environments on aws

   (2019-01-07) release v2.1 of dl4cv: version 2.1 of the ami has the
   following environments: dl4cv , mxnet , tfod_api , retinanet ,
   mask_rid98 . ensure that you   re working in the correct environment that
   corresponds to the dl4cv book chapter you   re studying. additionally, be
   sure to refer to the dl4cv companion website for more information on
   these virtual environments.

   you can access our deep learning and id161 libraries by using
   the workon dl4cv  command to access the python virtual virtual
   environment:

   figure 10: accessing the dl4cv python virtual environment for deep
   learning.

   notice that my prompt now has the text (dl4cv)  preceding it, implying
   that i am inside the dl4cv  python virtual environment.

   you can run pip freeze  to see all the python libraries installed.

   i have included a screenshot below demonstrating how to import keras,
   tensorflow, mxnet, and opencv from a python shell:

   figure 11: importing keras, tensorflow, mxnet, and opencv into our deep
   learning python virtual environment.

   if you run into an error importing mxnet, simply recompile it:
   pre-configured amazon aws deep learning ami with python
   shell

   $ cd ~/mxnet________________________________________________
   $ make -j4 use_opencv=1 use_blas=openblas use_cuda=1 \______
   	use_cuda_path=/usr/local/cuda use_cudnn=1__________________
   ____________________________________________________________
   1
   2
   3
   $ cd ~/mxnet
   $ make -j4 use_opencv=1 use_blas=openblas use_cuda=1 \
   use_cuda_path=/usr/local/cuda use_cudnn=1

   this due to the nvidia kernel driver issue i mentioned in step #3. you
   only need to recompile mxnet once and only if you receive an error at
   import.

   the code + datasets to [24]deep learning for id161 with
   python are not included on the pre-configured ami by default (as the
   ami is publicly available and can be used for tasks other than reading
   through deep learning for id161 with python).

   to upload the code from the book on your local system to the ami i
   would recommend using the scp  command:
   pre-configured amazon aws deep learning ami with python
   shell

   $ scp -i ec2keypair.pem ~/desktop/sb_code.zip ubuntu@52.88.1
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ scp -i ec2keypair.pem ~/desktop/sb_code.zip ubuntu@52.88.146.157:~

   here i am specifying:
     * the path to the .zip  file of the deep learning for id161
       with python code + datasets.
     * the ip address of my amazon instance.

   from there the .zip  file is uploaded to my home directory.

   you can then unzip the archive and execute the code:
   pre-configured amazon aws deep learning ami with python
   shell

   $ unzip sb_code.zip_________________________________________
   $ cd sb_code/chapter12-first_id98/___________________________
   $ workon dl4cv______________________________________________
   $ python shallownet_animals.py --dataset ../datasets/animals
   using tensorflow backend.___________________________________
   [info] loading images...____________________________________
   ..._________________________________________________________
   epoch 100/100_______________________________________________
   2250/2250 [==============================] - 0s - loss: 0.34
   [info] evaluating network...________________________________
                precision    recall  f1-score   support________
   ____________________________________________________________
           cat       0.67      0.52      0.58       262________
           dog       0.59      0.64      0.62       249________
         panda       0.75      0.87      0.81       239________
   ____________________________________________________________
   avg / total       0.67      0.67      0.67       750________
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   $ unzip sb_code.zip
   $ cd sb_code/chapter12-first_id98/
   $ workon dl4cv
   $ python shallownet_animals.py --dataset ../datasets/animals
   using tensorflow backend.
   [info] loading images...
   ...
   epoch 100/100
   2250/2250 [==============================] - 0s - loss: 0.3429 - acc:
   0.8800 - val_loss: 0.7278 - val_acc: 0.6720
   [info] evaluating network...
                precision    recall  f1-score   support

           cat       0.67      0.52      0.58       262
           dog       0.59      0.64      0.62       249
         panda       0.75      0.87      0.81       239

   avg / total       0.67      0.67      0.67       750

step #5: stop your deep learning aws instance

   once you are finished working with your ami head back to the
      instances    menu item on your ec2 dashboard and select your instance.

   with your instance selected click    actions => instance state => stop   :

   figure 12: stopping my deep learning aws instance.

   this process will shutdown your deep learning instance (and you will no
   longer be billed hourly for it).

   if you wanted to instead delete the instance you would select
      terminate   . deleting an instance destroys all of your data, so be sure
   you   ve put your trained models back on your laptop if needed.
   terminating an instance also stops you from incurring any further
   charges for the instance.

troubleshooting and faq

   in this section i detail answers to frequently asked questions and
   problems regarding the pre-configured deep learning ami.

how do i execute code from deep learning for id161 with python from
the deep learning ami?

   please see the    access deep learning python virtual environment on aws   
   section above. the gist is that you will upload a .zip  of the code to
   your ami via the scp  command. an example command can be seen below:
   pre-configured amazon aws deep learning ami with python
   shell

   $ scp -i ec2keypair.pem path/to/code.zip ubuntu@your_aws_ip_
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ scp -i ec2keypair.pem path/to/code.zip ubuntu@your_aws_ip_address:~

can i use a gui/window manager with my deep learning ami?

   no, the ami is terminal only. i would suggest using the deep learning
   ami if you are:
    1. comfortable with unix environments.
    2. have experience using the terminal.

   otherwise i would recommend the deep learning virtual machine part of
   [25]deep learning for id161 with python instead.

   it is possible to use x11 forwarding with the ami. when you ssh to the
   machine, just provide the -x  flag like this:
   pre-configured amazon aws deep learning ami with python
   shell

   $ ssh -x -i ec2keypair.pem ubuntu@52.88.146.157_____________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ ssh -x -i ec2keypair.pem ubuntu@52.88.146.157

how can i use a gpu instance for deep learning?

   please see the    step #2: select and launch your deep learning aws
   instance    section above. when selecting your amazon ec2 instance choose
   a p2.* (i.e.,    gpu compute    or    gpu instances   ) instance. these
   instances have one, eight, and sixteen gpus, respectively.

summary

   in today   s blog post you learned how to use my pre-configured ami for
   deep learning in the amazon web services ecosystem.

   the benefit of using my ami over the pre-configured virtual machine is
   that:
     * amazon web services and the elastic cloud compute ecosystem give
       you a huge range of systems to choose from, including cpu-only,
       single gpu, and multi-gpu.
     * you can scale your deep learning environment to multiple machines.
     * you retain the ability to use pre-configured deep learning
       environments but still get the benefit of added speed via dedicated
       hardware.

   the downside is that aws:
     * costs money (typically an hourly rate).
     * can be daunting for those who are new to unix environments.

   after you have gotten your feet wet with deep learning using my virtual
   machine i would highly recommend that you try aws out as well     you   ll
   find that the added speed improvements are worth the extra cost.

   to learn more, take a look at my new book, [26]deep learning for
   id161 with python.

resource guide (it   s totally free).

   get your free 17-page id161 and deep learning resource guide
   pdf
   enter your email address below to get my free 17-page id161,
   opencv, and deep learning resource guide pdf. inside you'll find my
   hand-picked tutorials, books, courses, and python libraries to help you
   master id161 and deep learning!
   ____________________
   download the guide!

   [27]amazon, [28]deep learning, [29]dl4cv, [30]ec2, [31]python,
   [32]virtual environments
   [33]real-time id164 with deep learning and opencv
   [34]your deep learning + python ubuntu virtual machine

73 responses to pre-configured amazon aws deep learning ami with python

    1. sayan september 22, 2017 at 3:05 am [35]#
       thank you for this article, as it was very informative. i was
       initially planning to build a desktop pc for deep learning. but you
       convinced me to try out aws first. if i calculate the initial cost
       of building a pc in india, then it would roughly translate to
       running an aws p2.xlarge instance 3 hrs. daily for around 2.5-3
       yrs. on top of that i don   t have to worry about the maintenance,
       and the electricity bills.
       [36]reply
          + adrian rosebrock september 22, 2017 at 8:53 am [37]#
            not having to worry about maintenance is a big reason why i
            like cloud-based solutions for deep learning. even if you
            botch your instance you can always start fresh with a new one.
            and when new hardware becomes available you can simply move
            your code/data to a new instance. it   s great to hear that you
            decided to go with the ami!
            [38]reply
          + neku january 14, 2018 at 5:19 am [39]#
            hi sayan, how you have calculated cost ??
            [40]reply
               o adrian rosebrock january 15, 2018 at 9:15 am [41]#
                 amazon charges based on usage of the instance (the amount
                 of time the machine is booted and running) along with a
                 very small amount for storage. exactly how much an
                 instance would cost is dependent on which instance you
                 are using.
                 [42]reply
    2. anthony the koala september 24, 2017 at 5:52 pm [43]#
       dear dr adrian,
       thank you for your information regarding the use of the amazon
          cloud service   . please excuse my naivety but wish to ask a
       practical question on implementing deep learning locally.
       could i achieve the same thing if i had a very large disk drive
       dedicated to deep learning say 1tb drive or say a 250gb solid state
       drive and do my deep learning    locally   . perhaps having another rpi
       acting as a server to the very large storage device?
       thank you,
       anthony of sydney australia
       [44]reply
          + adrian rosebrock september 26, 2017 at 8:34 am [45]#
            your hard drive space isn   t the only concern. the issue here
            is your cpu and/or gpu. the amazon cloud allows you to use
            gpus for deep learning. if your local system has a gpu, yes, i
            would recommend using it. if it doesn   t, then the amazon cloud
            would be an option.
            again, you do not have to use gpus for deep learning but they
            will tremendously speed up the training process. some very
            deep networks that are trained on large datasets can only be
            accomplished by using the gpu.
            [46]reply
    3. matias figueroa september 30, 2017 at 3:08 pm [47]#
       adrian rosebroc, what kind of video card do you recommend to create
       this type of project, would a gtx1080 11gb suffice ??,
       or some more economical model like gtx980 . thank   s a lot for
       sharing your knowledge
       [48]reply
          + matias figueroa september 30, 2017 at 3:10 pm [49]#
            sorry for writed wrong your last name
            [50]reply
          + adrian rosebrock october 2, 2017 at 9:50 am [51]#
            the gtx1080 is perfectly acceptable. i also recommend the
            titan x 12gb. as long as you have more than 6gb (ideally 8gb
            or more) you   ll be able to run the vast majority of examples
            inside deep learning for id161 with python.
            [52]reply
    4. santa october 15, 2017 at 3:24 pm [53]#
       i imagine combining aws with opencv and a rest web api for an mvc
       model. you had another tutorial on web interfaces
       ([54]https://www.pyimagesearch.com/2015/05/11/creating-a-face-detec
       tion-api-with-python-and-opencv-in-just-5-minutes/). in that
       tutorial you have processed images.
       i am now wondering if this combination would work with a video
       stream (say a rtsp video stream), instead of posting pictures.
       [55]reply
          + adrian rosebrock october 16, 2017 at 12:22 pm [56]#
            i don   t have any tutorials on working with rtsp streams, but
            it   s a bit more complicated to setup the client/server
            relationship. i   ll try to cover this in a future blog post.
            [57]reply
    5. rob jones october 20, 2017 at 1:34 pm [58]#
       i   ve started running the examples from the dl4cv book on a
       p2.xlarge instance     works great     getting 6s per epoch on a
       p2.xlarge which has a tesla k80.
       some of the examples produce a training loss graph     in order to
       view these you need to use x forwarding.
       that   s easily done     just add -x when you ssh
       $ ssh -x -i ubuntu@
       [59]reply
    6. rob jones october 20, 2017 at 4:55 pm [60]#
       that last comment had some text removed     should have read
       $ ssh -x -i your_key ubuntu@your_ip
       in fact the -x flag allows x forwarding but with a timeout     10
       mins maybe
       instead you want to use -y which does the same but without a
       timeout
       $ ssh -y -i your_key ubuntu@your_ip
       [61]reply
          + adrian rosebrock october 22, 2017 at 8:39 am [62]#
            thanks for sharing, rob!
            if you   re using the ami i would also suggest using plt.save
            rather than plt.imshow. this will allow the figure to be saved
            to disk, then you can download it and view it.
            [63]reply
    7. kaisar khatak october 28, 2017 at 8:22 pm [64]#
       how does your ami (deep-learning-for-computer-vision-with-python)
       compare to amazon deep learning ami cuda 8 ubuntu version ami and
       nvidia cuda toolkit 7.5 on amazon linux ami?
       thanks.
       [65]reply
          + adrian rosebrock october 31, 2017 at 8:04 am [66]#
            my ami focuses on deep learning for id161.
            additional image processing/id161 libraries are
            installed such as scikit-image, scikit-learn, etc. general
            purpose deep learning libraries (such as ones for nlp, audio
            processing, text processing, etc.) are not installed. this ami
            is also geared towards readers who are working through
            [67]deep learning for id161 with python.
            [68]reply
    8. kaisar khatak october 28, 2017 at 9:55 pm [69]#
       who owns the deep-learning-for-computer-vision-with-python ami in
       the east (n. virginia) region?
       [70]reply
          + adrian rosebrock october 31, 2017 at 8:01 am [71]#
            i have not created an ami in the n. virginia region, only the
            oregon region. i assume a pyimagesearch reader replicated the
            ami; however, i would suggest you use the official release
            only.
            [72]reply
    9. rob jones november 24, 2017 at 4:57 pm [73]#
       i have an instance of this ami that has been working fine     stop
       it, start it with no problem     but every once in a while it seems
       to lose the nvidia driver when i start it.
       tensorflow/stream_executor/cuda/cuda_diagnostics.cc:145] kernel
       driver does not appear to be running on this host
       (ip-172-31-34-37): /proc/driver/nvidia/version does not exist
       i can get it back with    cd installers; sudo
       ./nvidia-linux-x86_64-375.26.run    silent    as you showed above.
       not a big deal   just odd   
       [74]reply
          + adrian rosebrock november 25, 2017 at 12:20 pm [75]#
            it happens eery now due to how amazon handles the kernels on
            the amis. i   m not sure entirely how it works to be totally
            honest. i discuss it in more detail over in [76]this blog
            post.
            [77]reply
   10. david bonn january 21, 2018 at 9:54 am [78]#
       hi, sorry for the late arrival..,
       from my interpretation of the prices, a multi-gpu solution will
       save you time but not money? given that an 8-gpu host is 8 time as
       expensive as a single gpu, and a 16-gpu host is 16 times as
       expensive.
       my other thought: does it make more sense to do the preprocessing
       on another system and just upload the preprocessed training images?
       i am thinking in terms of several thousand images for a sample set,
       largely curated from google.
       [79]reply
          + adrian rosebrock january 22, 2018 at 6:23 pm [80]#
            correct, the more gpus you have, the faster you can train
            networks, but the more expensive it will be.
            as for your second question, what type of preprocessing are
            you applying to your images? several thousand images is
            actually a small dataset in terms of deep learning. id163,
            one of the most well known deep learning datasets, is
            approximately 1.2 million images.
            [81]reply
   11. david bonn january 23, 2018 at 1:02 pm [82]#
       i agree several thousand images is a very small dataset. right now
       i am largely in the exploratory phase and am trying to determine if
       (1) deep learning will actually help solve my problem, and (2) can
       i make the solution run reasonably well on a raspberry pi. if those
       things look good
       for the preprocessing i was thinking just about scaling or cropping
       the images for the size appropriate to the network i wanted to
       train. so rather than throw around megapixel images transferring
       much smaller images would seem to save me quite a bit of wall clock
       time. of course, i live in the middle of nowhere with a relatively
       slow internet connection so that also is relevant to the
       discussion.
       the problem i am trying to solve is fire/flame detection. right now
       i have a pretty good system that uses flicker detection and an
       infrared camera. i am hoping to apply machine learning to
       evaluating candidate regions identified by flicker detection and
       the infrared camera.
       your blogs have been immensely helpful teaching this old c
       programmer new tricks.
       [83]reply
          + adrian rosebrock january 23, 2018 at 1:52 pm [84]#
            if your images are large (in terms of width and height) while
            your id98 only accepts images that are 200-300px then resizing
            your images prior to training can save you some time, but not
            much. most deep learning libraries perform preprocessing in a
            separate thread than the one used for training. this enables
            training to continue without having to be blocked waiting for
            new images.
            fire and flame detection is a great project. you will
            certainly need a good amount of training data for this. a id98
            should perform well here once you have enough data.
            [85]reply
   12. reed january 30, 2018 at 10:46 am [86]#
       will you have a similar tutorial post for google cloud platform.
       the initial pension is more than aws!! i   m looking forward to it
       [87]reply
          + adrian rosebrock january 30, 2018 at 10:48 am [88]#
            i   ll consider doing a tutorial for google   s cloud, but i
            [89]played around with microsoft   s deep learning instance and
            really liked it. this might be a better alternative for you in
            this situation.
            [90]reply
   13. carmen february 12, 2018 at 11:36 am [91]#
       thanks for this article. i just started using the ami. i   ve been
       trying to install opencv for almost a month on other instances
       until i found this. can i ask if there   s a way to load an online
       kaggle dataset to the instance using url? i   m currently using
       filezilla to upload the dataset and my python script under the
       folder ~/ubuntu on ec2, but i got stuck under the (dl4cv)
       environment, i couldn   t cd out.
       many thanks in advance.
       [92]reply
          + adrian rosebrock february 12, 2018 at 6:08 pm [93]#
            hey carmen     you can use    wget    to download a file via the
            command line, otherwise you should ftp/sftp your file to the
            ami.
            i think you may have some confusion regarding the    dl4cv   
            python virtual environment. it   s not a directory. it   s just
            telling you that you are using the virtual environment. you
            can change directory around your system as you normally would.
            [94]reply
   14. falah february 14, 2018 at 3:40 am [95]#
       hello adrian
       my os is windows 7 how can i work on aws
       [96]reply
          + adrian rosebrock february 18, 2018 at 10:12 am [97]#
            you can still work with aws from windows. you just need a web
            browser to launch ami and a ssh connection to access it.
            [98]reply
   15. tao tao march 15, 2018 at 1:48 pm [99]#
       hi adrian, you are my real hero, and i am working on a project to
       get the trained model on premise, but not very sure whether this
       training result can be moved to the local environment as web
       service hosted on local iis server or apache, do you have more idea
       about this.
       thanks a lot.
       tao
       [100]reply
          + adrian rosebrock march 19, 2018 at 5:48 pm [101]#
            hey tao, thank you for the kind words. i   m not sure what you
            mean by your question. are you asking whether iis or apache
            can be used? are you asking if you can train the model in the
            cloud before deploying it to the web service? if you can
            elaborate i   d be happy to provide some suggestions.
            [102]reply
   16. scott march 19, 2018 at 6:05 pm [103]#
       for anybody on windows 10 struggling to connect with ssh:
       you might need to use something like git bash or something similar.
       i couldn   t get it to work with windows cmd or powershell even after
       installing the optional ssh client for built-in to windows 10. you
       also might need to change permissions on the .pem file if you get
       an error about that     remove all other users by disabling
       inheritance and give your user full control.
       also, the example script shallownet_animals.py is the one that has
       the fit_transform issue (ticket # 301) so you   ll get an error
       message if you run that.
       [104]reply
          + adrian rosebrock march 19, 2018 at 6:12 pm [105]#
            thanks for sharing, scott. additionally, i have a fix ready
            for the shallownet_animals.py example that i   ll be releasing
            in the next 48-72 hours.
            [106]reply
   17. scott march 19, 2018 at 8:11 pm [107]#
       instructions for anyone who wants to setup jupyter notebook to have
       an easier graphic interface to run code:
       1) ssh into your instance
       2) workon dl4cv
       3) pip install jupyter
       4) exit
       5) ssh back into your instance but this time add this:
       -l 8000:localhost:8888
       this will forward any commands from your machine   s port 8000 to
       your ec2 port 8888, which jupyter will run on by default.
       so full command looks like:
       ssh -i [yourprivatekey].pem -l 8000:localhost:8888
       ubuntu@[youripaddress]
       (probably could just add this to #1 and skip exit/ssh reconnect     i
       didn   t verify)
       6) once you have reconnected, run:
       workon dl4cv
       jupyter notebook    no-browser
       this should startup jupyter notebook server on port 8888. copy the
       token in the url listed in the terminal
       7) open a browser and go to localhost:8000. it should forward to
       jupyter if everything was setup correctly. paste the token where it
       asks.
       8) open up sb_code directory and pick a chapter to test. create a
       notebook in the chapter directory
       9) add    %matplotlib inline    to the top so plots show up inline
       10) remove any command line argument code and set variables
       manually or you   ll get an error
       11) run your scripts!
       [108]reply
          + adrian rosebrock march 20, 2018 at 5:43 am [109]#
            awesome! thanks for sharing this scott. it will be a big help
            to the community.
            [110]reply
   18. christoph viehoff march 26, 2018 at 6:12 pm [111]#
       has this error been addressed yet. it appears while running the
       shallownet_animals.py script from chapter 12
       call    fit    with appropriate arguments before using this method
       [112]reply
          + adrian rosebrock march 26, 2018 at 6:57 pm [113]#
            yep! that was addressed in the v1.2.1 release (see the dl4cv
            companion website). the gist is that you can change .fit to
            .fit_transform and it will work.
            [114]reply
   19. lenni april 20, 2018 at 4:13 pm [115]#
       i solved the issue:
       > git checkout fad6075359b852b9c0a4c6f1b068790d44a6441a
       > protoc object_detection/protos/*.proto    python_out=.
       then everything was working fine.
       [116]reply
          + adrian rosebrock april 25, 2018 at 6:21 am [117]#
            congrats on resolving the issue lenni and thank you for
            sharing the solution     
            [118]reply
   20. nish may 4, 2018 at 3:54 am [119]#
       hi adrian,
       just wanted to drop a note of thanks for the amazon aws ami you
       have created. it works like a charm and i would recommend everyone
       to use it.
       i encountered countless issues with other amis from software
       companies such as bitfusion, etc. something as basic as what they
       promise is not delivered like a working cuda installation etc. and
       when you contact them, they really dont care if you are a free
       customer (which is ideally fine cause as a customer we are not
       paying them). their turnaround time reflects 4 weeks     omg! and a
       big haha!
       but really     after two months of going through these weakly
       designed amis, i finally got renewed interest that id161
       on gpus can be less complicated if someone just sat down and figure
       it out.
       for this     a big thanks.
       [120]reply
          + adrian rosebrock may 9, 2018 at 10:31 am [121]#
            thank you nish, i really appreciate your kind words     
            [122]reply
   21. miguelxim may 22, 2018 at 10:18 am [123]#
       i just wanted to say thank you very much for this good tutorial and
       for the offering the instance, i   ll buy your book:)
       regards.
       [124]reply
          + adrian rosebrock may 23, 2018 at 7:21 am [125]#
            thank you for the kind words, i really appreciate that      enjoy
            the book and if you have any questions just let me know.
            [126]reply
   22. anirban ghosh may 27, 2018 at 11:52 am [127]#
       sir,
       thanks for the tutorial on setting up of aws account. i am using a
       windows pc , making it difficult to ssh into the aws account.
       finally, figured that i need git-bash. now i am able to ssh into my
       account and have also checked that all deep learning libraries as
       per your book dl4cv are available in the instance.
       my question is when i try to upload the sb code to the instance by
       using the following command $ scp -i key.pem:
       \users\anirban\desktop\dl4cv\dl4cv\sb_code.zip ubuntu@ from the git
       terminal i get an error port 22: connection refused. the key.pem is
       on my desktop and the pwd is my desktop.
       what could be the error on my part as i tried to copy the file
       after logging into aws account it says key.pem not available.
       regards,
       anirban ghosh
       [128]reply
          + anirban ghosh may 27, 2018 at 1:08 pm [129]#
            figured it out, needed winscp to transfer the files, thanks
            anyways. anirban ghosh
            [130]reply
               o adrian rosebrock may 28, 2018 at 9:38 am [131]#
                 congrats on resolving the issue, anirban!
                 [132]reply
   23. wim valcke may 27, 2018 at 2:54 pm [133]#
       i tried it and it works perfectly, thanks adrian for setting this
       up. does someone know how the 16 gig disk capacity is charged? do
       we pay only for the storage if the instance is running or is this
       not the case ?
       [134]reply
          + adrian rosebrock may 28, 2018 at 9:37 am [135]#
            1. are you trying to increase or decrease the size of the
            disk?
            2. yes, you will pay for the storage if the machine is powered
            down. the storage costs though are incredibly cheap. the exact
            pricing would be based on the volume type that you are using.
            amazon   s pricing can be a bit confusing if you are new to it
            so if you find yourself confused about your bill or what you
            are being charged for make sure you contact amazon. their
            support is normally quite good.
            [136]reply
               o wim valcke june 2, 2018 at 3:56 pm [137]#
                 hi adrian,
                 thanks for your reply, i could increase the storage size
                 to 20gb, i did not even needed to resize the linux ext4
                 fs, it was already done when i booted the instance after
                 the resize of the volume.
                 nice work from aws. thanks again for setting this aws
                 instance up for your deep learning book readers!
                 [138]reply
   24. christian june 2, 2018 at 10:48 am [139]#
       can you explain whats the advantage from this virtual machine over
       the official aws deep learning ami? i saw than i can use it
       directly out of my aws account.
       [140]reply
          + adrian rosebrock june 5, 2018 at 8:05 am [141]#
            the vm can only be executed locally on your machine. the vm
            can also not access your gpu and is slow, comparatively. using
            the ami you can spin up an instance with access to 1-8 gpus.
            [142]reply
   25. anirban june 10, 2018 at 2:32 am [143]#
       dear sir,
       i started using the amazon web services last week to run my
       experiments from the dl4cv course. to understand the way aws work,
       i started with the free tier service.
       i uploaded my starter bundle codes to the cloud. i worked on the
       experiment from chap 8 of sb bundle    parameterised learning   . it
       ran perfectly. but i am facing two issues :
       1. once i close the instance and come out of it and later when i
       re-ssh into it i do not find the folder sb_code anymore. do you
       upload your files each time you do your projects? i find uploading
       400 mb -500 mb files(from practitioner bundle) each time i run an
       instance is very cumbersome given the slow internet speed.
       2. i ran the experiment given in chapter 8 parameterized learning
       and am getting the following error :
       ubuntu@ip-172-31-16-220:~/chapter08-parameterized_learning$ workon
       dl4cv
       (dl4cv) ubuntu@ip-172-31-16-220:~/chapter08-parameterized_learning$
       python linear_example.py
       >>>
       [info] dog: 7963.93
       [info] cat: -2930.99
       [info] panda: 3362.47
                                     
       (image 2827) gtk-warning **: cannot open display:
       failed to connect to mir: failed to connect to server socket: no
       such file or directory
       unable to init server: could not connect: connection refused.
       why is the virtual machine in the cloud not showing the image as it
       normally shows on my desktop? is it that i cannot see how my
       program run on cloud and for that i need to use my desktop only.
       sorry for the long question , would really appreciate your answer
       on this.
       regards,
       anirban ghosh
       [144]reply
          + adrian rosebrock june 13, 2018 at 6:01 am [145]#
            1. did you shutdown the instance? or terminate it? if you
            simply shut it down your data should kept but if you terminate
            it your data and the instance will be destroyed. you may have
            uploaded your data to the [146]ephemeral storage drive which
            is not persistent across reboots. if you are running out of
            room on your main drive you should resize it.
            2. make sure you enable x11 forwarding:
            $ ssh -x user@ip_address
            but keep in mind that the latency is going to be quite high. i
            would suggest replacing all cv2.imshow calls with cv2.imwrite
            and then downloading the output images from the server to
            investigate them locally.
            [147]reply
   26. vikas july 5, 2018 at 7:17 am [148]#
       hi adrian,
       thanks for great article.
       is there a way for you to share the steps you took to build aws ami
       from scratch for your book?
       i.e. what all libraries(and versions), you installed and how?
       i have a situation where i have access to aws but not your
       preconfigured machine so i would have to build it from scratch to
       practice things you mentioned in your book.
       thanks,
       vik
       [149]reply
          + adrian rosebrock july 10, 2018 at 9:08 am [150]#
            totally. i documented the process and instructions [151]this
            post.
            [152]reply
   27. hugo flick september 11, 2018 at 1:49 pm [153]#
       hello adrian,
       quick question : is opencv installed with cuda support on the
       instance ?
       thanks a lot
       hugo
       [154]reply
          + adrian rosebrock september 12, 2018 at 2:11 pm [155]#
            no, i did not compile opencv with cuda support in this
            instance as it depending on which instance you were using you
            would need to re-compile opencv if the drivers needed to be
            re-installed.
            [156]reply
               o hugo september 18, 2018 at 10:33 am [157]#
                 roger that, thank you adrian     
                 [158]reply
   28. alex october 7, 2018 at 10:31 am [159]#
       how can we save this environment to re-use after terminating the
       instance?
       [160]reply
          + adrian rosebrock october 8, 2018 at 9:36 am [161]#
            just power off the instance and it will be saved. if you
               terminate    it then the instance will be deleted. but if you
            simply power it off it will persist.
            [162]reply
   29. george october 18, 2018 at 11:15 pm [163]#
       hi adrian,
       first, thanks for sharing your work with us. i have purchased your
       book and ran shallownet_animals.py and it was remarkably fast. in
       comparison to about two minutes here, the jurassic park demo, with
       fewer images, took about two hours using dlib and a id98 on my
       macbook pro.
       thanks again for your great work.
       george
       [164]reply
          + adrian rosebrock october 20, 2018 at 7:33 am [165]#
            thank you george for picking up a copy of dl4cv, george! i   m
            happy to hear you   re enjoying the book and python scripts thus
            far. always feel free to reach out if you have any questions     
            [166]reply
   30. steff kelsey october 23, 2018 at 11:19 am [167]#
       this is pretty cool! i have found it useful for training with
       tensorflow. i wish opencv was built with tbb support! if i have
       time, i   ll create an updated ami.
       [168]reply
   31. david jung november 21, 2018 at 8:43 pm [169]#
       thank you adrian for your great work. i got a lot of help from this
       article. i   ve successfully made my instance of my own. and i found
       that using aws app with an ssh client app is extremely useful.
       [170]reply
          + adrian rosebrock november 25, 2018 at 9:37 am [171]#
            thanks david     
            [172]reply
   32. david fraser january 13, 2019 at 6:23 am [173]#
       hi adrian,
       i   m trying to follow these instructions for a p2.xlarge instance
       but seem to have a problem at step 3. when i list the contents of
       the installers directory i only have one file:
       cuda_9.0.176_384.81_linux-run.
       so when i cd into    installers    and run    sudo
       ./nvidia-linux-x86_64-375.26.run    silent    i get a command not found
       error.
       any ideas why this might be?
       [174]reply
          + adrian rosebrock january 16, 2019 at 10:08 am [175]#
            see my reply to [176]gabe.
            [177]reply
   33. gabe january 14, 2019 at 11:32 am [178]#
       i have just launched the v2.1 ami on a gpu instance (p2.xlarge),
       and i   m trying to follow the directions in this article to get
       setup. i   m looking at step #3 (re-installing nvidia deep learning
       driver), and wondering if this section is still relevant for ami
       2.1? the contents of the installers directory don   t match the
       article (directory only contains cuda 9.0 installer), and running
       nvidia-smi tells me it   s running nvidia driver 396.54. do we still
       need to re-install the nvidia driver on ami v2.1?
       [179]reply
          + adrian rosebrock january 16, 2019 at 9:49 am [180]#
            thanks for catching that gabe. you no longer need to reinstall
            the drivers each time. they will work correctly on first book.
            i   ll get that section updated.
            [181]reply
   34. bob o'donnell february 12, 2019 at 12:51 pm [182]#
       adrian,
       working my way through the sb and pb versions, and ran into a
       couple of nits, then hit a wall.
       when i got the instance spun up, importing keras just turned the
       screen blank, and returned an error about not being able to load
          layers   .
       when transferring the zip files, i missed the instructions to swap
       back to my own command line and struggled with it for a while. a
       screenshot like the other commands would be most helpful.
       you instructions use lower case for the zip file names, but mine
       came with upper, so you cannot copy and paste the commands.
       finally, i ran the commands from the virtual environment for
       animals, and got
       file
          /home/ubuntu/.virtualenvs/dl4cv/lib/python3.6/site-packages/sklear
       n/preprocessing/label.py   , line 410, in fit
       raise valueerror(   y has 0 samples: %r    % y)
       valueerror: y has 0 samples: array([], dtype=float64)
       otherwise lovin    it. it is clear, the vast majority of the times it
       does not work, it has been my fat-fingering rather than your code
       or instructions, and when i find an actual issue, the response is
       fast and helpful!
       [183]reply
          + adrian rosebrock february 14, 2019 at 1:06 pm [184]#
            hi bob     i would be happy to address any questions or errors
            but i would need to see the exact errors. from what you   ve
            told me most of the time it sounds like it   s an issue with
            your file paths.
            for example, the    valueerror    is 99.9% likely that you did not
            supply the correct path to the input dataset (implying that no
            image paths were found in the input directory). since there
            are no input images there is nothing for keras to train on
            (hence the error).
            i   m honestly not sure about the uppercase versus lowercase
            filenames     i always name my scripts with lowercase
            characters. if you could share a screenshot i could take a
            look at that is well.
            i   m glad to hear you are enjoying dl4cv     
            [185]reply

trackbacks/pingbacks

    1. [186]my review of microsoft   s data science virtual machine (did166)
       for deep learning - pyimagesearch - march 21, 2018
       [   ] i was a bit hesitant (and perhaps even a bit resistant) to
       giving it a try     i already have a pre-configured amazon aws deep
       learning ami that (1) i use often and (2) is publicly available to
       any pyimagesearch reader who wants to utilize [   ]

leave a reply [187]click here to cancel reply.

   comment
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________

   ______________________________name (required)

   ______________________________email (will not be published) (required)

   ______________________________website

   submit comment

   search...___________ (search)

resource guide (it   s totally free).

   [188]get your free 17-page id161 and deep learning resource
   guide pdf

   get your free 17 page id161, opencv, and deep learning
   resource guide pdf. inside you'll find my hand-picked tutorials, books,
   courses, and libraries to help you master cv and dl.

                           [189]download for free!

deep learning for id161 with python book     out now!

   [190]deep learning with id161 and python kickstarter

   you're interested in deep learning and id161, but you don't
   know how to get started. let me help. [191]my new book will teach you
   all you need to know about deep learning.

   click here to master deep learning

you can detect faces in images & video.

   [192]learn how to detect faces in images and video

   are you interested in detecting faces in images & video? but tired of
   googling for tutorials that never work? then let me help! i guarantee
   that my new book will turn you into a face detection ninja by the end
   of this weekend. [193]click here to give it a shot yourself.

   click here to master face detection

pyimagesearch gurus: now enrolling!

   the pyimagesearch gurus course is now enrolling! inside the course
   you'll learn how to perform:
     * automatic license plate recognition (anpr)
     * deep learning
     * face recognition
     * and much more!

   click the button below to learn more about the course, take a tour, and
   get 10 (free) sample lessons.

   take a tour & get 10 (free) lessons

hello! i   m adrian rosebrock.

   i'm an entrepreneur and ph.d who has launched two successful image
   search engines, [194]id my pill and [195]chic engine. i'm here to share
   my tips, tricks, and hacks i've learned along the way.

learn id161 in a single weekend.

   [196]become an opencv guru

   want to learn id161 & opencv? i can teach you in a single
   weekend. i know. it sounds crazy, but it   s no joke. my new book is your
   guaranteed, quick-start guide to becoming an opencv ninja. so why not
   give it a try? [197]click here to become a id161 ninja.

   click here to become an opencv ninja

subscribe via rss

   [198]pyimagesearch rss feed

   never miss a post! subscribe to the pyimagesearch rss feed and keep up
   to date with my image search engine tutorials, tips, and tricks
     * [199]popular

     * [200]raspbian stretch: install opencv 3 + python on your raspberry
       pi september 4, 2017
     * [201]install guide: raspberry pi 3 + raspbian jessie + opencv 3
       april 18, 2016
     * [202]home surveillance and motion detection with the raspberry pi,
       python, opencv, and dropbox june 1, 2015
     * [203]install opencv and python on your raspberry pi 2 and b+
       february 23, 2015
     * [204]ubuntu 16.04: how to install opencv october 24, 2016
     * [205]real-time id164 with deep learning and opencv
       september 18, 2017
     * [206]basic motion detection and tracking with python and opencv may
       25, 2015

   find me on [207]twitter, [208]facebook, and [209]linkedin.

      2019 pyimagesearch. all rights reserved.

   [tr?id=1465896023527386&ev=pageview&noscript=1]

   [email]
   [email]

references

   1. http://feeds.feedburner.com/pyimagesearch
   2. https://www.pyimagesearch.com/comments/feed/
   3. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/feed/
   4. https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/
   5. https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/&format=xml
   6. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#navigation
   7. https://www.pyimagesearch.com/
   8. https://www.pyimagesearch.com/
   9. https://www.pyimagesearch.com/
  10. https://www.pyimagesearch.com/start-here-learn-computer-vision-opencv/
  11. https://www.pyimagesearch.com/practical-python-opencv/
  12. https://www.pyimagesearch.com/pyimagesearch-gurus/
  13. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
  14. https://www.pyimagesearch.com/free-opencv-computer-vision-deep-learning-crash-course/
  15. https://www.pyimagesearch.com/about/
  16. https://www.pyimagesearch.com/contact/
  17. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#top
  18. https://www.pyimagesearch.com/author/adrian/
  19. https://www.pyimagesearch.com/category/deep-learning-2/
  20. https://www.pyimagesearch.com/category/dl4cv/
  21. https://www.youtube.com/watch?time_continue=1703&v=thiajdh_tvq
  22. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  23. https://aws.amazon.com/
  24. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  25. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  26. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  27. https://www.pyimagesearch.com/tag/amazon/
  28. https://www.pyimagesearch.com/tag/deep-learning/
  29. https://www.pyimagesearch.com/tag/dl4cv/
  30. https://www.pyimagesearch.com/tag/ec2/
  31. https://www.pyimagesearch.com/tag/python/
  32. https://www.pyimagesearch.com/tag/virtual-environments/
  33. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/
  34. https://www.pyimagesearch.com/2017/09/22/deep-learning-python-ubuntu-virtual-machine/
  35. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-435348
  36. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-435348
  37. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-435366
  38. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-435366
  39. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-446452
  40. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-446452
  41. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-446528
  42. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-446528
  43. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-435588
  44. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-435588
  45. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-435738
  46. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-435738
  47. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-436128
  48. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-436128
  49. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-436129
  50. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-436129
  51. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-436247
  52. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-436247
  53. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-437635
  54. https://www.pyimagesearch.com/2015/05/11/creating-a-face-detection-api-with-python-and-opencv-in-just-5-minutes/
  55. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-437635
  56. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-437745
  57. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-437745
  58. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-438136
  59. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-438136
  60. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-438147
  61. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-438147
  62. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-438286
  63. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-438286
  64. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-438988
  65. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-438988
  66. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-439275
  67. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  68. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-439275
  69. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-438994
  70. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-438994
  71. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-439272
  72. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-439272
  73. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-441539
  74. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-441539
  75. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-441591
  76. https://www.pyimagesearch.com/2017/09/27/setting-up-ubuntu-16-04-cuda-gpu-for-deep-learning-with-python/
  77. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-441591
  78. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-447110
  79. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-447110
  80. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-447231
  81. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-447231
  82. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-447340
  83. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-447340
  84. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-447346
  85. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-447346
  86. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-448259
  87. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-448259
  88. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-448261
  89. https://blogs.technet.microsoft.com/machinelearning/2018/01/18/deep-learning-computer-vision-in-the-microsoft-azure-cloud/
  90. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-448261
  91. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-450062
  92. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-450062
  93. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-450101
  94. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-450101
  95. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-450242
  96. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-450242
  97. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-450570
  98. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-450570
  99. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-453192
 100. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-453192
 101. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-453610
 102. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-453610
 103. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-453623
 104. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-453623
 105. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-453628
 106. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-453628
 107. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-453640
 108. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-453640
 109. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-453678
 110. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-453678
 111. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-454292
 112. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-454292
 113. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-454295
 114. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-454295
 115. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-457684
 116. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-457684
 117. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-458634
 118. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-458634
 119. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-459858
 120. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-459858
 121. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-460692
 122. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-460692
 123. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-463412
 124. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-463412
 125. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-463648
 126. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-463648
 127. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-464687
 128. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-464687
 129. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-464705
 130. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-464705
 131. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-464928
 132. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-464928
 133. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-464726
 134. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-464726
 135. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-464925
 136. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-464925
 137. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-466466
 138. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-466466
 139. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-466409
 140. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-466409
 141. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-467050
 142. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-467050
 143. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-467621
 144. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-467621
 145. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-467995
 146. https://stackoverflow.com/questions/11566223/what-data-is-stored-in-ephemeral-storage-of-amazon-ec2-instance
 147. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-467995
 148. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-470109
 149. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-470109
 150. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-470629
 151. https://www.pyimagesearch.com/2017/09/27/setting-up-ubuntu-16-04-cuda-gpu-for-deep-learning-with-python/
 152. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-470629
 153. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-477569
 154. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-477569
 155. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-477757
 156. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-477757
 157. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-478864
 158. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-478864
 159. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-481038
 160. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-481038
 161. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-481161
 162. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-481161
 163. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-483170
 164. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-483170
 165. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-483298
 166. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-483298
 167. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-483713
 168. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-483713
 169. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-488394
 170. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-488394
 171. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-489035
 172. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-489035
 173. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-496116
 174. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-496116
 175. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-496677
 176. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-496335
 177. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-496677
 178. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-496335
 179. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-496335
 180. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-496657
 181. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-496657
 182. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-500971
 183. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-500971
 184. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-501310
 185. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#comment-501310
 186. https://www.pyimagesearch.com/2018/03/21/my-review-of-microsofts-deep-learning-virtual-machine/
 187. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#respond
 188. https://app.monstercampaigns.com/c/mdoijtrmex7bpm0rp2hn/
 189. https://app.monstercampaigns.com/c/mdoijtrmex7bpm0rp2hn/
 190. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 191. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 192. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection
 193. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection
 194. http://www.idmypill.com/
 195. http://www.chicengine.com/
 196. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend
 197. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend
 198. http://feeds.feedburner.com/pyimagesearch
 199. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/#tab-pop
 200. https://www.pyimagesearch.com/2017/09/04/raspbian-stretch-install-opencv-3-python-on-your-raspberry-pi/
 201. https://www.pyimagesearch.com/2016/04/18/install-guide-raspberry-pi-3-raspbian-jessie-opencv-3/
 202. https://www.pyimagesearch.com/2015/06/01/home-surveillance-and-motion-detection-with-the-raspberry-pi-python-and-opencv/
 203. https://www.pyimagesearch.com/2015/02/23/install-opencv-and-python-on-your-raspberry-pi-2-and-b/
 204. https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/
 205. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/
 206. https://www.pyimagesearch.com/2015/05/25/basic-motion-detection-and-tracking-with-python-and-opencv/
 207. https://twitter.com/pyimagesearch
 208. https://www.facebook.com/pyimagesearch
 209. http://www.linkedin.com/pub/adrian-rosebrock/2a/873/59b
