   #[1]rss

[2]thiago marzag  o

   data, code, etc

     * [3]home
     * [4]about
     * [5]publications
     * [6]code
     * [7]talks & slides
     * [8]teaching
     * [9]committees
     * [10]resources
     * [11]index

webscraping with selenium - part 1

   12 nov 2013

   if you are webscraping with python chances are that you have already
   tried urllib, httplib, requests, etc. these are excellent libraries,
   but some websites don   t like to be webscraped. in these cases you may
   need to disguise your webscraping bot as a human being. selenium is
   just the tool for that. selenium is a webdriver: it takes control of
   your browser, which then does all the work. hence what the website
      sees    is chrome or firefox or ie; it does not see python or selenium.
   that makes it a lot harder for the website to tell your bot from a
   human being.

   in this tutorial i will show you how to webscrape with selenium. this
   first post covers the basics: locating html elements and interacting
   with them. later posts will cover things like downloading, error
   handling, dynamic names, and mass webscraping.

   there are selenium bindings for python, java, c#, ruby, and javascript.
   all the examples in this tutorial will be in python, but translating
   them to those other languages is trivial.

   installing selenium

   to install the selenium bindings for python, simply use pip:
pip install selenium

   you also need a    driver   , which is a small program that allows selenium
   to, well,    drive    your browser. this driver is browser-specific, so
   first we need to choose which browser we want to use. for now we will
   use chrome (later we will switch to phantomjs). download the latest
   version of the [12]chromedriver, unzip it, and note where you saved the
   unzipped file.

   choosing our target

   in this tutorial we will webscrape [13]lexisnexis academic. it   s a
   gated database but you are probably in academia (just a guess) so you
   should have access to it through your university.

   (obs.: lexisnexis academic is set to have a new interface starting
   december 23rd, so if you are in the future the code below may not work.
   it will still help you understand selenium though. and adapting it to
   the new lexisnexis interface will be a nice learning exercise.)

   opening a webpage

   now on to coding. first we start the webdriver:
from selenium import webdriver

path_to_chromedriver = '/users/yourname/desktop/chromedriver' # change path as n
eeded
browser = webdriver.chrome(executable_path = path_to_chromedriver)

   when you run this code you   ll see a new instance of chrome magically
   launch.

   now let   s open the page we want:
url = 'https://www.lexisnexis.com/hottopics/lnacademic/?verb=sf&amp;sfi=ac00nbge
nsrch'
browser.get(url)

   the page looks like this:

   locating page elements

   before we fill out forms and click buttons we need to locate these
   elements. this step is going to be easier if you know some html but
   that is not a pre-requisite (you will end up learning some html
   on-the-fly as you do more and more webscraping).

   a page element usually has a few attributes - a name, an id, a css
   selector, an xpath, etc. (don   t worry if you   ve never heard of these
   things before.) we can use these attributes to help us locate the
   element we want.

   how can we find what these attributes are for a given element? simple:
   just right-click it and choose    inspect element   . your browser will
   then show you the corresponding html code. for instance, if you do this
   with the    search terms    form on the page we opened above you   ll see
   something like this:

   the html code of the element you selected appears highlighted in blue.
   let me copy and paste it below, so you can have a better look at it:
<textarea id="terms" style="vertical-align: top;" name="terms"></textarea>

   ha! now we know two attributes of the    search terms    form: its name is
      terms    and its id is (also)    terms   .

   we are not ready to locate the element though. html pages usually
   contain multiple    frames    and our element is probably inside one of
   these frames. we need to know which one. to find out, start on that
   blue-highlighted line we saw before and keep scrolling up until you
   find <frame. you   ll eventually find this line:
<frame src="" name="mainframe" id="mainframe" title="mainframe">

   that means our    search terms    form is inside a frame named    mainframe   .
   now keep scrolling up to see if    mainframe    is inside some other frame.
   here it is not, but that is always a possibility and you need to check.

   the next thing we do is go to that frame. here is how we do it:
browser.switch_to_frame('mainframe')

   once we are on the correct frame we can finally search for the element.
   let   s search it using its id:
browser.find_element_by_id('terms')

   and that   s it. we have located the element.

   see the beauty?

   as the code above shows, selenium is very intuitive. to switch frames
   we use switch_to_frame. to find an element by its id we use
   find_element_by_id. and so on.

   another great feature of selenium is that it   s very similar across all
   languages it supports. in java, for instance, this is how we switch
   frames and find elements by id:
browser.switchto().frame("framename");
browser.findelement(by.id("elementid"));

   so even if you first learn selenium in python it   s very easy to use it
   in other languages later.

   interacting with page elements

   now that we   ve found the    search terms    form we can interact with it.
   first we want to make sure that the form is empty:
browser.find_element_by_id('terms').clear()

   now we can write on the form. here we are interested in all occurrences
   of the word    balloon    in the news today. we start by writing    balloon   
   on the form:
browser.find_element_by_id('terms').send_keys('balloon')

   next we need to specify the date. there is a    specify date    drop-down
   menu. let us locate it. as usual we start by right-clicking the element
   and selecting    inspect element   . that gives us the following html code:
<select class="input" id="dateselector1" style="vertical-align: top;" name="date
selector1">
  <option value="">all available dates</option>
  <option value="0:dy">today</option>
  <option value="is">date is   </option>
  <option value="before">date is before   </option>
  <option value="after">date is after   </option>
  <option value="from">date is between   </option>
  <option value="1:wk">previous week</option>
  <option value="1:mo">previous month</option>
  <option value="3:mo">previous 3 months</option>
  <option value="6:mo">previous 6 months</option>
  <option value="1:yr">previous year</option>
  <option value="2:yr">previous 2 years</option>
  <option value="5:yr">previous 5 years</option>
  <option value="previous">previous   </option></select>

   we can see the element   s name and id but here we will use neither. this
   is a drop-down menu and we will need to select one of its options (   all
   available dates   ,    today   , etc), so here we will use the element   s
   xpath. how do you get it? we are using chrome here, so this is really
   simple: we just right-click the blue-highlighted line that corresponds
   to the element   s html code and select    copy xpath   . like this:

   that gives us the following xpath:
//*[@id="dateselector1"]

   now, as usual, scroll up from the blue-highlighted line until you find
   out which frame contains the element. here that is the same frame of
      search terms    (i.e.,    mainframe   ), so we are already there, no need to
   move.

   if all we wanted were to locate the element, we would do this:
browser.find_element_by_xpath('//*[@id="dateselector1"]')

   but we want to open that drop-down menu and select    today   . so we do
   this instead:
browser.find_element_by_xpath('//*[@id="dateselector1"]/option[contains(text(),
"today")]').click()

   now we   ve entered our search term (balloon) and selected our date
   (today). next we need to select our news sources. that   s another
   drop-down menu, a bit further down the page. you know the drill:
   right-click the element, retrieve relevant attributes, scroll up to
   find out the frame. there isn   t anything new to learn here (and we
   haven   t left    mainframe    yet), so i   ll just give you the code (let   s
   say we want to select all news sources in english):
browser.find_element_by_xpath('//*[@id="bytype"]/option[text()="all news (englis
h)"]').click()

   finally, we need to click the    search    button (next to the    search
   terms    form) to submit the search. same drill: right-click element, get
   attributes, scroll up to find frame. except that here there is no id or
   name:
<input type="submit" value="search" />

   so we need to use xpath again, even though this is not a drop-down
   menu:
browser.find_element_by_xpath('//*[@id="searchform"]/fieldset/ol/li[2]/span/span
/input').click()

   now that is one ugly-looking xpath. our code will look better if we use
   the element   s css selector instead:
browser.find_element_by_css_selector('input[type=\"submit\"]').click()

   i don   t know of any    copy-and-paste    way to get an element   s css
   selector, but if you stare at the line above long enough you can see
   how it derives from the element   s html code.

   that   s it. you should now see chrome leaving the search page and
   opening the results page.

   there is a lot more to cover, but that will have to wait.

   ([14]part 2)
   please enable javascript to view the [15]comments powered by disqus.

references

   visible links
   1. http://thiagomarzagao.com/atom.xml
   2. http://thiagomarzagao.com/
   3. http://thiagomarzagao.com/
   4. http://thiagomarzagao.com/about/
   5. http://thiagomarzagao.com/publications/
   6. http://thiagomarzagao.com/code/
   7. http://thiagomarzagao.com/talks & slides/
   8. http://thiagomarzagao.com/teaching/
   9. http://thiagomarzagao.com/committees/
  10. http://thiagomarzagao.com/resources/
  11. http://thiagomarzagao.com/index/
  12. http://chromedriver.storage.googleapis.com/index.html
  13. https://www.lexisnexis.com/hottopics/lnacademic/?verb=sf&sfi=ac00nbgensrch
  14. http://thiagomarzagao.com/2013/11/14/webscraping-with-selenium-part-2/
  15. https://disqus.com/?ref_noscript

   hidden links:
  17. http://imgur.com/fwbtcgo
  18. http://imgur.com/rmdpfyl
  19. http://imgur.com/cuiayci
