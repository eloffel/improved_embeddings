   #[1]rss

[2]thiago marzag  o

   data, code, etc

     * [3]home
     * [4]about
     * [5]publications
     * [6]code
     * [7]talks & slides
     * [8]teaching
     * [9]committees
     * [10]resources
     * [11]index

webscraping with selenium - part 3

   15 nov 2013

   in [12]part 2 we learned how to handle dynamic names and how to
   download content with selenium. here we will learn how to make our code
   robust to network flukes.

   handling errors

   when you run a regression multiple times the result is always be the
   same, provided that the data and code you are using are the same. you
   run it a million times and there it is, same result. in other words,
   the result is deterministic.

   with webscraping, however, the result is probabilistic. sometimes a
   page element doesn   t load properly. sometimes the servers are too busy
   to respond to a click. sometimes your own internet connection flickers
   for a millisecond. and so on.

   in lexisnexis, for instance, sometimes you get this:

   in these cases selenium will fail to find the elements you want and
   will crash. selenium will throw out error messages like
   nosuchelementexception or nosuchframeexception. if you   ve tried the
   code from parts 1 and 2 you may have encountered these errors already.
   it   s not that the code is wrong, it   s just that it is incomplete; we
   haven   t prepared it for network flukes. let   s do it now.

   one thing we can do is ensure that selenium waits for a few seconds
   before it gives up on finding elements. there are different ways to do
   that. first there is the implicit wait statement:
browser.implicitly_wait(30)

   this statement makes selenium wait up to 30 seconds before throwing an
   exception. you set the time limit once in your code and it is valid for
   the entire session.

   alternatively, you can set individual wait parameters for each action.
   to do that we first need to import a bunch of other stuff from the
   selenium bindings:
from selenium.webdriver.common.by import by
from selenium.webdriver.support.ui import webdriverwait
import selenium.webdriver.support.expected_conditions as ec
from selenium.common.exceptions import timeoutexception

   now suppose that we want to wait for up to two minutes before we
   declare an element    missing   . let   s say that the element is a button
   and that we know its css selector. we can do this:
some_object = webdriverwait(browser, 120).until(ec.element_to_be_located((by.css
_selector, 'img[alt=\"some button\"]')))

   selenium will look for the element every 500 milliseconds and, as soon
   as the element is found, the wait is over. if 120 seconds elapse and
   the element hasn   t been found, selenium throws a timeoutexception.

   you need to decide what to do about the timeoutexception. do you re-try
   a couple of times? do you go back to the search page and move on to the
   next search? that of course depends on your particular research needs.
   but whatever path you choose you want your code to handle that
   exception gracefully. in python that is done with try/except
   statements, like this:
try:
    some_object = webdriverwait(browser, 120).until(ec.element_to_be_located((by
.css_selector, 'img[alt=\"some button\"]')))
except timeoutexception:
    # do something (retry, move on, exit, curse your internet provider, etc)

   that way your code won   t crash when selenium throws a timeoutexception.
   it will do whatever is inside the except statement instead.

   here we used the element_to_be_located condition, but that is not
   always what we need. sometimes the element is located but cannot be
   interacted with (yet). selenium offers wait conditions for several
   different possibilites. for instance, sometimes the element is located
   but selenium crashes and the error message says that the element is not
   clickable. in that case we can do something like this:
try:
    some_object = webdriverwait(browser, 120).until(ec.element_to_be_clickable((
by.css_selector, 'img[alt=\"some button\"]')))
except timeoutexception:
    # do something

   the full gamut of wait conditions is [13]here.

   deciding what elements to (explicitly) wait for, with what conditions,
   and for how long is a trial-and-error process. run your code without
   any waits first and see where it crashes. add a wait condition for the
   problematic element, encapsulate the wait condition within a try/except
   statement, and run the code again. repeat until your code doesn   t crash
   anymore.

   this is often a frustrating process and you   ll need patience. you think
   that you   ve covered all the possibilities and your code runs for an
   entire week and you are all happy and celebratory and then on day #8
   the damn thing crashes. the servers went down for a millisecond or your
   netflix streaming clogged your internet connection or whatnot. it
   happens.

   it   s always a good idea to log errors. you can create a log file in the
   beginning of your code, like this:
path_to_log = '/users/yourname/desktop/'
log_errors = open(path_to_log + 'log_errors.txt', mode = 'w')

   and then add an entry to that file every time you get a
   timeoutexception:
try:
    some_object = webdriverwait(browser, 120).until(ec.element_to_be_located((by
.css_selector, 'img[alt=\"some button\"]')))
except timeoutexception:
    log_errors.write('couldnt locate button xyz when searching for "balloon"' +
'\n')
    # do something

   once your code has finished running you can inspect the log file and
   see what searches you need to re-do.

   ([14]part 4)
   please enable javascript to view the [15]comments powered by disqus.

references

   visible links
   1. http://thiagomarzagao.com/atom.xml
   2. http://thiagomarzagao.com/
   3. http://thiagomarzagao.com/
   4. http://thiagomarzagao.com/about/
   5. http://thiagomarzagao.com/publications/
   6. http://thiagomarzagao.com/code/
   7. http://thiagomarzagao.com/talks & slides/
   8. http://thiagomarzagao.com/teaching/
   9. http://thiagomarzagao.com/committees/
  10. http://thiagomarzagao.com/resources/
  11. http://thiagomarzagao.com/index/
  12. http://thiagomarzagao.com/2013/11/14/webscraping-with-selenium-part-2/
  13. http://selenium.googlecode.com/svn/trunk/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html
  14. http://thiagomarzagao.com/2013/11/16/webscraping-with-selenium-part-4/
  15. https://disqus.com/?ref_noscript

   hidden links:
  17. http://imgur.com/wcrhdgj
