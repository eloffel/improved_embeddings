10. analyzing the meaning of sentences

   we have seen how useful it is to harness the power of a computer to
   process text on a large scale. however, now that we have the machinery
   of parsers and feature based grammars, can we do anything similarly
   useful by analyzing the meaning of sentences? the goal of this chapter
   is to answer the following questions:
    1. how can we represent natural language meaning so that a computer
       can process these representations?
    2. how can we associate meaning representations with an unlimited set
       of sentences?
    3. how can we use programs that connect the meaning representations of
       sentences to stores of knowledge?

   along the way we will learn some formal techniques in the field of
   logical semantics, and see how these can be used for interrogating
   databases that store facts about the world.

1   natural language understanding

1.1   querying a database

   suppose we have a program that lets us type in a natural language
   question and gives us back the right answer:

   (1)

   a. which country is athens in?

   b. greece.

   how hard is it to write such a program? and can we just use the same
   techniques that we've encountered so far in this book, or does it
   involve something new? in this section, we will show that solving the
   task in a restricted domain is pretty straightforward. but we will also
   see that to address the problem in a more general way, we have to open
   up a whole new box of ideas and techniques, involving the
   representation of meaning.

   so let's start off by assuming that we have data about cities and
   countries in a structured form. to be concrete, we will use a database
   table whose first few rows are shown in [1]1.1.

   note

   the data illustrated in [2]1.1 is drawn from the chat-80 system
   [3](warren & pereira, 1982). population figures are given in thousands,
   but note that the data used in these examples dates back at least to
   the 1980s, and was already somewhat out of date at the point when
   [4](warren & pereira, 1982) was published.
      city       country     population
   athens     greece         1368
   bangkok    thailand       1178
   barcelona  spain          1280
   berlin     east_germany   3481
   birmingham united_kingdom 1112

   table 1.1:

   city_table: a table of cities, countries and populations

   the obvious way to retrieve answers from this tabular data involves
   writing queries in a database query language such as sql.

   note

   sql (structured query language) is a language designed for retrieving
   and managing data in id208. if you want to find out more
   about sql, http://www.w3schools.com/sql/ is a convenient online
   reference.

   for example, executing the query [5](2) will pull out the value
   'greece':

   (2) select country from city_table where city = 'athens'

   this specifies a result set consisting of all values for the column
   country in data rows where the value of the city column is 'athens'.

   how can we get the same effect using english as our input to the query
   system? the feature-based grammar formalism described in [6]9. makes it
   easy to translate from english to sql. the grammar sql0.fid18
   illustrates how to assemble a meaning representation for a sentence in
   tandem with parsing the sentence. each phrase structure rule is
   supplemented with a recipe for constructing a value for the feature
   sem. you can see that these recipes are extremely simple; in each case,
   we use the string concatenation operation + to splice the values for
   the child constituents to make a value for the parent constituent.

>>> nltk.data.show_id18('grammars/book_grammars/sql0.fid18')
% start s
s[sem=(?np + where + ?vp)] -> np[sem=?np] vp[sem=?vp]
vp[sem=(?v + ?pp)] -> iv[sem=?v] pp[sem=?pp]
vp[sem=(?v + ?ap)] -> iv[sem=?v] ap[sem=?ap]
np[sem=(?det + ?n)] -> det[sem=?det] n[sem=?n]
pp[sem=(?p + ?np)] -> p[sem=?p] np[sem=?np]
ap[sem=?pp] -> a[sem=?a] pp[sem=?pp]
np[sem='country="greece"'] -> 'greece'
np[sem='country="china"'] -> 'china'
det[sem='select'] -> 'which' | 'what'
n[sem='city from city_table'] -> 'cities'
iv[sem=''] -> 'are'
a[sem=''] -> 'located'
p[sem=''] -> 'in'

   this allows us to parse a query into sql.

>>> from nltk import load_parser
>>> cp = load_parser('grammars/book_grammars/sql0.fid18')
>>> query = 'what cities are located in china'
>>> trees = list(cp.parse(query.split()))
>>> answer = trees[0].label()['sem']
>>> answer = [s for s in answer if s]
>>> q = ' '.join(answer)
>>> print(q)
select city from city_table where country="china"

   note

   your turn: run the parser with maximum tracing on, i.e., cp =
   load_parser('grammars/book_grammars/sql0.fid18', trace=3), and examine
   how the values of sem are built up as complete edges are added to the
   chart.

   finally, we execute the query over the database city.db and retrieve
   some results.

>>> from nltk.sem import chat80
>>> rows = chat80.sql_query('corpora/city_database/city.db', q)
>>> for r in rows: print(r[0], end=" ") [7] [1]
canton chungking dairen harbin kowloon mukden peking shanghai sian tientsin

   since each row r is a one-element tuple, we print out the member of the
   tuple rather than tuple itself [8][1] .

   to summarize, we have defined a task where the computer returns useful
   data in response to a natural language query, and we implemented this
   by translating a small subset of english into sql. we can say that our
   nltk code already "understands" sql, given that python is able to
   execute sql queries against a database, and by extension it also
   "understands" queries such as what cities are located in china. this
   parallels being able to translate from dutch into english as an example
   of natural language understanding. suppose that you are a native
   speaker of english, and have started to learn dutch. your teacher asks
   if you understand what [9](3) means:

   (3) margrietje houdt van brunoke.

   if you know the meanings of the individual words in [10](3), and know
   how these meanings are combined to make up the meaning of the whole
   sentence, you might say that [11](3) means the same as margrietje loves
   brunoke

   an observer     let's call her olga     might well take this as evidence
   that you do grasp the meaning of [12](3). but this would depend on olga
   herself understanding english. if she doesn't, then your translation
   from dutch to english is not going to convince her of your ability to
   understand dutch. we will return to this issue shortly.

   the grammar sql0.fid18, together with the nltk earley parser, is
   instrumental in carrying out the translation from english to sql. how
   adequate is this grammar? you saw that the sql translation for the
   whole sentence was built up from the translations of the components.
   however, there does not seem to be a lot of justification for these
   component meaning representations. for example, if we look at the
   analysis of the noun phrase which cities, the determiner and noun
   correspond respectively to the sql fragments select and city from
   city_table. but neither of these have a well-defined meaning in
   isolation from the other.

   there is another criticism we can level at the grammar: we have
   "hard-wired" an embarrassing amount of detail about the database into
   it. we need to know the name of the relevant table (e.g., city_table)
   and the names of the fields. but our database could have contained
   exactly the same rows of data yet used a different table name and
   different field names, in which case the sql queries would not be
   executable. equally, we could have stored our data in a different
   format, such as xml, in which case retrieving the same results would
   require us to translate our english queries into an xml query language
   rather than sql. these considerations suggest that we should be
   translating english into something that is more abstract and generic
   than sql.

   in order to sharpen the point, let's consider another english query and
   its translation:

   (4)

   a. what cities are in china and have populations above 1,000,000?

   b. select city from city_table where country = 'china' and population >
   1000

   note

   your turn: extend the grammar sql0.fid18 so that it will translate
   [13](4a) into [14](4b), and check the values returned by the query.

   you will probably find it easiest to first extend the grammar to handle
   queries like what cities have populations above 1,000,000 before
   tackling conjunction. after you have had a go at this task, you can
   compare your solution to grammars/book_grammars/sql1.fid18 in the nltk
   data distribution.

   observe that the and conjunction in [15](4a) is translated into an and
   in the sql counterpart, [16](4b). the latter tells us to select results
   from rows where two conditions are true together: the value of the
   country column is 'china' and the value of the population column is
   greater than 1000. this interpretation for and involves a new idea: it
   talks about what is true in some particular situation, and tells us
   that cond1 and cond2 is true in situation s just in case that condition
   cond1 is true in s and condition cond2 is true in s. although this
   doesn't account for the full range of meanings of and in english, it
   has the nice property that it is independent of any query language. in
   fact, we have given it the standard interpretation from classical
   logic. in the following sections, we will explore an approach in which
   sentences of natural language are translated into logic instead of an
   executable query language such as sql. one advantage of logical
   formalisms is that they are more abstract and therefore more generic.
   if we wanted to, once we had our translation into logic, we could then
   translate it into various other special-purpose languages. in fact,
   most serious attempts to query databases via natural language have used
   this methodology.

1.2   natural language, semantics and logic

   we started out trying to capture the meaning of [17](1a) by translating
   it into a query in another language, sql, which the computer could
   interpret and execute. but this still begged the question whether the
   translation was correct. stepping back from database query, we noted
   that the meaning of and seems to depend on being able to specify when
   statements are true or not in a particular situation. instead of
   translating a sentence s from one language to another, we try to say
   what s is about by relating it to a situation in the world. let's
   pursue this further. imagine there is a situation s where there are two
   entities, margrietje and her favourite doll, brunoke. in addition,
   there is a relation holding between the two entities, which we will
   call the love relation. if you understand the meaning of [18](3), then
   you know that it is true in situation s. in part, you know this because
   you know that margrietje refers to margrietje, brunoke refers to
   brunoke, and houdt van refers to the love relation.

   we have introduced two fundamental notions in semantics. the first is
   that declarative sentences are true or false in certain situations. the
   second is that definite noun phrases and proper nouns refer to things
   in the world. so [19](3) is true in a situation where margrietje loves
   the doll brunoke, here illustrated in [20]1.1.
   ../images/mimo-and-bruno.png

   figure 1.1: depiction of a situation in which margrietje loves brunoke.

   once we have adopted the notion of truth in a situation, we have a
   powerful tool for reasoning. in particular, we can look at sets of
   sentences, and ask whether they could be true together in some
   situation. for example, the sentences in [21](5) can be both true,
   while those in [22](6) and [23](7) cannot be. in other words, the
   sentences in [24](5) are consistent, while those in [25](6) and [26](7)
   are inconsistent.

   (5)

   a. sylvania is to the north of freedonia.

   b. freedonia is a republic.

   (6)

   a. the capital of freedonia has a population of 9,000.

   b. no city in freedonia has a population of 9,000.

   (7)

   a. sylvania is to the north of freedonia.

   b. freedonia is to the north of sylvania.

   we have chosen sentences about fictional countries (featured in the
   marx brothers' 1933 movie duck soup) to emphasize that your ability to
   reason about these examples does not depend on what is true or false in
   the actual world. if you know the meaning of the word no, and also know
   that the capital of a country is a city in that country, then you
   should be able to conclude that the two sentences in [27](6) are
   inconsistent, regardless of where freedonia is or what the population
   of its capital is. that is, there's no possible situation in which both
   sentences could be true. similarly, if you know that the relation
   expressed by to the north of is asymmetric, then you should be able to
   conclude that the two sentences in [28](7) are inconsistent.

   broadly speaking, logic-based approaches to natural language semantics
   focus on those aspects of natural language which guide our judgments of
   consistency and inconsistency. the syntax of a logical language is
   designed to make these features formally explicit. as a result,
   determining properties like consistency can often be reduced to
   symbolic manipulation, that is, to a task that can be carried out by a
   computer. in order to pursue this approach, we first want to develop a
   technique for representing a possible situation. we do this in terms of
   something that logicians call a model.

   a model for a set w of sentences is a formal representation of a
   situation in which all the sentences in w are true. the usual way of
   representing models involves set theory. the domain d of discourse (all
   the entities we currently care about) is a set of individuals, while
   relations are treated as sets built up from d. let's look at a concrete
   example. our domain d will consist of three children, stefan, klaus and
   evi, represented respectively as s, k and e. we write this as d = {s,
   k, e}. the expression boy denotes the set consisting of stefan and
   klaus, the expression girl denotes the set consisting of evi, and the
   expression is running denotes the set consisting of stefan and evi.
   [29]1.2 is a graphical rendering of the model.

   ../images/model_kids.png

   figure 1.2: diagram of a model containing a domain d and subsets of d
   corresponding to the predicates boy, girl and is running.

   later in this chapter we will use models to help evaluate the truth or
   falsity of english sentences, and in this way to illustrate some
   methods for representing meaning. however, before going into more
   detail, let's put the discussion into a broader perspective, and link
   back to a topic that we briefly raised in [30]5. can a computer
   understand the meaning of a sentence? and how could we tell if it did?
   this is similar to asking "can a computer think?" alan turing famously
   proposed to answer this by examining the ability of a computer to hold
   sensible conversations with a human [31](turing, 1950). suppose you are
   having a chat session with a person and a computer, but you are not
   told at the outset which is which. if you cannot identify which of your
   partners is the computer after chatting with each of them, then the
   computer has successfully imitated a human. if a computer succeeds in
   passing itself off as human in this "imitation game" (or "turing test"
   as it is popularly known), then according to turing, we should be
   prepared to say that the computer can think and can be said to be
   intelligent. so turing side-stepped the question of somehow examining
   the internal states of a computer by instead using its behavior as
   evidence of intelligence. by the same reasoning, we have assumed that
   in order to say that a computer understands english, it just needs to
   behave as though it did. what is important here is not so much the
   specifics of turing's imitation game, but rather the proposal to judge
   a capacity for natural language understanding in terms of observable
   behavior.

2   id118

   a logical language is designed to make reasoning formally explicit. as
   a result, it can capture aspects of natural language which determine
   whether a set of sentences is consistent. as part of this approach, we
   need to develop logical representations of a sentence    which formally
   capture the truth-conditions of   . we'll start off with a simple
   example:

   (8) [klaus chased evi] and [evi ran away].

   let's replace the two sub-sentences in [32](8) by    and    respectively,
   and put & for the logical operator corresponding to the english word
   and:    &   . this structure is the logical form of [33](8).

   id118 allows us to represent just those parts of
   linguistic structure which correspond to certain sentential
   connectives. we have just looked at and. other such connectives are
   not, or and if..., then.... in the formalization of propositional
   logic, the counterparts of such connectives are sometimes called
   boolean operators. the basic expressions of id118 are
   propositional symbols, often written as p, q, r, etc. there are varying
   conventions for representing boolean operators. since we will be
   focusing on ways of exploring logic within nltk, we will stick to the
   following ascii versions of the operators:

>>> nltk.boolean_ops()
negation            -
conjunction         &
disjunction         |
implication         ->
equivalence         <->

   from the propositional symbols and the boolean operators we can build
   an infinite set of well formed formulas (or just formulas, for short)
   of id118. first, every propositional letter is a formula.
   then if    is a formula, so is -  . and if    and    are formulas, then so
   are (   &   ) (   |   ) (   ->   ) (   <->   ).

   the [34]2.1 specifies the truth-conditions for formulas containing
   these operators. as before we use    and    as variables over sentences,
   and abbreviate if and only if as iff.
   boolean operator truth conditions
   negation (it is not the case that ...) -   is true in s iff    is false
   in s
   conjunction (and) (   &   ) is true in s iff    is true in s and    is true
   in s
   disjunction (or) (   |   ) is true in s iff    is true in s or    is true
   in s
   implication (if ..., then ...) (   ->   ) is true in s iff    is false in
   s or    is true in s
   equivalence (if and only if) (   <->   ) is true in s iff    and    are
   both true in s or both false in s

   table 2.1:

   truth conditions for the boolean operators in id118.

   these rules are generally straightforward, though the truth conditions
   for implication departs in many cases from our usual intuitions about
   the conditional in english. a formula of the form (p -> q) is only
   false when p is true and q is false. if p is false (say p corresponds
   to the moon is made of green cheese) and q is true (say q corresponds
   to two plus two equals four) then p -> q will come out true.

   nltks expression object can process logical expressions into various
   subclasses of expression:

>>> read_expr = nltk.sem.expression.fromstring
>>> read_expr('-(p & q)')
<negatedexpression -(p & q)>
>>> read_expr('p & q')
<andexpression (p & q)>
>>> read_expr('p | (r -> q)')
<orexpression (p | (r -> q))>
>>> read_expr('p <-> -- p')
<iffexpression (p <-> --p)>

   from a computational perspective, logics give us an important tool for
   performing id136. suppose you state that freedonia is not to the
   north of sylvania, and you give as your reasons that sylvania is to the
   north of freedonia. in this case, you have produced an argument. the
   sentence sylvania is to the north of freedonia is the assumption of the
   argument while freedonia is not to the north of sylvania is the
   conclusion. the step of moving from one or more assumptions to a
   conclusion is called id136. informally, it is common to write
   arguments in a format where the conclusion is preceded by therefore.

   (9)
   sylvania is to the north of freedonia.
   therefore, freedonia is not to the north of sylvania

   an argument is valid if there is no possible situation in which its
   premises are all true and its conclusion is not true.

   now, the validity of [35](9) crucially depends on the meaning of the
   phrase to the north of, in particular, the fact that it is an
   asymmetric relation:

   (10) if x is to the north of y then y is not to the north of x.

   unfortunately, we can't express such rules in id118: the
   smallest elements we have to play with are atomic propositions, and we
   cannot "look inside" these to talk about relations between individuals
   x and y. the best we can do in this case is capture a particular case
   of the asymmetry. let's use the propositional symbol snf to stand for
   sylvania is to the north of freedonia and fns for freedonia is to the
   north of sylvania. to say that freedonia is not to the north of
   sylvania, we write -fns that is, we treat not as equivalent to the
   phrase it is not the case that ..., and translate this as the one-place
   boolean operator -. so now we can write the implication in [36](10) as

   (11) snf -> -fns

   how about giving a version of the complete argument? we will replace
   the first sentence of [37](9) by two formulas of id118:
   snf, and also the implication in [38](11), which expresses (rather
   poorly) our background knowledge of the meaning of to the north of.
   we'll write [a1, ..., an] / c to represent the argument that conclusion
   c follows from assumptions [a1, ..., an]. this leads to the following
   as a representation of argument [39](9):

   (12) [snf, snf -> -fns] / -fns

   this is a valid argument: if snf and snf -> -fns are both true in a
   situation s, then -fns must also be true in s. by contrast, if fns were
   true, this would conflict with our understanding that two objects
   cannot both be to the north of each other in any possible situation.
   equivalently, the list [snf, snf -> -fns, fns] is inconsistent     these
   sentences cannot all be true together.

   arguments can be tested for "syntactic validity" by using a proof
   system. we will say a little bit more about this later on in [40]3.
   logical proofs can be carried out with nltk's id136 module, for
   example via an interface to the third-party theorem prover prover9. the
   inputs to the id136 mechanism first have to be converted into
   logical expressions.

>>> lp = nltk.sem.expression.fromstring
>>> snf = read_expr('snf')
>>> notfns = read_expr('-fns')
>>> r = read_expr('snf -> -fns')
>>> prover = nltk.prover9()
>>> prover.prove(notfns, [snf, r])
true

   here's another way of seeing why the conclusion follows. snf -> -fns is
   semantically equivalent to -snf | -fns, where "|" is the two-place
   operator corresponding to or. in general,    |    is true in a situation
   s if either    is true in s or    is true in s. now, suppose both snf and
   -snf | -fns are true in situation s. if snf is true, then -snf cannot
   also be true; a fundamental assumption of classical logic is that a
   sentence cannot be both true and false in a situation. consequently,
   -fns must be true.

   recall that we interpret sentences of a logical language relative to a
   model, which is a very simplified version of the world. a model for
   id118 needs to assign the values true or false to every
   possible formula. we do this inductively: first, every propositional
   symbol is assigned a value, and then we compute the value of complex
   formulas by consulting the meanings of the boolean operators (i.e,
   [41]2.1) and applying them to the values of the formula's components. a
   valuation is a mapping from basic expressions of the logic to their
   values. here's an example:

>>> val = nltk.valuation([('p', true), ('q', true), ('r', false)])

   we initialize a valuation with a list of pairs, each of which consists
   of a semantic symbol and a semantic value. the resulting object is
   essentially just a dictionary that maps logical expressions (treated as
   strings) to appropriate values.

>>> val['p']
true

   as we will see later, our models need to be somewhat more complicated
   in order to handle the more complex logical forms discussed in the next
   section; for the time being, just ignore the dom and g parameters in
   the following declarations.

>>> dom = set()
>>> g = nltk.assignment(dom)

   now let's initialize a model m that uses val:

>>> m = nltk.model(dom, val)

   every model comes with an evaluate() method, which will determine the
   semantic value of logical expressions, such as formulas of
   id118; of course, these values depend on the initial
   truth values we assigned to propositional symbols such as p, q and r.

>>> print(m.evaluate('(p & q)', g))
true
>>> print(m.evaluate('-(p & q)', g))
false
>>> print(m.evaluate('(p & r)', g))
false
>>> print(m.evaluate('(p | r)', g))
true

   note

   your turn: experiment with evaluating different formulas of
   id118. does the model give the values that you expected?

   up until now, we have been translating our english sentences into
   id118. because we are confined to representing atomic
   sentences with letters like p and q, we cannot dig into their internal
   structure. in effect, we are saying that there is nothing of logical
   interest to dividing atomic sentences into subjects, objects and
   predicates. however, this seems wrong: if we want to formalize
   arguments such as [42](9), we have to be able to "look inside" basic
   sentences. as a result, we will move beyond id118 to a
   something more expressive, namely id85. this is what we
   turn to in the next section.

3   id85

   in the remainder of this chapter, we will represent the meaning of
   natural language expressions by translating them into first-order
   logic. not all of natural language semantics can be expressed in
   id85. but it is a good choice for computational semantics
   because it is expressive enough to represent a good deal, and on the
   other hand, there are excellent systems available off the shelf for
   carrying out automated id136 in first order logic.

   our next step will be to describe how formulas of id85 are
   constructed, and then how such formulas can be evaluated in a model.

3.1   syntax

   id85 keeps all the boolean operators of propositional
   logic. but it adds some important new mechanisms. to start with,
   propositions are analyzed into predicates and arguments, which takes us
   a step closer to the structure of natural languages. the standard
   construction rules for id85 recognize terms such as
   individual variables and individual constants, and predicates which
   take differing numbers of arguments. for example, angus walks might be
   formalized as walk(angus) and angus sees bertie as see(angus, bertie).
   we will call walk a unary predicate, and see a binary predicate. the
   symbols used as predicates do not have intrinsic meaning, although it
   is hard to remember this. returning to one of our earlier examples,
   there is no logical difference between [43](13a) and [44](13b).

   (13)

   a. love(margrietje, brunoke)

   b. houden_van(margrietje, brunoke)

   by itself, id85 has nothing substantive to say about
   lexical semantics     the meaning of individual words     although some
   theories of lexical semantics can be encoded in id85.
   whether an atomic predication like see(angus, bertie) is true or false
   in a situation is not a matter of logic, but depends on the particular
   valuation that we have chosen for the constants see, angus and bertie.
   for this reason, such expressions are called non-logical constants. by
   contrast, logical constants (such as the boolean operators) always
   receive the same interpretation in every model for id85.

   we should mention here that one binary predicate has special status,
   namely equality, as in formulas such as angus = aj. equality is
   regarded as a logical constant, since for individual terms t1 and t2,
   the formula t1 = t2 is true if and only if t1 and t2 refer to one and
   the same entity.

   it is often helpful to inspect the syntactic structure of expressions
   of id85, and the usual way of doing this is to assign
   types to expressions. following the tradition of montague grammar, we
   will use two basic types: e is the type of entities, while t is the
   type of formulas, i.e., expressions which have truth values. given
   these two basic types, we can form complex types for function
   expressions. that is, given any types    and   ,      ,       is a complex type
   corresponding to functions from '   things' to '   things'. for example,
      e, t    is the type of expressions from entities to truth values, namely
   unary predicates. the logical expression can be processed with type
   checking.


>>> read_expr = nltk.sem.expression.fromstring
>>> expr = read_expr('walk(angus)', type_check=true)
>>> expr.argument
<constantexpression angus>
>>> expr.argument.type
e
>>> expr.function
<constantexpression walk>
>>> expr.function.type
<e,?>

   why do we see <e,?> at the end of this example? although the
   type-checker will try to infer as many types as possible, in this case
   it has not managed to fully specify the type of walk, since its result
   type is unknown. although we are intending walk to receive type <e, t>,
   as far as the type-checker knows, in this context it could be of some
   other type such as <e, e> or <e, <e, t>. to help the type-checker, we
   need to specify a signature, implemented as a dictionary that
   explicitly associates types with non-logical constants:


>>> sig = {'walk': '<e, t>'}
>>> expr = read_expr('walk(angus)', signature=sig)
>>> expr.function.type
e

   a binary predicate has type    e,    e, t      . although this is the type of
   something which combines first with an argument of type e to make a
   unary predicate, we represent binary predicates as combining directly
   with their two arguments. for example, the predicate see in the
   translation of angus sees cyril will combine with its arguments to give
   the result see(angus, cyril).

   in id85, arguments of predicates can also be individual
   variables such as x, y and z. in nltk, we adopt the convention that
   variables of type e are all lowercase. individual variables are similar
   to personal pronouns like he, she and it, in that we need to know about
   the context of use in order to figure out their denotation.

   one way of interpreting the pronoun in [45](14) is by pointing to a
   relevant individual in the local context.

   (14) he disappeared.

   another way is to supply a textual antecedent for the pronoun he, for
   example by uttering [46](15a) prior to [47](14). here, we say that he
   is coreferential with the noun phrase cyril. as a result, [48](14) is
   semantically equivalent to [49](15b).

   (15)

   a. cyril is angus's dog.

   b. cyril disappeared.

   consider by contrast the occurrence of he in [50](16a). in this case,
   it is bound by the indefinite np a dog, and this is a different
   relationship than coreference. if we replace the pronoun he by a dog,
   the result [51](16b) is not semantically equivalent to [52](16a).

   (16)

   a. angus had a dog but he disappeared.

   b. angus had a dog but a dog disappeared.

   corresponding to [53](17a), we can construct an open formula [54](17b)
   with two occurrences of the variable x. (we ignore tense to simplify
   exposition.)

   (17)

   a. he is a dog and he disappeared.

   b. dog(x)     disappear(x)

   by placing an existential quantifier    x ('for some x') in front of
   [55](17b), we can bind these variables, as in [56](18a), which means
   [57](18b) or, more idiomatically, [58](18c).

   (18)

   a.    x.(dog(x)     disappear(x))

   b. at least one entity is a dog and disappeared.

   c. a dog disappeared.

   the nltk rendering of [59](18a):

   (19) exists x.(dog(x) & disappear(x))

   in addition to the existential quantifier, id85 offers us
   the universal quantifier    x ('for all x'), illustrated in [60](20).

   (20)

   a.    x.(dog(x)     disappear(x))

   b. everything has the property that if it is a dog, it disappears.

   c. every dog disappeared.

   the nltk syntax for [61](20a):

   (21) all x.(dog(x) -> disappear(x))

   although [62](20a) is the standard id85 translation of
   [63](20c), the truth conditions aren't necessarily what you expect. the
   formula says that if some x is a dog, then x disappears     but it
   doesn't say that there are any dogs. so in a situation where there are
   no dogs, [64](20a) will still come out true. (remember that (p -> q) is
   true when p is false.) now you might argue that every dog disappeared
   does presuppose the existence of dogs, and that the logic formalization
   is simply wrong. but it is possible to find other examples which lack
   such a presupposition. for instance, we might explain that the value of
   the python expression astring.replace('ate', '8') is the result of
   replacing every occurrence of 'ate' in astring by '8', even though
   there may in fact be no such occurrences ([65]3.2).

   we have seen a number of examples where variables are bound by
   quantifiers. what happens in formulas such as the following?:
((exists x. dog(x)) -> bark(x))

   the scope of the exists x quantifier is dog(x), so the occurrence of x
   in bark(x) is unbound. consequently it can become bound by some other
   quantifier, for example all x in the next formula:
all x.((exists x. dog(x)) -> bark(x))

   in general, an occurrence of a variable x in a formula    is free in   
   if that occurrence doesn't fall within the scope of all x or some x in
     . conversely, if x is free in formula   , then it is bound in all x.  
   and exists x.  . if all variable occurrences in a formula are bound, the
   formula is said to be closed.

   we mentioned before that the expression object can process strings, and
   returns objects of class expression. each instance expr of this class
   comes with a method free() which returns the set of variables that are
   free in expr.


>>> read_expr = nltk.sem.expression.fromstring
>>> read_expr('dog(cyril)').free()
set()
>>> read_expr('dog(x)').free()
{variable('x')}
>>> read_expr('own(angus, cyril)').free()
set()
>>> read_expr('exists x.dog(x)').free()
set()
>>> read_expr('((some x. walk(x)) -> sing(x))').free()
{variable('x')}
>>> read_expr('exists x.own(y, x)').free()
{variable('y')}

3.2   first order theorem proving

   recall the constraint on to the north of which we proposed earlier as
   [66](10):

   (22) if x is to the north of y then y is not to the north of x.

   we observed that id118 is not expressive enough to
   represent generalizations about binary predicates, and as a result we
   did not properly capture the argument sylvania is to the north of
   freedonia. therefore, freedonia is not to the north of sylvania.

   you have no doubt realized that first order logic, by contrast, is
   ideal for formalizing such rules:
all x. all y.(north_of(x, y) -> -north_of(y, x))

   even better, we can perform automated id136 to show the validity of
   the argument.

   the general case in theorem proving is to determine whether a formula
   that we want to prove (a proof goal) can be derived by a finite
   sequence of id136 steps from a list of assumed formulas. we write
   this as s     g, where s is a (possibly empty) list of assumptions, and g
   is a proof goal. we will illustrate this with nltk's interface to the
   theorem prover prover9. first, we parse the required proof goal [67][1]
   and the two assumptions [68][2] [69][3] . then we create a prover9
   instance [70][4] , and call its prove() method on the goal, given the
   list of assumptions [71][5] .

>>> notfns = read_expr('-north_of(f, s)')  [72] [1]
>>> snf = read_expr('north_of(s, f)')    [73] [2]
>>> r = read_expr('all x. all y. (north_of(x, y) -> -north_of(y, x))')  [74] [3]

>>> prover = nltk.prover9()   [75] [4]
>>> prover.prove(notfns, [snf, r])  [76] [5]
true

   happily, the theorem prover agrees with us that the argument is valid.
   by contrast, it concludes that it is not possible to infer north_of(f,
   s) from our assumptions:

>>> fns = read_expr('north_of(f, s)')
>>> prover.prove(fns, [snf, r])
false

3.3   summarizing the language of first order logic

   we'll take this opportunity to restate our earlier syntactic rules for
   id118 and add the formation rules for quantifiers;
   together, these give us the syntax of first order logic. in addition,
   we make explicit the types of the expressions involved. we'll adopt the
   convention that    e^n, t    is the type of a predicate which combines with
   n arguments of type e to yield an expression of type t. in this case,
   we say that n is the arity of the predicate.

    1. if p is a predicate of type    e^n, t   , and   [1], ...   [n] are terms
       of type e, then p(  [1], ...   [n]) is of type t.
    2. if    and    are both of type e, then (   =   ) and (   !=   ) are of
       type t.
    3. if    is of type t, then so is -  .
    4. if    and    are of type t, then so are (   &   ), (   |   ), (   ->   )
       and (   <->   ).
    5. if    is of type t, and x is a variable of type e, then exists x.  
       and all x.   are of type t.

   [77]3.1 summarizes the new logical constants of the logic module, and
   two of the methods of expressions.
     example           description
   =            equality
   !=           inequality
   exists       existential quantifier
   all          universal quantifier
   e.free()     show free variables of e
   e.simplify() carry out   -reduction on e

   table 3.1:

   summary of new logical relations and operators required for first order
   logic, together with two useful methods of the expression class.

3.4   truth in model

   we have looked at the syntax of id85, and in [78]4 we will
   examine the task of translating english into id85. yet as
   we argued in [79]1, this only gets us further forward if we can give a
   meaning to sentences of id85. in other words, we need to
   give a truth-conditional semantics to id85. from the point
   of view of computational semantics, there are obvious limits in how far
   one can push this approach. although we want to talk about sentences
   being true or false in situations, we only have the means of
   representing situations in the computer in a symbolic manner. despite
   this limitation, it is still possible to gain a clearer picture of
   truth-conditional semantics by encoding models in nltk.

   given a id85 language l, a model m for l is a pair    d,
   val   , where d is an nonempty set called the domain of the model, and
   val is a function called the valuation function which assigns values
   from d to expressions of l as follows:

    1. for every individual constant c in l, val(c) is an element of d.
    2. for every predicate symbol p of arity n     0, val(p) is a function
       from d^n to {true, false}. (if the arity of p is 0, then val(p) is
       simply a truth value, the p is regarded as a propositional symbol.)

   according to (ii), if p is of arity 2, then val(p) will be a function f
   from pairs of elements of d to {true, false}. in the models we shall
   build in nltk, we'll adopt a more convenient alternative, in which
   val(p) is a set s of pairs, defined as follows:

   (23) s = {s | f(s) = true}

   such an f is called the characteristic function of s (as discussed in
   the further readings).

   relations are represented semantically in nltk in the standard
   set-theoretic way: as sets of tuples. for example, let's suppose we
   have a domain of discourse consisting of the individuals bertie, olive
   and cyril, where bertie is a boy, olive is a girl and cyril is a dog.
   for mnemonic reasons, we use b, o and c as the corresponding labels in
   the model. we can declare the domain as follows:

>>> dom = {'b', 'o', 'c'}

   we will use the utility function valuation.fromstring() to convert a
   list of strings of the form symbol => value into a valuation object.

>>> v = """
... bertie => b
... olive => o
... cyril => c
... boy => {b}
... girl => {o}
... dog => {c}
... walk => {o, c}
... see => {(b, o), (c, b), (o, c)}
... """
>>> val = nltk.valuation.fromstring(v)
>>> print(val)
{'bertie': 'b',
 'boy': {('b',)},
 'cyril': 'c',
 'dog': {('c',)},
 'girl': {('o',)},
 'olive': 'o',
 'see': {('o', 'c'), ('c', 'b'), ('b', 'o')},
 'walk': {('c',), ('o',)}}

   so according to this valuation, the value of see is a set of tuples
   such that bertie sees olive, cyril sees bertie, and olive sees cyril.

   note

   your turn: draw a picture of the domain of m and the sets corresponding
   to each of the unary predicates, by analogy with the diagram shown in
   [80]1.2.

   you may have noticed that our unary predicates (i.e, boy, girl, dog)
   also come out as sets of singleton tuples, rather than just sets of
   individuals. this is a convenience which allows us to have a uniform
   treatment of relations of any arity. a predication of the form p(  [1],
   ...   [n]), where p is of arity n, comes out true just in case the tuple
   of values corresponding to (  [1], ...   [n]) belongs to the set of
   tuples in the value of p.

>>> ('o', 'c') in val['see']
true
>>> ('b',) in val['boy']
true

3.5   individual variables and assignments

   in our models, the counterpart of a context of use is a variable
   assignment. this is a mapping from individual variables to entities in
   the domain. assignments are created using the assignment constructor,
   which also takes the model's domain of discourse as a parameter. we are
   not required to actually enter any bindings, but if we do, they are in
   a (variable, value) format similar to what we saw earlier for
   valuations.

>>> g = nltk.assignment(dom, [('x', 'o'), ('y', 'c')])
>>> g
{'y': 'c', 'x': 'o'}

   in addition, there is a print() format for assignments which uses a
   notation closer to that often found in logic textbooks:

>>> print(g)
g[c/y][o/x]

   let's now look at how we can evaluate an atomic formula of first-order
   logic. first, we create a model, then we call the evaluate() method to
   compute the truth value.

>>> m = nltk.model(dom, val)
>>> m.evaluate('see(olive, y)', g)
true

   what's happening here? we are evaluating a formula which is similar to
   our earlier examplle, see(olive, cyril). however, when the
   interpretation function encounters the variable y, rather than checking
   for a value in val, it asks the variable assignment g to come up with a
   value:

>>> g['y']
'c'

   since we already know that individuals o and c stand in the see
   relation, the value true is what we expected. in this case, we can say
   that assignment g satisfies the formula see(olive, y). by contrast, the
   following formula evaluates to false relative to g     check that you see
   why this is.

>>> m.evaluate('see(y, x)', g)
false

   in our approach (though not in standard id85), variable
   assignments are partial. for example, g says nothing about any
   variables apart from x and y. the method purge() clears all bindings
   from an assignment.

>>> g.purge()
>>> g
{}

   if we now try to evaluate a formula such as see(olive, y) relative to
   g, it is like trying to interpret a sentence containing a him when we
   don't know what him refers to. in this case, the evaluation function
   fails to deliver a truth value.

>>> m.evaluate('see(olive, y)', g)
'undefined'

   since our models already contain rules for interpreting boolean
   operators, arbitrarily complex formulas can be composed and evaluated.

>>> m.evaluate('see(bertie, olive) & boy(bertie) & -walk(bertie)', g)
true

   the general process of determining truth or falsity of a formula in a
   model is called model checking.

3.6   quantification

   one of the crucial insights of modern logic is that the notion of
   variable satisfaction can be used to provide an interpretation to
   quantified formulas. let's use [81](24) as an example.

   (24) exists x.(girl(x) & walk(x))

   when is it true? let's think about all the individuals in our domain,
   i.e., in dom. we want to check whether any of these individuals have
   the property of being a girl and walking. in other words, we want to
   know if there is some u in dom such that g[u/x] satisfies the open
   formula [82](25).

   (25) girl(x) & walk(x)

   consider the following:

>>> m.evaluate('exists x.(girl(x) & walk(x))', g)
true

   evaluate() returns true here because there is some u in dom such that
   [83](25) is satisfied by an assignment which binds x to u. in fact, o
   is such a u:

>>> m.evaluate('girl(x) & walk(x)', g.add('x', 'o'))
true

   one useful tool offered by nltk is the satisfiers() method. this
   returns a set of all the individuals that satisfy an open formula. the
   method parameters are a parsed formula, a variable, and an assignment.
   here are a few examples:

>>> fmla1 = read_expr('girl(x) | boy(x)')
>>> m.satisfiers(fmla1, 'x', g)
{'b', 'o'}
>>> fmla2 = read_expr('girl(x) -> walk(x)')
>>> m.satisfiers(fmla2, 'x', g)
{'c', 'b', 'o'}
>>> fmla3 = read_expr('walk(x) -> girl(x)')
>>> m.satisfiers(fmla3, 'x', g)
{'b', 'o'}

   it's useful to think about why fmla2 and fmla3 receive the values they
   do. the truth conditions for -> mean that fmla2 is equivalent to
   -girl(x) | walk(x), which is satisfied by something which either isn't
   a girl or walks. since neither b (bertie) nor c (cyril) are girls,
   according to model m, they both satisfy the whole formula. and of
   course o satisfies the formula because o satisfies both disjuncts. now,
   since every member of the domain of discourse satisfies fmla2, the
   corresponding universally quantified formula is also true.

>>> m.evaluate('all x.(girl(x) -> walk(x))', g)
true

   in other words, a universally quantified formula    x.   is true with
   respect to g just in case for every u,    is true with respect to
   g[u/x].

   note

   your turn: try to figure out, first with pencil and paper, and then
   using m.evaluate(), what the truth values are for all x.(girl(x) &
   walk(x)) and exists x.(boy(x) -> walk(x)). make sure you understand why
   they receive these values.

3.7   quantifier scope ambiguity

   what happens when we want to give a formal representation of a sentence
   with two quantifiers, such as the following?

   (26) everybody admires someone.

   there are (at least) two ways of expressing [84](26) in first-order
   logic:

   (27)

   a. all x.(person(x) -> exists y.(person(y) & admire(x,y)))

   b. exists y.(person(y) & all x.(person(x) -> admire(x,y)))

   can we use both of these? the answer is yes, but they have different
   meanings. [85](27b) is logically stronger than [86](27a): it claims
   that there is a unique person, say bruce, who is admired by everyone.
   [87](27a), on the other hand, just requires that for every person u, we
   can find some person u' whom u admires; but this could be a different
   person u' in each case. we distinguish between [88](27a) and [89](27b)
   in terms of the scope of the quantifiers. in the first,     has wider
   scope than    , while in [90](27b), the scope ordering is reversed. so
   now we have two ways of representing the meaning of [91](26), and they
   are both quite legitimate. in other words, we are claiming that
   [92](26) is ambiguous with respect to quantifier scope, and the
   formulas in [93](27) give us a way to make the two readings explicit.
   however, we are not just interested in associating two distinct
   representations with [94](26). we also want to show in detail how the
   two representations lead to different conditions for truth in a model.

   in order to examine the ambiguity more closely, let's fix our valuation
   as follows:


>>> v2 = """
... bruce => b
... elspeth => e
... julia => j
... matthew => m
... person => {b, e, j, m}
... admire => {(j, b), (b, b), (m, e), (e, m)}
... """
>>> val2 = nltk.valuation.fromstring(v2)

   the admire relation can be visualized using the mapping diagram shown
   in [95](28).

   (28) ../images/models_admire.png

   in [96](28), an arrow between two individuals x and y indicates that x
   admires y. so j and b both admire b (bruce is very vain), while e
   admires m and m admires e. in this model, formula [97](27a) above is
   true but [98](27b) is false. one way of exploring these results is by
   using the satisfiers() method of model objects.


>>> dom2 = val2.domain
>>> m2 = nltk.model(dom2, val2)
>>> g2 = nltk.assignment(dom2)
>>> fmla4 = read_expr('(person(x) -> exists y.(person(y) & admire(x, y)))')
>>> m2.satisfiers(fmla4, 'x', g2)
{'e', 'b', 'm', 'j'}

   this shows that fmla4 holds of every individual in the domain. by
   contrast, consider the formula fmla5 below; this has no satisfiers for
   the variable y.


>>> fmla5 = read_expr('(person(y) & all x.(person(x) -> admire(x, y)))')
>>> m2.satisfiers(fmla5, 'y', g2)
set()

   that is, there is no person that is admired by everybody. taking a
   different open formula, fmla6, we can verify that there is a person,
   namely bruce, who is admired by both julia and bruce.


>>> fmla6 = read_expr('(person(y) & all x.((x = bruce | x = julia) -> admire(x,
y)))')
>>> m2.satisfiers(fmla6, 'y', g2)
{'b'}

   note

   your turn: devise a new model based on m2 such that [99](27a) comes out
   false in your model; similarly, devise a new model such that [100](27b)
   comes out true.

3.8   model building

   we have been assuming that we already had a model, and wanted to check
   the truth of a sentence in the model. by contrast, model building tries
   to create a new model, given some set of sentences. if it succeeds,
   then we know that the set is consistent, since we have an existence
   proof of the model.

   we invoke the mace4 model builder by creating an instance of mace() and
   calling its build_model() method, in an analogous way to calling the
   prover9 theorem prover. one option is to treat our candidate set of
   sentences as assumptions, while leaving the goal unspecified. the
   following interaction shows how both [a, c1] and [a, c2] are consistent
   lists, since mace succeeds in building a model for each of them, while
   [c1, c2] is inconsistent.

>>> a3 = read_expr('exists x.(man(x) & walks(x))')
>>> c1 = read_expr('mortal(socrates)')
>>> c2 = read_expr('-mortal(socrates)')
>>> mb = nltk.mace(5)
>>> print(mb.build_model(none, [a3, c1]))
true
>>> print(mb.build_model(none, [a3, c2]))
true
>>> print(mb.build_model(none, [c1, c2]))
false

   we can also use the model builder as an adjunct to the theorem prover.
   let's suppose we are trying to prove s     g, i.e. that g is logically
   derivable from assumptions s = [s1, s2, ..., sn]. we can feed this same
   input to mace4, and the model builder will try to find a
   counterexample, that is, to show that g does not follow from s. so,
   given this input, mace4 will try to find a model for the set s together
   with the negation of g, namely the list s' = [s1, s2, ..., sn, -g]. if
   g fails to follow from s, then mace4 may well return with a
   counterexample faster than prover9 concludes that it cannot find the
   required proof. conversely, if g is provable from s, mace4 may take a
   long time unsuccessfully trying to find a countermodel, and will
   eventually give up.

   let's consider a concrete scenario. our assumptions are the list [there
   is a woman that every man loves, adam is a man, eve is a woman]. our
   conclusion is adam loves eve. can mace4 find a model in which the
   premises are true but the conclusion is false? in the following code,
   we use macecommand() which will let us inspect the model that has been
   built.

>>> a4 = read_expr('exists y. (woman(y) & all x. (man(x) -> love(x,y)))')
>>> a5 = read_expr('man(adam)')
>>> a6 = read_expr('woman(eve)')
>>> g = read_expr('love(adam,eve)')
>>> mc = nltk.macecommand(g, assumptions=[a4, a5, a6])
>>> mc.build_model()
true

   so the answer is yes: mace4 found a countermodel in which there is some
   woman other than eve that adam loves. but let's have a closer look at
   mace4's model, converted to the format we use for valuations.

>>> print(mc.valuation)
{'c1': 'b',
 'adam': 'a',
 'eve': 'a',
 'love': {('a', 'b')},
 'man': {('a',)},
 'woman': {('a',), ('b',)}}

   the general form of this valuation should be familiar to you: it
   contains some individual constants and predicates, each with an
   appropriate kind of value. what might be puzzling is the c1. this is a
   "skolem constant" that the model builder introduces as a representative
   of the existential quantifier. that is, when the model builder
   encountered the exists y part of a4 above, it knew that there is some
   individual b in the domain which satisfies the open formula in the body
   of a4. however, it doesn't know whether b is also the denotation of an
   individual constant anywhere else in its input, so it makes up a new
   name for b on the fly, namely c1. now, since our premises said nothing
   about the individual constants adam and eve, the model builder has
   decided there is no reason to treat them as denoting different
   entities, and they both get mapped to a. moreover, we didn't specify
   that man and woman denote disjoint sets, so the model builder lets
   their denotations overlap. this illustrates quite dramatically the
   implicit knowledge that we bring to bear in interpreting our scenario,
   but which the model builder knows nothing about. so let's add a new
   assumption which makes the sets of men and women disjoint. the model
   builder still produces a countermodel, but this time it is more in
   accord with our intuitions about the situation:

>>> a7 = read_expr('all x. (man(x) -> -woman(x))')
>>> g = read_expr('love(adam,eve)')
>>> mc = nltk.macecommand(g, assumptions=[a4, a5, a6, a7])
>>> mc.build_model()
true
>>> print(mc.valuation)
{'c1': 'c',
 'adam': 'a',
 'eve': 'b',
 'love': {('a', 'c')},
 'man': {('a',)},
 'woman': {('c',), ('b',)}}

   on reflection, we can see that there is nothing in our premises which
   says that eve is the only woman in the domain of discourse, so the
   countermodel in fact is acceptable. if we wanted to rule it out, we
   would have to add a further assumption such as exists y. all x.
   (woman(x) -> (x = y)) to ensure that there is only one woman in the
   model.

4   the semantics of english sentences

4.1   id152 in feature-based grammar

   at the beginning of the chapter we briefly illustrated a method of
   building semantic representations on the basis of a syntactic parse,
   using the grammar framework developed in [101]9.. this time, rather
   than constructing an sql query, we will build a logical form. one of
   our guiding ideas for designing such grammars is the principle of
   compositionality. (also known as frege's principle; see [102](gleitman
   & liberman, 1995) for the formulation given below.)

   principle of compositionality: the meaning of a whole is a function of
   the meanings of the parts and of the way they are syntactically
   combined.

   we will assume that the semantically relevant parts of a complex
   expression are given by a theory of syntactic analysis. within this
   chapter, we will take it for granted that expressions are parsed
   against a context-free grammar. however, this is not entailed by the
   principle of compositionality.

   our goal now is integrate the construction of a semantic representation
   in a manner that can be smoothly with the process of parsing. [103](29)
   illustrates a first approximation to the kind of analyses we would like
   to build.

   (29) tree_images/ch10-tree-1.png

   in [104](29), the sem value at the root node shows a semantic
   representation for the whole sentence, while the sem values at lower
   nodes show semantic representations for constituents of the sentence.
   since the values of sem have to be treated in special manner, they are
   distinguished from other feature values by being enclosed in angle
   brackets.

   so far, so good, but how do we write grammar rules which will give us
   this kind of result? our approach will be similar to that adopted for
   the grammar sql0.fid18 at the start of this chapter, in that we will
   assign semantic representations to lexical nodes, and then compose the
   semantic representations for each phrase from those of its child nodes.
   however, in the present case we will use function application rather
   than string concatenation as the mode of composition. to be more
   specific, suppose we have a np and vp constituents with appropriate
   values for their sem nodes. then the sem value of an s is handled by a
   rule like [105](30). (observe that in the case where the value of sem
   is a variable, we omit the angle brackets.)

   (30) s[sem=<?vp(?np)>] -> np[sem=?np] vp[sem=?vp]

   [106](30) tells us that given some sem value ?np for the subject np and
   some sem value ?vp for the vp, the sem value of the s parent is
   constructed by applying ?vp as a function expression to ?np. from this,
   we can conclude that ?vp has to denote a function which has the
   denotation of ?np in its domain. [107](30) is a nice example of
   building semantics using the principle of compositionality.

   to complete the grammar is very straightforward; all we require are the
   rules shown below.
vp[sem=?v] -> iv[sem=?v]
np[sem=<cyril>] -> 'cyril'
iv[sem=<\x.bark(x)>] -> 'barks'

   the vp rule says that the parent's semantics is the same as the head
   child's semantics. the two lexical rules provide non-logical constants
   to serve as the semantic values of cyril and barks respectively. there
   is an additional piece of notation in the entry for barks which we will
   explain shortly.

   before launching into compositional semantic rules in more detail, we
   need to add a new tool to our kit, namely the    calculus. this provides
   us with an invaluable tool for combining expressions of first-order
   logic as we assemble a meaning representation for an english sentence.

4.2   the   -calculus

   in [108]3, we pointed out that mathematical set notation was a helpful
   method of specifying properties p of words that we wanted to select
   from a document. we illustrated this with [109](31), which we glossed
   as "the set of all w such that w is an element of v (the vocabulary)
   and w has property p".

   (31) {w | w     v & p(w)}

   it turns out to be extremely useful to add something to first-order
   logic that will achieve the same effect. we do this with the    operator
   (pronounced "lambda"). the    counterpart to [110](31) is [111](32).
   (since we are not trying to do set theory here, we just treat v as a
   unary predicate.)

   (32)   w. (v(w)     p(w))

   note

      expressions were originally designed by alonzo church to represent
   computable functions and to provide a foundation for mathematics and
   logic. the theory in which    expressions are studied is known as the
     -calculus. note that the   -calculus is not part of id85    
   both can be used independently of the other.

      is a binding operator, just as the id85 quantifiers are.
   if we have an open formula such as [112](33a), then we can bind the
   variable x with the    operator, as shown in [113](33b). the
   corresponding nltk representation is given in [114](33c).

   (33)

   a. (walk(x)     chew_gum(x))

   b.   x.(walk(x)     chew_gum(x))

   c. \x.(walk(x) & chew_gum(x))

   remember that \ is a special character in python strings. we could
   escape it (with another \), or else use "raw strings" ([115]3.4):


>>> read_expr = nltk.sem.expression.fromstring
>>> expr = read_expr(r'\x.(walk(x) & chew_gum(x))')
>>> expr
<lambdaexpression \x.(walk(x) & chew_gum(x))>
>>> expr.free()
set()
>>> print(read_expr(r'\x.(walk(x) & chew_gum(y))'))
\x.(walk(x) & chew_gum(y))

   we have a special name for the result of binding the variables in an
   expression:    abstraction. when you first encounter   -abstracts, it can
   be hard to get an intuitive sense of their meaning. a couple of english
   glosses for [116](33b) are: "be an x such that x walks and x chews gum"
   or "have the property of walking and chewing gum". it has often been
   suggested that   -abstracts are good representations for verb phrases
   (or subjectless clauses), particularly when these occur as arguments in
   their own right. this is illustrated in [117](34a) and its translation
   [118](34b).

   (34)

   a. to walk and chew-gum is hard

   b. hard(\x.(walk(x) & chew_gum(x)))

   so the general picture is this: given an open formula    with free
   variable x, abstracting over x yields a property expression   x.       the
   property of being an x such that   . here's a more official version of
   how abstracts are built:

   (35) if    is of type   , and x is a variable of type e, then \x.   is of
   type    e,      .

   [119](34b) illustrated a case where we say something about a property,
   namely that it is hard. but what we usually do with properties is
   attribute them to individuals. and in fact if    is an open formula,
   then the abstract   x.   can be used as a unary predicate. in [120](36),
   [121](33b) is predicated of the term gerald.

   (36) \x.(walk(x) & chew_gum(x)) (gerald)

   now [122](36) says that gerald has the property of walking and chewing
   gum, which has the same meaning as [123](37).

   (37) (walk(gerald) & chew_gum(gerald))

   what we have done here is remove the \x from the beginning of
   \x.(walk(x) & chew_gum(x)) and replaced all occurrences of x in
   (walk(x) & chew_gum(x)) by gerald. we'll use   [  /x] as notation for the
   operation of replacing all free occurrences of x in    by the expression
     . so:
(walk(x) & chew_gum(x))[gerald/x]

   is the same expression as [124](37). the "reduction" of [125](36) to
   [126](37) is an extremely useful operation in simplifying semantic
   representations, and we shall use it a lot in the rest of this chapter.
   the operation is often called   -reduction. in order for it to be
   semantically justified, we want it to hold that   x.   (  ) has the same
   semantic values as   [  /x]. this is indeed true, subject to a slight
   complication that we will come to shortly. in order to carry of
     -reduction of expressions in nltk, we can call the simplify() method
   [127][1] .


>>> expr = read_expr(r'\x.(walk(x) & chew_gum(x))(gerald)')
>>> print(expr)
\x.(walk(x) & chew_gum(x))(gerald)
>>> print(expr.simplify()) [128] [1]
(walk(gerald) & chew_gum(gerald))

   although we have so far only considered cases where the body of the   
   abstract is an open formula, i.e., of type t, this is not a necessary
   restriction; the body can be any well-formed expression. here's an
   example with two   s.

   (38) \x.\y.(dog(x) & own(y, x))

   just as [129](33b) plays the role of a unary predicate, [130](38) works
   like a binary predicate: it can be applied directly to two arguments
   [131][1] . logical expressions may contain nested   s such as \x.\y. to
   be written in the abbreviated form \x y. [132][1] .


>>> print(read_expr(r'\x.\y.(dog(x) & own(y, x))(cyril)').simplify())
\y.(dog(cyril) & own(y,cyril))
>>> print(read_expr(r'\x y.(dog(x) & own(y, x))(cyril, angus)').simplify()) [133
] [1]
(dog(cyril) & own(angus,cyril))

   all our    abstracts so far have involved the familiar first order
   variables: x, y and so on     variables of type e. but suppose we want to
   treat one abstract, say \x.walk(x) as the argument of another   
   abstract? we might try this:
\y.y(angus)(\x.walk(x))

   but since the variable y is stipulated to be of type e, \y.y(angus)
   only applies to arguments of type e while \x.walk(x) is of type    e, t   !
   instead, we need to allow abstraction over variables of higher type.
   let's use p and q as variables of type    e, t   , and then we can have an
   abstract such as \p.p(angus). since p is of type    e, t   , the whole
   abstract is of type       e, t   , t   . then \p.p(angus)(\x.walk(x)) is legal,
   and can be simplified via   -reduction to \x.walk(x)(angus) and then
   again to walk(angus)

   when carrying out   -reduction, some care has to be taken with
   variables. consider, for example, the    terms [134](39a) and
   [135](39b), which differ only in the identity of a free variable.

   (39)

   a. \y.see(y, x)

   b. \y.see(y, z)

   suppose now that we apply the   -term \p.exists x.p(x) to each of these
   terms:

   (40)

   a. \p.exists x.p(x)(\y.see(y, x))

   b. \p.exists x.p(x)(\y.see(y, z))

   we pointed out earlier that the results of the application should be
   semantically equivalent. but if we let the free variable x in
   [136](39a) fall inside the scope of the existential quantifier in
   [137](40a), then after reduction, the results will be different:

   (41)

   a. exists x.see(x, x)

   b. exists x.see(x, z)

   [138](41a) means there is some x that sees him/herself, whereas
   [139](41b) means that there is some x that sees an unspecified
   individual z. what has gone wrong here? clearly, we want to forbid the
   kind of variable "capture" shown in [140](41a).

   in order to deal with this problem, let's step back a moment. does it
   matter what particular name we use for the variable bound by the
   existential quantifier in the function expression of [141](40a)? the
   answer is no. in fact, given any variable-binding expression (involving
      ,     or   ), the name chosen for the bound variable is completely
   arbitrary. for example, exists x.p(x) and exists y.p(y) are equivalent;
   they are called    equivalents, or alphabetic variants. the process of
   relabeling bound variables is known as   -conversion. when we test for
   equality of variablebinderexpressions in the logic module (i.e., using
   ==), we are in fact testing for   -equivalence:


>>> expr1 = read_expr('exists x.p(x)')
>>> print(expr1)
exists x.p(x)
>>> expr2 = expr1.alpha_convert(nltk.sem.variable('z'))
>>> print(expr2)
exists z.p(z)
>>> expr1 == expr2
true

   when   -reduction is carried out on an application f(a), we check
   whether there are free variables in a which also occur as bound
   variables in any subterms of f. suppose, as in the example discussed
   above, that x is free in a, and that f contains the subterm exists
   x.p(x). in this case, we produce an alphabetic variant of exists
   x.p(x), say, exists z1.p(z1), and then carry on with the reduction.
   this relabeling is carried out automatically by the   -reduction code in
   logic, and the results can be seen in the following example.


>>> expr3 = read_expr('\p.(exists x.p(x))(\y.see(y, x))')
>>> print(expr3)
(\p.exists x.p(x))(\y.see(y,x))
>>> print(expr3.simplify())
exists z1.see(z1,x)

   note

   as you work through examples like these in the following sections, you
   may find that the logical expressions which are returned have different
   variable names; for example you might see z14 in place of z1 in the
   above formula. this change in labeling is innocuous     in fact, it is
   just an illustration of alphabetic variants.

   after this excursus, let's return to the task of building logical forms
   for english sentences.

4.3   quantified nps

   at the start of this section, we briefly described how to build a
   semantic representation for cyril barks. you would be forgiven for
   thinking this was all too easy     surely there is a bit more to building
   id152. what about quantifiers, for instance? right,
   this is a crucial issue. for example, we want [142](42a) to be given
   the logical form in [143](42b). how can this be accomplished?

   (42)

   a. a dog barks.

   b. exists x.(dog(x) & bark(x))

   let's make the assumption that our only operation for building complex
   semantic representations is function application. then our problem is
   this: how do we give a semantic representation to the quantified nps a
   dog so that it can be combined with bark to give the result in
   [144](42b)? as a first step, let's make the subject's sem value act as
   the function expression rather than the argument. (this is sometimes
   called type-raising.) now we are looking for way of instantiating ?np
   so that [sem=<?np(\x.bark(x))>] is equivalent to [sem=<exists x.(dog(x)
   & bark(x))>]. doesn't this look a bit reminiscent of carrying out
     -reduction in the   -calculus? in other words, we want a    term m to
   replace ?np so that applying m to 'bark' yields [145](42b). to do this,
   we replace the occurrence of 'bark' in [146](42b) by a predicate
   variable 'p', and bind the variable with   , as shown in [147](43).

   (43) \p.exists x.(dog(x) & p(x))

   we have used a different style of variable in [148](43)     that is 'p'
   rather than 'x' or 'y'     to signal that we are abstracting over a
   different kind of object     not an individual, but a function expression
   of type    e, t   . so the type of [149](43) as a whole is       e, t   , t   . we
   will take this to be the type of nps in general. to illustrate further,
   a universally quantified np will look like [150](44).

   (44) \p.all x.(dog(x) -> p(x))

   we are pretty much done now, except that we also want to carry out a
   further abstraction plus application for the process of combining the
   semantics of the determiner a, namely [151](43), with the semantics of
   dog.

   (45) \q p.exists x.(q(x) & p(x))

   applying [152](46) as a function expression to dog yields [153](43),
   and applying that to bark gives us \p.exists x.(dog(x) &
   p(x))(\x.bark(x)). finally, carrying out   -reduction yields just what
   we wanted, namely [154](42b).

4.4   transitive verbs

   our next challenge is to deal with sentences containing transitive
   verbs, such as [155](46).

   (46) angus chases a dog.

   the output semantics that we want to build is exists x.(dog(x) &
   chase(angus, x)). let's look at how we can use   -abstraction to get
   this result. a significant constraint on possible solutions is to
   require that the semantic representation of a dog be independent of
   whether the np acts as subject or object of the sentence. in other
   words, we want to get the formula above as our output while sticking to
   [156](43) as the np semantics. a second constraint is that vps should
   have a uniform type of interpretation regardless of whether they
   consist of just an intransitive verb or a transitive verb plus object.
   more specifically, we stipulate that vps are always of type    e, t   .
   given these constraints, here's a semantic representation for chases a
   dog which does the trick.

   (47) \y.exists x.(dog(x) & chase(y, x))

   think of [157](47) as the property of being a y such that for some dog
   x, y chases x; or more colloquially, being a y who chases a dog. our
   task now resolves to designing a semantic representation for chases
   which can combine with [158](43) so as to allow [159](47) to be
   derived.

   let's carry out the inverse of   -reduction on [160](47), giving rise to
   [161](48).

   (48) \p.exists x.(dog(x) & p(x))(\z.chase(y, z))

   [162](48) may be slightly hard to read at first; you need to see that
   it involves applying the quantified np representation from [163](43) to
   \z.chase(y,z). [164](48) is equivalent via   -reduction to exists
   x.(dog(x) & chase(y, x)).

   now let's replace the function expression in [165](48) by a variable x
   of the same type as an np; that is, of type       e, t   , t   .

   (49) x(\z.chase(y, z))

   the representation of a transitive verb will have to apply to an
   argument of the type of x to yield a function expression of the type of
   vps, that is, of type    e, t   . we can ensure this by abstracting over
   both the x variable in [166](49) and also the subject variable y. so
   the full solution is reached by giving chases the semantic
   representation shown in [167](50).

   (50) \x y.x(\x.chase(y, x))

   if [168](50) is applied to [169](43), the result after   -reduction is
   equivalent to [170](47), which is what we wanted all along:

>>> read_expr = nltk.sem.expression.fromstring
>>> tvp = read_expr(r'\x x.x(\y.chase(x,y))')
>>> np = read_expr(r'(\p.exists x.(dog(x) & p(x)))')
>>> vp = nltk.sem.applicationexpression(tvp, np)
>>> print(vp)
(\x x.x(\y.chase(x,y)))(\p.exists x.(dog(x) & p(x)))
>>> print(vp.simplify())
\x.exists z2.(dog(z2) & chase(x,z2))

   in order to build a semantic representation for a sentence, we also
   need to combine in the semantics of the subject np. if the latter is a
   quantified expression like every girl, everything proceeds in the same
   way as we showed for a dog barks earlier on; the subject is translated
   as a function expression which is applied to the semantic
   representation of the vp. however, we now seem to have created another
   problem for ourselves with proper names. so far, these have been
   treated semantically as individual constants, and these cannot be
   applied as functions to expressions like [171](47). consequently, we
   need to come up with a different semantic representation for them. what
   we do in this case is re-interpret proper names so that they too are
   function expressions, like quantified nps. here is the required   
   expression for angus.

   (51) \p.p(angus)

   [172](51) denotes the characteristic function corresponding to the set
   of all properties which are true of angus. converting from an
   individual constant angus to \p.p(angus) is another example of
   type-raising, briefly mentioned earlier, and allows us to replace a
   boolean-valued application such as \x.walk(x)(angus) with an equivalent
   function application \p.p(angus)(\x.walk(x)). by   -reduction, both
   expressions reduce to walk(angus).

   the grammar simple-sem.fid18 contains a small set of rules for parsing
   and translating simple examples of the kind that we have been looking
   at. here's a slightly more complicated example.

>>> from nltk import load_parser
>>> parser = load_parser('grammars/book_grammars/simple-sem.fid18', trace=0)
>>> sentence = 'angus gives a bone to every dog'
>>> tokens = sentence.split()
>>> for tree in parser.parse(tokens):
...     print(tree.label()['sem'])
all z2.(dog(z2) -> exists z1.(bone(z1) & give(angus,z1,z2)))

   nltk provides some utilities to make it easier to derive and inspect
   semantic interpretations. the function interpret_sents() is intended
   for interpretation of a list of input sentences. it builds a dictionary
   d where for each sentence sent in the input, d[sent] is a list of pairs
   (synrep, semrep) consisting of trees and semantic representations for
   sent. the value is a list since sent may be syntactically ambiguous; in
   the following example, however, there is only one parse tree per
   sentence in the list.

>>> sents = ['irene walks', 'cyril bites an ankle']
>>> grammar_file = 'grammars/book_grammars/simple-sem.fid18'
>>> for results in nltk.interpret_sents(sents, grammar_file):
...     for (synrep, semrep) in results:
...         print(synrep)
(s[sem=<walk(irene)>]
  (np[-loc, num='sg', sem=<\p.p(irene)>]
    (propn[-loc, num='sg', sem=<\p.p(irene)>] irene))
  (vp[num='sg', sem=<\x.walk(x)>]
    (iv[num='sg', sem=<\x.walk(x)>, tns='pres'] walks)))
(s[sem=<exists z3.(ankle(z3) & bite(cyril,z3))>]
  (np[-loc, num='sg', sem=<\p.p(cyril)>]
    (propn[-loc, num='sg', sem=<\p.p(cyril)>] cyril))
  (vp[num='sg', sem=<\x.exists z3.(ankle(z3) & bite(x,z3))>]
    (tv[num='sg', sem=<\x x.x(\y.bite(x,y))>, tns='pres'] bites)
    (np[num='sg', sem=<\q.exists x.(ankle(x) & q(x))>]
      (det[num='sg', sem=<\p q.exists x.(p(x) & q(x))>] an)
      (nom[num='sg', sem=<\x.ankle(x)>]
        (n[num='sg', sem=<\x.ankle(x)>] ankle)))))

   we have seen now how to convert english sentences into logical forms,
   and earlier we saw how logical forms could be checked as true or false
   in a model. putting these two mappings together, we can check the truth
   value of english sentences in a given model. let's take model m as
   defined above. the utility evaluate_sents() resembles interpret_sents()
   except that we need to pass a model and a variable assignment as
   parameters. the output is a triple (synrep, semrep, value) where
   synrep, semrep are as before, and value is a truth value. for
   simplicity, the following example only processes a single sentence.

>>> v = """
... bertie => b
... olive => o
... cyril => c
... boy => {b}
... girl => {o}
... dog => {c}
... walk => {o, c}
... see => {(b, o), (c, b), (o, c)}
... """
>>> val = nltk.valuation.fromstring(v)
>>> g = nltk.assignment(val.domain)
>>> m = nltk.model(val.domain, val)
>>> sent = 'cyril sees every boy'
>>> grammar_file = 'grammars/book_grammars/simple-sem.fid18'
>>> results = nltk.evaluate_sents([sent], grammar_file, m, g)[0]
>>> for (syntree, semrep, value) in results:
...     print(semrep)
...     print(value)
all z4.(boy(z4) -> see(cyril,z4))
true

4.5   quantifier ambiguity revisited

   one important limitation of the methods described above is that they do
   not deal with scope ambiguity. our translation method is syntax-driven,
   in the sense that the semantic representation is closely coupled with
   the syntactic analysis, and the scope of the quantifiers in the
   semantics therefore reflects the relative scope of the corresponding np
   s in the syntactic parse tree. consequently, a sentence like [173](26),
   repeated here, will always be translated as [174](53a), not [175](53b).

   (52) every girl chases a dog.

   (53)

   a. all x.(girl(x) -> exists y.(dog(y) & chase(x,y)))

   b. exists y.(dog(y) & all x.(girl(x) -> chase(x,y)))

   there are numerous approaches to dealing with scope ambiguity, and we
   will look very briefly at one of the simplest. to start with, let's
   briefly consider the structure of scoped formulas. [176]4.1 depicts the
   way in which the two readings of [177](52) differ.

   ../images/quant-ambig.png

   figure 4.1: quantifier scopings

   let's consider the left hand structure first. at the top, we have the
   quantifier corresponding to every girl. the    can be thought of as a
   placeholder for whatever is inside the scope of the quantifier. moving
   downwards, we see that we can plug in the quantifier corresponding to a
   dog as an instantiation of   . this gives a new placeholder   ,
   representing the scope of a dog, and into this we can plug the 'core'
   of the semantics, namely the open sentence corresponding to x chases y.
   the structure on the right hand side is identical, except we have
   swapped round the order of the two quantifiers.

   in the method known as cooper storage, a semantic representation is no
   longer an expression of id85, but instead a pair
   consisting of a "core" semantic representation plus a list of binding
   operators. for the moment, think of a binding operator as being
   identical to the semantic representation of a quantified np such as
   [178](44) or [179](45). following along the lines indicated in
   [180]4.1, let's assume that we have constructed a cooper-storage style
   semantic representation of sentence [181](52), and let's take our core
   to be the open formula chase(x,y). given a list of binding operators
   corresponding to the two nps in [182](52), we pick a binding operator
   off the list, and combine it with the core.
\p.exists y.(dog(y) & p(y))(\z2.chase(z1,z2))

   then we take the result, and apply the next binding operator from the
   list to it.
\p.all x.(girl(x) -> p(x))(\z1.exists x.(dog(x) & chase(z1,x)))

   once the list is empty, we have a conventional logical form for the
   sentence. combining binding operators with the core in this way is
   called s-retrieval. if we are careful to allow every possible order of
   binding operators (for example, by taking all permutations of the list,
   cf [183]4.5), then we will be able to generate every possible scope
   ordering of quantifiers.

   the next question to address is how we build up a core+store
   representation compositionally. as before, each phrasal and lexical
   rule in the grammar will have a sem feature, but now there will be
   embedded features core and store. to illustrate the machinery, let's
   consider a simpler example, namely cyril smiles. here's a lexical rule
   for the verb smiles (taken from the grammar storage.fid18) which looks
   pretty innocuous.
iv[sem=[core=<\x.smile(x)>, store=(/)]] -> 'smiles'

   the rule for the proper name cyril is more complex.
np[sem=[core=<@x>, store=(<bo(\p.p(cyril),@x)>)]] -> 'cyril'

   the bo predicate has two subparts: the standard (type-raised)
   representation of a proper name, and the expression @x, which is called
   the address of the binding operator. (we'll explain the need for the
   address variable shortly.) @x is a metavariable, that is, a variable
   that ranges over individual variables of the logic and, as you will
   see, it also provides the value of core. the rule for vp just
   percolates up the semantics of the iv, and the interesting work is done
   by the s rule.
vp[sem=?s] -> iv[sem=?s]

s[sem=[core=<?vp(?np)>, store=(?b1+?b2)]] ->
   np[sem=[core=?np, store=?b1]] vp[sem=[core=?vp, store=?b2]]

   the core value at the s node is the result of applying the vp's core
   value, namely \x.smile(x), to the subject np's value. the latter will
   not be @x, but rather an instantiation of @x, say z3. after
     -reduction, <?vp(?np)> will be unified with <smile(z3)>. now, when @x
   is instantiated as part of the parsing process, it will be instantiated
   uniformly. in particular, the occurrence of @x in the subject np's
   store will also be mapped to z3, yielding the element
   bo(\p.p(cyril),z3). these steps can be seen in the following parse
   tree.
(s[sem=[core=<smile(z3)>, store=(bo(\p.p(cyril),z3))]]
  (np[sem=[core=<z3>, store=(bo(\p.p(cyril),z3))]] cyril)
  (vp[sem=[core=<\x.smile(x)>, store=()]]
    (iv[sem=[core=<\x.smile(x)>, store=()]] smiles)))

   let's return to our more complex example, [184](52), and see what the
   storage style sem value is, after parsing with grammar storage.fid18.
core  = <chase(z1,z2)>
store = (bo(\p.all x.(girl(x) -> p(x)),z1), bo(\p.exists x.(dog(x) & p(x)),z2))

   it should be clearer now why the address variables are an important
   part of the binding operator. recall that during s-retrieval, we will
   be taking binding operators off the store list and applying them
   successively to the core. suppose we start with bo(\p.all x.(girl(x) ->
   p(x)),z1), which we want to combine with chase(z1,z2). the quantifier
   part of binding operator is \p.all x.(girl(x) -> p(x)), and to combine
   this with chase(z1,z2), the latter needs to first be turned into a
     -abstract. how do we know which variable to abstract over? this is
   what the address z1 tells us; i.e. that every girl has the role of
   chaser rather than chasee.

   the module nltk.sem.cooper_storage deals with the task of turning
   storage-style semantic representations into standard logical forms.
   first, we construct a cooperstore instance, and inspect its store and
   core.


>>> from nltk.sem import cooper_storage as cs
>>> sentence = 'every girl chases a dog'
>>> trees = cs.parse_with_bindops(sentence, grammar='grammars/book_grammars/stor
age.fid18')
>>> semrep = trees[0].label()['sem']
>>> cs_semrep = cs.cooperstore(semrep)
>>> print(cs_semrep.core)
chase(z2,z4)
>>> for bo in cs_semrep.store:
...     print(bo)
bo(\p.all x.(girl(x) -> p(x)),z2)
bo(\p.exists x.(dog(x) & p(x)),z4)

   finally we call s_retrieve() and check the readings.


>>> cs_semrep.s_retrieve(trace=true)
permutation 1
   (\p.all x.(girl(x) -> p(x)))(\z2.chase(z2,z4))
   (\p.exists x.(dog(x) & p(x)))(\z4.all x.(girl(x) -> chase(x,z4)))
permutation 2
   (\p.exists x.(dog(x) & p(x)))(\z4.chase(z2,z4))
   (\p.all x.(girl(x) -> p(x)))(\z2.exists x.(dog(x) & chase(z2,x)))


>>> for reading in cs_semrep.readings:
...     print(reading)
exists x.(dog(x) & all z3.(girl(z3) -> chase(z3,x)))
all x.(girl(x) -> exists z4.(dog(z4) & chase(x,z4)))

5   discourse semantics

   a discourse is a sequence of sentences. very often, the interpretation
   of a sentence in a discourse depends what preceded it. a clear example
   of this comes from anaphoric pronouns, such as he, she and it. given
   discourse such as angus used to have a dog. but he recently
   disappeared., you will probably interpret he as referring to angus's
   dog. however, in angus used to have a dog. he took him for walks in new
   town., you are more likely to interpret he as referring to angus
   himself.

5.1   discourse representation theory

   the standard approach to quantification in id85 is limited
   to single sentences. yet there seem to be examples where the scope of a
   quantifier can extend over two or more sentences. we saw one above, and
   here's a second example, together with a translation.

   (54)

   a. angus owns a dog. it bit irene.

   b.    x.(dog(x)     own(angus, x)     bite(x, irene))

   that is, the np a dog acts like a quantifier which binds the it in the
   second sentence. discourse representation theory (drt) was developed
   with the specific goal of providing a means for handling this and other
   semantic phenomena which seem to be characteristic of discourse. a
   discourse representation structure (drs) presents the meaning of
   discourse in terms of a list of discourse referents and a list of
   conditions. the discourse referents are the things under discussion in
   the discourse, and they correspond to the individual variables of
   id85. the drs conditions apply to those discourse
   referents, and correspond to atomic open formulas of id85.
   [185]5.1 illustrates how drs for the first sentence in [186](54a) is
   augmented to become a drs for both sentences.
   ../images/drs1.png

   figure 5.1: building a drs; the drs on the left hand side represents
   the result of processing the first sentence in the discourse, while the
   drs on the right hand side shows the effect of processing the second
   sentence and integrating its content.

   when the second sentence of [187](54a) is processed, it is interpreted
   in the context of what is already present in the left hand side of
   [188]5.1. the pronoun it triggers the addition of a new discourse
   referent, say u, and we need to find an anaphoric antecedent for it    
   that is, we want to work out what it refers to. in drt, the task of
   finding the antecedent for an anaphoric pronoun involves linking it to
   a discourse referent already within the current drs, and y is the
   obvious choice. (we will say more about id2 shortly.)
   this processing step gives rise to a new condition u = y. the remaining
   content contributed by the second sentence is also merged with the
   content of the first, and this is shown on the right hand side of
   [189]5.1.

   [190]5.1 illustrates how a drs can represent more than just a single
   sentence. in this case, it is a two-sentence discourse, but in
   principle a single drs could correspond to the interpretation of a
   whole text. we can inquire into the truth conditions of the right hand
   drs in [191]5.1. informally, it is true in some situation s if there
   are entities a, c and i in s corresponding to the discourse referents
   in the drs such that all the conditions are true in s ; that is, a is
   named angus, c is a dog, a owns c, i is named irene and c bit i.

   in order to process drss computationally, we need to convert them into
   a linear format. here's an example, where the drs is a pair consisting
   of a list of discourse of referents and a list of drs conditions:
([x, y], [angus(x), dog(y), own(x,y)])

   the easiest way to build a drs object in nltk is by parsing a string
   representation [192][1] .

>>> read_dexpr = nltk.sem.drtexpression.fromstring
>>> drs1 = read_dexpr('([x, y], [angus(x), dog(y), own(x, y)])') [193] [1]
>>> print(drs1)
([x,y],[angus(x), dog(y), own(x,y)])

   we can use the draw() method [194][1] to visualize the result, as shown
   in [195]5.2.

>>> drs1.draw() [196] [1]

   ../images/drs_screenshot0.png

   figure 5.2: drs screenshot

   when we discussed the truth conditions of the drss in [197]5.1, we
   assumed that the topmost discourse referents were interpreted as
   existential quantifiers, while the conditions were interpreted as
   though they are conjoined. in fact, every drs can be translated into a
   formula of id85, and the fol() method implements this
   translation.

>>> print(drs1.fol())
exists x y.(angus(x) & dog(y) & own(x,y))

   in addition to the functionality available for id85
   expressions, drt expressions have a drs-concatenation operator,
   represented as the + symbol. the concatenation of two drss is a single
   drs containing the merged discourse referents and the conditions from
   both arguments. drs-concatenation automatically   -converts bound
   variables to avoid name-clashes.

>>> drs2 = read_dexpr('([x], [walk(x)]) + ([y], [run(y)])')
>>> print(drs2)
(([x],[walk(x)]) + ([y],[run(y)]))
>>> print(drs2.simplify())
([x,y],[walk(x), run(y)])

   while all the conditions seen so far have been atomic, it is possible
   to embed one drs within another, and this is how universal
   quantification is handled. in drs3, there are no top-level discourse
   referents, and the sole condition is made up of two sub-drss, connected
   by an implication. again, we can use fol() to get a handle on the truth
   conditions.

>>> drs3 = read_dexpr('([], [(([x], [dog(x)]) -> ([y],[ankle(y), bite(x, y)]))])
')
>>> print(drs3.fol())
all x.(dog(x) -> exists y.(ankle(y) & bite(x,y)))

   we pointed out earlier that drt is designed to allow anaphoric pronouns
   to be interpreted by linking to existing discourse referents. drt sets
   constraints on which discourse referents are "accessible" as possible
   antecedents, but is not intended to explain how a particular antecedent
   is chosen from the set of candidates. the module
   nltk.sem.drt_resolve_anaphora adopts a similarly conservative strategy:
   if the drs contains a condition of the form pro(x), the method
   resolve_anaphora() replaces this with a condition of the form x =
   [...], where [...] is a list of possible antecedents.

>>> drs4 = read_dexpr('([x, y], [angus(x), dog(y), own(x, y)])')
>>> drs5 = read_dexpr('([u, z], [pro(u), irene(z), bite(u, z)])')
>>> drs6 = drs4 + drs5
>>> print(drs6.simplify())
([u,x,y,z],[angus(x), dog(y), own(x,y), pro(u), irene(z), bite(u,z)])
>>> print(drs6.simplify().resolve_anaphora())
([u,x,y,z],[angus(x), dog(y), own(x,y), (u = [x,y,z]), irene(z), bite(u,z)])

   since the algorithm for id2 has been separated into its
   own module, this facilitates swapping in alternative procedures which
   try to make more intelligent guesses about the correct antecedent.

   our treatment of drss is fully compatible with the existing machinery
   for handling    abstraction, and consequently it is straightforward to
   build compositional semantic representations which are based on drt
   rather than id85. this technique is illustrated in the
   following rule for indefinites (which is part of the grammar drt.fid18).
   for ease of comparison, we have added the parallel rule for indefinites
   from simple-sem.fid18.
det[num=sg,sem=<\p q.(([x],[]) + p(x) + q(x))>] -> 'a'
det[num=sg,sem=<\p q. exists x.(p(x) & q(x))>] -> 'a'

   to get a better idea of how the drt rule works, look at this subtree
   for the np a dog.
(np[num='sg', sem=<\q.(([x],[dog(x)]) + q(x))>]
  (det[num='sg', sem=<\p q.((([x],[]) + p(x)) + q(x))>] a)
  (nom[num='sg', sem=<\x.([],[dog(x)])>]
    (n[num='sg', sem=<\x.([],[dog(x)])>] dog)))))

   the    abstract for the indefinite is applied as a function expression
   to \x.([],[dog(x)]) which leads to \q.(([x],[]) + ([],[dog(x)]) +
   q(x)); after simplification, we get \q.(([x],[dog(x)]) + q(x)) as the
   representation for the np as a whole.

   in order to parse with grammar drt.fid18, we specify in the call to
   load_parser() that sem values in feature structures are to be parsed
   using drtparser.

>>> from nltk import load_parser
>>> parser = load_parser('grammars/book_grammars/drt.fid18', logic_parser=nltk.se
m.drt.drtparser())
>>> trees = list(parser.parse('angus owns a dog'.split()))
>>> print(trees[0].label()['sem'].simplify())
([x,z2],[angus(x), dog(z2), own(x,z2)])

5.2   discourse processing

   when we interpret a sentence, we use a rich context for interpretation,
   determined in part by the preceding context and in part by our
   background assumptions. drt provides a theory of how the meaning of a
   sentence is integrated into a representation of the prior discourse,
   but two things have been glaringly absent from the processing approach
   just discussed. first, there has been no attempt to incorporate any
   kind of id136; and second, we have only processed individual
   sentences. these omissions are redressed by the module
   nltk.id136.discourse.

   whereas a discourse is a sequence s[1], ... s[n] of sentences, a
   discourse thread is a sequence s[1]-r[i], ... s[n]-r[j] of readings,
   one for each sentence in the discourse. the module processes sentences
   incrementally, keeping track of all possible threads when there is
   ambiguity. for simplicity, the following example ignores scope
   ambiguity.

>>> dt = nltk.discoursetester(['a student dances', 'every student is a person'])
>>> dt.readings()

s0 readings:

s0-r0: exists x.(student(x) & dance(x))

s1 readings:

s1-r0: all x.(student(x) -> person(x))

   when a new sentence is added to the current discourse, setting the
   parameter consistchk=true causes consistency to be checked by invoking
   the model checker for each thread, i.e., sequence of admissible
   readings. in this case, the user has the option of retracting the
   sentence in question.

>>> dt.add_sentence('no person dances', consistchk=true)
inconsistent discourse: d0 ['s0-r0', 's1-r0', 's2-r0']:
    s0-r0: exists x.(student(x) & dance(x))
    s1-r0: all x.(student(x) -> person(x))
    s2-r0: -exists x.(person(x) & dance(x))


>>> dt.retract_sentence('no person dances', verbose=true)
current sentences are
s0: a student dances
s1: every student is a person

   in a similar manner, we use informchk=true to check whether a new
   sentence    is informative relative to the current discourse. the
   theorem prover treats existing sentences in the thread as assumptions
   and attempts to prove   ; it is informative if no such proof can be
   found.

>>> dt.add_sentence('a person dances', informchk=true)
sentence 'a person dances' under reading 'exists x.(person(x) & dance(x))':
not informative relative to thread 'd0'

   it is also possible to pass in an additional set of assumptions as
   background knowledge and use these to filter out inconsistent readings;
   see the discourse howto at http://nltk.org/howto for more details.

   the discourse module can accommodate semantic ambiguity and filter out
   readings that are not admissible. the following example invokes both
   glue semantics as well as drt. since the glue semantics module is
   configured to use the wide-coverage malt dependency parser, the input
   (every dog chases a boy. he runs.) needs to be tagged as well as
   tokenized.

>>> from nltk.tag import regexptagger
>>> tagger = regexptagger(
...     [('^(chases|runs)$', 'vb'),
...      ('^(a)$', 'ex_quant'),
...      ('^(every)$', 'univ_quant'),
...      ('^(dog|boy)$', 'nn'),
...      ('^(he)$', 'prp')
... ])
>>> rc = nltk.drtgluereadingcommand(depparser=nltk.maltparser(tagger=tagger))
>>> dt = nltk.discoursetester(['every dog chases a boy', 'he runs'], rc)
>>> dt.readings()

s0 readings:

s0-r0: ([],[(([x],[dog(x)]) -> ([z3],[boy(z3), chases(x,z3)]))])
s0-r1: ([z4],[boy(z4), (([x],[dog(x)]) -> ([],[chases(x,z4)]))])

s1 readings:

s1-r0: ([x],[pro(x), runs(x)])

   the first sentence of the discourse has two possible readings,
   depending on the quantfier scoping. the unique reading of the second
   sentence represents the pronoun he via the condition pro(x)`. now let's
   look at the discourse threads that result:

>>> dt.readings(show_thread_readings=true)
d0: ['s0-r0', 's1-r0'] : invalid: anaphoraresolutionexception
d1: ['s0-r1', 's1-r0'] : ([z6,z10],[boy(z6), (([x],[dog(x)]) ->
([],[chases(x,z6)])), (z10 = z6), runs(z10)])

   when we examine threads d0 and d1, we see that reading s0-r0, where
   every dog out-scopes a boy, is deemed inadmissible because the pronoun
   in the second sentence cannot be resolved. by contrast, in thread d1
   the pronoun (relettered to z24) has been bound via the equation (z24 =
   z20).

   inadmissible readings can be filtered out by passing the parameter
   filter=true.

>>> dt.readings(show_thread_readings=true, filter=true)
d1: ['s0-r1', 's1-r0'] : ([z12,z15],[boy(z12), (([x],[dog(x)]) ->
([],[chases(x,z12)])), (z17 = z12), runs(z15)])

   although this little discourse is extremely limited, it should give you
   a feel for the kind of semantic processing issues that arise when we go
   beyond single sentences, and also a feel for the techniques that can be
   deployed to address them.

6   summary

     * first order logic is a suitable language for representing natural
       language meaning in a computational setting since it is flexible
       enough to represent many useful aspects of natural meaning, and
       there are efficient theorem provers for reasoning with first order
       logic. (equally, there are a variety of phenomena in natural
       language semantics which are believed to require more powerful
       logical mechanisms.)
     * as well as translating natural language sentences into first order
       logic, we can state the truth conditions of these sentences by
       examining models of first order formulas.
     * in order to build meaning representations compositionally, we
       supplement first order logic with the    calculus.
     *   -reduction in the   -calculus corresponds semantically to
       application of a function to an argument. syntactically, it
       involves replacing a variable bound by    in the function expression
       with the expression that provides the argument in the function
       application.
     * a key part of constructing a model lies in building a valuation
       which assigns interpretations to non-logical constants. these are
       interpreted as either n-ary predicates or as individual constants.
     * an open expression is an expression containing one or more free
       variables. open expressions only receive an interpretation when
       their free variables receive values from a variable assignment.
     * quantifiers are interpreted by constructing, for a formula   [x]
       open in variable x, the set of individuals which make   [x] true
       when an assignment g assigns them as the value of x. the quantifier
       then places constraints on that set.
     * a closed expression is one that has no free variables; that is, the
       variables are all bound. a closed sentence is true or false with
       respect to all variable assignments.
     * if two formulas differ only in the label of the variable bound by
       binding operator (i.e,    or a quantifier) , they are said to be   
       equivalents. the result of relabeling a bound variable in a formula
       is called   -conversion.
     * given a formula with two nested quantifiers q[1] and q[2], the
       outermost quantifier q[1] is said to have wide scope (or scope over
       q[2]). english sentences are frequently ambiguous with respect to
       the scope of the quantifiers they contain.
     * english sentences can be associated with a semantic representation
       by treating sem as a feature in a feature-based grammar. the sem
       value of a complex expressions typically involves functional
       application of the sem values of the component expressions.

7   further reading

   consult http://nltk.org/ for further materials on this chapter and on
   how to install the prover9 theorem prover and mace4 model builder.
   general information about these two id136 tools is given by
   [198](mccune, 2008).

   for more examples of semantic analysis with nltk, please see the
   semantics and logic howtos at http://nltk.org/howto. note that there
   are implementations of two other approaches to scope ambiguity, namely
   hole semantics as described in [199](blackburn & bos, 2005) and glue
   semantics as described in [200](dalrymple, 1999).

   there are many phenomena in natural language semantics which have not
   been touched on in this chapter, most notably:
    1. events, tense and aspect;
    2. semantic roles;
    3. generalized quantifiers such as most;
    4. intensional constructions involving, for example, verbs like may
       and believe.

   while (1) and (2) can be dealt with using id85, (3) and
   (4) require different logics. these issues are covered by many of the
   references in the readings below.

   a comprehensive overview of results and techniques in building natural
   language front-ends to databases can be found in [201](androutsopoulos,
   ritchie, & thanisch, 1995).

   any introductory book to modern logic will present propositional and
   first order logic. [202](hodges, 1977) is highly recommended as an
   entertaining and insightful text with many insightful illustrations
   from natural language.

   for a wide-ranging, two-volume textbook on logic that also presents
   contemporary material on the formal semantics of natural language,
   including montague grammar and intensional logic, see [203](gamut,
   1991) and [204](gamut, 1991). [205](kamp & reyle, 1993) provides the
   definitive account of discourse representation theory, and covers a
   large and interesting fragment of natural language, including tense,
   aspect and modality. another comprehensive study of the semantics of
   many natural language constructions is [206](carpenter, 1997).

   there are numerous works that introduce logical semantics within the
   framework of linguistic theory. [207](chierchia & mcconnell-ginet,
   1990) is relatively agnostic about syntax, while [208](heim & kratzer,
   1998) and [209](larson & segal, 1995) are both more explicitly oriented
   towards integrating truth-conditional semantics into a chomskyan
   framework.

   [210](blackburn & bos, 2005) is the first textbook devoted to
   computational semantics, and provides an excellent introduction to the
   area. it expands on many of the topics covered in this chapter,
   including underspecification of quantifier scope ambiguity, first order
   id136, and discourse processing.

   to gain an overview of more advanced contemporary approaches to
   semantics, including treatments of tense and generalized quantifiers,
   try consulting [211](lappin, 1996) or [212](benthem & meulen, 1997).

8   exercises

    1.     translate the following sentences into id118 and
       verify that they can be processed with expression.fromstring().
       provide a key which shows how the propositional variables in your
       translation correspond to expressions of english.
         1. if angus sings, it is not the case that bertie sulks.
         2. cyril runs and barks.
         3. it will snow if it doesn't rain.
         4. it's not the case that irene will be happy if olive or tofu
            comes.
         5. pat didn't cough or sneeze.
         6. if you don't come if i call, i won't come if you call.
    2.     translate the following sentences into predicate-argument formula
       of first order logic.
         1. angus likes cyril and irene hates cyril.
         2. tofu is taller than bertie.
         3. bruce loves himself and pat does too.
         4. cyril saw bertie, but angus didn't.
         5. cyril is a fourlegged friend.
         6. tofu and olive are near each other.
    3.     translate the following sentences into quantified formulas of
       first order logic.
         1. angus likes someone and someone likes julia.
         2. angus loves a dog who loves him.
         3. nobody smiles at pat.
         4. somebody coughs and sneezes.
         5. nobody coughed or sneezed.
         6. bruce loves somebody other than bruce.
         7. nobody other than matthew loves somebody pat.
         8. cyril likes everyone except for irene.
         9. exactly one person is asleep.
    4.     translate the following verb phrases using    abstracts.
       quantified formulas of first order logic.
         1. feed cyril and give a capuccino to angus
         2. be given 'war and peace' by pat
         3. be loved by everyone
         4. be loved or detested by everyone
         5. be loved by everyone and detested by no-one
    5.     consider the following statements:


>>> read_expr = nltk.sem.expression.fromstring
>>> e2 = read_expr('pat')
>>> e3 = nltk.sem.applicationexpression(e1, e2)
>>> print(e3.simplify())
exists y.love(pat, y)

       clearly something is missing here, namely a declaration of the
       value of e1. in order for applicationexpression(e1, e2) to be
         -convertible to exists y.love(pat, y), e1 must be a   -abstract
       which can take pat as an argument. your task is to construct such
       an abstract, bind it to e1, and satisfy yourself that the
       statements above are all satisfied (up to alphabetic variance). in
       addition, provide an informal english translation of e3.simplify().
       now carry on doing this same task for the further cases of
       e3.simplify() shown below.


>>> print(e3.simplify())
exists y.(love(pat,y) | love(y,pat))


>>> print(e3.simplify())
exists y.(love(pat,y) | love(y,pat))


>>> print(e3.simplify())
walk(fido)

    6.     as in the preceding exercise, find a    abstract e1 that yields
       results equivalent to those shown below.


>>> e2 = read_expr('chase')
>>> e3 = nltk.sem.applicationexpression(e1, e2)
>>> print(e3.simplify())
\x.all y.(dog(y) -> chase(x,pat))


>>> e2 = read_expr('chase')
>>> e3 = nltk.sem.applicationexpression(e1, e2)
>>> print(e3.simplify())
\x.exists y.(dog(y) & chase(pat,x))


>>> e2 = read_expr('give')
>>> e3 = nltk.sem.applicationexpression(e1, e2)
>>> print(e3.simplify())
\x0 x1.exists y.(present(y) & give(x1,y,x0))

    7.     as in the preceding exercise, find a    abstract e1 that yields
       results equivalent to those shown below.


>>> e2 = read_expr('bark')
>>> e3 = nltk.sem.applicationexpression(e1, e2)
>>> print(e3.simplify())
exists y.(dog(x) & bark(x))


>>> e2 = read_expr('bark')
>>> e3 = nltk.sem.applicationexpression(e1, e2)
>>> print(e3.simplify())
bark(fido)


>>> e2 = read_expr('\\p. all x. (dog(x) -> p(x))')
>>> e3 = nltk.sem.applicationexpression(e1, e2)
>>> print(e3.simplify())
all x.(dog(x) -> bark(x))

    8.     develop a method for translating english sentences into formulas
       with binary generalized quantifiers. in such an approach, given a
       generalized quantifier q, a quantified formula is of the form q(a,
       b), where both a and b are expressions of type    e, t   . then, for
       example, all(a, b) is true iff a denotes a subset of what b
       denotes.
    9.     extend the approach in the preceding exercise so that the truth
       conditions for quantifiers like most and exactly three can be
       computed in a model.
   10.     modify the sem.evaluate code so that it will give a helpful error
       message if an expression is not in the domain of a model's
       valuation function.
   11.     select three or four contiguous sentences from a book for
       children. a possible source of examples are the collections of
       stories in nltk.corpus.gutenberg: bryant-stories.txt,
       burgess-busterbrown.txt and edgeworth-parents.txt. develop a
       grammar which will allow your sentences to be translated into first
       order logic, and build a model which will allow those translations
       to be checked for truth or falsity.
   12.     carry out the preceding exercise, but use drt as the meaning
       representation.
   13.     taking [213](warren & pereira, 1982) as a starting point, develop
       a technique for converting a natural language query into a form
       that can be evaluated more efficiently in a model. for example,
       given a query of the form (p(x) & q(x)), convert it to (q(x) &
       p(x)) if the extension of q is smaller than the extension of p.

   about this document...

   updated for nltk 3.0. this is a chapter from natural language
   processing with python, by [214]steven bird, [215]ewan klein and
   [216]edward loper, copyright    2019 the authors. it is distributed with
   the natural language toolkit [http://nltk.org/], version 3.0, under the
   terms of the creative commons attribution-noncommercial-no derivative
   works 3.0 united states license
   [[217]http://creativecommons.org/licenses/by-nc-nd/3.0/us/].

   this document was built on mon 1 apr 2019 20:30:15 acst

references

   1. http://www.nltk.org/book/ch10.html#tab-cities
   2. http://www.nltk.org/book/ch10.html#tab-cities
   3. http://www.nltk.org/book/bibliography.html#warren1982eea
   4. http://www.nltk.org/book/bibliography.html#warren1982eea
   5. http://www.nltk.org/book/ch10.html#ex-dbq1
   6. http://www.nltk.org/book/ch09.html#chap-featgram
   7. http://www.nltk.org/book/ch10.html#ref-tuple-val
   8. http://www.nltk.org/book/ch10.html#tuple-val
   9. http://www.nltk.org/book/ch10.html#ex-sem1
  10. http://www.nltk.org/book/ch10.html#ex-sem1
  11. http://www.nltk.org/book/ch10.html#ex-sem1
  12. http://www.nltk.org/book/ch10.html#ex-sem1
  13. http://www.nltk.org/book/ch10.html#ex-dbq21
  14. http://www.nltk.org/book/ch10.html#ex-dbq22
  15. http://www.nltk.org/book/ch10.html#ex-dbq21
  16. http://www.nltk.org/book/ch10.html#ex-dbq22
  17. http://www.nltk.org/book/ch10.html#ex-dbq01
  18. http://www.nltk.org/book/ch10.html#ex-sem1
  19. http://www.nltk.org/book/ch10.html#ex-sem1
  20. http://www.nltk.org/book/ch10.html#fig-mimo-and-bruno
  21. http://www.nltk.org/book/ch10.html#ex-cons1
  22. http://www.nltk.org/book/ch10.html#ex-cons2
  23. http://www.nltk.org/book/ch10.html#ex-cons3
  24. http://www.nltk.org/book/ch10.html#ex-cons1
  25. http://www.nltk.org/book/ch10.html#ex-cons2
  26. http://www.nltk.org/book/ch10.html#ex-cons3
  27. http://www.nltk.org/book/ch10.html#ex-cons2
  28. http://www.nltk.org/book/ch10.html#ex-cons3
  29. http://www.nltk.org/book/ch10.html#fig-model-kids
  30. http://www.nltk.org/book/ch01.html#sec-automatic-natural-language-understanding
  31. http://www.nltk.org/book/bibliography.html#turing1950cmi
  32. http://www.nltk.org/book/ch10.html#ex-proplog1
  33. http://www.nltk.org/book/ch10.html#ex-proplog1
  34. http://www.nltk.org/book/ch10.html#tab-boolean-tcs
  35. http://www.nltk.org/book/ch10.html#ex-proplog8
  36. http://www.nltk.org/book/ch10.html#ex-north
  37. http://www.nltk.org/book/ch10.html#ex-proplog8
  38. http://www.nltk.org/book/ch10.html#ex-northprop
  39. http://www.nltk.org/book/ch10.html#ex-proplog8
  40. http://www.nltk.org/book/ch10.html#sec-fol
  41. http://www.nltk.org/book/ch10.html#tab-boolean-tcs
  42. http://www.nltk.org/book/ch10.html#ex-proplog8
  43. http://www.nltk.org/book/ch10.html#ex-predlog11
  44. http://www.nltk.org/book/ch10.html#ex-predlog12
  45. http://www.nltk.org/book/ch10.html#ex-predlog2
  46. http://www.nltk.org/book/ch10.html#ex-predlog31
  47. http://www.nltk.org/book/ch10.html#ex-predlog2
  48. http://www.nltk.org/book/ch10.html#ex-predlog2
  49. http://www.nltk.org/book/ch10.html#ex-predlog32
  50. http://www.nltk.org/book/ch10.html#ex-predlog41
  51. http://www.nltk.org/book/ch10.html#ex-predlog42
  52. http://www.nltk.org/book/ch10.html#ex-predlog41
  53. http://www.nltk.org/book/ch10.html#ex-predlog51
  54. http://www.nltk.org/book/ch10.html#ex-predlog52
  55. http://www.nltk.org/book/ch10.html#ex-predlog52
  56. http://www.nltk.org/book/ch10.html#ex-predlog61
  57. http://www.nltk.org/book/ch10.html#ex-predlog62
  58. http://www.nltk.org/book/ch10.html#ex-predlog63
  59. http://www.nltk.org/book/ch10.html#ex-predlog61
  60. http://www.nltk.org/book/ch10.html#ex-predlog7
  61. http://www.nltk.org/book/ch10.html#ex-predlog71
  62. http://www.nltk.org/book/ch10.html#ex-predlog71
  63. http://www.nltk.org/book/ch10.html#ex-predlog73
  64. http://www.nltk.org/book/ch10.html#ex-predlog71
  65. http://www.nltk.org/book/ch03.html#tab-string-methods
  66. http://www.nltk.org/book/ch10.html#ex-north
  67. http://www.nltk.org/book/ch10.html#goal
  68. http://www.nltk.org/book/ch10.html#ass1
  69. http://www.nltk.org/book/ch10.html#ass2
  70. http://www.nltk.org/book/ch10.html#new-prover
  71. http://www.nltk.org/book/ch10.html#prove
  72. http://www.nltk.org/book/ch10.html#ref-goal
  73. http://www.nltk.org/book/ch10.html#ref-ass1
  74. http://www.nltk.org/book/ch10.html#ref-ass2
  75. http://www.nltk.org/book/ch10.html#ref-new-prover
  76. http://www.nltk.org/book/ch10.html#ref-prove
  77. http://www.nltk.org/book/ch10.html#tab-nltk-logic
  78. http://www.nltk.org/book/ch10.html#sec-evaluating-english-sentences
  79. http://www.nltk.org/book/ch10.html#sec-nlu-introduction
  80. http://www.nltk.org/book/ch10.html#fig-model-kids
  81. http://www.nltk.org/book/ch10.html#ex-exists1
  82. http://www.nltk.org/book/ch10.html#ex-exists2
  83. http://www.nltk.org/book/ch10.html#ex-exists2
  84. http://www.nltk.org/book/ch10.html#ex-scope1
  85. http://www.nltk.org/book/ch10.html#ex-scope2b
  86. http://www.nltk.org/book/ch10.html#ex-scope2a
  87. http://www.nltk.org/book/ch10.html#ex-scope2a
  88. http://www.nltk.org/book/ch10.html#ex-scope2a
  89. http://www.nltk.org/book/ch10.html#ex-scope2b
  90. http://www.nltk.org/book/ch10.html#ex-scope2b
  91. http://www.nltk.org/book/ch10.html#ex-scope1
  92. http://www.nltk.org/book/ch10.html#ex-scope1
  93. http://www.nltk.org/book/ch10.html#ex-scope2
  94. http://www.nltk.org/book/ch10.html#ex-scope1
  95. http://www.nltk.org/book/ch10.html#ex-admire-mapping
  96. http://www.nltk.org/book/ch10.html#ex-admire-mapping
  97. http://www.nltk.org/book/ch10.html#ex-scope2a
  98. http://www.nltk.org/book/ch10.html#ex-scope2b
  99. http://www.nltk.org/book/ch10.html#ex-scope2a
 100. http://www.nltk.org/book/ch10.html#ex-scope2b
 101. http://www.nltk.org/book/ch09.html#chap-featgram
 102. http://www.nltk.org/book/bibliography.html#partee1995lsc
 103. http://www.nltk.org/book/ch10.html#ex-sem3
 104. http://www.nltk.org/book/ch10.html#ex-sem3
 105. http://www.nltk.org/book/ch10.html#ex-sem4
 106. http://www.nltk.org/book/ch10.html#ex-sem4
 107. http://www.nltk.org/book/ch10.html#ex-sem4
 108. http://www.nltk.org/book/ch01.html#sec-computing-with-language-simple-statistics
 109. http://www.nltk.org/book/ch10.html#ex-set-comprehension-math2
 110. http://www.nltk.org/book/ch10.html#ex-set-comprehension-math2
 111. http://www.nltk.org/book/ch10.html#ex-lambda1
 112. http://www.nltk.org/book/ch10.html#ex-walk-chewgum11
 113. http://www.nltk.org/book/ch10.html#ex-walk-chewgum12
 114. http://www.nltk.org/book/ch10.html#ex-lambda
 115. http://www.nltk.org/book/ch03.html#sec-regular-expressions-word-patterns
 116. http://www.nltk.org/book/ch10.html#ex-walk-chewgum12
 117. http://www.nltk.org/book/ch10.html#ex-walk-chewgum21
 118. http://www.nltk.org/book/ch10.html#ex-walk-chewgum22
 119. http://www.nltk.org/book/ch10.html#ex-walk-chewgum22
 120. http://www.nltk.org/book/ch10.html#ex-walk-chewgum3
 121. http://www.nltk.org/book/ch10.html#ex-walk-chewgum12
 122. http://www.nltk.org/book/ch10.html#ex-walk-chewgum3
 123. http://www.nltk.org/book/ch10.html#ex-walk-chewgum4
 124. http://www.nltk.org/book/ch10.html#ex-walk-chewgum4
 125. http://www.nltk.org/book/ch10.html#ex-walk-chewgum3
 126. http://www.nltk.org/book/ch10.html#ex-walk-chewgum4
 127. http://www.nltk.org/book/ch10.html#simplify
 128. http://www.nltk.org/book/ch10.html#ref-simplify
 129. http://www.nltk.org/book/ch10.html#ex-walk-chewgum12
 130. http://www.nltk.org/book/ch10.html#ex-double-lambda
 131. http://www.nltk.org/book/ch10.html#dbl-lambda
 132. http://www.nltk.org/book/ch10.html#dbl-lambda
 133. http://www.nltk.org/book/ch10.html#ref-dbl-lambda
 134. http://www.nltk.org/book/ch10.html#ex-alpha1a
 135. http://www.nltk.org/book/ch10.html#ex-alpha1b
 136. http://www.nltk.org/book/ch10.html#ex-alpha1a
 137. http://www.nltk.org/book/ch10.html#ex-alpha2a
 138. http://www.nltk.org/book/ch10.html#ex-alpha3a
 139. http://www.nltk.org/book/ch10.html#ex-alpha3b
 140. http://www.nltk.org/book/ch10.html#ex-alpha3a
 141. http://www.nltk.org/book/ch10.html#ex-alpha2a
 142. http://www.nltk.org/book/ch10.html#ex-sem5a
 143. http://www.nltk.org/book/ch10.html#ex-sem5b
 144. http://www.nltk.org/book/ch10.html#ex-sem5b
 145. http://www.nltk.org/book/ch10.html#ex-sem5b
 146. http://www.nltk.org/book/ch10.html#ex-sem5b
 147. http://www.nltk.org/book/ch10.html#ex-sem7
 148. http://www.nltk.org/book/ch10.html#ex-sem7
 149. http://www.nltk.org/book/ch10.html#ex-sem7
 150. http://www.nltk.org/book/ch10.html#ex-sem7univ
 151. http://www.nltk.org/book/ch10.html#ex-sem7
 152. http://www.nltk.org/book/ch10.html#ex-sem8
 153. http://www.nltk.org/book/ch10.html#ex-sem7
 154. http://www.nltk.org/book/ch10.html#ex-sem5b
 155. http://www.nltk.org/book/ch10.html#ex-sem8
 156. http://www.nltk.org/book/ch10.html#ex-sem7
 157. http://www.nltk.org/book/ch10.html#ex-sem99
 158. http://www.nltk.org/book/ch10.html#ex-sem7
 159. http://www.nltk.org/book/ch10.html#ex-sem99
 160. http://www.nltk.org/book/ch10.html#ex-sem99
 161. http://www.nltk.org/book/ch10.html#ex-sem10
 162. http://www.nltk.org/book/ch10.html#ex-sem10
 163. http://www.nltk.org/book/ch10.html#ex-sem7
 164. http://www.nltk.org/book/ch10.html#ex-sem10
 165. http://www.nltk.org/book/ch10.html#ex-sem10
 166. http://www.nltk.org/book/ch10.html#ex-sem11
 167. http://www.nltk.org/book/ch10.html#ex-sem12
 168. http://www.nltk.org/book/ch10.html#ex-sem12
 169. http://www.nltk.org/book/ch10.html#ex-sem7
 170. http://www.nltk.org/book/ch10.html#ex-sem99
 171. http://www.nltk.org/book/ch10.html#ex-sem99
 172. http://www.nltk.org/book/ch10.html#ex-sem13
 173. http://www.nltk.org/book/ch10.html#ex-scope1
 174. http://www.nltk.org/book/ch10.html#ex-scope12a
 175. http://www.nltk.org/book/ch10.html#ex-scope12b
 176. http://www.nltk.org/book/ch10.html#fig-quant-ambig
 177. http://www.nltk.org/book/ch10.html#ex-scope11
 178. http://www.nltk.org/book/ch10.html#ex-sem7univ
 179. http://www.nltk.org/book/ch10.html#ex-sem7det
 180. http://www.nltk.org/book/ch10.html#fig-quant-ambig
 181. http://www.nltk.org/book/ch10.html#ex-scope11
 182. http://www.nltk.org/book/ch10.html#ex-scope11
 183. http://www.nltk.org/book/ch04.html#sec-doing-more-with-functions
 184. http://www.nltk.org/book/ch10.html#ex-scope11
 185. http://www.nltk.org/book/ch10.html#fig-drs1
 186. http://www.nltk.org/book/ch10.html#ex-drs0
 187. http://www.nltk.org/book/ch10.html#ex-drs0
 188. http://www.nltk.org/book/ch10.html#fig-drs1
 189. http://www.nltk.org/book/ch10.html#fig-drs1
 190. http://www.nltk.org/book/ch10.html#fig-drs1
 191. http://www.nltk.org/book/ch10.html#fig-drs1
 192. http://www.nltk.org/book/ch10.html#parse-drs
 193. http://www.nltk.org/book/ch10.html#ref-parse-drs
 194. http://www.nltk.org/book/ch10.html#draw-drs
 195. http://www.nltk.org/book/ch10.html#fig-drs-screenshot
 196. http://www.nltk.org/book/ch10.html#ref-draw-drs
 197. http://www.nltk.org/book/ch10.html#fig-drs1
 198. http://www.nltk.org/book/bibliography.html#mccune
 199. http://www.nltk.org/book/bibliography.html#blackburn2005rin
 200. http://www.nltk.org/book/bibliography.html#dalrymple:1999:rrb
 201. http://www.nltk.org/book/bibliography.html#androutsopoulos1995nli
 202. http://www.nltk.org/book/bibliography.html#hodges1977l
 203. http://www.nltk.org/book/bibliography.html#gamut1991il
 204. http://www.nltk.org/book/bibliography.html#gamut1991illg
 205. http://www.nltk.org/book/bibliography.html#kampreyle1993
 206. http://www.nltk.org/book/bibliography.html#carpenter1997tls
 207. http://www.nltk.org/book/bibliography.html#chierchia1990mg
 208. http://www.nltk.org/book/bibliography.html#heim1998sgg
 209. http://www.nltk.org/book/bibliography.html#larson1995km
 210. http://www.nltk.org/book/bibliography.html#blackburn2005rin
 211. http://www.nltk.org/book/bibliography.html#lappin1996hcs
 212. http://www.nltk.org/book/bibliography.html#vanbenthem1997hll
 213. http://www.nltk.org/book/bibliography.html#warren1982eea
 214. http://stevenbird.net/
 215. http://homepages.inf.ed.ac.uk/ewan/
 216. http://ed.loper.org/
 217. http://creativecommons.org/licenses/by-nc-nd/3.0/us/
