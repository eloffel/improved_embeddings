   #[1]github [2]recent commits to gluon-api:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]170
     * [35]star [36]2,286
     * [37]fork [38]227

[39]gluon-api/[40]gluon-api

   [41]code [42]issues 1 [43]pull requests 1 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   a clear, concise, simple yet powerful and efficient api for deep
   learning.
   [47]deep-learning [48]deep-learning-framework
   [49]deep-learning-tutorial [50]neural-network [51]neural-networks
   [52]imperative-programming [53]gluon
     * [54]13 commits
     * [55]1 branch
     * [56]0 releases
     * [57]fetching contributors
     * [58]apache-2.0

    1. [59]jupyter notebook 100.0%

   (button) jupyter notebook
   branch: master (button) new pull request
   [60]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/g
   [61]download zip

downloading...

   want to be notified of new releases in gluon-api/gluon-api?
   [62]sign in [63]sign up

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [65]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [66]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [67]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [68]permalink
   type      name                 latest commit message              commit time
        failed to load latest commit information.
        [69]_static   [70]bulk commit to release gluon api publicly oct 12, 2017
        [71]docs      [72]update gluon_api.h                        feb 26, 2018
        [73]tutorials [74]fix typos                                 oct 16, 2017
        [75]license   [76]bulk commit to release gluon api publicly oct 12, 2017
        [77]readme.md

readme.md

                    [78][gluon_logo_horizontal_small.png]

the gluon api specification

   the gluon api specification is an effort to improve speed, flexibility,
   and accessibility of deep learning technology for all developers,
   regardless of their deep learning framework of choice. the gluon api
   offers a flexible interface that simplifies the process of prototyping,
   building, and training deep learning models without sacrificing
   training speed. it offers four distinct advantages:
     * simple, easy-to-understand code: gluon offers a full set of
       plug-and-play neural network building blocks, including predefined
       layers, optimizers, and initializers.
     * flexible, imperative structure: gluon does not require the neural
       network model to be rigidly defined, but rather brings the training
       algorithm and model closer together to provide flexibility in the
       development process.
     * dynamic graphs: gluon enables developers to define neural network
       models that are dynamic, meaning they can be built on the fly, with
       any structure, and using any of python   s native control flow.
     * high performance: gluon provides all of the above benefits without
       impacting the training speed that the underlying engine provides.

gluon api reference

     * [79]gluon api
     * [80]autograd api
     * [81]gluon neural network layers api
     * [82]gluon recurrent neural network api
     * [83]gluon loss api
     * [84]gluon data api
     * [85]ndarray api
     * [86]sparse ndarray api
     * [87]model zoo
     * [88]backend c api

getting started with the gluon interface

   the gluon specification has already been implemented in apache mxnet,
   so you can start using the gluon interface by following these easy
   steps for [89]installing the latest master version of mxnet. we
   recommend using python version 3.3 or greater and implementing this
   example using a [90]jupyter notebook. setup of jupyter is included in
   the mxnet installation instructions. for our example we   ll walk through
   how to build and train a simple two-layer neural network, called a
   [91]multilayer id88.

   first, import mxnet and mxnet's implementation of the gluon
   specification. we will also need autograd, ndarray, and numpy.
import mxnet as mx
from mxnet import gluon, autograd, ndarray
import numpy as np

   next, we use gluon.data.dataloader, gluon's data iterator, to hold the
   training and test data. iterators are a useful object class for
   traversing through large datasets. we pass gluon's dataloader a helper,
   gluon.data.vision.mnist, that will pre-process the mnist handwriting
   dataset, getting into the right size and format, using parameters to
   tell it which is test set and which is the training set.
train_data = mx.gluon.data.dataloader(mx.gluon.data.vision.mnist(train=true, tra
nsform=lambda data, label: (data.astype(np.float32)/255, label)),
                                      batch_size=32, shuffle=true)
test_data = mx.gluon.data.dataloader(mx.gluon.data.vision.mnist(train=false, tra
nsform=lambda data, label: (data.astype(np.float32)/255, label)),
                                     batch_size=32, shuffle=false)

   now, we are ready to define the actual neural network, and we can do so
   in five simple lines of code. first, we initialize the network with net
   = gluon.nn.sequential(). then, with that net, we create three layers
   using gluon.nn.dense: the first will have 128 nodes, and the second
   will have 64 nodes. they both incorporate the relu by passing that into
   the activation function parameter. the final layer for our model,
   gluon.nn.dense(10), is used to set up the output layer with the number
   of nodes corresponding to the total number of possible outputs. in our
   case with mnist, there are only 10 possible outputs because the
   pictures represent numerical digits of which there are only 10 (i.e., 0
   to 9).
# first step is to initialize your model
net = gluon.nn.sequential()
# then, define your model architecture
with net.name_scope():
    net.add(gluon.nn.dense(128, activation="relu")) # 1st layer - 128 nodes
    net.add(gluon.nn.dense(64, activation="relu")) # 2nd layer     64 nodes
    net.add(gluon.nn.dense(10)) # output layer

   prior to kicking off the model training process, we need to initialize
   the model   s parameters and set up the loss with
   gluon.loss.softmaxcrossid178loss() and model optimizer functions with
   gluon.trainer. as with creating the model, these normally complicated
   functions are distilled to one line of code each.
# we start with random values for all of the model   s parameters from a
# normal distribution with a standard deviation of 0.05
net.collect_params().initialize(mx.init.normal(sigma=0.05))

# we opt to use softmax cross id178 id168 to measure how well the # mo
del is able to predict the correct answer
softmax_cross_id178 = gluon.loss.softmaxcrossid178loss()

# we opt to use the stochastic id119 (sgd) training algorithm
# and set the learning rate hyperparameter to .1
trainer = gluon.trainer(net.collect_params(), 'sgd', {'learning_rate': .1})

   running the training is fairly typical and all the while using gluon's
   functionality to make the process simple and seaid113ss. there are four
   steps: (1) pass in a batch of data; (2) calculate the difference
   between the output generated by the neural network model and the actual
   truth (i.e., the loss); (3) use gluon's autograd to calculate the
   derivatives of the model   s parameters with respect to their impact on
   the loss; and (4) use the gluon's trainer method to optimize the
   parameters in a way that will decrease the loss. we set the number of
   epochs at 10, meaning that we will cycle through the entire training
   dataset 10 times.
epochs = 10
for e in range(epochs):
    for i, (data, label) in enumerate(train_data):
        data = data.as_in_context(mx.cpu()).reshape((-1, 784))
        label = label.as_in_context(mx.cpu())
        with autograd.record(): # start recording the derivatives
            output = net(data) # the forward iteration
            loss = softmax_cross_id178(output, label)
            loss.backward()
        trainer.step(data.shape[0])
        # provide stats on the improvement of the model over each epoch
        curr_loss = ndarray.mean(loss).asscalar()
    print("epoch {}. current loss: {}.".format(e, curr_loss))

   we now have a trained neural network model, and can see how the
   accuracy improves over each epoch.

   a jupyter notebook of this code has been [92]provided for your
   convenience.

   to learn more about the gluon interface and deep learning, you can
   reference this [93]comprehensive set of tutorials, which covers
   everything from an introduction to deep learning to how to implement
   cutting-edge neural network models.

license

   [94]apache 2.0

     *    2019 github, inc.
     * [95]terms
     * [96]privacy
     * [97]security
     * [98]status
     * [99]help

     * [100]contact github
     * [101]pricing
     * [102]api
     * [103]training
     * [104]blog
     * [105]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [106]reload to refresh your
   session. you signed out in another tab or window. [107]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/gluon-api/gluon-api/commits/master.atom
   3. https://github.com/gluon-api/gluon-api#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/gluon-api/gluon-api
  32. https://github.com/join
  33. https://github.com/login?return_to=/gluon-api/gluon-api
  34. https://github.com/gluon-api/gluon-api/watchers
  35. https://github.com/login?return_to=/gluon-api/gluon-api
  36. https://github.com/gluon-api/gluon-api/stargazers
  37. https://github.com/login?return_to=/gluon-api/gluon-api
  38. https://github.com/gluon-api/gluon-api/network/members
  39. https://github.com/gluon-api
  40. https://github.com/gluon-api/gluon-api
  41. https://github.com/gluon-api/gluon-api
  42. https://github.com/gluon-api/gluon-api/issues
  43. https://github.com/gluon-api/gluon-api/pulls
  44. https://github.com/gluon-api/gluon-api/projects
  45. https://github.com/gluon-api/gluon-api/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/topics/deep-learning
  48. https://github.com/topics/deep-learning-framework
  49. https://github.com/topics/deep-learning-tutorial
  50. https://github.com/topics/neural-network
  51. https://github.com/topics/neural-networks
  52. https://github.com/topics/imperative-programming
  53. https://github.com/topics/gluon
  54. https://github.com/gluon-api/gluon-api/commits/master
  55. https://github.com/gluon-api/gluon-api/branches
  56. https://github.com/gluon-api/gluon-api/releases
  57. https://github.com/gluon-api/gluon-api/graphs/contributors
  58. https://github.com/gluon-api/gluon-api/blob/master/license
  59. https://github.com/gluon-api/gluon-api/search?l=jupyter-notebook
  60. https://github.com/gluon-api/gluon-api/find/master
  61. https://github.com/gluon-api/gluon-api/archive/master.zip
  62. https://github.com/login?return_to=https://github.com/gluon-api/gluon-api
  63. https://github.com/join?return_to=/gluon-api/gluon-api
  64. https://desktop.github.com/
  65. https://desktop.github.com/
  66. https://developer.apple.com/xcode/
  67. https://visualstudio.github.com/
  68. https://github.com/gluon-api/gluon-api/tree/1d4e021cf48097a387ad4b37caefa38aa0e2a162
  69. https://github.com/gluon-api/gluon-api/tree/master/_static
  70. https://github.com/gluon-api/gluon-api/commit/cc1a0c967d44f57103b0e15793425b0411c2e477
  71. https://github.com/gluon-api/gluon-api/tree/master/docs
  72. https://github.com/gluon-api/gluon-api/commit/a5df608b0631690fd5ef95c3375c9c371c52dad0
  73. https://github.com/gluon-api/gluon-api/tree/master/tutorials
  74. https://github.com/gluon-api/gluon-api/commit/8df3b54260d6ff6abcc2a1787cdc77d4a1c9aa00
  75. https://github.com/gluon-api/gluon-api/blob/master/license
  76. https://github.com/gluon-api/gluon-api/commit/cc1a0c967d44f57103b0e15793425b0411c2e477
  77. https://github.com/gluon-api/gluon-api/blob/master/readme.md
  78. https://github.com/gluon-api/gluon-api/blob/master/_static/gluon_logo_horizontal_small.png
  79. https://github.com/gluon-api/gluon-api/blob/master/docs/gluon.rst
  80. https://github.com/gluon-api/gluon-api/blob/master/docs/autograd.rst
  81. https://github.com/gluon-api/gluon-api/blob/master/docs/nn.rst
  82. https://github.com/gluon-api/gluon-api/blob/master/docs/id56.rst
  83. https://github.com/gluon-api/gluon-api/blob/master/docs/loss.rst
  84. https://github.com/gluon-api/gluon-api/blob/master/docs/data.rst
  85. https://github.com/gluon-api/gluon-api/blob/master/docs/ndarray.rst
  86. https://github.com/gluon-api/gluon-api/blob/master/docs/sparse.rst
  87. https://github.com/gluon-api/gluon-api/blob/master/docs/model_zoo.rst
  88. https://github.com/gluon-api/gluon-api/blob/master/docs/gluon_api.h
  89. https://mxnet.incubator.apache.org/versions/master/install/index.html
  90. http://jupyter.readthedocs.io/en/latest/install.html
  91. http://thestraightdope.mxnet.io/chapter03_deep-neural-networks/mlp-gluon.html
  92. https://github.com/gluon-api/gluon-api/blob/master/tutorials/mnist-gluon-example.ipynb
  93. http://gluon.mxnet.io/
  94. https://github.com/gluon-api/gluon-api/blob/master/license
  95. https://github.com/site/terms
  96. https://github.com/site/privacy
  97. https://github.com/security
  98. https://githubstatus.com/
  99. https://help.github.com/
 100. https://github.com/contact
 101. https://github.com/pricing
 102. https://developer.github.com/
 103. https://training.github.com/
 104. https://github.blog/
 105. https://github.com/about
 106. https://github.com/gluon-api/gluon-api
 107. https://github.com/gluon-api/gluon-api

   hidden links:
 109. https://github.com/
 110. https://github.com/gluon-api/gluon-api
 111. https://github.com/gluon-api/gluon-api
 112. https://github.com/gluon-api/gluon-api
 113. https://help.github.com/articles/which-remote-url-should-i-use
 114. https://github.com/gluon-api/gluon-api#the-gluon-api-specification
 115. https://github.com/gluon-api/gluon-api#gluon-api-reference
 116. https://github.com/gluon-api/gluon-api#getting-started-with-the-gluon-interface
 117. https://github.com/gluon-api/gluon-api#license
 118. https://github.com/
