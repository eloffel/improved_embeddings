   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]artificial intelligence
   [7]become a member[8]sign in[9]get started

   featured stories

how does spotify know you so well?

   a software engineer explains the science behind personalized music
   recommendations
   [10]go to the profile of sophia ciocca
   [11]sophia ciocca
   (button) blockedunblock (button) followfollowing
   oct 10, 2017

   photo by studioeast/getty images

   photo by studioeast/getty images

   (button)
   loading   
   0:00
   11:33
     __________________________________________________________________

   this monday         just like every monday before it         over 100 million
   spotify users found a fresh new playlist waiting for them called
   discover weekly. it   s a custom mixtape of 30 songs they   ve never
   listened to before but will probably love, and it   s pretty much magic.

   i   m a huge fan of spotify, and particularly discover weekly. why? it
   makes me feel seen. it knows my musical tastes better than any person
   in my entire life ever has, and i   m consistently delighted by how
   satisfyingly just right it is every week, with tracks i probably would
   never have found myself or known i would like.

   for those of you who live under a soundproof rock, let me introduce you
   to my virtual best friend:
   [0*zl0-pztzzslgc-r8.]
   a spotify discover weekly playlist         specifically, mine.

   as it turns out, [12]i   m not alone in my obsession with discover
   weekly. the user base goes crazy for it, which has driven spotify to
   rethink its focus, and invest more resources into algorithm-based
   playlists.

   iframe: [13]/media/7dcfbad1a0dcc9633e4cd9a99f6792f8?postid=19a41ab76efe

   iframe: [14]/media/fa684fe30330bebb9822fed42ce735fb?postid=19a41ab76efe

   ever since discover weekly debuted in 2015, i   ve been dying to know how
   it works (what   s more, i   m a spotify fangirl, so i sometimes like to
   pretend that i work there and research their products.) after three
   weeks of mad googling, i feel like i   ve finally gotten a glimpse behind
   the curtain.

   so how does spotify do such an amazing job of choosing those 30 songs
   for each person each week? let   s zoom out for a second to look at how
   other music services have tackled music recommendations, and how
   spotify   s doing it better.
     __________________________________________________________________

a brief history of online music curation

   [1*lys6vccczpsjiyotimep8g.png]

   back in the 2000s, songza kicked off the online music curation scene
   using manual curation to create playlists for users. this meant that a
   team of    music experts    or other human curators would put together
   playlists that they just thought sounded good, and then users would
   listen to those playlists. (later, beats music would employ this same
   strategy.) manual curation worked alright, but it was based on that
   specific curator   s choices, and therefore couldn   t take into account
   each listener   s individual music taste.

   like songza, pandora was also one of the original players in digital
   music curation. it employed a slightly more advanced approach, instead
   manually tagging attributes of songs. this meant a group of people
   listened to music, chose a bunch of descriptive words for each track,
   and tagged the tracks accordingly. then, pandora   s code could simply
   filter for certain tags to make playlists of similar-sounding music.

   around that same time, a music intelligence agency from the mit media
   lab called [15]the echo nest was born, which took a radical,
   cutting-edge approach to personalized music. the echo nest used
   algorithms to analyze the audio and textual content of music, allowing
   it to perform music identification, personalized recommendation,
   playlist creation, and analysis.

   finally, taking another approach is last.fm, which still exists today
   and uses a process called id185 to identify music its
   users might like, but more on that in a moment.
     __________________________________________________________________

   so if that   s how other music curation services have handled
   recommendations, how does spotify   s magic engine run? how does it seem
   to nail individual users    tastes so much more accurately than any of
   the other services?

spotify   s three types of recommendation models

   spotify doesn   t actually use a single revolutionary recommendation
   model. instead, they mix together some of the best strategies used by
   other services to create their own uniquely powerful discovery engine.

   to create discover weekly, there are three main types of recommendation
   models that spotify employs:
    1. id185 models (i.e. the ones that last.fm
       originally used), which analyze both your behavior and others   
       behaviors.
    2. natural language processing (nlp) models, which analyze text.
    3. audio models, which analyze the raw audio tracks themselves.

   [1*cp07mrmujndzsvv7qelsxg.png]
   image source: [16]ever wonder how spotify discover weekly works? data
   science, via galvanize.

   let   s dive into how each of these recommendation models work!
     __________________________________________________________________

recommendation model #1: id185

   [1*lfl5nmkuwgjhzvc_3vpckq.png]

   first, some background: when people hear the words    collaborative
   filtering,    they generally think of netflix, as it was one of the first
   companies to use this method to power a recommendation model, taking
   users    star-based movie ratings to inform its understanding of which
   movies to recommend to other similar users.

   after netflix was successful, the use of id185 spread
   quickly, and is now often the starting point for anyone trying to make
   a recommendation model.

   unlike netflix, spotify doesn   t have a star-based system with which
   users rate their music. instead, spotify   s data is implicit
   feedback         specifically, the stream counts of the tracks and additional
   streaming data, such as whether a user saved the track to their own
   playlist, or visited the artist   s page after listening to a song.

   but what is id185, truly, and how does it work?
   here   s a high-level rundown, explained in a quick conversation:
   [1*shz8pwo8_oqdw2udjb12xa.png]
   image source: [17]id185 at spotify, by erik
   bernhardsson, ex-spotify.

   what   s going on here? each of these individuals has track preferences:
   the one on the left likes tracks p, q, r, and s, while the one on the
   right likes tracks q, r, s, and t.

   id185 then uses that data to say:

      id48m    you both like three of the same tracks         q, r, and s         so you
   are probably similar users. therefore, you   re each likely to enjoy
   other tracks that the other person has listened to, that you haven   t
   heard yet.   

   therefore, it suggests that the one on the right check out track
   p         the only track not mentioned, but that his    similar    counterpart
   enjoyed         and the one on the left check out track t, for the same
   reasoning. simple, right?

   but how does spotify actually use that concept in practice to calculate
   millions of users    suggested tracks based on millions of other users   
   preferences?

   with matrix math, done with python libraries!
   [1*ogub3-txjsnvkz1gqtbjxq.png]

   in actuality, this matrix you see here is gigantic. each row represents
   one of spotify   s 140 million users         if you use spotify, you yourself
   are a row in this matrix         and each column represents one of the 30
   million songs in spotify   s database.

   then, the python library runs this long, complicated matrix
   factorization formula:
   [1*a1a_pg-shrvnvmzefrc-hg.png]
   some complicated math   

   when it finishes, we end up with two types of vectors, represented here
   by x and y. x is a user vector, representing one single user   s taste,
   and y is a song vector, representing one single song   s profile.
   [1*cs6ft4dt3sujiauikf_hyg.png]
   the user/song matrix produces two types of vectors: user vectors and
   song vectors. image source: [18]from idea to execution: spotify   s
   discover weekly, by chris johnson, ex-spotify.

   now we have 140 million user vectors and 30 million song vectors. the
   actual content of these vectors is just a bunch of numbers that are
   essentially meaningless on their own, but are hugely useful when
   compared.

   to find out which users    musical tastes are most similar to mine,
   id185 compares my vector with all of the other users   
   vectors, ultimately spitting out which users are the closest matches.
   the same goes for the y vector, songs: you can compare a single song   s
   vector with all the others, and find out which songs are most similar
   to the one in question.

   id185 does a pretty good job, but spotify knew they
   could do even better by adding another engine. enter nlp.
     __________________________________________________________________

recommendation model #2: natural language processing (nlp)

   the second type of recommendation models that spotify employs are
   natural language processing (nlp) models. the source data for these
   models, as the name suggests, are regular ol    words: track metadata,
   news articles, blogs, and other text around the internet.
   [0*nxvodvfr8yvl4_fv.]

   natural language processing, which is the ability of a computer to
   understand human speech as it is spoken, is a vast field unto itself,
   often harnessed through [19]id31 apis.

   the exact mechanisms behind nlp are beyond the scope of this article,
   but here   s what happens on a very high level: spotify crawls the web
   constantly looking for blog posts and other written text about music to
   figure out what people are saying about specific artists and
   songs         which adjectives and what particular language is frequently
   used in reference to those artists and songs, and which other artists
   and songs are also being discussed alongside them.

   while i don   t know the specifics of how spotify chooses to then process
   this scraped data, i can offer some insight based on how the echo nest
   used to work with them. they would bucket spotify   s data up into what
   they call    cultural vectors    or    top terms.    each artist and song had
   thousands of top terms that changed on the daily. each term had an
   associated weight, which correlated to its relative
   importance         roughly, the id203 that someone will describe the
   music or artist with that term.
   [1*srokavedn8i5uqeqepjppw.png]
      cultural vectors    or    top terms,    as used by the echo nest. image
   source: [20]how music recommendation works         and doesn   t work, by brian
   whitman, co-founder of the echo nest.

   then, much like in id185, the nlp model uses these
   terms and weights to create a vector representation of the song that
   can be used to determine if two pieces of music are similar. cool,
   right?
     __________________________________________________________________

recommendation model #3: raw audio models

   [1*f0yj1c2tbbcijp13llmqtg.png]

   first, a question. you might be thinking:

     sophia, we already have so much data from the first two models! why
     do we need to analyze the audio itself, too?

   first of all, adding a third model further improves the accuracy of the
   music recommendation service. but this model also serves a secondary
   purpose: unlike the first two types, raw audio models take new songs
   into account.

   take, for example, a song your singer-songwriter friend has put up on
   spotify. maybe it only has 50 listens, so there are few other listeners
   to collaboratively filter it against. it also isn   t mentioned anywhere
   on the internet yet, so nlp models won   t pick it up. luckily, raw audio
   models don   t discriminate between new tracks and popular tracks, so
   with their help, your friend   s song could end up in a discover weekly
   playlist alongside popular songs!

   but how can we analyze raw audio data, which seems so abstract?

   with convolutional neural networks!

   convolutional neural networks are the same technology used in facial
   recognition software. in spotify   s case, they   ve been modified for use
   on audio data instead of pixels. here   s an example of a neural network
   architecture:
   [0*ks_nvbvyvodqzjyi.]
   image source: [21]recommending music on spotify with deep learning,
   sander dieleman.

   this particular neural network has four convolutional layers, seen as
   the thick bars on the left, and three dense layers, seen as the more
   narrow bars on the right. the inputs are time-frequency representations
   of audio frames, which are then concatenated, or linked together, to
   form the spectrogram.

   the audio frames go through these convolutional layers, and after
   passing through the last one, you can see a    global temporal pooling   
   layer, which pools across the entire time axis, effectively computing
   statistics of the learned features across the time of the song.

   after processing, the neural network spits out an understanding of the
   song, including characteristics like estimated time signature, key,
   mode, tempo, and loudness. below is a plot of data for a 30-second
   snippet of    around the world    by daft punk.
   [1*_eu2q9hpaxtkyzt_ks85fa.png]
   image source: [22]tristan jehan & david desroches, via the echo nest.

   ultimately, this reading of the song   s key characteristics allows
   spotify to understand fundamental similarities between songs and
   therefore which users might enjoy them, based on their own listening
   history.
     __________________________________________________________________

   that covers the basics of the three major types of recommendation
   models feeding spotify   s recommendations pipeline, and ultimately
   powering the discover weekly playlist!
   [1*kjttf1i3w2vrwg782_gcfw.png]

   of course, these recommendation models are all connected to spotify   s
   larger ecosystem, which includes giant amounts of data storage and uses
   lots of [23]hadoop clusters to scale recommendations and make these
   engines work on enormous matrices, endless online music articles, and
   huge numbers of audio files.

   i hope this was informative and piqued your curiosity like it did mine.
   for now, i   ll be working my way through my own discover weekly, finding
   my new favorite music while appreciating all the machine learning
   that   s going on behind the scenes.     
     __________________________________________________________________

   thanks also to [24]ladycollective for reading this article and
   suggesting edits.

   (button)
   (button)
   (button) 66k claps
   (button) (button) (button)
   [25]go to the profile of sophia ciocca [26]go to the profile of sophia
   ciocca
   written by[27]

sophia ciocca

   warrior for authenticity. software engineer. unlearning my societal
   conditioning & documenting the journey. http://sophiaciocca.com
   (button) blockedunblock (button) followfollowing

[28]discover medium

   welcome to a place where words matter. on medium, smart voices and
   original ideas take center stage     with no ads in sight. [29]watch

[30]make medium yours

   follow all the topics you care about, and we   ll deliver the best
   stories for you to your homepage and inbox. [31]explore

[32]become a member

   get unlimited access to the best stories on medium     and support
   writers while you   re at it. just $5/month. [33]upgrade

   [34]homepage
   [35]about[36]help[37]legal

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/s/story/19a41ab76efe
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/topic/artificial-intelligence
   7. https://medium.com/membership?source=upgrade_membership---nav_full
   8. https://medium.com/m/signin?redirect=https://medium.com/s/story/spotifys-discover-weekly-how-machine-learning-finds-your-new-music-19a41ab76efe&source=--------------------------nav_reg&operation=login
   9. https://medium.com/m/signin?redirect=https://medium.com/s/story/spotifys-discover-weekly-how-machine-learning-finds-your-new-music-19a41ab76efe&source=--------------------------nav_reg&operation=register
  10. https://medium.com/@sophiaciocca
  11. https://medium.com/@sophiaciocca
  12. https://qz.com/571007/the-magic-that-makes-spotifys-discover-weekly-playlists-so-damn-good/
  13. https://medium.com/media/7dcfbad1a0dcc9633e4cd9a99f6792f8?postid=19a41ab76efe
  14. https://medium.com/media/fa684fe30330bebb9822fed42ce735fb?postid=19a41ab76efe
  15. http://the.echonest.com/company/
  16. http://blog.galvanize.com/spotify-discover-weekly-data-science/
  17. https://www.slideshare.net/erikbern/collaborative-filtering-at-spotify-16182818/10-supervised_collaborative_filtering_is_pretty
  18. https://www.slideshare.net/mrchrisjohnson/from-idea-to-execution-spotifys-discover-weekly/31-1_0_0_0_1
  19. https://medium.com/@sifium/top-five-emotional-sentiment-analysis-apis-116cd8d42055
  20. https://notes.variogr.am/2012/12/11/how-music-recommendation-works-and-doesnt-work/
  21. http://benanne.github.io/2014/08/05/spotify-id98s.html
  22. http://docs.echonest.com.s3-website-us-east-1.amazonaws.com/_static/analyzedocumentation.pdf
  23. https://www.dezyre.com/article/hadoop-cluster-overview-what-it-is-and-how-to-setup-one/356
  24. https://medium.com/u/e4973074f3bb
  25. https://medium.com/@sophiaciocca
  26. https://medium.com/@sophiaciocca
  27. https://medium.com/@sophiaciocca
  28. https://medium.com/about?autoplay=1
  29. https://medium.com/about?autoplay=1
  30. https://medium.com/topics
  31. https://medium.com/topics
  32. https://medium.com/membership?source=upgrade_membership---post_recirc--19a41ab76efe
  33. https://medium.com/membership?source=upgrade_membership---post_recirc--19a41ab76efe
  34. https://medium.com/
  35. https://about.medium.com/
  36. https://help.medium.com/
  37. https://medium.com/policy/9db0094a1e0f

   hidden links:
  39. https://medium.com/p/19a41ab76efe/share/twitter
  40. https://medium.com/p/19a41ab76efe/share/facebook
