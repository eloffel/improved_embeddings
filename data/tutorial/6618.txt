   #[1]alternate

   (button) close

world class articles, delivered weekly.

   ____________________ (button) sign me up

   subscription implies consent to our [2]privacy policy

   thank you!
   check out your inbox to confirm your invite.
   (button)
   (button) not right now, thanks.

   [3]developers
   hiring? toptal handpicks [4]top machine learning engineers to suit your
   needs.
     * [5]top 3%
     * [6]why
     * [7]clients
     * [8]enterprise
     * [9]community
     * [10]blog
     * [11]about us

   (button)
     * [12]start hiring
     * [13]log in
     * [14]go to your profile

   [15]engineeringall blogs
   ____________________
   (button) icon close (button) search
   filter by
   (*) all ( ) engineering ( ) design ( ) finance ( ) projects ( ) product
   ( ) toptal insights
   (button) view all results
   engineering
   design
   finance
   projects
   product
   toptal insights

   [16]data science and databases
   15 minute read

an introduction to machine learning theory and its applications: a visual
tutorial with examples

   [17]nick mccrea
   nicholas is a professional software engineer with a passion for quality
   craftsmanship. he loves architecting and writing top-notch code.
   share
     *
     *
     *
     *

   read the [18]spanish es version of this article translated by marisela
   ordaz

   machine learning (ml) is coming into its own, with a growing
   recognition that ml can play a key role in a wide range of critical
   applications, such as data mining, natural language processing, image
   recognition, and id109. ml provides potential solutions in all
   these domains and more, and is set to be a pillar of our future
   civilization.

   the supply of [19]able ml designers has yet to catch up to this demand.
   a major reason for this is that ml is just plain tricky. this machine
   learning tutorial introduces the basics of ml theory, laying down the
   common themes and concepts, making it easy to follow the logic and get
   comfortable with machine learning basics.

   machine learning tutorial illustration: this curious machine is
   learning machine learning, unsupervised.

what is machine learning?

   so what exactly is    machine learning    anyway? ml is actually a lot of
   things. the field is quite vast and is expanding rapidly, being
   continually partitioned and sub-partitioned ad nauseam into different
   sub-specialties and [20]types of machine learning.

   there are some basic common threads, however, and the overarching theme
   is best summed up by this oft-quoted statement made by arthur samuel
   way back in 1959:    [machine learning is the] field of study that gives
   computers the ability to learn without being explicitly programmed.   

   and more recently, in 1997, [21]tom mitchell gave a    well-posed   
   definition that has proven more useful to engineering types:    a
   computer program is said to learn from experience e with respect to
   some task t and some performance measure p, if its performance on t, as
   measured by p, improves with experience e.   
      a computer program is said to learn from experience e with respect to
   some task t and some performance measure p, if its performance on t, as
   measured by p, improves with experience e.    -- tom mitchell, carnegie
   mellon university

   so if you want your program to predict, for example, traffic patterns
   at a busy intersection (task t), you can run it through a machine
   learning algorithm with data about past traffic patterns (experience e)
   and, if it has successfully    learned   , it will then do better at
   predicting future traffic patterns (performance measure p).

   the highly complex nature of many real-world problems, though, often
   means that inventing specialized algorithms that will solve them
   perfectly every time is impractical, if not impossible. examples of
   machine learning problems include, [22]   is this cancer?   , [23]   what is
   the market value of this house?   , [24]   which of these people are good
   friends with each other?   , [25]   will this rocket engine explode on take
   off?   , [26]   will this person like this movie?   , [27]   who is this?   ,
   [28]   what did you say?   , and [29]   how do you fly this thing?   . all of
   these problems are excellent targets for an ml project, and in fact ml
   has been applied to each of them with great success.
   ml solves problems that cannot be solved by numerical means alone.

   among the different types of ml tasks, a crucial distinction is drawn
   between supervised and unsupervised learning:
     * supervised machine learning: the program is    trained    on a
       pre-defined set of    training examples   , which then facilitate its
       ability to reach an accurate conclusion when given new data.
     * unsupervised machine learning: the program is given a bunch of data
       and must find patterns and relationships therein.

   we will primarily focus on supervised learning here, but the end of the
   article includes a brief discussion of unsupervised learning with some
   links for those who are interested in pursuing the topic further.

supervised machine learning

   in the majority of supervised learning applications, the ultimate goal
   is to develop a finely tuned predictor function h(x) (sometimes called
   the    hypothesis   ).    learning    consists of using sophisticated
   mathematical algorithms to optimize this function so that, given input
   data x about a certain domain (say, square footage of a house), it will
   accurately predict some interesting value h(x) (say, market price for
   said house).

   in practice, x almost always represents multiple data points. so, for
   example, a housing price predictor might take not only square-footage
   (x1) but also number of bedrooms (x2), number of bathrooms (x3), number
   of floors (x4), year built (x5), zip code (x6), and so forth.
   determining which inputs to use is an important part of ml design.
   however, for the sake of explanation, it is easiest to assume a single
   input value is used.

   so let   s say our simple predictor has this form:

   h of x equals theta 0 plus theta 1 times x

   where theta 0 and theta 1 are constants. our goal is to find the
   perfect values of theta 0 and theta 1 to make our predictor work as
   well as possible.

   optimizing the predictor h(x) is done using training examples. for each
   training example, we have an input value x_train, for which a
   corresponding output, y, is known in advance. for each example, we find
   the difference between the known, correct value y, and our predicted
   value h(x_train). with enough training examples, these differences give
   us a useful way to measure the    wrongness    of h(x). we can then tweak
   h(x) by tweaking the values of theta 0 and theta 1 to make it    less
   wrong   . this process is repeated over and over until the system has
   converged on the best values for theta 0 and theta 1 . in this way, the
   predictor becomes trained, and is ready to do some real-world
   predicting.

machine learning examples

   we stick to simple problems in this post for the sake of illustration,
   but the reason ml exists is because, in the real world, the problems
   are much more complex. on this flat screen we can draw you a picture
   of, at most, a three-dimensional data set, but ml problems commonly
   deal with data with millions of dimensions, and very complex predictor
   functions. ml solves problems that cannot be solved by numerical means
   alone.

   with that in mind, let   s look at a simple example. say we have the
   following training data, wherein company employees have rated their
   satisfaction on a scale of 1 to 100:

   employee satisfaction rating by salary is a great machine learning
   example.

   first, notice that the data is a little noisy. that is, while we can
   see that there is a pattern to it (i.e. employee satisfaction tends to
   go up as salary goes up), it does not all fit neatly on a straight
   line. this will always be the case with real-world data (and we
   absolutely want to train our machine using real-world data!). so then
   how can we train a machine to perfectly predict an employee   s level of
   satisfaction? the answer, of course, is that we can   t. the goal of ml
   is never to make    perfect    guesses, because ml deals in domains where
   there is no such thing. the goal is to make guesses that are good
   enough to be useful.

   it is somewhat reminiscent of the famous statement by british
   mathematician and professor of statistics [30]george e. p. box that
      all models are wrong, but some are useful   .
   the goal of ml is never to make    perfect    guesses, because ml deals in
   domains where there is no such thing. the goal is to make guesses that
   are good enough to be useful.

   machine learning builds heavily on statistics. for example, when we
   train our machine to learn, we have to give it a statistically
   significant random sample as training data. if the training set is not
   random, we run the risk of the machine learning patterns that aren   t
   actually there. and if the training set is too small (see [31]law of
   large numbers), we won   t learn enough and may even reach inaccurate
   conclusions. for example, attempting to predict company-wide
   satisfaction patterns based on data from upper management alone would
   likely be error-prone.

   with this understanding, let   s give our machine the data we   ve been
   given above and have it learn it. first we have to initialize our
   predictor h(x) with some reasonable values of theta 0 and theta 1 . now
   our predictor looks like this when placed over our training set:

   h of x equals twelve plus 0 point two x

   machine learning example illustration: a machine learning predictor
   over a training dataset.

   if we ask this predictor for the satisfaction of an employee making
   $60k, it would predict a rating of 27:

   in this image, the machine has yet to learn to predict a probable
   outcome.

   it   s obvious that this was a terrible guess and that this machine
   doesn   t know very much.

   so now, let   s give this predictor all the salaries from our training
   set, and take the differences between the resulting predicted
   satisfaction ratings and the actual satisfaction ratings of the
   corresponding employees. if we perform a little mathematical wizardry
   (which i will describe shortly), we can calculate, with very high
   certainty, that values of 13.12 for theta 0 and 0.61 for theta 1 are
   going to give us a better predictor.

   h of x equals thirteen point one two plus 0 point six one x

   in this case, the machine learning predictor is getting closer.

   and if we repeat this process, say 1500 times, our predictor will end
   up looking like this:

   h of x equals fifteen point five four plus 0 point seven five x

   with a lot of repetition, the machine learning process starts to take
   shape.

   at this point, if we repeat the process, we will find that theta 0 and
   theta 1 won   t change by any appreciable amount anymore and thus we see
   that the system has converged. if we haven   t made any mistakes, this
   means we   ve found the optimal predictor. accordingly, if we now ask the
   machine again for the satisfaction rating of the employee who makes
   $60k, it will predict a rating of roughly 60.

   in this example, the machine has learned to predict a probable data
   point.

   now we   re getting somewhere.

machine learning regression: a note on complexity

   the above example is technically a simple problem of [32]univariate
   id75, which in reality can be solved by deriving a simple
   normal equation and skipping this    tuning    process altogether. however,
   consider a predictor that looks like this:

   four dimensional equation example

   this function takes input in four dimensions and has a variety of
   polynomial terms. deriving a normal equation for this function is a
   significant challenge. many modern machine learning problems take
   thousands or even millions of dimensions of data to build predictions
   using hundreds of coefficients. predicting how an organism   s genome
   will be expressed, or what the climate will be like in fifty years, are
   examples of such complex problems.
   many modern ml problems take thousands or even millions of dimensions
   of data to build predictions using hundreds of coefficients.

   fortunately, the iterative approach taken by ml systems is much more
   resilient in the face of such complexity. instead of using brute force,
   a machine learning system    feels its way    to the answer. for big
   problems, this works much better. while this doesn   t mean that ml can
   solve all arbitrarily complex problems (it can   t), it does make for an
   incredibly flexible and powerful tool.

id119 - minimizing    wrongness   

   let   s take a closer look at how this iterative process works. in the
   above example, how do we make sure theta 0 and theta 1 are getting
   better with each step, and not worse? the answer lies in our
      measurement of wrongness    alluded to previously, along with a little
   calculus.

   the wrongness measure is known as the cost function (a.k.a., loss
   function), j of theta . the input theta represents all of the
   coefficients we are using in our predictor. so in our case, theta is
   really the pair theta 0 and theta 1 . j of theta 0 and theta 1 gives us
   a mathematical measurement of how wrong our predictor is when it uses
   the given values of theta 0 and theta 1 .

   the choice of the cost function is another important piece of an ml
   program. in different contexts, being    wrong    can mean very different
   things. in our employee satisfaction example, the well-established
   standard is the [33]linear least squares function:

   cost function expressed as a linear least squares function

   with least squares, the penalty for a bad guess goes up quadratically
   with the difference between the guess and the correct answer, so it
   acts as a very    strict    measurement of wrongness. the cost function
   computes an average penalty over all of the training examples.

   so now we see that our goal is to find theta 0 and theta 1 for our
   predictor h(x) such that our cost function j of theta 0 and theta 1 is
   as small as possible. we call on the power of calculus to accomplish
   this.

   consider the following plot of a cost function for some particular
   machine learning problem:

   this graphic depicts the bowl-shaped plot of a cost function for a
   machine learning example.

   here we can see the cost associated with different values of theta 0
   and theta 1 . we can see the graph has a slight bowl to its shape. the
   bottom of the bowl represents the lowest cost our predictor can give us
   based on the given training data. the goal is to    roll down the hill   ,
   and find theta 0 and theta 1 corresponding to this point.

   this is where calculus comes in to this machine learning tutorial. for
   the sake of keeping this explanation manageable, i won   t write out the
   equations here, but essentially what we do is take the gradient of j of
   theta 0 and theta 1 , which is the pair of derivatives of j of theta 0
   and theta 1 (one over theta 0 and one over theta 1 ). the gradient will
   be different for every different value of theta 0 and theta 1 , and
   tells us what the    slope of the hill is    and, in particular,    which way
   is down   , for these particular theta s. for example, when we plug our
   current values of theta into the gradient, it may tell us that adding a
   little to theta 0 and subtracting a little from theta 1 will take us in
   the direction of the cost function-valley floor. therefore, we add a
   little to theta 0 , and subtract a little from theta 1 , and voil  ! we
   have completed one round of our learning algorithm. our updated
   predictor, h(x) = theta 0 + theta 1 x, will return better predictions
   than before. our machine is now a little bit smarter.

   this process of alternating between calculating the current gradient,
   and updating the theta s from the results, is known as [34]gradient
   descent.

   this image depicts an example of a machine learning id119.

   this image depicts the number of iterations for this machine learning
   tutorial.

   that covers the basic theory underlying the majority of supervised
   machine learning systems. but the basic concepts can be applied in a
   variety of different ways, depending on the problem at hand.

classification problems in machine learning

   under supervised ml, two major subcategories are:
     * regression machine learning systems: systems where the value being
       predicted falls somewhere on a continuous spectrum. these systems
       help us with questions of    how much?    or    how many?   .
     * classification machine learning systems: systems where we seek a
       yes-or-no prediction, such as    is this tumer cancerous?   ,    does
       this cookie meet our quality standards?   , and so on.

   as it turns out, the underlying machine learning theory is more or less
   the same. the major differences are the design of the predictor h(x)
   and the design of the cost function j of theta .

   our examples so far have focused on regression problems, so let   s now
   also take a look at a classification example.

   here are the results of a cookie quality testing study, where the
   training examples have all been labeled as either    good cookie    (y = 1)
   in blue or    bad cookie    (y = 0) in red.

   this example shows how a machine learning regression predictor is not
   the right solution here.

   in classification, a regression predictor is not very useful. what we
   usually want is a predictor that makes a guess somewhere between 0 and
   1. in a cookie quality classifier, a prediction of 1 would represent a
   very confident guess that the cookie is perfect and utterly
   mouthwatering. a prediction of 0 represents high confidence that the
   cookie is an embarrassment to the cookie industry. values falling
   within this range represent less confidence, so we might design our
   system such that prediction of 0.6 means    man, that   s a tough call, but
   i   m gonna go with yes, you can sell that cookie,    while a value exactly
   in the middle, at 0.5, might represent complete uncertainty. this isn   t
   always how confidence is distributed in a classifier but it   s a very
   common design and works for purposes of our illustration.

   it turns out there   s a nice function that captures this behavior well.
   it   s called the [35]sigmoid function, g(z), and it looks something like
   this:

   h of x equals g of z

   the sigmoid function at work to accomplish a supervised machine
   learning example.

   z is some representation of our inputs and coefficients, such as:

   z equals theta 0 plus theta 1 times x

   so that our predictor becomes:

   h of x equals g of theta 0 plus theta 1 times x

   notice that the sigmoid function transforms our output into the range
   between 0 and 1.

   the logic behind the design of the cost function is also different in
   classification. again we ask    what does it mean for a guess to be
   wrong?    and this time a very good rule of thumb is that if the correct
   guess was 0 and we guessed 1, then we were completely and utterly
   wrong, and vice-versa. since you can   t be more wrong than absolutely
   wrong, the penalty in this case is enormous. alternatively if the
   correct guess was 0 and we guessed 0, our cost function should not add
   any cost for each time this happens. if the guess was right, but we
   weren   t completely confident (e.g. y = 1, but h(x) = 0.8), this should
   come with a small cost, and if our guess was wrong but we weren   t
   completely confident (e.g. y = 1 but h(x) = 0.3), this should come with
   some significant cost, but not as much as if we were completely wrong.

   this behavior is captured by the log function, such that:

   cost expressed as log

   again, the cost function j of theta gives us the average cost over all
   of our training examples.

   so here we   ve described how the predictor h(x) and the cost function j
   of theta differ between regression and classification, but gradient
   descent still works fine.

   a classification predictor can be visualized by drawing the boundary
   line; i.e., the barrier where the prediction changes from a    yes    (a
   prediction greater than 0.5) to a    no    (a prediction less than 0.5).
   with a well-designed system, our cookie data can generate a
   classification boundary that looks like this:

   a graph of a completed machine learning example using the sigmoid
   function.

   now that   s a machine that knows a thing or two about cookies!

an introduction to neural networks

   no discussion of machine learning would be complete without at least
   mentioning [36]neural networks. not only do neural nets offer an
   extremely powerful tool to solve very tough problems, but they also
   offer fascinating hints at the workings of our own brains, and
   intriguing possibilities for one day creating truly intelligent
   machines.

   neural networks are well suited to machine learning models where the
   number of inputs is gigantic. the computational cost of handling such a
   problem is just too overwhelming for the types of systems we   ve
   discussed above. as it turns out, however, neural networks can be
   effectively tuned using techniques that are strikingly similar to
   id119 in principle.

   a thorough discussion of neural networks is beyond the scope of this
   tutorial, but i recommend checking out our [37]previous post on the
   subject.

unsupervised machine learning

   unsupervised machine learning is typically tasked with finding
   relationships within data. there are no training examples used in this
   process. instead, the system is given a set data and tasked with
   finding patterns and correlations therein. a good example is
   identifying close-knit groups of friends in social network data.

   the machine learning algorithms used to do this are very different from
   those used for supervised learning, and the topic merits its own post.
   however, for something to chew on in the meantime, take a look at
   [38]id91 algorithms such as [39]id116, and also look into
   [40]id84 systems such as [41]principle component
   analysis. our prior [42]post on big data discusses a number of these
   topics in more detail as well.

conclusion

   we   ve covered much of the basic theory underlying the field of machine
   learning here, but of course, we have only barely scratched the
   surface.

   keep in mind that to really apply the theories contained in this
   introduction to real life machine learning examples, a much deeper
   understanding of the topics discussed herein is necessary. there are
   many subtleties and pitfalls in ml, and many ways to be lead astray by
   what appears to be a perfectly well-tuned thinking machine. almost
   every part of the [43]basic theory can be played with and altered
   endlessly, and the results are often fascinating. many grow into whole
   new fields of study that are better suited to particular problems.

   clearly, machine learning is an incredibly powerful tool. in the coming
   years, it promises to help solve some of our most pressing problems, as
   well as open up whole new worlds of opportunity for [44]data science
   firms. the [45]demand for machine learning engineers is only going to
   continue to grow, offering incredible chances to be a part of something
   big. i hope you will consider getting in on the action!
     __________________________________________________________________

acknowledgement

   this article draws heavily on material taught by stanford professor
   [46]dr. andrew ng in his [47]free and open machine learning course. the
   course covers everything discussed in this article in great depth, and
   gives tons of practical advice for the ml practitioner. i cannot
   recommend this course highly enough for those interested in further
   exploring this fascinating field.
   related: [48]schooling flappy bird: a id23 tutorial

understanding the basics

   what is deep learning?
   deep learning is a machine learning method that relies on artificial
   neural networks, allowing computer systems to learn by example. in most
   cases, deep learning algorithms are based on information patterns found
   in biological nervous systems.

   what is machine learning?
   as described by arthur samuel, machine learning is the "field of study
   that gives computers the ability to learn without being explicitly
   programmed."

   machine learning vs artificial intelligence: what   s the difference?
   artificial intelligence (ai) is a broad term used to describe systems
   capable of making certain decisions on their own. machine learning (ml)
   is a specific subject within the broader ai arena, describing the
   ability for a machine to improve its ability by practicing a task or
   being exposed to large data sets.

   how to learn machine learning?
   machine learning requires a great deal of dedication and practice to
   learn, due to the many subtle complexities involved in ensuring your
   machine learns the right thing and not the wrong thing. an excellent
   online course for machine learning is andrew ng's coursera course.

   what is overfitting in machine learning?
   overfitting is the result of focussing a machine learning algorithm too
   closely on the training data, so that it is not generalized enough to
   correctly process new data. it is an example of a machine "learning the
   wrong thing" and becoming less capable of correctly interpreting new
   data.

   what is a machine learning model?
   a machine learning model is a set of assumptions about the underlying
   nature the data to be trained for. the model is used as the basis for
   determining what a machine learning algorithm should learn. a good
   model, which makes accurate assumptions about the data, is necessary
   for the machine to give good results

tags

   [49]machinelearning[50]artificialintelligence

   nick mccrea

   software engineer

about the author

   nicholas is a professional software engineer with a passion for quality
   craftsmanship. he loves architecting and writing top-notch code, and is
   proud of his ability to synthesize and communicate ideas effectively to
   technical and non-technical folks alike. nicholas always enjoys a novel
   challenge.
   [51]hire nick

comments

   heraclio munoz
   to best understand how machine learning works, let   s use the example of
   how streaming services generate movie recommendations for their
   subscribers. in order to recommend the types of movies individual
   subscribers would be interested in watching, machine learning
   algorithms analyse the viewing preferences of that individual and
   compare them with the data of other users with similar tastes in
   movies. the algorithm then learns which movies to recommend based on
   its experience of doing so. the ability to learn from their own
   experience is what has made machine learning algorithms so attractive
   to businesses and enterprises in operating in a plethora of different
   occupational spaces, from finance and healthcare to farming and cyber
   security. however, while machine learning algorithms are more than
   capable of improving their performance overtime, they do still need the
   occasional bit of human oversight. if their performance results are
   unsatisfactory or anomalous, humans will still need to step in and make
   adjustments or change certain parameters. artificial intelligence    
   part 2     deep learning vs. machine learning: understanding the
   difference:
   https://www.lanner-america.com/blog/artificial-intelligence-part-2-deep
   -learning-vs-machine-learning-understanding-difference/
   hawaiianchimp
   great summary! just a small typo "rpaidly", right after the image of
   the robot.
   briann2
   great article, can think of a number of uses in own field!
   h. singer
   thanks for catching this. we've corrected it. much appreciated.
   julien l
   best toptal blog post ever published so far!
   bwaxxlo
   halfway through this i was wondering whether it was ng's syllabus
   summarized. nice touch!
   vlad miller
   yeah, looks like its summarize of first four weeks of andrew ng
   lessons.
   sebasti  n tramontana
   awesome post!!!
   ajitjaokar
   very nice tutorial. what did you use to create the images?
   a.l.
   great post. here's one more to correct:    feels it   s way    should be
      feels its way   , and "voila" could be "voil  " :)
   nick mccrea
   done! great suggestions. thanks.
   rob m
   your cookie data is basically the same data andrew used for assignment
   2 on microchips, replotted with a slightly different scale. good post,
   but i think you should cite the graph correctly rather than a blanket
   acknowledgement
   tiendh
   the greatest tutorial i've read
   nick mccrea
   awesome! glad you liked it.
   sam
   code??
   nick mccrea
   the images are screenshots of octave's graphing functions. toptal's
   artist then framed the screenshots in a nice toptal frame.
   aakash kag
   very usefull information for begineer ...great job sir ..thanx lot
   pedro mauricio corvo
   fantastic - thank you for the clear cut explanation
   joey goertzen
   as long as we are correcting errors, here is another one: "instead of
   using brute force, an machine learning system..." => "instead of using
   brute force, a machine learning system" or "instead of using brute
   force, an ml system"
   joey goertzen
   found another one: "the answers lies in our    measurement of wrongness   "
   => "the answer lies in our    measurement of wrongness    "
   ramana murthy
   an excellent intro - thanks
   jan lanik
   "with least squares, the penalty for a bad guess goes up exponentially
   with the difference between the guess and the correct answer"
   quadratically, not exponentially :) otherwise, nice intro :)
   sudhir
   thank you for this article. it maybe an introduction but it is of
   immense value.
   divya
   thank you very much. very useful post for a beginner.
   ganesh
   andrew ng content is nicely summarized - can we intent to add more
   practical business use cases - in the fields of banking , retail and
   how it can be applied , pl suggest
   sheila cloudcroft
   thank you!!!!!!!! i had no idea what ml was. this is a great intro. i
   super appreciate this.
   aquacalc
   same thought. better, i think, to mention that near the top.
   barbara horne
   nice. i learned a lot from this. thank you.
   isabelle
   i came here on year after you lol ;)
   oleksandr negodiuk
   there is trasformations criteria?
   areeg samir
   i read about the online and offline algorithms but i don't know to
   which type (supervised or unsupervised) they are related. thank you it
   is a good article.
   anil singh
   awesome post. thanks http://www.code-sample.com/
   myover
   this was great--thanks! thought you might also enjoy this new machine
   learning tutorial:
   https://www.praetorian.com/blog/machine-learning-tutorial this post
   gives a neat example of machine learning on binary data. if you're
   familiar, the author also released a technical challenge on the topic
   at https://mlb.praetorian.com
   vicky
   hello, this is really a very nice tutorial. i have searched on this
   topic before but i got lots of boring stuffs which i could not
   understand. am i allowed to post this on my blog with proper
   credits,citations and link referal to you ? thanks. vicky
   (techvicky.com)
   7pcgamer
   the classification problem looks exactly like maximum likelihood
   estimation (the first example is infact a sub-category of max
   likelihood i.e. ordinary least squares), is there any real difference
   between mathematical statistics and machine learning? eager to know.
   was thinking of reading few books on machine learning but looks like a
   repeat. regards.
   nadeem shaikh
   consise explanation
   arun
   nice
   ankit mistry
   great summary about machine learning introduction. check this another
   video series on machine learning :
   https://www.youtube.com/playlist?list=pla83b1jhn4lxuazc7a3vss2du8lndxez
   6
   panos_ptr
   really helpful post
   timothy mayabi
   awsome. you have saved my neck just before exams
   vikas gupta
   nice tutorial. cleared some doubts. thanks.
   shivendra pratap singh
   i came here after one more year :p
   pranav makkar
   i came here after a day .. :d
   kareermatrix
   good article. thank you for explaining.
   joseph kim dadasonicson
   nice post...helped a lot. let me share this. <a
   href="https://www.mnlearn.me">machine learning</a>
   prithvi raj
   are you sure the classification boundary in the case of a sigmoid
   function can be elliptical shaped as you have shown? i thought a
   id28's classification boundary was a straight line.
   sayg  n burak sevin  
   some images are not displayed on page. 404 not found.
   it enterprise
   thanks for posting important article on <a href="
   www.itenterprise.co.uk "> machine learning examples </a>
   ankit mistry
   simple layman introduction of machine learning.
   https://www.youtube.com/watch?v=__snatmelm0
   ankit mistry
   nice video, nice explanation.
   illahi bux
   i cam here after 2 years. due this article gr8 job nick mccrea
   almalky leader
   question: how you can find the h(6) ,   0=   2,   1=0.5, here each row is
   one training example. recall that in id75, our hypothesis
   is h  (x)=  0+  1x, and we use m to denote the number of training
   examples. row x= 3,1,0,4 \ row y=2,2,1,3
   miles alden
   excellent tutorial. i'm learning this stuff from scratch and am
   wondering how one would go about "training" in your cookie example?
   preksha das
   hi, this blog is nice and some where informative as well. you have
   mentioned all the things in a well mannered way which is really good
   and it seems quite impressive as well. you have given a information in
   a detailed mannered. i have used one website before for mine work where
   i had been a great experienced which was great for mine career growth
   and as well as mine career exposure(http://www.hifreelancer.com). so, i
   would suggest to people should give it a try once might be they would
   find great place work there and then looking forward to more work over
   there. thank you for the post
   selim chehimi
   really nice articles, i learned a lot. i post daily about artificial
   intelligence, you might wanna check it out : http://selimchehimi.com
   nicole m. blewett
   scipy
   peter lusink
   thank you nick! great article :) for anyone who is interested in
   machine learning from a more    business point of view    i got myself
   online certified at aicompany (aicompany.co) in order to understand how
   machine learning can be integrated in my line of business. they also
   have management frameworks that helps getting successful pilot started.
   for me a focus on best practices and implementation is important.
   anyway, understanding the basics of machine learning is (nowadays) a
   must and a great way to have a more distinctive resume.
   francesca estrada
   hi sir! may i ask when did you publish this article? my team and i are
   currently working on our thesis that is related to machine learning and
   we would like to cite your work. thank you very much.
   isabelle
   still browsing ;)
   pradeep k. pant
   great summary with beautiful images. actually i took ng mi course last
   summer and was trying to refresh week per week. meanwhile found your
   summary. good work. thanks!
   seekingtruth
   excellent post
   blak
   i'm still here after all these years...
   christia buntleitner
   almost asked the same question)))
   johny blaze
   thanks for the valuable information about the machine learning and its
   benefits of using this technologies on the present career job oriented
   courses. for any information about machine learning please visit
   http://www.analyticspath.com/machine-learning-training-in-hyderabad .
   johny blaze
   very pleased to receive the information about machine learning and
   professional courses and the concepts.for further information about
   machine learning please visit
   http://www.analyticspath.com/machine-learning-training-in-hyderabad
   trevor
   i came all over here
   neel bhatt
   nice post. i have started serires of posts on machine learning and
   interview q&a. have a look here:
   https://neelbhatt40.wordpress.com/2017/10/29/machine-learning-in-simple
   -words-azure-machine-learning-part-i/
   dr. fatih tekin
   the first predictor equation h(x) = 12.00 +0.20 x should be h(x) =
   20.00 +0.12 x. the plot below the predictor also suggests this
   equation. otherwise the prediction of satisfaction for employees with
   $60k salary would not be 27 but 24 (12.00+0.20*60 = 24)
   jeevan
   i came here after 3 years.
   rahil sharma
   thanks for introduction to ml in such a low level manner .you made it
   very easy to understand for a beginner like me.
   rameez ramzan ali
   i had read numerous posts on ml and ai but on one discussed about pros
   and cons of ml and al. if everyone start working on ml then what would
   be future of ml and ai?
   (https://www.cubix.co/blog/machine-learning-ai/)
   rachana006
   thank you for this article. machine learning is gaining lot of
   importance since it can be used to solve complex problems and also
   improves user experience.
   prakhar vyas
   i don't know how i landed up here xd
   yuvan asav
   great article about the machine learning.after reading this article,got
   to know it's really interesting language.now a days, everyone is
   talking about machine learning and big data. thanks for sharing the
   interesting topic. i would like to add one more topic related to it
   https://www.springpeople.com/blog/python-vs-r-for-machine-learning-whic
   h-is-better/
   andrea maria
   the process of learning needs specially built algorithms that would
   teach machines what exactly they have to do. machine learning has its
   applications in banking industry, finance industry, healthcare
   industry, data mining and in robotics.
   buang c. warheed
   i came here before ya all were born.
   divya singh
   good read! got few basics clarified about ml. for info. on machine
   learning trends in 2018, check here : <a href =
   "https://www.springpeople.com/blog/5-hot-ai-machine-learning-trends-for
   -2018/" > machine learning trends for 2018 </a>
   peter tornyos
   i've got another very good article you might also consider to read..
   https://www.javaworld.com/article/3224505/application-development/machi
   ne-learning-for-java-developers.html
   arch
   would you please post the liner regression training data( in your post:
   wherein company employees have rated their satisfaction) here? thank
   you very much!
   raj g
   nice article on machine learning. you may also get latest info in
   www.datasciencetutor.com
   tim maes
   time for me to come now
   shivendra pratap singh
   time flies so fast. now i hope every year someone new will carry this
   chain forward.
   alex
   super insightful article. for anyone looking to practice machine
   learning, here's a list of the best 50 free datasets on the web:
   https://gengo.ai/datasets/the-50-best-free-datasets-for-machine-learnin
   g/
   presmelito rapatan villanueva
   pres was here
   gilda dahis
   thank you for your enlightening introduction to this important topic.
   your explanations and examples were very helpful to me.
   kavita lalwani
   thanks for the great resource, lots of info here. would love to
   connect. do check out our training platform at
   experfy         www.experfy.com/training we are a harvard-incubated company
   and the biggest data science/ai/machine learning marketplace for
   enterprises. hope to connect. cheers, kavita lalwani
   kavita lalwani
   thanks for the information, lots of info here. would love to connect.
   do check out our training platform at
   experfy         www.experfy.com/training we are a harvard-incubated company
   and the biggest data science/ai/machine learning/java marketplace for
   enterprises. hope to connect. regards kavita lalwani
   mamina sahu
   nice post,, https://nearlearn.com
   mamina sahu
   nice posts.... https://nearlearn.com
   cetpa seo
   hello i started coaching for machine learning a week ago and was soo
   confused about what i am doing , after going through this article it
   help me alot to build concept about machine learning. it would be
   helpful if you keep on updating more article on machine learning. thank
   you
   please enable javascript to view the [52]comments powered by
   disqus.[53]comments powered by disqus

world class articles, delivered weekly.

   ____________________ (button) get great content

   subscription implies consent to our [54]privacy policy

   thank you!
   check out your inbox to confirm your invite.
   (button)

trending articles

   [55]engineering
   [56]web front-end

[57]react tutorial: components, hooks, and performance

   [58]engineering
   [59]web front-end

[60]guide to monorepos for front-end code

   [61]engineering
   [62]technology

[63]working with google sheets and apps script

   [64]engineering
   [65]web front-end

[66]working with the react context api

see our related talents

   [67]machine learning[68]back-end[69]big data

hire the author

   nick mccrea

   software engineer

read next

   [70]engineering
   [71]back-end

[72]do the math: scaling microservices applications with orchestrators

world class articles, delivered weekly.

   ____________________ (button) sign me up

   subscription implies consent to our [73]privacy policy

   thank you!
   check out your inbox to confirm your invite.
   (button)

world class articles, delivered weekly.

   ____________________ (button) sign me up

   subscription implies consent to our [74]privacy policy

   thank you!
   check out your inbox to confirm your invite.
   (button)

toptal developers

     * [75]android developers
     * [76]angularjs developers
     * [77]back-end developers
     * [78]c++ developers
     * [79]data analysts
     * [80]data engineers
     * [81]data scientists
     * [82]devops engineers
     * [83]ember.js developers
     * [84]freelance developers
     * [85]front-end developers
     * [86]full-stack developers
     * [87]html5 developers
     * [88]ios developers
     * [89]java developers
     * [90]javascript developers
     * [91]machine learning engineers
     * [92]magento developers
     * [93]mixed reality developers
     * [94]mobile app developers
     * [95].net developers
     * [96]node.js developers
     * [97]php developers
     * [98]python developers
     * [99]react.js developers
     * [100]ruby developers
     * [101]ruby on rails developers
     * [102]salesforce developers
     * [103]scala developers
     * [104]software architects
     * [105]software developers
     * [106]unity or unity3d developers
     * [107]virtual reality developers
     * [108]web developers
     * [109]wordpress developers
     * [110]view more

join the toptal^   community.

   [111]hire a developeror[112]apply as a developer

most in-demand talent

     * [113]ios developers
     * [114]front-end developers
     * [115]ux designers
     * [116]ui designers
     * [117]financial modeling consultants
     * [118]interim cfos

about

     * [119]top 3%
     * [120]clients
     * [121]freelance developers
     * [122]freelance designers
     * [123]freelance finance experts
     * [124]freelance project managers
     * [125]about us

contact

     * [126]contact us
     * [127]press center
     * [128]careers
     * [129]faq

social

     *
     *
     *
     *

   hire the top 3% of freelance talent
   copyright 2010 - 2019 toptal, llc
     * [130]privacy policy
     * [131]website terms

   [tr?id=463369723801939&amp;ev=viewcontent&amp;noscript=1]

   iframe:
   [132]https://www.attributiontracker.com/tracker/account_visit?tt_visit=
   1

references

   visible links
   1. https://www.toptal.com/machine-learning/introduccion-a-la-teoria-de-aprendizaje-de-maquina-y-sus-aplicaciones-un-tutorial-visual-con-ejemplos
   2. https://www.toptal.com/privacy
   3. https://www.toptal.com/developers
   4. https://www.toptal.com/machine-learning
   5. https://www.toptal.com/top-3-percent
   6. https://www.toptal.com/why
   7. https://www.toptal.com/clients
   8. https://www.toptal.com/enterprise
   9. https://www.toptal.com/community
  10. https://www.toptal.com/blog
  11. https://www.toptal.com/about
  12. https://www.toptal.com/machine-learning
  13. https://www.toptal.com/users/login
  14. https://www.toptal.com/secure_redirect/default
  15. https://www.toptal.com/machine-learning/machine-learning-theory-an-introductory-primer
  16. https://www.toptal.com/developers/blog/data-science-and-databases
  17. https://www.toptal.com/resume/nicholas-mccrea
  18. https://www.toptal.com/machine-learning/introduccion-a-la-teoria-de-aprendizaje-de-maquina-y-sus-aplicaciones-un-tutorial-visual-con-ejemplos
  19. https://www.toptal.com/machine-learning
  20. https://www.toptal.com/machine-learning/an-introduction-to-deep-learning-from-id88s-to-deep-networks
  21. http://www.cs.cmu.edu/~tom/
  22. http://www.ncbi.nlm.nih.gov/pmc/articles/pmc2675494/
  23. http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1316046
  24. http://papers.ssrn.com/sol3/papers.cfm?abstract_id=2187186
  25. https://archive.org/stream/nasa_techdoc_19960011791/19960011791_djvu.txt
  26. http://techblog.netflix.com/2012/04/netflix-recommendations-beyond-5-stars.html
  27. https://www.fastcompany.com/3028414/how-facebooks-machines-got-so-good-at-recognizing-your-face
  28. https://en.wikipedia.org/wiki/natural_language_processing#nlp_using_machine_learning
  29. http://phys.org/news139501522.html
  30. https://en.wikipedia.org/wiki/george_e._p._box
  31. https://en.wikipedia.org/wiki/law_of_large_numbers
  32. http://www.mathworks.com/help/symbolic/mupad_ug/univariate-linear-regression.html
  33. https://en.wikipedia.org/wiki/linear_least_squares_(mathematics)
  34. https://en.wikipedia.org/wiki/gradient_descent
  35. https://en.wikipedia.org/wiki/sigmoid_function
  36. https://en.wikipedia.org/wiki/artificial_neural_network
  37. https://www.toptal.com/machine-learning/an-introduction-to-deep-learning-from-id88s-to-deep-networks
  38. https://en.wikipedia.org/wiki/cluster_analysis
  39. https://en.wikipedia.org/wiki/id116_id91
  40. https://en.wikipedia.org/wiki/dimensionality_reduction
  41. https://en.wikipedia.org/wiki/principal_component_analysis
  42. https://www.toptal.com/big-data#hiring-guide
  43. https://www.toptal.com/machine-learning/supervised-machine-learning-algorithms
  44. https://www.toptal.com/services/data-science
  45. https://www.toptal.com/machine-learning
  46. http://cs.stanford.edu/people/ang/
  47. https://www.coursera.org/course/ml
  48. https://www.toptal.com/deep-learning/pytorch-reinforcement-learning-tutorial
  49. https://www.toptal.com/developers/blog/tags/machinelearning
  50. https://www.toptal.com/developers/blog/tags/artificialintelligence
  51. https://www.toptal.com/hire?interested_in=developers&skill=machine-learning
  52. https://disqus.com/?ref_noscript
  53. https://disqus.com/
  54. https://www.toptal.com/privacy
  55. https://www.toptal.com/developers/blog
  56. https://www.toptal.com/developers/blog/web-front-end
  57. https://www.toptal.com/react/react-tutorial-pt2
  58. https://www.toptal.com/developers/blog
  59. https://www.toptal.com/developers/blog/web-front-end
  60. https://www.toptal.com/front-end/guide-to-monorepos
  61. https://www.toptal.com/developers/blog
  62. https://www.toptal.com/developers/blog/technology
  63. https://www.toptal.com/google-docs/extending-google-sheets-app-scripts
  64. https://www.toptal.com/developers/blog
  65. https://www.toptal.com/developers/blog/web-front-end
  66. https://www.toptal.com/react/react-context-api
  67. https://www.toptal.com/machine-learning
  68. https://www.toptal.com/back-end
  69. https://www.toptal.com/big-data
  70. https://www.toptal.com/developers/blog
  71. https://www.toptal.com/developers/blog/back-end
  72. https://www.toptal.com/devops/scaling-microservices-applications
  73. https://www.toptal.com/privacy
  74. https://www.toptal.com/privacy
  75. https://www.toptal.com/android
  76. https://www.toptal.com/angular-js
  77. https://www.toptal.com/back-end
  78. https://www.toptal.com/c-plus-plus
  79. https://www.toptal.com/data-analysis
  80. https://www.toptal.com/data-engineer
  81. https://www.toptal.com/data-science
  82. https://www.toptal.com/devops
  83. https://www.toptal.com/emberjs
  84. https://www.toptal.com/freelance
  85. https://www.toptal.com/front-end
  86. https://www.toptal.com/full-stack
  87. https://www.toptal.com/html5
  88. https://www.toptal.com/ios
  89. https://www.toptal.com/java
  90. https://www.toptal.com/javascript
  91. https://www.toptal.com/machine-learning
  92. https://www.toptal.com/magento
  93. https://www.toptal.com/mixed-reality
  94. https://www.toptal.com/app
  95. https://www.toptal.com/dot-net
  96. https://www.toptal.com/nodejs
  97. https://www.toptal.com/php
  98. https://www.toptal.com/python
  99. https://www.toptal.com/react
 100. https://www.toptal.com/ruby
 101. https://www.toptal.com/ruby-on-rails
 102. https://www.toptal.com/salesforce
 103. https://www.toptal.com/scala
 104. https://www.toptal.com/software-architect
 105. https://www.toptal.com/software
 106. https://www.toptal.com/unity-unity3d
 107. https://www.toptal.com/virtual-reality
 108. https://www.toptal.com/web
 109. https://www.toptal.com/wordpress
 110. https://www.toptal.com/developers/all
 111. https://www.toptal.com/hire?interested_in=developers
 112. https://www.toptal.com/developers/join
 113. https://www.toptal.com/ios
 114. https://www.toptal.com/front-end
 115. https://www.toptal.com/designers/ux
 116. https://www.toptal.com/designers/ui
 117. https://www.toptal.com/finance/financial-modeling
 118. https://www.toptal.com/finance/interim-cfos
 119. https://www.toptal.com/top-3-percent
 120. https://www.toptal.com/clients
 121. https://www.toptal.com/developers
 122. https://www.toptal.com/designers
 123. https://www.toptal.com/finance
 124. https://www.toptal.com/project-managers
 125. https://www.toptal.com/about
 126. https://www.toptal.com/contact
 127. https://www.toptal.com/press-center
 128. https://www.toptal.com/careers
 129. https://www.toptal.com/faq
 130. https://www.toptal.com/privacy
 131. https://www.toptal.com/tos
 132. https://www.attributiontracker.com/tracker/account_visit?tt_visit=1

   hidden links:
 134. https://www.toptal.com/developers/blog
 135. https://www.toptal.com/designers/blog
 136. https://www.toptal.com/finance/blog
 137. https://www.toptal.com/project-managers/blog
 138. https://www.toptal.com/product-managers/blog
 139. https://www.toptal.com/insights
 140. https://www.toptal.com/machine-learning/machine-learning-theory-an-introductory-primer
 141. https://www.toptal.com/machine-learning/machine-learning-theory-an-introductory-primer
 142. https://www.toptal.com/machine-learning/machine-learning-theory-an-introductory-primer
 143. https://www.toptal.com/machine-learning/machine-learning-theory-an-introductory-primer
 144. https://www.toptal.com/machine-learning/machine-learning-theory-an-introductory-primer#blog_post-article-author
 145. https://www.toptal.com/devops/scaling-microservices-applications
 146. https://www.linkedin.com/company/toptal
 147. https://twitter.com/toptal
 148. https://www.facebook.com/toptal
 149. https://www.instagram.com/toptal/
 150. https://www.toptal.com/
