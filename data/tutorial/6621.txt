   #[1]betterexplained    feed [2]betterexplained    comments feed
   [3]betterexplained    a programmer   s intuition for id127
   comments feed

   [4]betterexplained betterexplained
   ____________________
      
   menu

     * [5]home
     * [6]all articles
     * [7]popular
     * [8]calculus guide
     * [9]contact
     * [10]newsletter
     * [11]about
     * [12]feedback

   ____________________
      

a programmer   s intuition for id127

   [13]home   [14]math   a programmer   s intuition for id127

   what does id127 mean? here's a few [15]common
   intuitions:

   1) id127 scales/rotates/skews a geometric plane.

   matrix intuition

   this is useful when first learning about vectors: vectors go in, new
   ones come out. unfortunately, this can lead to an over-reliance on
   geometric visualization.

   if 20 families are coming to your bbq, how do you estimate the hotdogs
   you need? (hrm    20 families, call it 3 people per family, 2 hotdogs
   each    about 20 * 3 * 2 = 120 hotdogs.)

   you probably don't think "oh, i need the volume of a
   invitation-familysize-hunger prism!". with large matrices i don't think
   about 500-dimensional vectors, just data to be modified.

   2) id127 composes linear operations.

   this is the technically accurate definition: yes, id127
   results in a new matrix that composes the original functions. however,
   sometimes the matrix being operated on is not a linear operation, but a
   set of vectors or data points. we need another intuition for what's
   happening.

   i'll put a programmer's viewpoint into the ring:

   3) id127 is about information flow, converting data to
   code and back.

   matrix pour

   i think of id202 as "math spreadsheets" (if you're new to
   id202, [16]read this intro):
     * we store information in various spreadsheets ("matrices")
     * some of the data are seen as functions to apply, others as data
       points to use
     * we can swap between the vector and function interpretation as
       needed

   sometimes i'll think of data as geometric vectors, and sometimes i'll
   see a matrix as a composing functions. but mostly i think about
   information flowing through a system. (some purists cringe at reducing
   beuatiful algebraic structures into frumpy spreadsheets; i sleep ok at
   night.)

programmer's intuition: code is data is code

   take your favorite recipe. if you interpret the words as instructions,
   you'll end up with a pie, muffin, cake, etc.

   if you interpret the words as data, the text is prose that can be
   tweaked:
     * convert measurements to metric units
     * swap ingredients due to allergies
     * adjust for altitude or different equipment

   the result is a new recipe, which can be further tweaked, or executed
   as instructions to make a different pie, muffin, cake, etc. (compilers
   treat a program as text, modify it, and eventually output
   "instructions"     which could be text for another layer.)

   that's id202. we take raw information like "3 4 5" treat it as
   a vector or function, depending on how it's written:

   operation and data

   by convention, a vertical column is usually a vector, and a horizontal
   row is typically a function:
     * [3; 4; 5] means x = (3, 4, 5). here, x is a vector of data (i'm
       using ; to separate each row).
     * [3 4 5] means f(a, b, c) = 3a + 4b + 5c. this is a function taking
       three inputs and returning a single result.

   and the aha! moment: data is code, code is data!

   code and data are equivalent

   the row containing a horizontal function could really be three data
   points (each with a single element). the vertical column of data could
   really be three distinct functions, each taking a single parameter.

   ah. this is getting neat: depending on the desired outcome, we can
   combine data and code in a different order.

the matrix transpose

   the matrix transpose swaps rows and columns. here's what it means in
   practice.

   if x was a column vector with 3 entries ([3; 4; 5]), then x' is:
     * a function taking 3 arguments ([3 4 5])
     * x' can still remain a data vector, but as three separate entries.
       the transpose "split it up".

   similarly, if f = [3 4 5] is our row vector, then f' can mean:
     * a single data vector, in a vertical column.
     * f' is separated into three functions (each taking a single input).

   let's use this in practice.

   when we see x' * x we mean: x' (as a single function) is working on x
   (a single vector). the result is the dot product ([17]read more). in
   other words, we've applied the data to itself.

   x transform id202

   when we see x * x' we mean x (as a set of functions) is working on x'
   (a set of individual data points). the result is a grid where we've
   applied each function to each data point. here, we've mixed the data
   with itself in every possible permutation.

   x transpose id202

   i think of xx as x(x). it's the "function x" working on the "vector x".
   (this helps compute the [18]covariance matrix, a measure of
   self-similarity in the data.)

putting the intuition to use

   phew! how does this help us? when we see an equation like this (from
   the [19]machine learning class):

   \displaystyle{\[h_{\theta}(x)=\theta^tx\] }

   i now have an instant feel of what's happening. in the first equation,
   we're treating $\theta$ (which is normally a set of data parameters) as
   a function, and passing in $x$ as an argument. this should give us a
   single value.

   more [20]complex derivations like this:

   \displaystyle{\[\theta=(x^tx)^{-1}x^ty\]}

   can be worked through. in some cases it gets tricky because we store
   the data as rows (not columns) in the matrix, but now i have much
   better tools to follow along. you can start estimating when you'll get
   a single value, or when you'll get a "permutation grid" as a result.

   geometric scaling and linear composition have their place, but here i
   want to think about information. "the information in x is becoming a
   function, and we're passing itself the a parameter."

   long story short, don't get locked into a single intuition.
   multiplication evolved from repeated addition, to scaling (decimals),
   to rotations (imaginary numbers), to "applying" one number to another
   (integrals), and so on. why not the same for id127?

   happy math.

appendix: what about the other combinations?

   you may be curious why we can't use the other combinations, like x x or
   x' x'. simply put, the parameters don't line up: we'd have functions
   expecting 3 inputs only being passed a single parameter, or functions
   expecting single inputs getting passed 3.

appendix: javascript interpretation

   the dot product x' * x could be seen as the following javascript
   command:

   (function(a,b,c){ return 3*a + 4*b + 5*c; })(3,4,5)

   we define a function of 3 arguments and pass it the 3 parameters. this
   returns 50 (the dot product).

   the math notation is super-compact, so we can simply write (in
   octave/matlab):

   octave:2> [3 4 5] * [3 4 5]' ans = 50

   remember that [3 4 5] is the function and [3; 4; 5] or [3 4 5]' is how
   we'd write the data vector.

appendix: adept method

   this article came about from a todo in my [21]class notes:

   i wanted to explain to myself     in plain english     why we wanted x' x
   and not the reverse. now, in plain english: we're treating the
   information as a function, and passing the same info as the parameter.

other posts in this series

    1. [22]a visual, intuitive guide to imaginary numbers
    2. [23]intuitive arithmetic with complex numbers
    3. [24]understanding why complex multiplication works
    4. [25]intuitive guide to angles, degrees and radians
    5. [26]intuitive understanding of euler's formula
    6. [27]an interactive guide to the fourier transform
    7. [28]intuitive understanding of sine waves
    8. [29]an intuitive guide to id202
    9. [30]a programmer's intuition for id127
   10. [31]imaginary multiplication vs. imaginary exponents

   [32]17 comments

in this series

    1. [33]a visual, intuitive guide to imaginary numbers
    2. [34]intuitive arithmetic with complex numbers
    3. [35]understanding why complex multiplication works
    4. [36]intuitive guide to angles, degrees and radians
    5. [37]intuitive understanding of euler's formula
    6. [38]an interactive guide to the fourier transform
    7. [39]intuitive understanding of sine waves
    8. [40]an intuitive guide to id202
    9. [41]a programmer's intuition for id127
   10. [42]imaginary multiplication vs. imaginary exponents

about the site

   betterexplained helps 450k monthly readers with friendly, insightful
   math lessons ([43]more).
   [ins: :ins] [ins: :ins] [ins: :ins] [ins: :ins] [ins: :ins] [ins: :ins]
   [ins: :ins] [ins: :ins]

      if you can't explain it simply, you don't understand it well enough.   
      einstein ([44]more) | [45]privacy | [46]cc-by-nc-sa
   [47]twitter[48]youtube[49]reddit[50]rss

   iframe: [51]https://www.googletagmanager.com/ns.html?id=gtm-82fl

references

   visible links
   1. https://betterexplained.com/feed/
   2. https://betterexplained.com/comments/feed/
   3. https://betterexplained.com/articles/matrix-multiplication/feed/
   4. https://betterexplained.com/
   5. https://betterexplained.com/
   6. https://betterexplained.com/archives/
   7. https://betterexplained.com/cheatsheet/
   8. https://betterexplained.com/guides/calculus/
   9. https://betterexplained.com/contact/
  10. https://betterexplained.com/newsletter/
  11. https://betterexplained.com/about/
  12. https://betterexplained.com/feedback/
  13. https://betterexplained.com/
  14. https://betterexplained.com/articles/category/math/
  15. https://math.stackexchange.com/questions/31725/intuition-behind-matrix-multiplication
  16. https://betterexplained.com/articles/linear-algebra-guide/
  17. https://betterexplained.com/articles/vector-calculus-understanding-the-dot-product/
  18. https://en.wikipedia.org/wiki/covariance_matrix
  19. https://betterexplained.com/articles/adept-machine-learning-course/
  20. http://eli.thegreenplace.net/2014/derivation-of-the-normal-equation-for-linear-regression
  21. https://betterexplained.com/articles/adept-machine-learning-course/
  22. https://betterexplained.com/articles/a-visual-intuitive-guide-to-imaginary-numbers/
  23. https://betterexplained.com/articles/intuitive-arithmetic-with-complex-numbers/
  24. https://betterexplained.com/articles/understanding-why-complex-multiplication-works/
  25. https://betterexplained.com/articles/intuitive-guide-to-angles-degrees-and-radians/
  26. https://betterexplained.com/articles/intuitive-understanding-of-eulers-formula/
  27. https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/
  28. https://betterexplained.com/articles/intuitive-understanding-of-sine-waves/
  29. https://betterexplained.com/articles/linear-algebra-guide/
  30. https://betterexplained.com/articles/matrix-multiplication/
  31. https://betterexplained.com/articles/imaginary-multiplication-exponents/
  32. https://betterexplained.com/articles/matrix-multiplication/#comments
  33. https://betterexplained.com/articles/a-visual-intuitive-guide-to-imaginary-numbers/
  34. https://betterexplained.com/articles/intuitive-arithmetic-with-complex-numbers/
  35. https://betterexplained.com/articles/understanding-why-complex-multiplication-works/
  36. https://betterexplained.com/articles/intuitive-guide-to-angles-degrees-and-radians/
  37. https://betterexplained.com/articles/intuitive-understanding-of-eulers-formula/
  38. https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/
  39. https://betterexplained.com/articles/intuitive-understanding-of-sine-waves/
  40. https://betterexplained.com/articles/linear-algebra-guide/
  41. https://betterexplained.com/articles/matrix-multiplication/
  42. https://betterexplained.com/articles/imaginary-multiplication-exponents/
  43. https://betterexplained.com/about/
  44. https://betterexplained.com/philosophy
  45. https://betterexplained.com/privacy
  46. https://betterexplained.com/about
  47. https://twitter.com/betterexplained
  48. https://www.youtube.com/user/betterexplained
  49. https://reddit.com/r/betterexplained
  50. https://betterexplained.com/feed/
  51. https://www.googletagmanager.com/ns.html?id=gtm-82fl

   hidden links:
  53. https://betterexplained.com/articles/matrix-multiplication/
