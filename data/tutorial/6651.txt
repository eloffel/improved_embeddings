   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]become a member[7]sign in[8]get started
     __________________________________________________________________

behind the magic: how we built the arkit sudoku solver

what we learned from our first foray into machine learning

   [9]go to the profile of brad dwyer
   [10]brad dwyer (button) blockedunblock (button) followfollowing
   oct 8, 2017
   [1*pjojjn5krvijzih7vb_vwq.gif]
   the magic sudoku app in action. [11]download it here.

     brad dwyer is the founder of [12]hatchlings, a startup that makes
     games and mobile apps in des moines, iowa.

   a few weeks ago my company, hatchlings, released [13]magic sudoku for
   ios11. it   s an app that solves sudoku puzzles using a combination of
   id161, machine learning, and augmented reality. [14]you can
   try the app by downloading it from the app store on your iphone 6s (or
   newer) or ipad pro.

   we have gotten a ton of attention including getting voted to the
   [15]front of 9gag, being listed as a top arkit app by places like
   [16]gizmodo and [17]cnet, and being [18]called out by fast company   s
   design blog as one of the only ar apps that doesn   t    stink   .

   many people have asked me about the app so i thought it would be fun to
   share some behind the scenes of how and why we built it.

   this is the second post in a 3-part series. [19]part one explained why
   we built magic sudoku and what makes it different from other augmented
   reality apps, and part three will explore the business side.

   [20]subscribe or [21]follow me on twitter and you   ll be the first to
   know when part three comes out. and don   t forget to [22]download the
   app and give it a try yourself!
     __________________________________________________________________

how does magic sudoku work?

     simple can be harder than complex: you have to work hard to get your
     thinking clean to make it simple. -steve jobs

   [1*ga9-cpm5hexsldi7pye4fq.png]
   magic sudoku seaid113ssly links many complex technologies to create a
   simple, seaid113ss user experience.

   magic sudoku uses a combination of id161, machine learning,
   and augmented reality to give a magical user experience that    just
   works    when you point your phone at a sudoku puzzle. the basic flow of
   the application is this:
     * arkit gets a new frame from the camera.
     * we use [23]ios11   s vision library to detect rectangles in the
       image.
     * if rectangles are found we determine whether they are a sudoku.
     * if we find a puzzle we split it up into 81 square images.
     * each square is run through [24]a neural network we trained to
       determine what number (if any) it represents.
     * once enough numbers are gathered we use a [25]traditional recursive
       algorithm to solve the puzzle.
     * we pass a 3d model representing the solved puzzle [26]back to arkit
       to display on top of the original image from the camera.

   all of this happens several times each second.

   i won   t dwell too much on the arkit portion, the sudoku solving
   algorithm, or the actual machine learning model itself (there are
   plenty of tutorials written about those subjects already).

   what was most interesting to me were the practical aspects i learned
   while training my first machine learning algorithm.

machine learning: lessons learned

i first learned several ways that wouldn   t work

   one of the original reasons i chose a sudoku solver as our first ar app
   was that i knew classifying digits is basically [27]the    hello world   
   of machine learning. i wanted to dip my toe in the water of machine
   learning while working on a real-world problem. this seemed like a
   realistic app to tackle.

   before i set out on training my own model, i tried a few strategies
   that would have made things a lot easier if they had worked.

   the first thing i tried was using an id42
   library called [28]swiftocr. the problem with using swiftocr for my use
   case was that it is designed for reading strings (like giftcard codes)
   rather than individual numbers. i also couldn   t get it to differentiate
   between    this is an empty square    and    i couldn   t read this digit   .
   after several hours of experimentation it wasn   t doing much better than
   randomly guessing digits. that   s not a knock on swiftocr. it   s a great
   library; it   s just not well suited for this particular problem.

   second, i moved on to [29]a pre-trained mnist model that had already
   been converted to coreml. mnist is an open dataset of handwritten
   digits released in the 1990s. using a pre-trained model would have been
   nice because it could have been a drop-in solution. the .mlmodel file
   is completely self contained and exposes a class in swift that you can
   basically use as a black box oracle. using mnist was how i reached the
   milestone of having my first internal prototype that    worked    from
   start to finish. unfortunately, the mnist dataset of handwritten digits
   is not close enough to computer fonts to generalize well and that first
   prototype was very finicky and prone to errors.

   by this point things were working well enough that i knew i was on the
   right track. i hoped that if i could train my own machine learning
   model on real-world data extracted from sudoku puzzles that it would
   become a lot more accurate and reliable.

gathering data

   the next step was to gather as many examples of sudoku puzzles as i
   could. i went to our local [30]half price book store and bought out
   their entire stock of sudoku books.

   i had the team at [31]hatchlings help me rip them apart and i modified
   the prototype app to upload each of the small squares it scanned to a
   server instead of running them through the coreml model.
   [1*qash9t-vkvh-l50xeeawhw.jpeg]
   our treasure trove of real-world data acquired from the local
   secondhand book store.

many hands make for light work

   now i had a problem. after i scanned a wide variety of puzzles from
   each book, my server had stored about 600,000 images    but they were
   completely unlabeled.
   [1*o9ohci84-ibac4fyrwvrma.gif]
   simple classification tool

   so i cheated a little; i tapped into my secret superpower: thousands of
   [32]hatchlings users happy to help the developer of their favorite
   game.

   i made a simple admin tool that let users classify images by pressing
   the number keys on their keyboard. after putting out a call for help in
   our hatchlings facebook group, our users made quick work of things and
   within 24 hours they had classified all 600,000 images!
   [1*q_gr6yjarohwoepsnoi9fq.png]
   admin tool to send mistakes back to the pool

   unfortunately, a small minority had misunderstood the task and there
   were a significant number of misidentified images.

   to correct this i made a second tool that showed you 100 images (all
   supposed to be the same number) and asked you to click the ones that
   didn   t match (which then threw them back into the first tool to be
   reclassified).

   after the first pass i had enough verified data that i was able to add
   an automatic accuracy checker into both tools for future data runs (it
   would periodically show the user known images and check their work to
   determine how much to trust their answers going forward).

   over the next few weeks our players classified several more batches of
   scanned data. by the time we launched the app it was trained on over a
   million images of sudoku squares.

   i used this dataset in place of the mnist dataset and used [33]a
   tutorial to help me craft a neural network using keras. the results
   turned out better than i expected: 98.6% accuracy! we   ve been able to
   improve that to above 99% accuracy in subsequent versions.

train on real world data

   at this point things were working well on the corpus of sudoku puzzles
   we had collected from the bookstore. what we didn   t realize was that
   this was only a small subset of the sudoku puzzle layouts out there
   waiting for us in the wild.

   immediately after launch we started receiving reports that our app
   wasn   t working with on-screen puzzles. of course! people wanted to try
   our app but they didn   t have a sudoku in front of them so they searched
   on google for a puzzle to try it out. this is obvious in retrospect,
   but it blindsided us on launch day.

   problem number one was that our machine learning model was only trained
   on paper puzzles; it didn   t know what to think about pixels on a
   screen. i pulled an all nighter that first week and re-trained our
   model with puzzles on computer screens.

   problem number two was that arkit only supports horizontal planes like
   tables and floors (not vertical planes like computer monitors). solving
   this was a trickier problem but i did come up with a hacky workaround.
   i used a combination of some heuristics and featurepoint detection to
   place puzzles on non-horizontal planes.
   [1*rimzi6acu-twtn5y6gjrfa.png]
   our ml model is now trained on blurry images as well

   another unexpected issue we discovered after launch was that [34]arkit
   has a fixed (and hard-coded) focal length; it doesn   t autofocus. there
   is also some variation between devices (things work ok on my iphone 7
   camera sensor but iphone 6s has trouble focusing up close). our    fix   
   to this was to add blurrycam images to the training set. i wasn   t sure
   whether it would be able to grok useful info from these images that i
   couldn   t even read myself... but adding them didn   t seem to affect
   accuracy of the model much if at all! the current version of the app
   works well even when the numbers in the image are super blurry.

the cloud

   finally, i had heard a lot of hype about [35]aws   s gpu instances for
   deep learning and [36]google cloud   s deep learning offerings so i tried
   them out (and also tried the    heroku for deep learning    platform
   [37]floydhub).

   they worked. but they were slow. my 2016 macbook pro running
   tensorflow-cpu was outperforming the aws p2.xlarge gpu instance. my
   suspicion is that the training runs were being bottlenecked by disk not
   compute.

   the cloud instances are also expensive. by my calculations, the payoff
   period of building my own box would be less than 2 months of cloud
   run-time. so i [38]built a machine with relatively modest specs for
   about $1200 and parked it in my parents    basement. it   s over 3x faster
   on my dataset than the aws gpu instance i was experimenting with and
   should pay for itself soon.

what   s next

   i   m still a machine learning beginner but i   ve learned a lot through
   making magic sudoku.

   over the next few weeks i have a pretty long to-do list of bug fixes
   and minor improvements of the current feature-set. now that i   ve fixed
   most of the issues with weird fonts, weights, padding, and blurriness,
   the next step is to improve my heuristics to better identify puzzles.

   the current version (v1.4) can get into trouble if there isn   t much
   padding between the puzzle and the edge of the sheet of paper or if
   there is text near the edges. i have some theories on how i can improve
   this but it will probably be a lot of trial and error to get it right.

   if i can   t get the heuristics to work i   ve been collecting a dataset of
   properly aligned puzzles and bad scans that i can use to train another
   neural network to filter out the bad scans.

   in the longer term we have plans to add some pretty awesome features.
   for example, we   d like to add a    checker    feature for completed
   puzzles. most of the new features we have planned will require us to
   read and separate handwriting from computer-given numbers so we   ve been
   collecting handwriting samples from users around the world to train a
   new machine learning model.

   we also need to work out our business model. but that   s a story that
   will have to wait for part three. in the meantime, [39]download the app
   and let us know what you think!

stay tuned   

   this is the second post in a 3-part series. [40]part one explained why
   we decided to make magic sudoku and what makes it unique. part three
   will explore the business side of launching an app like this and how
   it   s been going so far.

   [41]subscribe or [42]follow me on twitter and you   ll be the first to
   know when part three comes out. and don   t forget to [43]download the
   app and give it a try yourself!

   iframe: [44]/media/b85dfbb5286d8a25cf2e754b9462cf45?postid=e586e5b685b0

     * [45]machine learning
     * [46]augmented reality
     * [47]computer science
     * [48]app development
     * [49]tech

   (button)
   (button)
   (button) 3.7k claps
   (button) (button) (button) 11 (button) (button)

     (button) blockedunblock (button) followfollowing
   [50]go to the profile of brad dwyer

[51]brad dwyer

   founder of hatchlings, internet entrepreneur

     * (button)
       (button) 3.7k
     * (button)
     *
     *

   [52]go to the profile of brad dwyer
   never miss a story from brad dwyer, when you sign up for medium.
   [53]learn more
   never miss a story from brad dwyer
   (button) blockedunblock (button) followget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/e586e5b685b0
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/membership?source=upgrade_membership---nav_full
   7. https://medium.com/m/signin?redirect=https://medium.com/@braddwyer/behind-the-magic-how-we-built-the-arkit-sudoku-solver-e586e5b685b0&source=--------------------------nav_reg&operation=login
   8. https://medium.com/m/signin?redirect=https://medium.com/@braddwyer/behind-the-magic-how-we-built-the-arkit-sudoku-solver-e586e5b685b0&source=--------------------------nav_reg&operation=register
   9. https://medium.com/@braddwyer?source=post_header_lockup
  10. https://medium.com/@braddwyer
  11. https://magicsudoku.com/download
  12. http://about.hatchlings.com/
  13. https://magicsudoku.com/
  14. https://magicsudoku.com/download
  15. https://9gag.com/gag/arjvn6b
  16. http://fieldguide.gizmodo.com/all-of-the-best-augmented-reality-tricks-your-iphone-ca-1805804012
  17. https://www.cnet.com/pictures/best-arkit-apps/20/
  18. https://www.fastcodesign.com/90143912/most-ar-stinks-except-this-crazy-sudoku-solver
  19. https://blog.prototypr.io/why-we-built-magic-sudoku-the-arkit-sudoku-solver-306dde6c0a77
  20. https://medium.com/@braddwyer
  21. https://www.twitter.com/braddwyer
  22. https://magicsudoku.com/download
  23. https://developer.apple.com/documentation/vision
  24. https://medium.com/towards-data-science/handwritten-digit-recognition-with-mnist-on-ios-with-keras-e85e194f9fa5
  25. https://spin.atomicobject.com/2012/06/18/solving-sudoku-in-c-with-recursive-backtracking/
  26. https://github.com/mludowise/arkitrectangledetection
  27. https://www.google.com/search?q=hello+world+of+deep+learning
  28. https://github.com/garnele007/swiftocr
  29. https://github.com/ph1ps/mnist-coreml
  30. https://www.hpb.com/home
  31. http://about.hatchlings.com/
  32. http://about.hatchlings.com/
  33. https://sriraghu.com/2017/07/06/computer-vision-in-ios-coremlkerasmnist/
  34. https://webcache.googleusercontent.com/search?q=cache:ufktnsvvahej:https://forums.developer.apple.com/thread/78954+&cd=2&hl=en&ct=clnk&gl=us
  35. https://aws.amazon.com/amazon-ai/amis/
  36. https://cloud.google.com/products/machine-learning/
  37. https://www.floydhub.com/
  38. https://pcpartpicker.com/list/frmgcy
  39. https://magicsudoku.com/download
  40. https://blog.prototypr.io/why-we-built-magic-sudoku-the-arkit-sudoku-solver-306dde6c0a77
  41. https://medium.com/@braddwyer
  42. https://www.twitter.com/braddwyer
  43. https://magicsudoku.com/download
  44. https://medium.com/media/b85dfbb5286d8a25cf2e754b9462cf45?postid=e586e5b685b0
  45. https://medium.com/tag/machine-learning?source=post
  46. https://medium.com/tag/augmented-reality?source=post
  47. https://medium.com/tag/computer-science?source=post
  48. https://medium.com/tag/app-development?source=post
  49. https://medium.com/tag/tech?source=post
  50. https://medium.com/@braddwyer?source=footer_card
  51. https://medium.com/@braddwyer
  52. https://medium.com/@braddwyer
  53. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  55. https://medium.com/p/e586e5b685b0/share/twitter
  56. https://medium.com/p/e586e5b685b0/share/facebook
  57. https://medium.com/p/e586e5b685b0/share/twitter
  58. https://medium.com/p/e586e5b685b0/share/facebook
