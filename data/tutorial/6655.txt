   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]become a member[7]sign in[8]get started
     __________________________________________________________________

gluon -api for deep learning

   [9]go to the profile of maheshwar ligade
   [10]maheshwar ligade (button) blockedunblock (button) followfollowing
   oct 13, 2017

   amazon web services and microsoft   s ai and research group this morning
   announced a new open-source deep learning interface called gluon,
   jointly developed by the companies to let developers    prototype, build,
   train and deploy sophisticated machine learning models for the cloud,
   devices at the edge and mobile apps,    according to an announcement.
   [1*ilc2h8huuozcda1qqq2-zg.png]
   [11]https://mli.github.io

   gluon is a clear, concise, simple yet powerful and efficient api for
   deep learning. gluon is an api, not another deep learning framework,
   they provided some concise and clear api abstraction layer this help us
   to improve speed, flexibility, and accessibility of [12]deep learning
   technology for all developers, regardless of their deep learning
   framework of choice. you can any kind of framework such as [13]mxnet,
   [14]tensorflow, [15]pytorch.

   developers who are new to machine learning will find this interface
   more familiar to traditional code since machine learning models can be
   defined and manipulated just like any other data structure.

   more seasoned data scientists and researchers will value the ability to
   build prototypes quickly and utilize dynamic neural network graphs for
   entirely new model architectures, all without sacrificing training
   speed.

   the gluon api offers a flexible interface that simplifies the process
   of prototyping, building, and training deep learning models without
   sacrificing training speed.

     gluon is imperative for developing but simple for deploying.

   it is imperative means flexible but may be slow. it is also efficient
   and portable but hard to use.

   sample code with [16]mxnet:-

   distinct advantages:-
    1. friendly api simple, easy-to-understand code
    2. flexible, imperative structure
    3. dynamic networks
    4. high-performance operators for training

   setup environment:-

   the gluon specification has already been implemented in apache mxnet,
   so you can start using the gluon interface by following these easy
   steps for [17]installing the latest master version of mxnet. i
   recommend using python version 3.3 or greater and implementing this
   example using a [18]jupyter notebook.
# i used minicoda and virtual environment
# source activate gulon
# optional: update pip to the newest version
sudo pip install --upgrade pip
# install jupyter
pip install jupyter --user
# install the nightly built mxnet
pip install mxnet --pre --user

   default mxnet is come up with cpu you can install gpu as well if you
   have gpu availability.
pip install mxnet-cu75 --pre --user  # for cuda 7.5
# for cuda 8.0 use this mxnet-cu80 --pre --user
#start notebook and enjoy coding
jupyter notebook

   multilayer id88 using gluon

   using gluon, we only need two additional lines of code to transform our
   id28 model into a multilayer id88.
from __future__ import print_function
import mxnet as mx
import numpy as np
from mxnet import nd, autograd
from mxnet import gluon

   you can compute this with the help of cpu or gpu
ctx = mx.cpu() # or gpu mx.gpu(0)

   the most popular deep learning hello world dataset is [19]mnist.
mnist = mx.test_utils.get_mnist()
batch_size = 64
num_inputs = 784
num_outputs = 10
def transform(data, label):
    return data.astype(np.float32)/255, label.astype(np.float32)
train_data = mx.gluon.data.dataloader(mx.gluon.data.vision.mnist(train=true, tra
nsform=transform),
                                      batch_size, shuffle=true)
test_data = mx.gluon.data.dataloader(mx.gluon.data.vision.mnist(train=false, tra
nsform=transform),
                                     batch_size, shuffle=false)

   then [20]here is you model
num_hidden = 256 .
net = gluon.nn.sequential()
#relu to activate
with net.name_scope():
    net.add(gluon.nn.dense(num_hidden, activation="relu"))
    net.add(gluon.nn.dense(num_hidden, activation="relu"))
    net.add(gluon.nn.dense(num_outputs))
#initialization of the parameters
net.collect_params().initialize(mx.init.xavier(magnitude=2.24), ctx=ctx)
#calculate cross id178 loss
softmax_cross_id178 = gluon.loss.softmaxcrossid178loss()
trainer = gluon.trainer(net.collect_params(), 'sgd', {'learning_rate': .1})
#evaluate accuracy
def evaluate_accuracy(data_iterator, net):
    acc = mx.metric.accuracy()
    for i, (data, label) in enumerate(data_iterator):
        data = data.as_in_context(ctx).reshape((-1, 784))
        label = label.as_in_context(ctx)
        output = net(data)
        predictions = nd.argmax(output, axis=1)
        acc.update(preds=predictions, labels=label)
    return acc.get()[1]

   everything is ready now then
epochs = 15
smoothing_constant = .01
for e in range(epochs):
    for i, (data, label) in enumerate(train_data):
        data = data.as_in_context(ctx).reshape((-1, 784))
        label = label.as_in_context(ctx)
        with autograd.record():
            output = net(data)
            loss = softmax_cross_id178(output, label)
            loss.backward()
        trainer.step(data.shape[0])
        ##########################
        #  keep a moving average of the losses
        ##########################
        curr_loss = nd.mean(loss).asscalar()
        moving_loss = (curr_loss if ((i == 0) and (e == 0))
                       else (1 - smoothing_constant) * moving_loss + (smoothing_
constant) * curr_loss)
    test_accuracy = evaluate_accuracy(test_data, net)
    train_accuracy = evaluate_accuracy(train_data, net)
    print("epoch %s. loss: %s, train_acc %s, test_acc %s" %
          (e, moving_loss, train_accuracy, test_accuracy))

this is just a simple idea. apply this and let me know.

   [1*ktndozhaakxhmly0-y_joa.png]

if you enjoyed this article, please don   t forget to clap.

lets connect on [21]stackoverflow , [22]linkedin , [23]facebook& [24]twitter.

     * [25]machine learning
     * [26]deep learning
     * [27]tensorflow
     * [28]ai
     * [29]software development

   (button)
   (button)
   (button) 41 claps
   (button) (button) (button) (button)

     (button) blockedunblock (button) followfollowing
   [30]go to the profile of maheshwar ligade

[31]maheshwar ligade

   learner, full stack developer, stackoverflower, opensource contributor
   curious of #ml,#dl,#ai. reach me [32]maheshwar.ligade@gmail.com

     * (button)
       (button) 41
     * (button)
     *
     *

   [33]go to the profile of maheshwar ligade
   never miss a story from maheshwar ligade, when you sign up for medium.
   [34]learn more
   never miss a story from maheshwar ligade
   (button) blockedunblock (button) followget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/2ab23defcf62
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/membership?source=upgrade_membership---nav_full
   7. https://medium.com/m/signin?redirect=https://medium.com/@maheshwar.ligade/gluon-api-for-deeplearning-2ab23defcf62&source=--------------------------nav_reg&operation=login
   8. https://medium.com/m/signin?redirect=https://medium.com/@maheshwar.ligade/gluon-api-for-deeplearning-2ab23defcf62&source=--------------------------nav_reg&operation=register
   9. https://medium.com/@maheshwar.ligade?source=post_header_lockup
  10. https://medium.com/@maheshwar.ligade
  11. https://mli.github.io/
  12. https://amzn.to/2rd6t3h
  13. https://amzn.to/2cxrmrc
  14. https://amzn.to/2sjonns
  15. https://amzn.to/2sjonns
  16. https://amzn.to/2sjonns
  17. https://mxnet.incubator.apache.org/versions/master/install/index.html
  18. http://jupyter.readthedocs.io/en/latest/install.html
  19. https://amzn.to/2sjonns
  20. https://amzn.to/2sjonns
  21. http://stackoverflow.com/users/3187349/maheshwar-ligade
  22. https://in.linkedin.com/in/maheshwar-ligade-14447841
  23. https://www.facebook.com/maheshwar.ligade
  24. https://twitter.com/maheshwarligade
  25. https://medium.com/tag/machine-learning?source=post
  26. https://medium.com/tag/deep-learning?source=post
  27. https://medium.com/tag/tensorflow?source=post
  28. https://medium.com/tag/ai?source=post
  29. https://medium.com/tag/software-development?source=post
  30. https://medium.com/@maheshwar.ligade?source=footer_card
  31. https://medium.com/@maheshwar.ligade
  32. mailto:maheshwar.ligade@gmail.com
  33. https://medium.com/@maheshwar.ligade
  34. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  36. https://medium.com/p/2ab23defcf62/share/twitter
  37. https://medium.com/p/2ab23defcf62/share/facebook
  38. https://medium.com/p/2ab23defcf62/share/twitter
  39. https://medium.com/p/2ab23defcf62/share/facebook
