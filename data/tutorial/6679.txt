   #[1]aaditya prakash (adi) - random musings of a deep learning grad
   student

   [2][profile_image.jpg]

[3]aaditya prakash (adi)

   random musings of a deep learning grad student

   [4]cv/resume [5]blog [6]notes [7]about
   [8][small_email.png] [9][github.png] [10][twitter.png] [11][pgp.gif]
   [12][scholar.png] [13][lk.png] [14][bitcoin.png] [15][quora.png]

deep learning software installation guide on fresh ubuntu

   guide to building and installing cuda, cudnn, opencv, ffmpeg, theano,
   tensorflow, keras, lasagne, torch and caffe. it also includes common
   issues faced and recommended libraries and versions.

table of contents

     * basic
          + [16]upgrade the ubuntu
          + [17]raid 1
          + [18]partition and mount the harddrives
          + [19]mounting
          + [20]install essentials, extras, git, zsh
     * [21]python
          + [22]python and libs
          + [23]highend computing
          + [24]python3 and ipython (jupyter)
     * [25]nvidia
          + [26]install nvidia drivers
          + [27]install cuda
          + [28]install cudnn
     * [29]image processing and id161
          + [30]install opencv
          + [31]ffmpeg
          + [32]imagemagick
     * [33]install gpu libraries
          + [34]theano
          + [35]tensorflow
          + [36]keras
          + [37]lasagne
          + [38]torch
          + [39]caffe
               o [40]note
               o [41]requirements
               o [42]issues
               o [43]installation
     * [44]optional
          + [45]remove unnecessary ubuntu folders
          + [46]customization

   recently i assembled a machine with 4 gpu (titan x), a clone of
   [47]nvidia devbox. there are few other blog posts which describe the
   hardware guide, so i will not go into the same detail. please refer
   [48]this. the actual list of parts i bought can be found [49]at pcpart
   picker.

   however this blog post is about the software guide. although, most of
   the researchers or grad students like me will have their own custom
   requirement i thought i should share my software installation guide,
   for someone who might be new and would benefit from some of these. i
   have had to do this process couple of times now, and i have learned
   from my mistakes.

   note 1: docker : if getting maximum performance is not a requirement, i
   would suggest the reader to download docker images for deep learning
   packages freely available online, [50]for e.g. time required for all
   these standalone installation is justified only when these are going to
   be used over and again, for e.g in a research lab.

   note 2: redundancy : some of the commands can be combined to be done in
   a single line, especially installing libs from apt-get. but i prefer to
   run them one at a time, for more control and feedback on installation
   process.

   note 3: python 2 : while most of the scientific community is moving on
   with python 3, it seems deep learning communmmunty is happy with python
   2. thus all instllations except where mentioned pertain to python 2.7.

   note 4: anaconda : why not anaconda ? i have done some previous
   installations with anaconda, but it becomes messy with smaller libs,
   and also compiling opencv. more importantly, i do not need all the
   utils of anaconda, and on this machine i would like to minimize the
   libs installed.

upgrade the ubuntu
     __________________________________________________________________

   always, upgrade the ubuntu for security and sanity purposes !
     * sudo apt-get update # fetches the list of available updates
     * sudo apt-get upgrade # strictly upgrades the current packages
     * sudo apt-get dist-upgrade # installs updates (new ones)

raid 1
     __________________________________________________________________

partition and mount the harddrives

   since my configuration has two hdd of 3 tb, i have configured them as
   raid 1, this provides data redundancy. you do not want to lose weeks
   worth of training due to hdd crash ! if you do not want raid 1, then
   skip this step.
     * sudo apt-get install -y mdadm # install mdadm, tool to manage raid
       1
     * sudo mdadm --assemble --scan # check for existing raids ## found
       existing !! if not prepare, refer tutorial here
       [51]http://askubuntu.com/questions/526747/setting-up-raid-1-on-14-0
       4-with-an-existing-drive

mounting

     * df -ath # shows list of all mounts
     * sudo mount /dev/md0 /media/hdd/ # (manual) mount existing
     * blkid # shows uuid for drives to add to fstab add the following
       line to /etc/fstab
    the raid 1 mount of two hdd
       uuid=06ad59d9-3176-4c16-95e9-77356cc572d7 /media/hdd ext2 defaults
       0 1
     * sudo mount -a # (permanent) mount using fstab

install essentials, extras, git, zsh
     __________________________________________________________________

     * sudo apt-get install -y build-essential
     * sudo apt-get install -y ubuntu-restricted-extras
     * sudo apt-get install -y vim
     * sudo apt-get install -y git
     * sudo apt-get install -y git-core
     * `sudo apt-get install -y checkinstall # allows for easy
       install/uninstall of packages from source
     * sudo apt-get install -y zsh
     * sudo apt-get install -y tmux
     * sudo apt-get install -y cmake
     * sudo apt-get install -y libopenblas-dev
     * `sudo apt-get install -y libhdf5-dev
     * sudo apt-get install -y gcc-4.8 # because cuda (7.0 & 7.5) works
       will less than 4.9.0
          + make soft link for gcc in /usr/bin
     * sudo apt-get install -y g++-4.8 # because cuda (7.0 & 7.5) works
       will less than 4.9.0
          + make soft link for g++ in /usr/bin
     * sudo apt-get install -y apache2
          + sudo /etc/init.d/apache2 start ` # start the apache server

python
     __________________________________________________________________

python and libs

     * python get-pip.py # install pip
     * sudo apt-get install python-dev # pythonlibs
     * sudo apt-get install libblas-dev liblapack-dev libatlas-base-dev
       gfortran
     * sudo pip install cython git+https://github.com/scipy/scipy #
       installs cython and scipy both (cython is requirement for scipy)
     * sudo pip install -u scikit-learn # requires numpy and scipy
     * matplotlib better to install using apt, lot of system lib
       dependency
          + sudo apt-get install -y matplotlib

highend computing

     * sudo pip install numpy
     * sudo pip install markupsafe
     * sudo pip install h5py
     * sudo pip install nltk
     * sudo pip install nose
     * install leveldb # for efficient use with caffe, and probably other
       libs
          + git clone git@github.com:google/leveldb.git
          + make
          + sudo mv out-shared/libleveldb.* /usr/local/lib/
          + sudo cp -r include/leveldb /usr/local/include
          + sudo ldconfig

python3 and ipython (jupyter)

     * sudo apt-get install python3-pip # to install jupyter for python3,
       it needs pip3 and does not work using pip
     * sudo pip install jupyter
     * sudo pip3 install jupyter # i don   t know why it requires sepearate
       installation, especially when not done using anaconda !

nvidia
     __________________________________________________________________

install nvidia drivers

   i would highly advice against installation using apt-get as it always
   installs one version older, and with nvidia every generation of driver
   brings performance boosts.
     * sudo service lightdm stop # stop the x server before running the
       installation note! could not sign kernels, make a note of this. it
       might lead to problems with some libraries later on
     * download amd 64 bit linux drivers from nvidia website (manual
       download and transfer and execute the provided script or binary)

install cuda

     * sudo ./cuda_7.0.28_linux.run --override # for cuda 7.0
     * sudo ln -s /usr/bin/g++-4.8 /usr/local/cuda/bin/g++ # this might be
       omitted if a symbolic link has been made from /usr/bin/g++ like
       mentioned above
     * sudo ln -s /usr/bin/gcc-4.8 /usr/local/cuda/bin/gcc # this might be
       omitted if a symbolic link has been made from /usr/bin/gcc like
       mentioned above

install cudnn

   cudnn improves the performance of deep learning libraries. unfornately,
   not all of them work with latest version. google   s tensorflow requires
   v2, theano & caffe works with v3, whereas latest version is 4. to get
   the library you will have to register at [52]nvidia cudnn
     * download the archive folder
     * cd <extracted_directory>
     * export ld_library_path=pwd:$ld_library_path

   although not required, i find it useful to rather install both the
   version of cudnn (2 and 3). put the libs of v2 in cuda 6.5 or cuda 7.0
   (for tensorflow), and v3 in cuda 7.5.

image processing and id161
     __________________________________________________________________

install opencv

   this is to install opencv 3.1 on ubuntu 15.10. thanks to the people at
   bvlc/caffe, i did not have to tweak the settings, and pretty much their
   provided instructions worked.
     * sudo apt-get -y install libopencv-dev build-essential cmake git
       libgtk2.0-dev pkg-config python-dev python-numpy libdc1394-22
       libdc1394-22-dev libjpeg-dev libpng12-dev libtiff5-dev
       libjasper-dev libavcodec-dev libavformat-dev libswscale-dev
       libxine2-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev
       libv4l-dev libtbb-dev libqt4-dev libfaac-dev libmp3lame-dev
       libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev
       libvorbis-dev libxvidcore-dev x264 v4l-utils unzip
     * download opencv from http://opencv.org/downloads.html and unpack.
       enter the unpacked directory. execute:
     * mkdir build && cd build/ # if you have oh-my-zsh then just take
       build
     * cmake -d cmake_build_type=release -d
       cmake_install_prefix=/usr/local -d with_tbb=on -d with_v4l=on -d
       with_qt=on -d with_opengl=on ..
     * make -j12 # j 12 makes 12 parallel processes using all the cores to
       speed up the process, in a single core, the build might take couple
       of hours.
     * sudo checkinstall # to create the deb package, and install it.

ffmpeg

     * sudo apt-get install -y ffmpeg

imagemagick

     * sudo apt-get install -y imagemagick

install gpu libraries
     __________________________________________________________________

theano

     * sudo pip install theano
     * sudo apt-get install -y python-pycuda # also installs the
       dependencies, but it is best to have own installation of
       nvidia-cuda, to make sure the version is proper and to maintain
       multiple version installation

tensorflow

     * sudo pip install --upgrade
       https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.6.
       0-cp27-none-linux_x86_64.whl

     tensorflow (as of jan 15, 2016), works on cuda 7.0 and cudnn v2 ),
     thus change /usr/local/cuda softlink

keras

     * sudo pip install keras # could it get any easier !! thanks people
       developer of keras !

lasagne

     * sudo pip install
       https://github.com/lasagne/lasagne/archive/master.zip # preferred
       way to install lasagne !

torch

     * curl -s
       https://raw.githubusercontent.com/torch/ezinstall/master/install-de
       ps | bash
     * git clone https://github.com/torch/distro.git ~/torch --recursive
     * cd ~/torch; ./install.sh

   aditionally to load caffe models in torch,
     * luarocks install loadcaffe

caffe

note

     * switch back to gcc 5 and g++ 5, because the prebuilt libraries of
       ubuntu 15.10 are built on gcc 5, and thus compiling caffe in 4.8
       will not link them. however, caffe will refuse to compile with gcc
       5, with error from following file
       /usr/local/cuda/include/host_config.h just comment out the line
       115, which checks the version of gcc
     * use the cmake instead of default make (checkout
       [53]https://github.com/bvlc/caffe/pull/1667 )

requirements

     * sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev
       libopencv-dev libhdf5-serial-dev protobuf-compiler
     * sudo apt-get install --no-install-recommends libboost-all-dev
     * sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev
     * for req in $(cat python/requirements.txt); do pip install $req;
       done

issues

     * linking error in leveldb e.g
        linking cxx executable caffe
        ../lib/libcaffe.so.1.0.0-rc3: undefined reference to `leveldb::status::t
ostring[abi:cxx11]() const'
        ../lib/libcaffe.so.1.0.0-rc3: undefined reference to `leveldb::db::open(
leveldb::options const&, std::__cxx11::basic_string<char, std::char_traits<char>
, std::allocator<char> > const&, leveldb::db**)'
        collect2: error: ld returned 1 exit status
        tools/cmakefiles/caffe.bin.dir/build.make:122: recipe for target 'tools/
caffe' failed
        make[2]: *** [tools/caffe] error 1

       solution, recompile leveldb with gcc 5
          + sudo apt-get install libsnappy-dev
          + wget
            https://leveldb.googlecode.com/files/leveldb-1.9.0.tar.gz\ntar
            -xzf leveldb-1.9.0.tar.gz\ncd leveldb-1.9.0make
          + sudo mv libleveldb.* /usr/local/lib
          + cd include
          + sudo cp -r leveldb /usr/local/include
          + sudo ldconfig
     * linking error in protobuf e.g
        linking cxx executable caffe
        cmakefiles/caffe.bin.dir/caffe.cpp.o: in function `std::string* google::
makecheckopstring<cudaerror, cudaerror>(cudaerror const&, cudaerror const&, char
 const*)':
        caffe.cpp:(.text._zn6google17makecheckopstringi9cudaerrors1_eepssrkt_rkt
0_pkc[_zn6google17makecheckopstringi9cudaerrors1_eepssrkt_rkt0_pkc]+0x43): undef
ined reference to google::base::checkopmessagebuilder::newstring()'
        cmakefiles/caffe.bin.dir/caffe.cpp.o: in function `std::string* google::
makecheckopstring<unsigned long, int>(unsigned long const&, int const&, char con
st*)':
        caffe.cpp:(.text._zn6google17makecheckopstringimieepssrkt_rkt0_pkc[_zn6g
oogle17makecheckopstringimieepssrkt_rkt0_pkc]+0x43): undefined reference to `goo
gle::base::checkopmessagebuilder::newstring()'
        cmakefiles/caffe.bin.dir/caffe.cpp.o: in function `main':
        caffe.cpp:(.text.startup+0x3e): undefined reference to `google::setversi
onstring(std::string const&)'
        caffe.cpp:(.text.startup+0x6e): undefined reference to `google::setusage
message(std::string const&)'
        ../lib/libcaffe.so.1.0.0-rc3: undefined reference to `google::protobuf::
internal::wireformatlite::writestringmaybealiased(int, std::string const&, googl
e::protobuf::io::codedoutputstream*)

       solution, change your current compiler to gcc use gcc --version to
       make sure the correct version, and which gcc to check the softlinks
       to actual gcc
     * relevant issues to checkout
       [54]https://github.com/bvlc/caffe/issues/2690 and
       [55]https://github.com/bvlc/caffe/issues/3046
     * in ubuntu 15.10 when using gcc 5.2, compiling might fail as
       protobuf was compiled with wrong flags. add the following to
       makefile cxxflags += -d_glibcxx_use_cxx11_abi=0
     * issues with google lib protobuf (even after the abi cxx11 fix)
          + cd /usr/local/lib
          + sudo mkdir libprotobuf_
          + mv libprotobuf* libprotobuf_
          + cd ~
          + apt-get source libprotobuf-dev
          + ll
          + cd protobuf-2.6.1
          + make
          + ./configure
          + make -j12
          + sudo make install

installation

     * mkdir build
     * cd build
     * cmake .. # make kept giving me issues, but cmake worked.
     * make all
     * make test
     * make runtest
     * make pycaffe # to be able to import caffe

to be updated with instructions for nervana

optional
     __________________________________________________________________

remove unnecessary ubuntu folders

   when working with only terminal via ssh, you do not need some of these
   folders //
     * rm -rf ~/desktop
     * rm -rf ~/public # is not persistent, after restart ubuntu recreates
       this directory
     * rm -rf ~/pictures
     * rm -rf ~/music
     * rm -rf ~/videos
     * rm -rf ~/downloads
     * rm -rf ~/templates
     * rm -rf ~/documents
     * rm -rf ~/examples.desktop

customization

   these are my personal customization which i do on every machine i use.
   you may find them useful. they increase visual appeal and efficiency of
   working on linux machine.
     * chsh -s which zsh # change the shell to zsh (which zsh should be
       inside backticks, but github markdown messes up the formatting)
     * sudo reboot now # requires restart
     * git clone git@github.com:iamaaditya/dotfiles.git
     * ~/dotfiles/install.sh # run the commands to make the shortcuts
     * git clone https://github.com/vundlevim/vundle.vim.git
       ~/.vim/bundle/vundle.vim # install bundle
    solarized color for vim
     * cd ~/.vim/colors/
     * wget
       https://raw.githubusercontent.com/altercation/vim-colors-solarized/
       master/colors/solarized.vim
    powerline & associated fonts
     * pip install powerline-status # powerline
     * wget
       https://github.com/lokaltog/powerline/raw/develop/font/powerlinesym
       bols.otf
       https://github.com/lokaltog/powerline/raw/develop/font/10-powerline
       -symbols.conf
     * mkdir -p ~/.fonts/ && mv powerlinesymbols.otf ~/.fonts/
     * fc-cache -vf ~/.fonts
     * mkdir -p ~/.config/fontconfig/conf.d/ && mv
       10-powerline-symbols.conf ~/.config/fontconfig/conf.d/ note - if
       some aspects of powerline does not show up, check
       [56]http://askubuntu.com/questions/283908/how-can-i-install-and-use
       -powerline-plugin

   if you are curious on what this customization looks like, take a look
   at this screenshot. here it shows tmux session with multiple windows,
   and a multiple panes in the same window. switching windows and panes in
   tmux is very easy. copy information across windows, sessions and
   servers is really at the tip of the finger. also solarized colors make
   it tolerable to use the screen for hours. screenshot
   written on january 15, 2016
   please enable javascript to view the [57]comments powered by disqus.

references

   1. https://iamaaditya.github.io/feed.xml
   2. https://iamaaditya.github.io/
   3. https://iamaaditya.github.io/
   4. http://www.cs.brandeis.edu/~aprakash/cv.pdf
   5. https://iamaaditya.github.io/
   6. https://iamaaditya.github.io/notes
   7. https://iamaaditya.github.io/about
   8. mailto:aprakash@brandeis.edu
   9. https://github.com/iamaaditya
  10. https://twitter.com/aaditya_prakash
  11. https://raw.githubusercontent.com/iamaaditya/iamaaditya.github.io/master/pgp_public_aaditya.txt
  12. https://scholar.google.co.in/citations?user=p-jhg4caaaaj&hl=en
  13. https://www.linkedin.com/in/aaditya-prakash-68453338/
  14. https://blockchain.info/address/19a2ddqdh3edphs5bhdyhnoglmtwqjoevv
  15. https://www.quora.com/profile/aaditya-prakash
  16. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#upgrade-the-ubuntu
  17. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#raid-1
  18. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#partition-and-mount-the-harddrives
  19. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#mounting
  20. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#install-essentials-extras-git-zsh
  21. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#python
  22. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#python-and-libs
  23. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#highend-computing
  24. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#python3-and-ipython-jupyter
  25. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#nvidia
  26. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#install-nvidia-drivers
  27. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#install-cuda
  28. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#install-cudnn
  29. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#image-processing-and-computer-vision
  30. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#install-opencv
  31. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#ffmpeg
  32. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#imagemagick
  33. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#install-gpu-libraries
  34. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#theano
  35. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#tensorflow
  36. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#keras
  37. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#lasagne
  38. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#torch
  39. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#caffe
  40. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#note
  41. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#requirements
  42. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#issues
  43. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#installation
  44. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#optional
  45. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#remove-unnecessary-ubuntu-folders
  46. https://iamaaditya.github.io/2016/01/deep-learning-software-installation-guide-on-fresh-ubuntu/#customization
  47. https://developer.nvidia.com/devbox
  48. https://www.facebook.com/notes/chris-lengerich/build-your-own-nvidia-devbox/10152999419281541
  49. https://pcpartpicker.com/user/iamaaditya/saved/lpmzxr
  50. https://hub.docker.com/r/kaixhin/cuda-theano/
  51. http://askubuntu.com/questions/526747/setting-up-raid-1-on-14-04-with-an-existing-drive
  52. https://developer.nvidia.com/cudnn
  53. https://github.com/bvlc/caffe/pull/1667
  54. https://github.com/bvlc/caffe/issues/2690
  55. https://github.com/bvlc/caffe/issues/3046
  56. http://askubuntu.com/questions/283908/how-can-i-install-and-use-powerline-plugin
  57. http://disqus.com/?ref_noscript
