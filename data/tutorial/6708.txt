   #[1]openai

     * [2]about
     * [3]progress
     * [4]resources
     * [5]blog

   (button)

   (button)

     * [6]about
         ______________________________________________________________

     * [7]progress
         ______________________________________________________________

     * [8]resources
         ______________________________________________________________

     * [9]blog
         ______________________________________________________________

     * [10]jobs
     __________________________________________________________________

faster physics in python

   june 28, 2017
   2 minute read
   faster physics in python
     __________________________________________________________________

   we're open-sourcing a high-performance python library for robotic
   simulation using the [11]mujoco engine, developed over our past year of
   robotics research.

   [12]view code[13]view docs

   this library is one of our core tools for deep learning [14]robotics
   research, which we've now released as a major version of [15]mujoco-py,
   our python 3 bindings for mujoco. mujoco-py [16]1.50.1.0 brings a
   number of new capabilities and significant performance boosts. new
   features include:
     * efficient handling of parallel simulations
     * gpu-accelerated headless 3d rendering
     * direct access to mujoco functions and data structures
     * support for all [17]mujoco 1.50 features like its improved contact
       solver

batched simulation

   many methods in trajectory optimization and id23
   (like [18]lqr, [19]pi2, and [20]trpo) benefit from being able to run
   multiple simulations in parallel. mujoco-py uses data parallelism
   through [21]openmp and direct-access memory management through
   [22]cython and [23]numpy to make batched simulation more efficient.

   [24]naive usage of the new version   s [25]mjsimpool interface shows a
   400% speedup over the old, and still about 180% over an optimized and
   restricted usage pattern using python   s [26]multiprocessing package to
   gain the same level of parallelism. the majority of the speedup comes
   from reduced access times to the various mujoco data structures. check
   out [27]examples/simpool.py for a tour of mjsimpool.

high performance texture randomization

   [loopdiscogif2.gif]

   we use the [28]domain randomization technique across many projects at
   openai. the latest version of mujoco-py supports headless gpu
   rendering; this yields a speedup of ~40x compared to cpu-based
   rendering, letting us generate hundreds of frames per second of
   synthetic image data. in the above (slowed down) animation we use this
   to vary the textures of one of our robots, which helps it identify its
   body when we transfer it from the simulator to reality. check out
   [29]examples/disco_fetch.py for an example of randomized texture
   generation.

virtual reality with mujoco-py

   the api exposed by mujoco-py is sufficient to enable virtual reality
   interaction without any extra c++ code. we ported mujoco   s [30]c++ vr
   example to python using mujoco-py. if you have an htc vive vr setup,
   you can give try it using [31]this example (this support is considered
   experimental, but we've been using it internally for a while).

api and usage

   the simplest way to get started with mujoco-py is with the [32]mjsim
   class. it is a wrapper around the simulation model and data, and lets
   you to easily step the simulation and render images from camera
   sensors. here's a simple example:
from mujoco_py import load_model_from_path, mjsim

model = load_model_from_path("xmls/tosser.xml")

sim = mjsim(model)
sim.step()
print(sim.data.qpos)
# => [ -1.074e-05   1.043e-04  -3.923e-05   0.000e+00   0.000e+00]

   for advanced users, we provide a number of lower-level interfaces for
   accessing the innards of the mujoco c structs and functions directly.
   refer to the [33]readme and the [34]full documentation to learn more.
     __________________________________________________________________

   authors
   [35]jonas schneider[36]peter welinder[37]alex ray[38]jonathan
   ho[39]wojciech zaremba
     __________________________________________________________________

     * [40]about
     * [41]progress
     * [42]resources
     * [43]blog
     * [44]charter
     * [45]jobs
     * [46]press

     *
     *

   sign up for our newsletter
   ____________________ (button)
   right

references

   visible links
   1. https://openai.com/blog/rss/
   2. https://openai.com/about/
   3. https://openai.com/progress/
   4. https://openai.com/resources/
   5. https://openai.com/blog/
   6. https://openai.com/about/
   7. https://openai.com/progress/
   8. https://openai.com/resources/
   9. https://openai.com/blog/
  10. https://openai.com/jobs/
  11. http://www.mujoco.org/changelist.html
  12. https://github.com/openai/mujoco-py
  13. https://openai.github.io/mujoco-py/build/html/index.html
  14. https://blog.openai.com/robots-that-learn/
  15. https://github.com/openai/mujoco-py
  16. https://github.com/openai/mujoco-py/releases
  17. http://www.mujoco.org/changelist.html
  18. https://en.wikipedia.org/wiki/linear   quadratic_regulator
  19. http://www.jmlr.org/papers/v11/theodorou10a.html
  20. https://arxiv.org/abs/1502.05477
  21. http://www.openmp.org/
  22. http://cython.org/
  23. http://www.numpy.org/
  24. https://gist.github.com/jonasschneider/d8bacaec035b99c7f303aafa4f67a0f3
  25. https://github.com/openai/mujoco-py/blob/master/mujoco_py/mjsimpool.pyx
  26. https://docs.python.org/3/library/multiprocessing.html
  27. https://github.com/openai/mujoco-py/blob/master/examples/simpool.py
  28. https://arxiv.org/abs/1703.06907
  29. https://github.com/openai/mujoco-py/blob/master/examples/disco_fetch.py
  30. http://www.mujoco.org/book/programming.html#savive
  31. https://github.com/openai/mujoco-py/blob/master/examples/mjvive.py
  32. https://github.com/openai/mujoco-py/blob/master/mujoco_py/mjsim.pyx
  33. https://github.com/openai/mujoco-py/blob/master/readme.md
  34. https://openai.github.io/mujoco-py/build/html/index.html
  35. https://openai.com/blog/authors/jonas-schneider/
  36. https://openai.com/blog/authors/peter/
  37. https://openai.com/blog/authors/alex-ray/
  38. https://openai.com/blog/authors/jonathan-ho/
  39. https://openai.com/blog/authors/wojciech/
  40. https://openai.com/about/
  41. https://openai.com/progress/
  42. https://openai.com/resources/
  43. https://openai.com/blog/
  44. https://openai.com/charter/
  45. https://openai.com/jobs/
  46. https://openai.com/press/

   hidden links:
  48. https://openai.com/
  49. https://openai.com/
  50. https://twitter.com/openai
  51. https://www.facebook.com/openai.research
