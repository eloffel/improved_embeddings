   [banner.jpg]
   [1][email.png] [2][instagram.png] [3][youtube.png] [4][linkedin.png]
   [5][github.png]
     * [6][home_icon.png]
     * [7]projects
     * [8]research
     * [9]resume
     * [10]teaching
     * [11]misc
     * [12]quick refs

id143 simulation

this simulation was used as a means to test our implementation of particle
filter localization on a nao robot for a class project. we set up six beacons
in the lab, and determined the robot's distance and angle from each one using
vision-based blob detection. these measurements, along with known real-world
positions of each beacon, were used by the id143 to approximate the
robot's position and orientation.

   your browser does not support the canvas element.

   move your mouse around the screen to move the robot. click to lock the
   robot's position.

   (button) pause      (button) restore default values      (button)
   restart

   number of particles:
   100
   animation speed (fps):
   10 fps
   random walk frequency:
   every 5 frames
   random walk max distance:
   40

   robot position: (x, y)

   click on an image to enlarge.

   [13][nao.jpg] the robot is displayed in the simulation as a white
   square, but its actual position is not known by the id143.
   that is what the id143 is trying to estimate. in the lab, we
   worked with the aldebaran nao humanoid robot.

   there are six localization beacons, each represented by a yellow
   square. the position of each beacon is known by the id143.
   the robot determines its distance from each beacon it sees (in the case
   of the simulation, no sensing is actually necessary - we just use the
   distance formula between the robot and each beacon). [14][beacons.jpg]

   [15][particles.png] all of the particles, represented by small blue
   squares, are initially placed around the map (screen) randomly. their
   weights are set to 1.0. then every frame, each particle's weight is
   degraded based on its distance to each beacon as compared to the
   robot's distance to said beacon. for example, if the robot is 500
   pixels from beacon a and particle n is 1000 pixels from beacon a, the
   id203 that particle n accurately represents the location of the
   robot must be decreased. if a particle's weight goes below a
   pre-defined threshold, we replace that particle with a copy of the
   particle that currently has the greatest weight. that way, over time,
   the particles that do not accurately represent the robot's location
   will be filtered out.

   there is always a chance that none of the particles will end up near
   the correct location. to deal with this problem, the id143
   does a "random walk" where each particle is randomly moved some
   distance every few frames (the frequency and distance of the random
   walk can be adjusted in this simulation). although this may cause some
   particles to move away from the robot's actual location, it will also
   cause some to move the right way. thus, if all particles end up in the
   wrong place, the random walk ensures that they will not become "stuck"
   there. additionally, if the robot is suddenly moved (the [16]kidnapped
   robot problem) to a different place, the random walk allows the
   id143 to re-discover the right location.
   [17][random_walk.png]

   [18][movement.png] when the robot starts moving, all particles are
   moved by the same amount. this allows the id143 to respond
   more quickly to changes in the robot's position. in this simulation,
   steadily moving the robot will also move the particles.

   the estimated robot location is shown by the green circle. this circle
   is centered at the weighted average location of all particles. that is,
   each particle's weight (i.e. id203) is taken into account to
   calculate the estimated robot position. the red circle represents the
   unweighted (direct) average location of all particles, providing a
   slightly less accurate estimate. [19][circles.png]

   this simulation only deals with the robot's location, and not its
   orientation. once we were able to get the location part to work,
   adapting the filter to also handle orientation was trivial.

   the id143 simulator source code is available under the
   [20]mit licence and can be downloaded [21]here.

   the script that defines the matrices and interfaces with the html is
   also available [22]here.

   (button) back to misc page

   [23]back to top

   [24]about this website [25]about me [26]site map
   [27]youtube            [28]github   [29]utcs

   website design by richard teammco

references

   1. mailto:teammco@cs.utexas.edu
   2. http://www.instagram.com/rteammco
   3. http://www.youtube.com/user/ivcode
   4. http://www.linkedin.com/pub/richard-teammco/90/885/b69
   5. https://github.com/teammcr192
   6. https://www.cs.utexas.edu/~teammco/
   7. https://www.cs.utexas.edu/~teammco/projects/
   8. https://www.cs.utexas.edu/~teammco/research/
   9. https://www.cs.utexas.edu/~teammco/resume/
  10. https://www.cs.utexas.edu/~teammco/teaching/
  11. https://www.cs.utexas.edu/~teammco/misc/
  12. https://www.cs.utexas.edu/~teammco/quick/
  13. https://www.cs.utexas.edu/~teammco/misc/particle_filter/nao.jpg
  14. https://www.cs.utexas.edu/~teammco/misc/particle_filter/beacons.jpg
  15. https://www.cs.utexas.edu/~teammco/misc/particle_filter/particles.png
  16. http://en.wikipedia.org/wiki/kidnapped_robot_problem
  17. https://www.cs.utexas.edu/~teammco/misc/particle_filter/random_walk.png
  18. https://www.cs.utexas.edu/~teammco/misc/particle_filter/movement.png
  19. https://www.cs.utexas.edu/~teammco/misc/particle_filter/circles.png
  20. http://opensource.org/licenses/mit
  21. https://www.cs.utexas.edu/~teammco/misc/particle_filter/particlefilter.js
  22. https://www.cs.utexas.edu/~teammco/misc/particle_filter/script.js
  23. https://www.cs.utexas.edu/~teammco/misc/particle_filter/
  24. https://www.cs.utexas.edu/~teammco/site/about_site.php
  25. https://www.cs.utexas.edu/~teammco/site/about_me.php
  26. https://www.cs.utexas.edu/~teammco/site/site_map.php
  27. http://www.youtube.com/user/ivcode
  28. https://github.com/teammcr192
  29. https://www.cs.utexas.edu/
