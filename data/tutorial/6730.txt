   #[1]aws machine learning blog    introducing gluon     an easy-to-use
   programming interface for flexible deep learning comments feed [2]rss
   2.0 feed

   [3]click here to return to amazon web services homepage
   [4]contact sales [5]support [6]english  [7]my account
   [8]sign up
     * [9]products
     * [10]solutions
     * [11]pricing
     * [12]documentation
     * [13]learn
     * [14]partner network
     * [15]aws marketplace
     * [16]explore more

   ____________________
     * [17]bahasa indonesia
     * [18]deutsch
     * [19]english
     * [20]espa  ol
     * [21]fran  ais
     * [22]italiano
     * [23]portugu  s
     * [24]ti   ng vi   t

     * [25]t  rk  e
     * [26]              
     * [27]         
     * [28]         
     * [29]         
     * [30]       (      )
     * [31]       (      )

     * [32]aws management console
     * [33]account settings
     * [34]billing & cost management
     * [35]security credentials
     * [36]aws personal health dashboard

   [37]click here to return to amazon web services homepage
   ____________________

     * [38]products
     * [39]solutions
     * [40]pricing
     * [41]introduction to aws
     * [42]getting started
     * [43]documentation
     * [44]training and certification
     * [45]developer center
     * [46]customer success
     * [47]partner network
     * [48]aws marketplace
     * [49]support
     * [50]log into console
     * [51]download the mobile app

   [52]blog home [53]category  [54]edition  [55]follow
   ____________________
   (button)
   [56]aws news [57]aws podcast
     __________________________________________________________________

   [58]architecture [59]aws partner network [60]aws marketplace [61]big
   data [62]business productivity [63]contact center [64]compute
   [65]database [66]desktop and application streaming [67]developer
   [68]devops [69]enterprise strategy [70]game tech [71]internet of things
   [72]machine learning [73]management tools [74]media [75]messaging &
   targeting [76]mobile [77]networking & content delivery [78]open source
   [79]public sector [80]sap [81]security, identity, & compliance
   [82]startups
   [83]china edition [84]france edition [85]germany edition [86]japan
   edition [87]korea edition [88]portuguese edition [89]russian edition
   [90]spanish edition [91]english edition
   [92]mailing list [93]rss feed [94]aws podcast

[95]aws machine learning blog

introducing gluon     an easy-to-use programming interface for flexible deep
learning

   by vikram madan | on 12 oct 2017 | in [96]apache mxnet on aws |
   [97]permalink | [98]comments | [99] share
     *
     *
     *
     *
     * https://aws.amazon.c

   today, aws and microsoft announced a [100]new specification that
   focuses on improving the speed, flexibility, and accessibility of
   machine learning technology for all developers, regardless of their
   deep learning framework of choice. the first result of this
   collaboration is the new gluon interface, an open source library in
   apache mxnet that allows developers of all skill levels to prototype,
   build, and train deep learning models. this interface greatly
   simplifies the process of creating deep learning models without
   sacrificing training speed.

   here are gluon   s four major advantages and code samples that
   demonstrate them:

(1) simple, easy-to-understand code

   in gluon, you can define neural networks using simple, clear, and
   concise code. you get a full set of plug-and-play neural network
   building blocks, including predefined layers, optimizers, and
   initializers. these abstract away many of the complicated underlying
   implementation details. the following example shows how you can define
   a simple neural network with just a few lines of code:
# first step is to initialize your model
net = gluon.nn.sequential()
# then, define your model architecture
with net.name_scope():
    net.add(gluon.nn.dense(128, activation="relu")) # 1st layer - 128 nodes
    net.add(gluon.nn.dense(64, activation="relu")) # 2nd layer     64 nodes
    net.add(gluon.nn.dense(num_outputs)) # output layer

   the following diagram shows you the structure of the neural network:

   for more information, go to [101]this tutorial to learn how to build a
   simple neural network called a multilayer id88 (mlp) with the
   gluon neural network building blocks. it   s also easy to write parts of
   the neural network [102]from scratch for more advanced use cases. gluon
   allows you to mix and match predefined and custom components in your
   neural network.

(2) flexible structure

   training neural network models is computationally intensive and, in
   some cases, can take days or even weeks. many deep learning frameworks
   reduce this time by rigidly defining the model and separating it from
   the training algorithm. this rigid approach adds a lot of complexity
   and also makes debugging difficult.

   the gluon approach is different. it brings together the training
   algorithm and neural network model, thus providing flexibility in the
   development process without sacrificing performance. central to this
   approach is the gluon trainer method, which is used to train the model.
   the trainer method is dependent on the mxnet autograd library, which is
   used to automatically calculate derivatives (i.e., gradients). a
   derivate is a mathematical calculation measuring the rate of change for
   a variable. it is a necessary input for the training algorithm. the
   autograd library can efficiently implement these mathematical
   calculations and is essential for enabling the flexibility that gluon
   offers. now you can define a training algorithm that consists of a
   simple nested for loop by incorporating autograd and trainer.
epochs = 10

for e in range(epochs):
    for i, batch in enumerate(train_data):
        data = batch.data[0]
        label = batch.label[0]
        with autograd.record(): # start recording the derivatives
            output = net(data) # the forward iteration
            loss = softmax_cross_id178(output, label)
            loss.backward()
        trainer.step(data.shape[0])

   this flexible structure makes your code intuitive and easy-to-debug,
   and opens the door for more advanced models. you can use familiar,
   native python language constructs like a for loop or an if statement
   within your neural network or as part of your algorithm. by bringing
   the model and algorithm together every line of code within the model is
   executed, making it easier to identify the specific line of code
   causing a bug.

(3) dynamic graphs

   in certain scenarios, the neural network model might need to change in
   shape and size during the training process. this is necessary in
   particular when the data inputs that are fed into the neural network
   are variable, which is common in natural language processing (nlp)
   where each sentence inputted can be a different length. with gluon, the
   neural network definition can be dynamic, meaning you can build it on
   the fly, with any structure you want, and using any of python   s native
   control flow.

   for example, these dynamic neural network structures make it easier to
   build a tree-structured long short-term memory (lstm) model, which is a
   major development in nlp [103]introduced by kai sheng tai, richard
   socher, and chris manning in 2015. tree lstms are powerful models that
   can, for example, identify whether a pair of sentences has the same
   meaning. take the following example where both sentences essentially
   have the same meaning:
     *    michael threw the football in front of the player.   
     *    the ball was thrown short of the target by michael.   

   it   s possible to just feed the sentences through a recurrent neural
   network (one popular sequence learning model) and make a
   classification. however, the main insight of tree lstms is that we
   often come at problems in language with prior knowledge. for example,
   sentences exhibit grammatical structure, and we have powerful tools for
   extracting this structure out of sentences. we can compose the words
   together with a tree-structured neural network whose structure mimics
   the known grammatical tree structure of the sentence, as the following
   diagram illustrates.

   (the stanford natural language processing group)

   this requires building a different neural network structure on the fly
   for each example. it is difficult to do with traditional frameworks,
   but gluon can handle it without a problem. in the following code
   snippet, you can see how to incorporate a loop in each forward
   iteration of model training, and still benefit from the autograd and
   trainer simplifications. this enables the model to walk through the
   tree structure of a sentence and thus learn based on that structure.
def forward(self, f, inputs, tree):
    children_outputs = [self.forward(f, inputs, child)
                        for child in tree.children]
    #builds the neural network based on each input sentence   s syntactic
    #structure during the model definition and training process
       

(4) high performance

   with the flexibility that gluon provides, you can easily prototype and
   experiment with neural network models. then, when speed becomes more
   important than flexibility (e.g., when you   re ready to feed in all of
   your training data), the gluon interface enables you to easily cache
   the neural network model to achieve high performance and a reduced
   memory footprint. this only requires a small tweak when you set up your
   neural network after you are done with your prototype and ready to test
   it on a larger dataset. instead of using sequential (as shown earlier)
   to stack the neural network layers, you must use hybridsequential. its
   functionality is the same as sequential, but it lets you call down to
   the underlying optimized engine to express some or all of your model   s
   architecture.
net = nn.hybridsequential()
with net.name_scope():
    net.add(nn.dense(128, activation="relu")) # 1st layer - 128 nodes
    net.add(nn.dense(64, activation="relu")) # 2nd layer     64 nodes
    net.add(nn.dense(10)) # output layer

   next, to compile and optimize hybridsequential, we can call its
   hybridize method:
net.hybridize()

   now, when you train your model, you will be able to get nearly the same
   high performance and reduced memory usage you get with the native mxnet
   interface.

getting started with gluon

   to start using gluon, you can follow these easy steps for
   [104]installing the latest version of mxnet, or you can [105]launch the
   deep learning amazon machine image (ami) on the cloud. next, we   ll walk
   through how to use the different components that we have discussed
   previously to build and train a simple two-layer neural network, called
   a [106]multilayer id88. we recommend using python version 3.3 or
   greater and implementing this example using a [107]jupyter notebook.

   first, import mxnet and grab the gluon library in addition to the other
   required libraries, autograd and ndarray.
import mxnet as mx
from mxnet import gluon, autograd, ndarray

   then get the data and perform some preprocessing on it. we will import
   the commonly used [108]mnist dataset, which includes a large collection
   of images of handwritten digits and the correct labels for the images.
   we also reshape the pictures to an array to enable easy processing and
   convert the arrays to the mxnet native ndarray object class.
# import the mnist using a native mxnet utils function
data = mx.test_utils.get_mnist()

# set up the training data and reshape the pictures
train_data = data['train_data'].reshape((-1, 784))
train_label = data['train_label']

# set up the test data and reshape the pictures
test_data = data['test_data'].reshape((-1, 784))
test_label = data['test_label']

# convert the data to ndarrays
train_data_mx = mx.nd.array(train_data)
train_label_mx = mx.nd.array(train_label)
test_data_mx = mx.nd.array(test_data)
test_label_mx = mx.nd.array(test_label)

   next, we create an iterator to hold the training data. iterators are a
   useful object class for traversing through large datasets. before doing
   so, we must first set the batch size, which defines the amount of data
   the neural network will process during each iteration of the training
   algorithm     in this case, 32.
batch_size = 32
train_data = mx.io.ndarrayiter(train_data_mx, train_label_mx, batch_size,
                                 shuffle=true)

   now, we are ready to define the actual neural network. we will create
   two layers: the first will have 128 nodes, and the second will have 64
   nodes. they both incorporate an activation function called the
   rectified linear unit (relu). id180 are important
   because they enable the model to represent non-linear relationships
   between the inputs and outputs. we also need to set up the output layer
   with the number of nodes corresponding to the total number of possible
   outputs. in our case with mnist, there are only 10 possible outputs
   because the pictures represent numerical digits of which there are only
   10 (i.e., 0 to 9).
# first step is to initialize your model
net = gluon.nn.sequential()
# then, define your model architecture
with net.name_scope():
    net.add(gluon.nn.dense(128, activation="relu")) # 1st layer - 128 nodes
    net.add(gluon.nn.dense(64, activation="relu")) # 2nd layer     64 nodes
    net.add(gluon.nn.dense(10)) # output layer

   prior to kicking off the model training process, we need to initialize
   the model   s parameters and set up the loss and model optimizer
   functions.
# we start with random values for all of the model   s parameters from a
# normal distribution with a standard deviation of 0.05
net.collect_params().initialize(mx.init.normal(sigma=0.05))

# we opt to use softmax cross id178 id168 to measure how well the # mo
del is able to predict the correct answer
softmax_cross_id178 = gluon.loss.softmaxcrossid178loss()

# we opt to use the stochastic id119 (sgd) training algothrim
# and set the learning rate hyperparameter to .1
trainer = gluon.trainer(net.collect_params(), 'sgd', {'learning_rate': .1})

   now it is time to define the model training algorithm. for each
   iteration, there are four steps: (1) pass in a batch of data; (2)
   calculate the difference between the output generated by the neural
   network model and the actual truth (i.e., the loss); (3) use autograd
   to calculate the derivatives of the model   s parameters with respect to
   their impact on the loss; and (4) use the trainer method to optimize
   the parameters in a way that will decrease the loss. we set the number
   of epochs at 10, meaning that we will cycle through the entire training
   dataset 10 times.
epochs = 10

for e in range(epochs):
    for i, batch in enumerate(train_data):
        data = batch.data[0]
        label = batch.label[0]
        with autograd.record(): # start recording the derivatives
            output = net(data) # the forward iteration
            loss = softmax_cross_id178(output, label)
            loss.backward()
        trainer.step(data.shape[0])

   we now have a trained neural network model, so let   s see how accurate
   it is by using the test data that we set aside. we will compute the
   accuracy by comparing the predicted values with actual values.
acc = mx.metric.accuracy()# initialize accuracy metric
output = net(test_data_mx) # run the test data through the neural network
predictions = ndarray.argmax(output, axis=1) # predictions for test data
acc.update(preds=predictions, labels=test_label_mx) # calculate accuracy
print(acc)

   to learn more about the gluon interface and deep learning, you can
   reference this [109]comprehensive set of tutorials, which covers
   everything from an introduction to deep learning to how to implement
   cutting-edge neural network models.
     __________________________________________________________________

about the author

   vikram madan is a senior product manager for aws deep learning. he
   works on products that make deep learning engines easier to use with a
   specific focus on the open source apache mxnet engine. in his spare
   time, he enjoys running long distances and watching documentaries.




   tags: [110]apache mxnet
   [111]view comments

   [112]create a free account
     * [113] twitter
     * [114] facebook
     * [115] podcast
     * [116] twitch
     * [117] aws blog
     * [118] rss news feed
     * [119] email updates

   aws & cloud computing
     * [120]what is cloud computing?
     * [121]what is caching?
     * [122]what is nosql?
     * [123]what is devops?
     * [124]what is docker?
     * [125]products & services
     * [126]customer success
     * [127]economics center
     * [128]architecture center
     * [129]security center
     * [130]what's new
     * [131]whitepapers
     * [132]aws blog
     * [133]events
     * [134]sustainable energy
     * [135]press releases
     * [136]aws in the news
     * [137]analyst reports
     * [138]legal

   solutions
     * [139]websites & website hosting
     * [140]business applications
     * [141]backup & recovery
     * [142]disaster recovery
     * [143]data archive
     * [144]devops
     * [145]serverless computing
     * [146]big data
     * [147]high performance computing
     * [148]mobile services
     * [149]digital marketing
     * [150]game development
     * [151]digital media
     * [152]government & education
     * [153]health
     * [154]financial services
     * [155]windows on aws
     * [156]retail
     * [157]power & utilities
     * [158]oil & gas
     * [159]automotive
     * [160]blockchain
     * [161]manufacturing

   resources & training
     * [162]developers
     * [163]java on aws
     * [164]javascript on aws
     * [165]mobile on aws
     * [166]php on aws
     * [167]python on aws
     * [168]ruby on aws
     * [169].net on aws
     * [170]sdks & tools
     * [171]aws marketplace
     * [172]user groups
     * [173]support plans
     * [174]service health dashboard
     * [175]discussion forums
     * [176]faqs
     * [177]documentation
     * [178]articles & tutorials
     * [179]quick starts

   manage your account
     * [180]management console
     * [181]billing & cost management
     * [182]subscribe to updates
     * [183]personal information
     * [184]payment method
     * [185]aws identity & access management
     * [186]security credentials
     * [187]request service limit increases
     * [188]contact us

   amazon web services is hiring.

   amazon web services (aws) is a dynamic, growing business unit within
   amazon.com. we are currently hiring software development engineers,
   product managers, account managers, solutions architects, support
   engineers, system engineers, designers and more. visit our [189]careers
   page to learn more.


   amazon is an equal opportunity employer     minority / women / disability
   / veteran / gender identity / sexual orientation / age.


   [190]an amazon.com company
     * language
     * [191]bahasa indonesia
     * [192]deutsch
     * [193]english
     * [194]espa  ol
     * [195]fran  ais
     * [196]italiano
     * [197]portugu  s
     * [198]ti   ng vi   t
     * [199]t  rk  e
     * [200]              
     * [201]         
     * [202]         
     * [203]         
     * [204]       (      )
     * [205]       (      )

     * [206]site terms
     * |
     * [207]privacy

      2019, amazon web services, inc. or its affiliates. all rights
   reserved.

references

   visible links
   1. https://aws.amazon.com/blogs/machine-learning/introducing-gluon-an-easy-to-use-programming-interface-for-flexible-deep-learning/feed/
   2. https://aws.amazon.com/blogs/machine-learning/feed/
   3. https://aws.amazon.com/?nc2=h_lg
   4. https://aws.amazon.com/contact-us/?nc2=h_header
   5. https://console.aws.amazon.com/support/home?nc2=h_ql_cu
   6. https://aws.amazon.com/blogs/machine-learning/introducing-gluon-an-easy-to-use-programming-interface-for-flexible-deep-learning/
   7. https://aws.amazon.com/blogs/machine-learning/introducing-gluon-an-easy-to-use-programming-interface-for-flexible-deep-learning/
   8. https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct&src=default
   9. https://aws.amazon.com/products/?nc2=h_ql_prod
  10. https://aws.amazon.com/solutions/?nc2=h_ql_sol
  11. https://aws.amazon.com/pricing/?nc2=h_ql_pr
  12. https://docs.aws.amazon.com/index.html?nc2=h_ql_doc
  13. https://aws.amazon.com/getting-started/?nc2=h_ql_gs
  14. https://aws.amazon.com/partners/?nc2=h_ql_pn
  15. https://aws.amazon.com/marketplace/?nc2=h_ql_mp
  16. https://aws.amazon.com/contact-us/?nc2=h_header
  17. https://aws.amazon.com/id/?nc1=h_ls
  18. https://aws.amazon.com/de/?nc1=h_ls
  19. https://aws.amazon.com/?nc1=h_ls
  20. https://aws.amazon.com/es/?nc1=h_ls
  21. https://aws.amazon.com/fr/?nc1=h_ls
  22. https://aws.amazon.com/it/?nc1=h_ls
  23. https://aws.amazon.com/pt/?nc1=h_ls
  24. https://aws.amazon.com/vi/?nc1=f_ls
  25. https://aws.amazon.com/tr/?nc1=h_ls
  26. https://aws.amazon.com/ru/?nc1=h_ls
  27. https://aws.amazon.com/th/?nc1=f_ls
  28. https://aws.amazon.com/jp/?nc1=h_ls
  29. https://aws.amazon.com/ko/?nc1=h_ls
  30. https://aws.amazon.com/cn/?nc1=h_ls
  31. https://aws.amazon.com/tw/?nc1=h_ls
  32. https://console.aws.amazon.com/?nc2=h_m_mc
  33. https://portal.aws.amazon.com/gp/aws/manageyouraccount?nc2=h_m_ma
  34. https://console.aws.amazon.com/billing/home?nc2=h_m_bc
  35. https://console.aws.amazon.com/iam/home?nc2=h_m_sc#security_credential
  36. https://phd.aws.amazon.com/?nc2=h_m_sc
  37. https://aws.amazon.com/?nc2=h_lg
  38. https://aws.amazon.com/products/?nc2=h_mo
  39. https://aws.amazon.com/solutions/?nc2=h_mo
  40. https://aws.amazon.com/pricing/?nc2=h_mo
  41. https://aws.amazon.com/what-is-aws/?nc2=h_mo
  42. https://aws.amazon.com/getting-started/?nc2=h_mo
  43. https://aws.amazon.com/documentation/?nc2=h_mo
  44. https://aws.amazon.com/training/?nc2=h_mo
  45. https://aws.amazon.com/developer/?nc2=h_mo
  46. https://aws.amazon.com/solutions/case-studies/?nc2=h_mo
  47. https://aws.amazon.com/partners/?nc2=h_mo
  48. https://aws.amazon.com/marketplace/?nc2=h_mo
  49. https://console.aws.amazon.com/support/home?nc2=h_ql_cu
  50. https://console.aws.amazon.com/console/home
  51. https://aws.amazon.com/console/mobile/
  52. https://aws.amazon.com/blogs
  53. https://aws.amazon.com/blogs
  54. https://aws.amazon.com/blogs
  55. https://aws.amazon.com/blogs
  56. https://aws.amazon.com/blogs/aws/
  57. https://aws.amazon.com/podcasts/aws-podcast/?sc_ichannel=ha&sc_icampaign=acq_awsblognav&sc_icontent=categorynav
  58. https://aws.amazon.com/blogs/architecture/
  59. https://aws.amazon.com/blogs/apn/
  60. https://aws.amazon.com/blogs/awsmarketplace/
  61. https://aws.amazon.com/blogs/big-data/
  62. https://aws.amazon.com/blogs/business-productivity/
  63. https://aws.amazon.com/blogs/contact-center/
  64. https://aws.amazon.com/blogs/compute/
  65. https://aws.amazon.com/blogs/database/
  66. https://aws.amazon.com/blogs/desktop-and-application-streaming/
  67. https://aws.amazon.com/blogs/developer/
  68. https://aws.amazon.com/blogs/devops/
  69. https://aws.amazon.com/blogs/enterprise-strategy/
  70. https://aws.amazon.com/blogs/gametech/
  71. https://aws.amazon.com/blogs/iot/
  72. https://aws.amazon.com/blogs/machine-learning/
  73. https://aws.amazon.com/blogs/mt/
  74. https://aws.amazon.com/blogs/media/
  75. https://aws.amazon.com/blogs/messaging-and-targeting/
  76. https://aws.amazon.com/blogs/mobile/
  77. https://aws.amazon.com/blogs/networking-and-content-delivery/
  78. https://aws.amazon.com/blogs/opensource/
  79. https://aws.amazon.com/blogs/publicsector/
  80. https://aws.amazon.com/blogs/awsforsap/
  81. https://aws.amazon.com/blogs/security/
  82. https://aws.amazon.com/blogs/startups/
  83. https://aws.amazon.com/cn/blogs/china/
  84. https://aws.amazon.com/fr/blogs/france/
  85. https://aws.amazon.com/de/blogs/germany/
  86. https://aws.amazon.com/jp/blogs/news/
  87. https://aws.amazon.com/ko/blogs/korea/
  88. https://aws.amazon.com/pt/blogs/aws-brasil/
  89. https://aws.amazon.com/ru/blogs/rus/
  90. https://aws.amazon.com/es/blogs/aws-spanish/
  91. https://aws.amazon.com/blogs/
  92. https://pages.awscloud.com/communication-preferences?sc_ichannel=ha&sc_icampaign=multi_emailoptin&sc_isegment=en&sc_iplace=fl-nav&sc_icontent=subscribe_for_updates&trkcampaign=emailoptin&trk=blog
  93. http://feeds.feedburner.com/amazonwebservicesblog
  94. https://aws.amazon.com/podcasts/aws-podcast/?sc_ichannel=ha&sc_icampaign=acq_awsblognav&sc_icontent=follownav
  95. https://aws.amazon.com/blogs/machine-learning/
  96. https://aws.amazon.com/blogs/machine-learning/category/artificial-intelligence/apache-mxnet-on-aws/
  97. https://aws.amazon.com/blogs/machine-learning/introducing-gluon-an-easy-to-use-programming-interface-for-flexible-deep-learning/
  98. https://commenting.awsblogs.com/embed.html?disqus_shortname=amazon-ai-blog&disqus_identifier=1917&disqus_title=introducing+gluon+&#8212;+an+easy-to-use+programming+interface+for+flexible+deep+learning&disqus_url=https://aws.amazon.com/blogs/machine-learning/introducing-gluon-an-easy-to-use-programming-interface-for-flexible-deep-learning/
  99. https://aws.amazon.com/blogs/machine-learning/introducing-gluon-an-easy-to-use-programming-interface-for-flexible-deep-learning/
 100. https://github.com/gluon-api/gluon-api/
 101. http://thestraightdope.mxnet.io/chapter03_deep-neural-networks/mlp-gluon.html
 102. http://gluon.mxnet.io/chapter03_deep-neural-networks/mlp-scratch.html
 103. https://nlp.stanford.edu/pubs/tai-socher-manning-acl2015.pdf
 104. https://mxnet.incubator.apache.org/get_started/install.html
 105. https://aws.amazon.com/blogs/ai/get-started-with-deep-learning-using-the-aws-deep-learning-ami/
 106. http://thestraightdope.mxnet.io/chapter03_deep-neural-networks/mlp-scratch.html
 107. http://jupyter.readthedocs.io/en/latest/install.html
 108. http://yann.lecun.com/exdb/mnist/
 109. http://gluon.mxnet.io/
 110. https://aws.amazon.com/blogs/machine-learning/tag/apache-mxnet/
 111. https://commenting.awsblogs.com/embed.html?disqus_shortname=amazon-ai-blog&disqus_identifier=1917&disqus_title=introducing+gluon+&#8212;+an+easy-to-use+programming+interface+for+flexible+deep+learning&disqus_url=https://aws.amazon.com/blogs/machine-learning/introducing-gluon-an-easy-to-use-programming-interface-for-flexible-deep-learning/
 112. https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
 113. https://twitter.com/awscloud?nc1=f_so_tw
 114. https://www.facebook.com/amazonwebservices?nc1=f_so_fb
 115. https://aws.amazon.com/podcasts/aws-podcast/
 116. https://www.twitch.tv/aws
 117. https://aws.amazon.com/blogs/
 118. https://aws.amazon.com/new/feed/
 119. https://pages.awscloud.com/communication-preferences?trk=homepage
 120. https://aws.amazon.com/what-is-cloud-computing/?nc1=f_cc
 121. https://aws.amazon.com/caching/?nc1=f_cc
 122. https://aws.amazon.com/nosql/?nc1=f_cc
 123. https://aws.amazon.com/devops/what-is-devops/?nc1=f_cc
 124. https://aws.amazon.com/docker/?nc1=f_cc
 125. https://aws.amazon.com/products/?nc1=f_cc
 126. https://aws.amazon.com/solutions/case-studies/?nc1=f_cc
 127. https://aws.amazon.com/economics/?nc1=f_cc
 128. https://aws.amazon.com/architecture/?nc1=f_cc
 129. https://aws.amazon.com/security/?nc1=f_cc
 130. https://aws.amazon.com/new/?nc1=f_cc
 131. https://aws.amazon.com/whitepapers/?nc1=f_cc
 132. https://aws.amazon.com/blogs/
 133. https://aws.amazon.com/about-aws/events/?nc1=f_cc
 134. https://aws.amazon.com/about-aws/sustainability/?nc1=f_cc
 135. https://press.aboutamazon.com/press-releases/aws?nc1=f_cc
 136. https://aws.amazon.com/about-aws/in-the-news/
 137. https://aws.amazon.com/resources/analyst-reports/?nc1=f_cc
 138. https://aws.amazon.com/legal/?nc1=f_cc
 139. https://aws.amazon.com/websites/?nc1=f_dr
 140. https://aws.amazon.com/business-applications/?nc1=f_dr
 141. https://aws.amazon.com/backup-restore/?nc1=f_dr
 142. https://aws.amazon.com/disaster-recovery/?nc1=f_dr
 143. https://aws.amazon.com/archive/?nc1=f_dr
 144. https://aws.amazon.com/devops/?nc1=f_dr
 145. https://aws.amazon.com/serverless/?nc1=f_dr
 146. https://aws.amazon.com/big-data/?nc1=f_dr
 147. https://aws.amazon.com/hpc/?nc1=f_dr
 148. https://aws.amazon.com/mobile/?nc1=f_dr
 149. https://aws.amazon.com/digital-marketing/?nc1=f_dr
 150. https://aws.amazon.com/gaming/?nc1=f_dr
 151. https://aws.amazon.com/digital-media/?nc1=f_dr
 152. https://aws.amazon.com/government-education/?nc1=f_dr
 153. https://aws.amazon.com/health/?nc1=f_dr
 154. https://aws.amazon.com/financial-services/?nc1=f_dr
 155. https://aws.amazon.com/windows/?nc1=f_dr
 156. https://aws.amazon.com/retail/?nc1=f_dr
 157. https://aws.amazon.com/power-and-utilities/?nc1=f_dr
 158. https://aws.amazon.com/oil-and-gas/?nc1=f_dr
 159. https://aws.amazon.com/automotive/?nc1=f_dr
 160. https://aws.amazon.com/blockchain/?nc1=f_dr
 161. https://aws.amazon.com/manufacturing/?nc1=f_dr
 162. https://aws.amazon.com/developer/?nc1=f_dr
 163. https://aws.amazon.com/java/?nc1=f_dr
 164. https://aws.amazon.com/javascript/?nc1=f_dr
 165. https://aws.amazon.com/mobile/?nc1=f_dr
 166. https://aws.amazon.com/php/?nc1=f_dr
 167. https://aws.amazon.com/python/?nc1=f_dr
 168. https://aws.amazon.com/ruby/?nc1=f_dr
 169. https://aws.amazon.com/net/
 170. https://aws.amazon.com/tools/?nc1=f_dr
 171. https://aws.amazon.com/marketplace/ref=mkt_ste_dev_resources_ftr?nc1=f_dr
 172. https://aws.amazon.com/usergroups/?nc1=f_dr
 173. https://aws.amazon.com/premiumsupport/?nc1=f_dr
 174. http://status.aws.amazon.com/?nc1=f_dr
 175. https://forums.aws.amazon.com/index.jspa?nc1=f_dr
 176. https://aws.amazon.com/faqs/?nc1=f_dr
 177. https://aws.amazon.com/documentation/?nc1=f_dr
 178. https://aws.amazon.com/articles/?nc1=f_dr
 179. https://aws.amazon.com/quickstart/?nc1=f_dr
 180. https://aws.amazon.com/console/?nc1=f_m
 181. https://console.aws.amazon.com/billing/home?nc1=f_m
 182. https://pages.awscloud.com/communication-preferences.html
 183. https://portal.aws.amazon.com/gp/aws/developer/account/index.html?action=edit-aws-profile&nc1=f_m
 184. https://portal.aws.amazon.com/gp/aws/developer/account/index.html?action=edit-payment-method&nc1=f_m
 185. https://aws.amazon.com/iam/?nc1=f_m
 186. https://console.aws.amazon.com/iam/home?action=access-key&nc1=f_m
 187. https://console.aws.amazon.com/support/home#/case/create?issuetype=service-limit-increase
 188. https://aws.amazon.com/contact-us/?nc1=f_m
 189. https://aws.amazon.com/careers/?nc1=f_hi
 190. http://www.amazon.com/
 191. https://aws.amazon.com/id/?nc1=h_ls
 192. https://aws.amazon.com/de/?nc1=f_ls
 193. https://aws.amazon.com/?nc1=f_ls
 194. https://aws.amazon.com/es/?nc1=f_ls
 195. https://aws.amazon.com/fr/?nc1=f_ls
 196. https://aws.amazon.com/it/?nc1=f_ls
 197. https://aws.amazon.com/pt/?nc1=f_ls
 198. https://aws.amazon.com/vi/?nc1=f_ls
 199. https://aws.amazon.com/tr/?nc1=h_ls
 200. https://aws.amazon.com/ru/?nc1=f_ls
 201. https://aws.amazon.com/th/?nc1=h_ls
 202. https://aws.amazon.com/jp/?nc1=f_ls
 203. https://aws.amazon.com/ko/?nc1=f_ls
 204. https://aws.amazon.com/cn/?nc1=f_ls
 205. https://aws.amazon.com/tw/?nc1=f_ls
 206. https://aws.amazon.com/terms/?nc1=f_pr
 207. https://aws.amazon.com/privacy/?nc1=f_pr

   hidden links:
 209. https://www.facebook.com/sharer/sharer.php?u=https://aws.amazon.com/blogs/machine-learning/introducing-gluon-an-easy-to-use-programming-interface-for-flexible-deep-learning/
 210. https://twitter.com/intent/tweet/?text=introducing%20gluon%20--%20an%20easy-to-use%20programming%20interface%20for%20flexible%20deep%20learning&via=awscloud&url=https://aws.amazon.com/blogs/machine-learning/introducing-gluon-an-easy-to-use-programming-interface-for-flexible-deep-learning/
 211. https://www.linkedin.com/sharearticle?mini=true&title=introducing%20gluon%20--%20an%20easy-to-use%20programming%20interface%20for%20flexible%20deep%20learning&source=amazon%20web%20services&summary=today%2c%20aws%20and%c2%a0microsoft%20announced%c2%a0a%20new%20specification%c2%a0that%20focuses%20on%20improving%20the%20speed%2c%20flexibility%2c%20and%20accessibility%20of%20machine%20learning%20technology%20for%20all%20developers%2c%20regardless%20of%20their%20deep%20learning%c2%a0framework%20of%20choice.%20the%20first%20result%20of%20this%20collaboration%20is%20the%20new%20gluon%20interface%2c%20an%20open%20source%20library%20in%20apache%20mxnet%20that%20allows%20developers%20of%20all%20skill%20levels%20to%20prototype%2c%20%5b%26hellip%3b%5d&url=https://aws.amazon.com/blogs/machine-learning/introducing-gluon-an-easy-to-use-programming-interface-for-flexible-deep-learning/
 212. mailto:?subject=introducing%20gluon%20--%20an%20easy-to-use%20programming%20interface%20for%20flexible%20deep%20learning&body=introducing%20gluon%20--%20an%20easy-to-use%20programming%20interface%20for%20flexible%20deep%20learning%0a%0ahttps://aws.amazon.com/blogs/machine-learning/introducing-gluon-an-easy-to-use-programming-interface-for-flexible-deep-learning/
