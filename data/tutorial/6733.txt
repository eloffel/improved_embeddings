   #[1]alternate [2]alternate [3]alternate [4]google developers

   (button)
   [5]google search
     * [6]google search
     * [7]id13 search api

   ____________________
   all products
   (button) [8]sign in

     * [9]guides
     * [10]reference

     * guides
     * [11]reference
     * [12]all products

     * get started
     * [13]introduction
     * [14]prerequisites
     * how to...
     * [15]install client libraries
     * [16]authorize requests
     * [17]use the id13 search widget
     *
         ______________________________________________________________

     * [18]terms of service

     * [19]products
     * [20]search
     * [21]id13 search api
     * [22]guides

google id13 search api

   the id13 search api lets you find entities in the [23]google
   id13. the api uses standard [24]schema.org types and is
   compliant with the [25]json-ld specification.

typical use cases

   some examples of how you can use the id13 search api
   include:
     * getting a ranked list of the most notable entities that match
       certain criteria.
     * predictively completing entities in a search box.
     * annotating/organizing content using the id13 entities.

   note: the id13 search api is a read-only api.

   for detailed information about the api methods and parameters, see the
   [26]api reference.

sample request

   the following example shows one kind of request you can send to the
   api. (but check the [27]prerequisites section first. you'll also need
   to insert your own api key.)
https://kgsearch.googleapis.com/v1/entities:search?query=taylor+swift&key=api_ke
y&limit=1&indent=true

   the sample search above returns a json-ld result similar to the
   following:
{
  "@context": {
    "@vocab": "http://schema.org/",
    "goog": "http://schema.googleapis.com/",
    "resultscore": "goog:resultscore",
    "detaileddescription": "goog:detaileddescription",
    "entitysearchresult": "goog:entitysearchresult",
    "kg": "http://g.co/kg"
  },
  "@type": "itemlist",
  "itemlistelement": [
    {
      "@type": "entitysearchresult",
      "result": {
        "@id": "kg:/m/0dl567",
        "name": "taylor swift",
        "@type": [
          "thing",
          "person"
        ],
        "description": "singer-songwriter",
        "image": {
          "contenturl": "https://t1.gstatic.com/images?q=tbn:and9gcqmvdahjhwnn2o
wys2zmo3pgahupp5tn2lwf_bjmihgi19hf8ku",
          "url": "https://en.wikipedia.org/wiki/taylor_swift",
          "license": "http://creativecommons.org/licenses/by-sa/2.0"
        },
        "detaileddescription": {
          "articlebody": "taylor alison swift is an american singer-songwriter a
nd actress. raised in wyomissing, pennsylvania, she moved to nashville, tennesse
e, at the age of 14 to pursue a career in country music. ",
          "url": "http://en.wikipedia.org/wiki/taylor_swift",
          "license": "https://en.wikipedia.org/wiki/wikipedia:text_of_creative_c
ommons_attribution-sharealike_3.0_unported_license"
        },
        "url": "http://taylorswift.com/"
      },
      "resultscore": 896.576599
    }
  ]
}

   note: the id13 search api returns only individual matching
   entities, rather than graphs of interconnected entities. if you need
   the latter, we recommend using data dumps from [28]wikidata instead.

   the following code samples show how to perform a similar search in
   various supported languages. this search returns entries matching
   taylor swift.

python

"""example of python client calling id13 search api."""
import json
import urllib

api_key = open('.api_key').read()
query = 'taylor swift'
service_url = 'https://kgsearch.googleapis.com/v1/entities:search'
params = {
    'query': query,
    'limit': 10,
    'indent': true,
    'key': api_key,
}
url = service_url + '?' + urllib.urlencode(params)
response = json.loads(urllib.urlopen(url).read())
for element in response['itemlistelement']:
  print element['result']['name'] + ' (' + str(element['resultscore']) + ')'


java

package com.google.knowledge.platforms.syndication.entitymatch.codesample;

import com.google.api.client.http.genericurl;
import com.google.api.client.http.httprequest;
import com.google.api.client.http.httprequestfactory;
import com.google.api.client.http.httpresponse;
import com.google.api.client.http.httptransport;
import com.google.api.client.http.javanet.nethttptransport;

import com.jayway.jsonpath.jsonpath;

import org.json.simple.jsonarray;
import org.json.simple.jsonobject;
import org.json.simple.parser.jsonparser;

import java.io.fileinputstream;
import java.util.properties;

/** example of java client calling id13 search api */
public class searchexample {
  public static properties properties = new properties();
  public static void main(string[] args) {
    try {
      properties.load(new fileinputstream("kgsearch.properties"));

      httptransport httptransport = new nethttptransport();
      httprequestfactory requestfactory = httptransport.createrequestfactory();
      jsonparser parser = new jsonparser();
      genericurl url = new genericurl("https://kgsearch.googleapis.com/v1/entiti
es:search");
      url.put("query", "taylor swift");
      url.put("limit", "10");
      url.put("indent", "true");
      url.put("key", properties.get("api_key"));
      httprequest request = requestfactory.buildgetrequest(url);
      httpresponse httpresponse = request.execute();
      jsonobject response = (jsonobject) parser.parse(httpresponse.parseasstring
());
      jsonarray elements = (jsonarray) response.get("itemlistelement");
      for (object element : elements) {
        system.out.println(jsonpath.read(element, "$.result.name").tostring());
      }
    } catch (exception ex) {
      ex.printstacktrace();
    }
  }
}


javascript

<!doctype html>
<html>
<head>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js
"></script>
</head>
<body>
<script>
  var service_url = 'https://kgsearch.googleapis.com/v1/entities:search';
  var params = {
    'query': 'taylor swift',
    'limit': 10,
    'indent': true,
    'key' : '<put your api_key here>',
  };
  $.getjson(service_url + '?callback=?', params, function(response) {
    $.each(response.itemlistelement, function(i, element) {
      $('<div>', {text:element['result']['name']}).appendto(document.body);
    });
  });
</script>
</body>
</html>


php

<?php
require '.api_key';
$service_url = 'https://kgsearch.googleapis.com/v1/entities:search';
$params = array(
  'query' => 'taylor swift',
  'limit' => 10,
  'indent' => true,
  'key' => $api_key);
$url = $service_url . '?' . http_build_query($params);
$ch = curl_init();
curl_setopt($ch, curlopt_url, $url);
curl_setopt($ch, curlopt_returntransfer, 1);
$response = json_decode(curl_exec($ch), true);
curl_close($ch);
foreach($response['itemlistelement'] as $element) {
  echo $element['result']['name'] . '<br/>';
}


id13 entities

   the id13 has millions of entries that describe real-world
   entities like people, places, and things. these entities form the nodes
   of the graph.

   the following are some of the types of entities found in the knowledge
   graph:
     * [29]book
     * [30]bookseries
     * [31]educationalorganization
     * [32]event
     * [33]governmentorganization
     * [34]localbusiness
     * [35]movie
     * [36]movieseries
     * [37]musicalbum
     * [38]musicgroup
     * [39]musicrecording
     * [40]organization
     * [41]periodical
     * [42]person
     * [43]place
     * [44]sportsteam
     * [45]tvepisode
     * [46]tvseries
     * [47]videogame
     * [48]videogameseries
     * [49]website

   except as otherwise noted, the content of this page is licensed under
   the [50]creative commons attribution 3.0 license, and code samples are
   licensed under the [51]apache 2.0 license. for details, see our
   [52]site policies. java is a registered trademark of oracle and/or its
   affiliates.

   last updated december 14, 2015.

     * connect
          + [53]blog
          + [54]facebook
          + [55]medium
          + [56]twitter
          + [57]youtube
     * programs
          + [58]women techmakers
          + [59]agency program
          + [60]gdg
          + [61]google developers experts
          + [62]startup launchpad
          + [63]user studies
     * developer consoles
          + [64]google api console
          + [65]google cloud platform console
          + [66]google play console
          + [67]firebase console
          + [68]actions on google console
          + [69]cast sdk developer console
          + [70]chrome web store dashboard
     * [71]google developers
          + [72]android
          + [73]chrome
          + [74]firebase
          + [75]google cloud platform
          + [76]all products

   [english______________]
   [77]terms [78]privacy
   sign up for the google developers newsletter
   [79]subscribe

references

   visible links
   1. https://developers.google.com/knowledge-graph/
   2. https://developers.google.cn/knowledge-graph/
   3. https://developers.google.com/knowledge-graph/
   4. https://developers.google.com/s/opensearch.xml
   5. https://developers.google.com/search/
   6. https://developers.google.com/search/
   7. https://developers.google.com/knowledge-graph/
   8. https://accounts.google.com/servicelogin?passive=true&continue=https://developers.google.com/knowledge-graph/?refresh=1&service=ahsid
   9. https://developers.google.com/knowledge-graph
  10. https://developers.google.com/knowledge-graph/reference/rest/v1
  11. https://developers.google.com/knowledge-graph/reference/rest/v1?nav=true
  12. https://developers.google.com/products/
  13. https://developers.google.com/knowledge-graph
  14. https://developers.google.com/knowledge-graph/prereqs
  15. https://developers.google.com/knowledge-graph/libraries
  16. https://developers.google.com/knowledge-graph/how-tos/authorizing
  17. https://developers.google.com/knowledge-graph/how-tos/search-widget
  18. https://developers.google.com/knowledge-graph/terms
  19. https://developers.google.com/products/
  20. https://developers.google.com/search/
  21. https://developers.google.com/knowledge-graph/
  22. https://developers.google.com/knowledge-graph
  23. https://www.google.com/intl/bn/insidesearch/features/search/knowledge.html
  24. http://schema.org/
  25. http://json-ld.org/
  26. https://developers.google.com/knowledge-graph/reference/rest/v1/
  27. https://developers.google.com/knowledge-graph/prereqs
  28. https://www.wikidata.org/
  29. http://schema.org/book
  30. http://schema.org/bookseries
  31. http://schema.org/educationalorganization
  32. http://schema.org/event
  33. http://schema.org/governmentorganization
  34. http://schema.org/localbusiness
  35. http://schema.org/movie
  36. http://schema.org/movieseries
  37. http://schema.org/musicalbum
  38. http://schema.org/musicgroup
  39. http://schema.org/musicrecording
  40. http://schema.org/organization
  41. http://schema.org/periodical
  42. http://schema.org/person
  43. http://schema.org/place
  44. http://schema.org/sportsteam
  45. http://schema.org/tvepisode
  46. http://schema.org/tvseries
  47. http://schema.org/videogame
  48. http://schema.org/videogameseries
  49. http://schema.org/website
  50. https://creativecommons.org/licenses/by/3.0/
  51. https://www.apache.org/licenses/license-2.0
  52. https://developers.google.com/terms/site-policies
  53. https://googledevelopers.blogspot.com/
  54. https://www.facebook.com/google-developers-967415219957038/
  55. https://medium.com/google-developers
  56. https://twitter.com/googledevs
  57. https://www.youtube.com/user/googledevelopers
  58. https://www.womentechmakers.com/
  59. https://developers.google.com/agency/
  60. https://developers.google.com/groups/
  61. https://developers.google.com/experts/
  62. https://developers.google.com/startups/
  63. https://userresearch.google.com/?reserved=0&utm_source=developers.google.com&q_language=en&utm_medium=own_srch&utm_campaign=global-developers&utm_term=0&utm_content=0&producttag=clou&campaigndate=nov18&ptype=devel&referral_code=js564523
  64. https://console.developers.google.com/
  65. https://console.cloud.google.com/
  66. https://play.google.com/apps/publish/
  67. https://console.firebase.google.com/
  68. https://console.actions.google.com/
  69. https://cast.google.com/publish/
  70. https://chrome.google.com/webstore/developer/dashboard
  71. https://developers.google.com/
  72. https://developer.android.com/index.html
  73. https://developer.chrome.com/home
  74. https://firebase.google.com/
  75. https://cloud.google.com/
  76. https://developers.google.com/products/
  77. https://developers.google.com/terms/site-terms
  78. https://policies.google.com/privacy
  79. https://services.google.com/fb/forms/googledevelopersnewsletter/?utm_medium=referral&utm_source=google-products&utm_team=googledevs&utm_campaign=201611-newsletter-launch

   hidden links:
  81. https://developers.google.com/products/
