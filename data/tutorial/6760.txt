    #[1]index [2]search [3]polyglot 16.07.04 documentation [4]part of
   speech tagging [5]downloading models

   [6]polyglot
   latest
   ____________________
     * [7]installation
     * [8]language detection
     * [9]id121
     * [10]command line interface
     * [11]downloading models
     * [12]id27s
          + [13]formats
          + [14]nearest neighbors
          + [15]vocabulary expansion
               o [16]case expansion
               o [17]digit expansion
          + [18]demo
               o [19]citation
     * [20]id52
     * [21]named entity extraction
     * [22]morphological analysis
     * [23]id68
     * [24]sentiment
     * [25]polyglot

   [26]polyglot
     * [27]docs   
     * id27s
     * [28]edit on github
     __________________________________________________________________

id27s[29]  

   id27 is a mapping of a word to a d-dimensional vector space.
   this real valued vector representation captures semantic and syntactic
   features. polyglot offers a simple interface to load several formats of
   id27s.
from polyglot.mapping import embedding

formats[30]  

   the embedding class can read id27s from different sources:
     * gensim id97 objects: (from_gensim method)
     * id97 binary/text models: (from_id97 method)
     * glove models (from_glove method)
     * polyglot pickle files: (load method)

embeddings = embedding.load("/home/rmyeid/polyglot_data/embeddings2/en/embedding
s_pkl.tar.bz2")

nearest neighbors[31]  

   a common way to investigate the space capture by the embeddings is to
   query for the nearest neightbors of any word.
neighbors = embeddings.nearest_neighbors("green")
neighbors

[u'blue',
 u'white',
 u'red',
 u'yellow',
 u'black',
 u'grey',
 u'purple',
 u'pink',
 u'light',
 u'gray']

   to calculate the distance between a word and the nieghbors, we can call
   the distances method
embeddings.distances("green", neighbors)

array([ 1.34894466,  1.37864077,  1.39504588,  1.39524949,  1.43183875,
        1.68007386,  1.75897062,  1.88401115,  1.89186132,  1.902614  ], dtype=f
loat32)

   the id27s are not unit vectors, actually the more frequent
   the word is the larger the norm of its own vector.
%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np

norms = np.linalg.norm(embeddings.vectors, axis=1)
window = 300
smooth_line = np.convolve(norms, np.ones(window)/float(window), mode='valid')
plt.plot(smooth_line)
plt.xlabel("word rank"); _ = plt.ylabel("$l_2$ norm")

   _images/embeddings_12_0.png

   this could be problematic for some applications and training
   algorithms. we can normalize them by \(l_2\) norms to get unit vectors
   to reduce effects of word frequency, as the following
embeddings = embeddings.normalize_words()

neighbors = embeddings.nearest_neighbors("green")
for w,d in zip(neighbors, embeddings.distances("green", neighbors)):
  print("{:<8}{:.4f}".format(w,d))

white   0.4261
blue    0.4451
black   0.4591
red     0.4786
yellow  0.4947
grey    0.6072
purple  0.6392
light   0.6483
pink    0.6574
colour  0.6824

vocabulary expansion[32]  

from polyglot.mapping import caseexpander, digitexpander

   not all the words are available in the dictionary defined by the word
   embeddings. sometimes it would be useful to map new words to similar
   ones that we have embeddings for.

case expansion[33]  

   for example, the word green is not available in the embeddings,
"green" in embeddings

false

   we would like to return the vector that represents the word green, to
   do that we apply a case expansion:
embeddings.apply_expansion(caseexpander)

"green" in embeddings

true

embeddings.nearest_neighbors("green")

[u'white',
 u'black',
 u'brown',
 u'blue',
 u'diamond',
 u'wood',
 u'young',
 u'hudson',
 u'cook',
 u'gold']

digit expansion[34]  

   we reduce the size of the vocabulary while training the embeddings by
   grouping special classes of words. once common case of such grouping is
   digits. every digit in the training corpus get replaced by the symbol
   #. for example, a number like 123.54 becomes ###.##. therefore,
   querying the embedding for a new number like 434 will result in a
   failure
"434" in embeddings

false

   to fix that, we apply another type of vocabulary expansion
   digitexpander. it will map any number to a sequence of #s.
embeddings.apply_expansion(digitexpander)

"434" in embeddings

true

   as expected, the neighbors of the new number 434 will be other numbers:
embeddings.nearest_neighbors("434")

[u'##',
 u'#',
 u'3',
 u'#####',
 u'#,###',
 u'##,###',
 u'##en##',
 u'####',
 u'###en###',
 u'n']

demo[35]  

   demo is available [36]here.

citation[37]  

   this work is a direct implementation of the research being described in
   the [38]polyglot: distributed word representations for multilingual nlp
   paper. the author of this library strongly encourage you to cite the
   following paper if you are using this software.
@inproceedings{polyglot:2013:acl-conll,
 author    = {al-rfou, rami  and  perozzi, bryan  and  skiena, steven},
 title     = {polyglot: distributed word representations for multilingual nlp},
 booktitle = {proceedings of the seventeenth conference on computational natural
 language learning},
 month     = {august},
 year      = {2013},
 address   = {sofia, bulgaria},
 publisher = {association for computational linguistics},
 pages     = {183--192},
 url       = {http://www.aclweb.org/anthology/w13-3520}
}

   [39]next [40]previous
     __________________________________________________________________

      copyright 2014-2015, rami al-rfou. revision d0d2aa8d.
   built with [41]sphinx using a [42]theme provided by [43]read the docs.

   read the docs v: latest

   versions
          [44]latest
          [45]stable

   downloads
          [46]htmlzip

   on read the docs
          [47]project home
          [48]builds
     __________________________________________________________________

   free document hosting provided by [49]read the docs.

references

   1. https://polyglot.readthedocs.io/en/latest/genindex.html
   2. https://polyglot.readthedocs.io/en/latest/search.html
   3. https://polyglot.readthedocs.io/en/latest/index.html
   4. https://polyglot.readthedocs.io/en/latest/pos.html
   5. https://polyglot.readthedocs.io/en/latest/download.html
   6. https://polyglot.readthedocs.io/en/latest/index.html
   7. https://polyglot.readthedocs.io/en/latest/installation.html
   8. https://polyglot.readthedocs.io/en/latest/detection.html
   9. https://polyglot.readthedocs.io/en/latest/id121.html
  10. https://polyglot.readthedocs.io/en/latest/cli.html
  11. https://polyglot.readthedocs.io/en/latest/download.html
  12. https://polyglot.readthedocs.io/en/latest/embeddings.html
  13. https://polyglot.readthedocs.io/en/latest/embeddings.html#formats
  14. https://polyglot.readthedocs.io/en/latest/embeddings.html#nearest-neighbors
  15. https://polyglot.readthedocs.io/en/latest/embeddings.html#vocabulary-expansion
  16. https://polyglot.readthedocs.io/en/latest/embeddings.html#case-expansion
  17. https://polyglot.readthedocs.io/en/latest/embeddings.html#digit-expansion
  18. https://polyglot.readthedocs.io/en/latest/embeddings.html#demo
  19. https://polyglot.readthedocs.io/en/latest/embeddings.html#citation
  20. https://polyglot.readthedocs.io/en/latest/pos.html
  21. https://polyglot.readthedocs.io/en/latest/namedentityrecognition.html
  22. https://polyglot.readthedocs.io/en/latest/morphologicalanalysis.html
  23. https://polyglot.readthedocs.io/en/latest/id68.html
  24. https://polyglot.readthedocs.io/en/latest/sentiment.html
  25. https://polyglot.readthedocs.io/en/latest/modules.html
  26. https://polyglot.readthedocs.io/en/latest/index.html
  27. https://polyglot.readthedocs.io/en/latest/index.html
  28. https://github.com/abosamoor/polyglot/blob/master/docs/embeddings.rst
  29. https://polyglot.readthedocs.io/en/latest/embeddings.html#word-embeddings
  30. https://polyglot.readthedocs.io/en/latest/embeddings.html#formats
  31. https://polyglot.readthedocs.io/en/latest/embeddings.html#nearest-neighbors
  32. https://polyglot.readthedocs.io/en/latest/embeddings.html#vocabulary-expansion
  33. https://polyglot.readthedocs.io/en/latest/embeddings.html#case-expansion
  34. https://polyglot.readthedocs.io/en/latest/embeddings.html#digit-expansion
  35. https://polyglot.readthedocs.io/en/latest/embeddings.html#demo
  36. https://bit.ly/embeddings
  37. https://polyglot.readthedocs.io/en/latest/embeddings.html#citation
  38. http://www.aclweb.org/anthology/w13-3520
  39. https://polyglot.readthedocs.io/en/latest/pos.html
  40. https://polyglot.readthedocs.io/en/latest/download.html
  41. http://sphinx-doc.org/
  42. https://github.com/snide/sphinx_rtd_theme
  43. https://readthedocs.org/
  44. https://polyglot.readthedocs.io/en/latest/
  45. https://polyglot.readthedocs.io/en/stable/
  46. https://readthedocs.org/projects/polyglot/downloads/htmlzip/latest/
  47. https://readthedocs.org/projects/polyglot/?fromdocs=polyglot
  48. https://readthedocs.org/builds/polyglot/?fromdocs=polyglot
  49. http://www.readthedocs.org/
