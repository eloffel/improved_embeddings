   #[1]gist [2]atom

   [3]skip to content
   ____________________

     * [4]all gists
     * [5]back to github

   [6]sign up for a github account [7]sign in

   instantly share code, notes, and snippets.

[8]@hal3 [9]hal3/[10]mini_sequence_labeler.py

   last active jan 24, 2019
     * [11]star [12]5
     * [13]fork [14]9

   [15]code [16]revisions 3 [17]stars 5 [18]forks 9
   embed
   what would you like to do?
   (<script src="https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab23
   1232.js"></script>)
   embed embed this gist in your website.
   (https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232)
   share copy sharable link for this gist.
   (https://gist.github.com/8c170c4400576eb8d0a8bd94ab231232.git)
   clone via https clone with git or checkout with svn using the
   repository   s web address.
   learn more about clone urls
   <script src="https:/
   [19]download zip
   pytorch implementation of a sequence labeler (pos taggger).
   [20]raw
   [21]mini_sequence_labeler.py
   """
   pytorch implementation of a sequence labeler (pos taggger).
   basic architecture:
   - take words
   - run though bidirectional gru
   - predict labels one word at a time (left to right), using a recurrent
   neural network "decoder"
   the decoder updates hidden state based on:
   - most recent word
   - the previous action (aka predicted label).
   - the previous hidden state
   can it be faster?!?!?!?!?!?
   """
   from __future__ import division
   import random
   import pickle
   import torch
   from torch import nn
   from torch.autograd import variable
   from torch.nn.parameter import parameter
   import torch.nn.functional as f
   def reseed(seed=90210):
   random.seed(seed)
   torch.manual_seed(seed)
   reseed()
   class example(object):
   def __init__(self, tokens, labels, n_labels):
   self.tokens = tokens
   self.labels = labels
   self.n_labels = n_labels
   def minibatch(data, minibatch_size, reshuffle):
   if reshuffle:
   random.shuffle(data)
   for n in xrange(0, len(data), minibatch_size):
   yield data[n:n+minibatch_size]
   def test_wsj():
   print
   print '# test on wsj subset'
   data, n_types, n_labels = pickle.load(open('wsj.pkl', 'r'))
   d_emb = 50
   d_id56 = 51
   d_hid = 52
   d_actemb = 5
   minibatch_size = 5
   n_epochs = 10
   preprocess_minibatch = true
   embed_word = nn.embedding(n_types, d_emb)
   gru = nn.gru(d_emb, d_id56, bidirectional=true)
   embed_action = nn.embedding(n_labels, d_actemb)
   combine_arh = nn.linear(d_actemb + d_id56 * 2 + d_hid, d_hid)
   initial_h_tensor = torch.tensor(1, d_hid)
   initial_h_tensor.zero_()
   initial_h = parameter(initial_h_tensor)
   initial_actemb_tensor = torch.tensor(1, d_actemb)
   initial_actemb_tensor.zero_()
   initial_actemb = parameter(initial_actemb_tensor)
   policy = nn.linear(d_hid, n_labels)
   loss_fn = torch.nn.mseloss(size_average=false)
   optimizer = torch.optim.adam(
   list(embed_word.parameters()) +
   list(gru.parameters()) +
   list(embed_action.parameters()) +
   list(combine_arh.parameters()) +
   list(policy.parameters()) +
   [initial_h, initial_actemb]
   , lr=0.01)
   for _ in xrange(n_epochs):
   total_loss = 0
   for batch in minibatch(data, minibatch_size, true):
   optimizer.zero_grad()
   loss = 0
   if preprocess_minibatch:
   # for efficiency, combine id56 outputs on entire
   # minibatch in one go (requires padding with zeros,
   # should be masked but isn't right now)
   all_tokens = [ex.tokens for ex in batch]
   max_length = max(map(len, all_tokens))
   all_tokens = [tok + [0] * (max_length - len(tok)) for tok in
   all_tokens]
   all_e = embed_word(variable(torch.longtensor(all_tokens),
   requires_grad=false))
   [all_id56_out, _] = gru(all_e)
   for ex in batch:
   n = len(ex.tokens)
   if preprocess_minibatch:
   id56_out = all_id56_out[0,:,:].view(-1, 1, 2 * d_id56)
   else:
   e = embed_word(variable(torch.longtensor(ex.tokens),
   requires_grad=false)).view(n, 1, -1)
   [id56_out, _] = gru(e)
   prev_h = initial_h # previous hidden state
   actemb = initial_actemb # embedding of previous action
   output = []
   for t in xrange(n):
   # update hidden state based on most recent
   # *predicted* action (not ground truth)
   inputs = [actemb, prev_h, id56_out[t]]
   h = f.relu(combine_arh(torch.cat(inputs, 1)))
   # make prediction
   pred_vec = policy(h)
   pred = pred_vec.data.numpy().argmin()
   output.append(pred)
   # accumulate loss (squared error against costs)
   truth = torch.ones(n_labels)
   truth[ex.labels[t]] = 0
   loss += loss_fn(pred_vec, variable(truth, requires_grad=false))
   # cache hidden state, previous action embedding
   prev_h = h
   actemb = embed_action(variable(torch.longtensor([pred]),
   requires_grad=false))
   # print 'output=%s, truth=%s' % (output, ex.labels)
   loss.backward()
   total_loss += loss.data.numpy()[0]
   optimizer.step()
   print total_loss
   if __name__ == '__main__':
   test_wsj()
   [22]raw
   [23]wsj.pkl
   (lp0
   (lp1
   ccopy_reg
   _reconstructor
   p2
   (c__main__
   example
   p3
   c__builtin__
   object
   p4
   ntp5
   rp6
   (dp7
   s'tokens'
   p8
   (lp9
   i2
   ai2
   ai18
   ai2
   ai27
   ai2
   ai2
   ai7
   ai21
   ai2
   ai2
   ai2
   ai17
   ass'labels'
   p10
   (lp11
   i0
   ai0
   ai1
   ai2
   ai3
   ai0
   ai0
   ai4
   ai5
   ai0
   ai6
   ai2
   ai7
   ass'n_labels'
   p12
   i32
   sbag2
   (g3
   g4
   ntp13
   rp14
   (dp15
   g8
   (lp16
   i21
   ai14
   ai2
   ai7
   ai2
   ai7
   ai18
   ai2
   ai2
   ai2
   ai19
   ai2
   ai21
   ai2
   ai7
   ai29
   ai2
   ai2
   ai2
   ai3
   ai19
   ai2
   ai2
   ai11
   ai2
   ai2
   ai2
   ai2
   ai7
   ai2
   ai16
   ai17
   asg10
   (lp17
   i5
   ai2
   ai2
   ai4
   ai2
   ai4
   ai1
   ai8
   ai9
   ai3
   ai10
   ai1
   ai5
   ai11
   ai4
   ai3
   ai8
   ai9
   ai11
   ai12
   ai10
   ai6
   ai11
   ai13
   ai14
   ai15
   ai11
   ai9
   ai4
   ai11
   ai16
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp18
   rp19
   (dp20
   g8
   (lp21
   i2
   ai2
   ai2
   ai2
   ai2
   ai4
   ai2
   ai6
   ai2
   ai2
   ai7
   ai21
   ai2
   ai2
   ai2
   ai20
   ai2
   ai31
   ai2
   ai2
   ai2
   ai27
   ai2
   ai7
   ai6
   ai2
   ai2
   ai3
   ai2
   ai2
   ai2
   ai3
   ai21
   ai2
   ai17
   asg10
   (lp22
   i3
   ai9
   ai11
   ai16
   ai17
   ai18
   ai3
   ai5
   ai2
   ai3
   ai4
   ai5
   ai19
   ai11
   ai14
   ai3
   ai2
   ai20
   ai0
   ai0
   ai0
   ai3
   ai0
   ai4
   ai5
   ai2
   ai9
   ai12
   ai21
   ai9
   ai2
   ai12
   ai5
   ai2
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp23
   rp24
   (dp25
   g8
   (lp26
   i6
   ai2
   ai2
   ai16
   ai7
   ai5
   ai2
   ai18
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp27
   i5
   ai0
   ai2
   ai16
   ai4
   ai22
   ai5
   ai1
   ai5
   ai9
   ai2
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp28
   rp29
   (dp30
   g8
   (lp31
   i2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai27
   ai14
   ai2
   ai13
   ai2
   ai2
   ai17
   asg10
   (lp32
   i10
   ai14
   ai6
   ai3
   ai11
   ai3
   ai3
   ai2
   ai16
   ai3
   ai2
   ai6
   ai5
   ai9
   ai11
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp33
   rp34
   (dp35
   g8
   (lp36
   i2
   ai18
   ai2
   ai14
   ai20
   ai2
   ai2
   ai2
   ai17
   ai30
   asg10
   (lp37
   i23
   ai1
   ai5
   ai2
   ai3
   ai24
   ai11
   ai8
   ai7
   ai25
   asg12
   i32
   sbag2
   (g3
   g4
   ntp38
   rp39
   (dp40
   g8
   (lp41
   i2
   ai2
   ai2
   ai21
   ai2
   ai2
   ai2
   ai21
   ai22
   ai2
   ai2
   ai27
   ai13
   ai2
   ai26
   ai2
   ai27
   ai21
   ai2
   ai2
   ai17
   asg10
   (lp42
   i5
   ai0
   ai26
   ai5
   ai11
   ai27
   ai16
   ai5
   ai11
   ai16
   ai9
   ai3
   ai5
   ai2
   ai3
   ai11
   ai3
   ai5
   ai0
   ai11
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp43
   rp44
   (dp45
   g8
   (lp46
   i5
   ai2
   ai2
   ai2
   ai2
   ai2
   ai26
   ai2
   ai2
   ai15
   ai2
   ai2
   ai7
   ai30
   ai16
   ai2
   ai2
   ai2
   ai27
   ai2
   ai31
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp47
   i22
   ai10
   ai14
   ai5
   ai9
   ai2
   ai3
   ai3
   ai11
   ai14
   ai3
   ai2
   ai4
   ai25
   ai16
   ai0
   ai0
   ai0
   ai3
   ai0
   ai20
   ai0
   ai0
   ai0
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp48
   rp49
   (dp50
   g8
   (lp51
   i2
   ai2
   ai2
   ai6
   ai2
   ai27
   ai2
   ai2
   ai21
   ai2
   ai2
   ai2
   ai12
   ai21
   ai2
   ai2
   ai27
   ai2
   ai2
   ai12
   ai2
   ai2
   ai17
   asg10
   (lp52
   i0
   ai0
   ai16
   ai5
   ai2
   ai3
   ai11
   ai3
   ai5
   ai0
   ai0
   ai0
   ai26
   ai5
   ai9
   ai11
   ai3
   ai0
   ai0
   ai26
   ai0
   ai0
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp53
   rp54
   (dp55
   g8
   (lp56
   i2
   ai27
   ai21
   ai2
   ai2
   ai22
   ai2
   ai2
   ai2
   ai7
   ai2
   ai2
   ai29
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp57
   i28
   ai3
   ai5
   ai28
   ai6
   ai11
   ai14
   ai9
   ai11
   ai4
   ai6
   ai28
   ai3
   ai8
   ai17
   ai2
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp58
   rp59
   (dp60
   g8
   (lp61
   i5
   ai21
   ai2
   ai2
   ai18
   ai6
   ai2
   ai2
   ai2
   ai2
   ai27
   ai2
   ai2
   ai2
   ai2
   ai2
   ai7
   ai30
   ai16
   ai2
   ai2
   ai17
   asg10
   (lp62
   i22
   ai5
   ai2
   ai2
   ai1
   ai5
   ai9
   ai2
   ai3
   ai5
   ai3
   ai10
   ai27
   ai14
   ai9
   ai11
   ai4
   ai25
   ai16
   ai0
   ai0
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp63
   rp64
   (dp65
   g8
   (lp66
   i21
   ai2
   ai27
   ai2
   ai2
   ai2
   ai2
   ai21
   ai22
   ai2
   ai21
   ai2
   ai2
   ai7
   ai2
   ai7
   ai2
   ai8
   ai2
   ai3
   ai2
   ai21
   ai2
   ai25
   ai13
   ai14
   ai22
   ai2
   ai20
   ai2
   ai2
   ai2
   ai7
   ai2
   ai16
   ai17
   asg10
   (lp67
   i5
   ai2
   ai3
   ai2
   ai2
   ai11
   ai3
   ai5
   ai11
   ai3
   ai5
   ai0
   ai0
   ai4
   ai0
   ai4
   ai2
   ai2
   ai1
   ai12
   ai21
   ai5
   ai19
   ai3
   ai5
   ai2
   ai11
   ai17
   ai3
   ai9
   ai17
   ai11
   ai4
   ai10
   ai16
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp68
   rp69
   (dp70
   g8
   (lp71
   i21
   ai2
   ai7
   ai2
   ai18
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai7
   ai2
   ai2
   ai2
   ai29
   ai2
   ai3
   ai2
   ai21
   ai2
   ai2
   ai17
   asg10
   (lp72
   i5
   ai2
   ai4
   ai13
   ai1
   ai17
   ai3
   ai0
   ai26
   ai0
   ai0
   ai4
   ai16
   ai3
   ai2
   ai3
   ai2
   ai12
   ai21
   ai5
   ai2
   ai11
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp73
   rp74
   (dp75
   g8
   (lp76
   i21
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai11
   ai21
   ai9
   ai2
   ai2
   ai21
   ai2
   ai27
   ai14
   ai2
   ai2
   ai4
   ai2
   ai2
   ai21
   ai2
   ai2
   ai27
   ai14
   ai7
   ai2
   ai7
   ai2
   ai20
   ai2
   ai2
   ai12
   ai2
   ai2
   ai7
   ai2
   ai2
   ai16
   ai17
   asg10
   (lp77
   i5
   ai2
   ai8
   ai29
   ai21
   ai5
   ai27
   ai14
   ai3
   ai5
   ai0
   ai29
   ai21
   ai5
   ai2
   ai3
   ai2
   ai6
   ai2
   ai18
   ai8
   ai3
   ai5
   ai9
   ai2
   ai3
   ai2
   ai4
   ai2
   ai4
   ai17
   ai3
   ai19
   ai11
   ai26
   ai9
   ai11
   ai4
   ai0
   ai0
   ai16
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp78
   rp79
   (dp80
   g8
   (lp81
   i21
   ai9
   ai18
   ai2
   ai27
   ai21
   ai2
   ai2
   ai2
   ai11
   ai2
   ai2
   ai2
   ai6
   ai2
   ai2
   ai27
   ai2
   ai25
   ai21
   ai2
   ai7
   ai2
   ai2
   ai2
   ai2
   ai2
   ai11
   ai15
   ai2
   ai2
   ai2
   ai7
   ai2
   ai3
   ai2
   ai2
   ai2
   ai7
   ai6
   ai2
   ai27
   ai2
   ai2
   ai21
   ai2
   ai27
   ai2
   ai2
   ai27
   ai2
   ai17
   asg10
   (lp82
   i5
   ai0
   ai1
   ai28
   ai3
   ai5
   ai9
   ai17
   ai11
   ai13
   ai1
   ai8
   ai21
   ai5
   ai30
   ai2
   ai3
   ai2
   ai3
   ai5
   ai9
   ai4
   ai9
   ai11
   ai9
   ai3
   ai2
   ai13
   ai14
   ai17
   ai3
   ai11
   ai4
   ai6
   ai12
   ai0
   ai0
   ai0
   ai4
   ai5
   ai2
   ai3
   ai2
   ai3
   ai5
   ai0
   ai3
   ai0
   ai0
   ai3
   ai0
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp83
   rp84
   (dp85
   g8
   (lp86
   i4
   ai2
   ai2
   ai2
   ai15
   ai2
   ai12
   ai15
   ai4
   ai2
   ai2
   ai2
   ai21
   ai2
   ai7
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp87
   i18
   ai9
   ai2
   ai11
   ai14
   ai9
   ai26
   ai14
   ai18
   ai8
   ai17
   ai3
   ai5
   ai2
   ai4
   ai0
   ai0
   ai16
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp88
   rp89
   (dp90
   g8
   (lp91
   i20
   ai2
   ai7
   ai21
   ai2
   ai2
   ai2
   ai2
   ai6
   ai2
   ai2
   ai26
   ai2
   ai2
   ai2
   ai27
   ai14
   ai17
   asg10
   (lp92
   i3
   ai0
   ai4
   ai5
   ai0
   ai0
   ai0
   ai16
   ai5
   ai9
   ai2
   ai3
   ai8
   ai5
   ai11
   ai3
   ai2
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp93
   rp94
   (dp95
   g8
   (lp96
   i2
   ai27
   ai21
   ai8
   ai2
   ai2
   ai2
   ai2
   ai21
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp97
   i11
   ai3
   ai5
   ai2
   ai16
   ai8
   ai9
   ai31
   ai5
   ai2
   ai16
   ai17
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp98
   rp99
   (dp100
   g8
   (lp101
   i22
   ai2
   ai2
   ai2
   ai2
   ai27
   ai21
   ai2
   ai2
   ai2
   ai6
   ai2
   ai2
   ai7
   ai2
   ai20
   ai2
   ai12
   ai2
   ai2
   ai12
   ai2
   ai2
   ai21
   ai2
   ai2
   ai20
   ai6
   ai2
   ai2
   ai3
   ai2
   ai2
   ai17
   asg10
   (lp102
   i11
   ai16
   ai9
   ai2
   ai11
   ai3
   ai5
   ai17
   ai2
   ai3
   ai5
   ai9
   ai2
   ai4
   ai16
   ai15
   ai2
   ai26
   ai2
   ai11
   ai26
   ai8
   ai16
   ai5
   ai9
   ai11
   ai3
   ai5
   ai2
   ai17
   ai12
   ai21
   ai11
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp103
   rp104
   (dp105
   g8
   (lp106
   i22
   ai2
   ai5
   ai2
   ai27
   ai2
   ai2
   ai30
   ai11
   ai2
   ai2
   ai2
   ai27
   ai21
   ai8
   ai7
   ai2
   ai2
   ai2
   ai2
   ai2
   ai21
   ai2
   ai17
   asg10
   (lp107
   i11
   ai16
   ai22
   ai11
   ai3
   ai9
   ai2
   ai25
   ai13
   ai16
   ai3
   ai11
   ai3
   ai5
   ai2
   ai4
   ai8
   ai3
   ai2
   ai11
   ai16
   ai5
   ai2
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp108
   rp109
   (dp110
   g8
   (lp111
   i5
   ai2
   ai31
   ai2
   ai2
   ai11
   ai2
   ai27
   ai2
   ai22
   ai12
   ai28
   ai2
   ai2
   ai2
   ai7
   ai30
   ai16
   ai2
   ai2
   ai7
   ai2
   ai2
   ai27
   ai2
   ai2
   ai25
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp112
   i22
   ai23
   ai1
   ai5
   ai2
   ai3
   ai5
   ai3
   ai5
   ai11
   ai26
   ai11
   ai16
   ai9
   ai11
   ai4
   ai25
   ai16
   ai0
   ai0
   ai4
   ai2
   ai2
   ai3
   ai9
   ai11
   ai3
   ai0
   ai26
   ai0
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp113
   rp114
   (dp115
   g8
   (lp116
   i19
   ai2
   ai2
   ai2
   ai26
   ai2
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp117
   i10
   ai1
   ai5
   ai2
   ai3
   ai24
   ai2
   ai2
   ai2
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp118
   rp119
   (dp120
   g8
   (lp121
   i23
   ai26
   ai2
   ai2
   ai2
   ai2
   ai3
   ai2
   ai7
   ai2
   ai2
   ai11
   ai2
   ai28
   ai2
   ai2
   ai2
   ai20
   ai2
   ai10
   ai17
   asg10
   (lp122
   i11
   ai3
   ai9
   ai9
   ai11
   ai16
   ai12
   ai21
   ai4
   ai3
   ai11
   ai3
   ai2
   ai11
   ai14
   ai9
   ai11
   ai3
   ai2
   ai11
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp123
   rp124
   (dp125
   g8
   (lp126
   i2
   ai23
   ai2
   ai2
   ai27
   ai2
   ai12
   ai11
   ai21
   ai2
   ai2
   ai2
   ai25
   ai6
   ai2
   ai17
   asg10
   (lp127
   i2
   ai11
   ai14
   ai2
   ai3
   ai11
   ai26
   ai3
   ai5
   ai9
   ai2
   ai1
   ai3
   ai5
   ai2
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp128
   rp129
   (dp130
   g8
   (lp131
   i2
   ai2
   ai15
   ai2
   ai3
   ai2
   ai2
   ai2
   ai10
   ai24
   ai2
   ai2
   ai2
   ai28
   ai3
   ai2
   ai2
   ai2
   ai10
   ai25
   ai6
   ai2
   ai2
   ai17
   asg10
   (lp132
   i30
   ai11
   ai14
   ai17
   ai12
   ai21
   ai6
   ai2
   ai11
   ai3
   ai10
   ai14
   ai2
   ai11
   ai12
   ai21
   ai8
   ai30
   ai11
   ai3
   ai5
   ai30
   ai2
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp133
   rp134
   (dp135
   g8
   (lp136
   i2
   ai2
   ai15
   ai2
   ai6
   ai2
   ai27
   ai2
   ai10
   ai24
   ai2
   ai28
   ai2
   ai2
   ai2
   ai10
   ai2
   ai17
   asg10
   (lp137
   i30
   ai11
   ai14
   ai17
   ai5
   ai2
   ai3
   ai6
   ai11
   ai3
   ai2
   ai11
   ai29
   ai21
   ai30
   ai11
   ai8
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp138
   rp139
   (dp140
   g8
   (lp141
   i2
   ai7
   ai16
   ai2
   ai2
   ai2
   ai7
   ai2
   ai27
   ai2
   ai2
   ai2
   ai7
   ai23
   ai5
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai30
   ai24
   ai27
   ai2
   ai2
   ai20
   ai2
   ai2
   ai10
   ai17
   asg10
   (lp142
   i8
   ai4
   ai16
   ai0
   ai0
   ai0
   ai4
   ai2
   ai3
   ai0
   ai0
   ai0
   ai4
   ai11
   ai22
   ai29
   ai21
   ai15
   ai8
   ai3
   ai10
   ai14
   ai15
   ai25
   ai3
   ai3
   ai9
   ai11
   ai3
   ai9
   ai2
   ai11
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp143
   rp144
   (dp145
   g8
   (lp146
   i2
   ai2
   ai2
   ai20
   ai23
   ai7
   ai2
   ai2
   ai3
   ai2
   ai2
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp147
   i3
   ai9
   ai11
   ai3
   ai11
   ai4
   ai11
   ai14
   ai12
   ai21
   ai2
   ai3
   ai2
   ai11
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp148
   rp149
   (dp150
   g8
   (lp151
   i2
   ai7
   ai2
   ai23
   ai2
   ai2
   ai2
   ai2
   ai24
   ai2
   ai28
   ai2
   ai2
   ai2
   ai12
   ai2
   ai2
   ai21
   ai2
   ai10
   ai17
   asg10
   (lp152
   i8
   ai4
   ai2
   ai11
   ai14
   ai9
   ai9
   ai11
   ai3
   ai2
   ai11
   ai29
   ai21
   ai11
   ai26
   ai21
   ai3
   ai5
   ai19
   ai11
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp153
   rp154
   (dp155
   g8
   (lp156
   i19
   ai2
   ai2
   ai20
   ai2
   ai2
   ai2
   ai12
   ai18
   ai2
   ai2
   ai2
   ai2
   ai7
   ai2
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp157
   i10
   ai1
   ai8
   ai3
   ai9
   ai11
   ai8
   ai26
   ai1
   ai8
   ai6
   ai2
   ai11
   ai4
   ai13
   ai1
   ai24
   ai2
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp158
   rp159
   (dp160
   g8
   (lp161
   i2
   ai2
   ai2
   ai2
   ai2
   ai7
   ai2
   ai6
   ai2
   ai2
   ai2
   ai2
   ai7
   ai2
   ai2
   ai17
   asg10
   (lp162
   i10
   ai1
   ai0
   ai0
   ai0
   ai4
   ai8
   ai5
   ai0
   ai0
   ai2
   ai2
   ai4
   ai27
   ai16
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp163
   rp164
   (dp165
   g8
   (lp166
   i2
   ai2
   ai2
   ai2
   ai27
   ai2
   ai2
   ai31
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp167
   i0
   ai0
   ai1
   ai28
   ai3
   ai0
   ai0
   ai20
   ai28
   ai2
   ai11
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp168
   rp169
   (dp170
   g8
   (lp171
   i21
   ai2
   ai2
   ai2
   ai16
   ai19
   ai2
   ai3
   ai2
   ai2
   ai2
   ai12
   ai2
   ai21
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp172
   i5
   ai2
   ai6
   ai2
   ai16
   ai10
   ai1
   ai12
   ai21
   ai9
   ai2
   ai26
   ai21
   ai5
   ai2
   ai3
   ai2
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp173
   rp174
   (dp175
   g8
   (lp176
   i2
   ai18
   ai2
   ai2
   ai2
   ai2
   ai2
   ai29
   ai2
   ai20
   ai21
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp177
   i0
   ai1
   ai5
   ai9
   ai9
   ai6
   ai2
   ai3
   ai11
   ai3
   ai5
   ai9
   ai2
   ai2
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp178
   rp179
   (dp180
   g8
   (lp181
   i2
   ai2
   ai7
   ai2
   ai20
   ai2
   ai7
   ai2
   ai7
   ai2
   ai2
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp182
   i0
   ai0
   ai4
   ai17
   ai3
   ai0
   ai4
   ai0
   ai4
   ai1
   ai9
   ai9
   ai11
   ai11
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp183
   rp184
   (dp185
   g8
   (lp186
   i21
   ai2
   ai2
   ai2
   ai2
   ai27
   ai9
   ai2
   ai2
   ai24
   ai2
   ai2
   ai2
   ai2
   ai21
   ai2
   ai26
   ai2
   ai2
   ai17
   asg10
   (lp187
   i5
   ai9
   ai2
   ai16
   ai11
   ai3
   ai0
   ai11
   ai11
   ai3
   ai0
   ai1
   ai8
   ai17
   ai5
   ai2
   ai3
   ai2
   ai2
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp188
   rp189
   (dp190
   g8
   (lp191
   i2
   ai2
   ai2
   ai7
   ai21
   ai2
   ai2
   ai2
   ai13
   ai2
   ai3
   ai2
   ai2
   ai2
   ai2
   ai27
   ai13
   ai2
   ai7
   ai21
   ai2
   ai16
   ai17
   asg10
   (lp192
   i3
   ai0
   ai1
   ai4
   ai5
   ai2
   ai1
   ai8
   ai5
   ai2
   ai12
   ai21
   ai9
   ai2
   ai11
   ai3
   ai5
   ai2
   ai4
   ai5
   ai0
   ai16
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp193
   rp194
   (dp195
   g8
   (lp196
   i2
   ai3
   ai2
   ai21
   ai2
   ai2
   ai18
   ai2
   ai20
   ai21
   ai2
   ai2
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp197
   i2
   ai12
   ai21
   ai5
   ai2
   ai2
   ai1
   ai17
   ai3
   ai5
   ai2
   ai3
   ai6
   ai9
   ai11
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp198
   rp199
   (dp200
   g8
   (lp201
   i2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai12
   ai2
   ai2
   ai27
   ai2
   ai9
   ai2
   ai12
   ai2
   ai2
   ai27
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp202
   i0
   ai0
   ai0
   ai16
   ai17
   ai9
   ai2
   ai2
   ai26
   ai9
   ai2
   ai3
   ai5
   ai0
   ai11
   ai26
   ai2
   ai2
   ai3
   ai9
   ai2
   ai2
   ai0
   ai0
   ai0
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp203
   rp204
   (dp205
   g8
   (lp206
   i20
   ai21
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai31
   ai9
   ai2
   ai7
   ai2
   ai7
   ai2
   ai12
   ai2
   ai2
   ai17
   asg10
   (lp207
   i3
   ai5
   ai9
   ai2
   ai10
   ai29
   ai21
   ai0
   ai20
   ai0
   ai11
   ai4
   ai2
   ai4
   ai11
   ai26
   ai2
   ai11
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp208
   rp209
   (dp210
   g8
   (lp211
   i2
   ai19
   ai31
   ai2
   ai25
   ai2
   ai2
   ai2
   ai7
   ai21
   ai2
   ai31
   ai2
   ai2
   ai2
   ai2
   ai2
   ai3
   ai21
   ai2
   ai2
   ai27
   ai2
   ai2
   ai2
   ai2
   ai2
   ai12
   ai2
   ai2
   ai17
   asg10
   (lp212
   i31
   ai10
   ai1
   ai2
   ai3
   ai24
   ai9
   ai2
   ai4
   ai5
   ai2
   ai20
   ai6
   ai11
   ai8
   ai14
   ai15
   ai12
   ai5
   ai9
   ai11
   ai3
   ai2
   ai11
   ai3
   ai0
   ai0
   ai26
   ai0
   ai0
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp213
   rp214
   (dp215
   g8
   (lp216
   i2
   ai2
   ai2
   ai17
   asg10
   (lp217
   i8
   ai5
   ai2
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp218
   rp219
   (dp220
   g8
   (lp221
   i21
   ai2
   ai2
   ai27
   ai2
   ai2
   ai26
   ai21
   ai2
   ai2
   ai27
   ai2
   ai25
   ai2
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp222
   i5
   ai0
   ai0
   ai3
   ai0
   ai16
   ai3
   ai5
   ai0
   ai2
   ai3
   ai0
   ai3
   ai24
   ai2
   ai2
   ai2
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp223
   rp224
   (dp225
   g8
   (lp226
   i12
   ai21
   ai2
   ai2
   ai3
   ai2
   ai2
   ai2
   ai4
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai8
   ai2
   ai17
   asg10
   (lp227
   i26
   ai5
   ai2
   ai16
   ai12
   ai21
   ai24
   ai11
   ai30
   ai3
   ai2
   ai26
   ai2
   ai11
   ai3
   ai2
   ai11
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp228
   rp229
   (dp230
   g8
   (lp231
   i26
   ai21
   ai2
   ai2
   ai27
   ai21
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai12
   ai2
   ai7
   ai2
   ai29
   ai2
   ai2
   ai2
   ai2
   ai2
   ai12
   ai21
   ai2
   ai2
   ai2
   ai8
   ai17
   asg10
   (lp232
   i3
   ai5
   ai6
   ai2
   ai3
   ai5
   ai2
   ai16
   ai11
   ai3
   ai11
   ai3
   ai0
   ai0
   ai26
   ai0
   ai4
   ai3
   ai3
   ai30
   ai11
   ai3
   ai0
   ai0
   ai26
   ai5
   ai0
   ai0
   ai0
   ai0
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp233
   rp234
   (dp235
   g8
   (lp236
   i25
   ai2
   ai7
   ai21
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai25
   ai2
   ai2
   ai27
   ai21
   ai2
   ai2
   ai2
   ai12
   ai6
   ai2
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp237
   i3
   ai11
   ai4
   ai5
   ai11
   ai16
   ai0
   ai0
   ai0
   ai0
   ai0
   ai3
   ai5
   ai2
   ai3
   ai5
   ai0
   ai0
   ai0
   ai26
   ai5
   ai2
   ai2
   ai0
   ai0
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp238
   rp239
   (dp240
   g8
   (lp241
   i2
   ai12
   ai2
   ai2
   ai17
   asg10
   (lp242
   i2
   ai26
   ai2
   ai16
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp243
   rp244
   (dp245
   g8
   (lp246
   i21
   ai2
   ai2
   ai7
   ai29
   ai6
   ai2
   ai2
   ai7
   ai2
   ai27
   ai2
   ai12
   ai2
   ai2
   ai2
   ai3
   ai21
   ai2
   ai2
   ai2
   ai7
   ai2
   ai2
   ai2
   ai2
   ai2
   ai2
   ai17
   asg10
   (lp247
   i5
   ai9
   ai2
   ai4
   ai3
   ai5
   ai2
   ai2
   ai4
   ai11
   ai3
   ai11
   ai26
   ai24
   ai11
   ai16
   ai12
   ai5
   ai0
   ai0
   ai0
   ai4
   ai9
   ai3
   ai2
   ai26
   ai9
   ai11
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp248
   rp249
   (dp250
   g8
   (lp251
   i21
   ai2
   ai2
   ai2
   ai2
   ai19
   ai7
   ai2
   ai21
   ai2
   ai2
   ai2
   ai21
   ai2
   ai2
   ai17
   asg10
   (lp252
   i5
   ai2
   ai29
   ai8
   ai21
   ai10
   ai4
   ai3
   ai5
   ai2
   ai2
   ai16
   ai5
   ai9
   ai11
   ai7
   asg12
   i32
   sbag2
   (g3
   g4
   ntp253
   rp254
   (dp255
   g8
   (lp256
   i6
   ai2
   ai2
   ai2
   ai2
   ai20
   ai21
   ai2
   ai7
   ai2
   ai2
   ai12
   ai2
   ai15
   ai2
   ai3
   ai2
   ai2
   ai17
   asg10
   (lp257
   i5
   ai2
   ai2
   ai16
   ai17
   ai3
   ai5
   ai2
   ai4
   ai31
   ai2
   ai26
   ai11
   ai14
   ai17
   ai12
   ai9
   ai11
   ai7
   asg12
   i32
   sbaai32
   ai32
   a.
   [24]@honnibal

this comment has been minimized.

   [25]sign in to view
   copy link (button) quote reply

[26]honnibal commented [27]aug 21, 2017    

   edited

   i think you could benefit from some pre-computation here. if i'm
   understanding correctly, on every word, you're computing:
# update hidden state based on most recent
# *predicted* action (not ground truth)
inputs = [actemb, prev_h, id56_out[t]]
vector = torch.cat(inputs, 1)
hidden1 = combine_arh(vector)
hidden2 = f.relu(hidden1)

   you could instead be doing this inside the inner loop:
hidden1 = w_actemb + w_prev_h + w_id56_out[t]
hidden2 = f.relu(hidden1)

   the variable w_actemb is the dot-product of the action embeddings and
   the hidden layer. you can compute this at the start of the minibatch,
   and reuse the computation for each word. this is better with bigger
   batch sizes, obviously. the only part you need to do inside the inner
   loop is adding the features active for your state, and then applying
   the non-linearity.

   i've been doing this for spacy's parser. it's especially good with beam
   search.
   [28]sign up for free to join this conversation on github. already have
   an account? [29]sign in to comment

     *    2019 github, inc.
     * [30]terms
     * [31]privacy
     * [32]security
     * [33]status
     * [34]help

     * [35]contact github
     * [36]pricing
     * [37]api
     * [38]training
     * [39]blog
     * [40]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [41]reload to refresh your
   session. you signed out in another tab or window. [42]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://gist.github.com/opensearch-gist.xml
   2. https://gist.github.com/hal3.atom
   3. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232#start-of-content
   4. https://gist.github.com/discover
   5. https://github.com/
   6. https://gist.github.com/join?source=header-gist
   7. https://gist.github.com/auth/github?return_to=https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232
   8. https://gist.github.com/hal3
   9. https://gist.github.com/hal3
  10. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232
  11. https://gist.github.com/login?return_to=https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232
  12. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232/stargazers
  13. https://gist.github.com/login?return_to=https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232
  14. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232/forks
  15. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232
  16. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232/revisions
  17. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232/stargazers
  18. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232/forks
  19. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232/archive/76f57c198cb7afdc5122e413c2a3023ed024b643.zip
  20. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232/raw/76f57c198cb7afdc5122e413c2a3023ed024b643/mini_sequence_labeler.py
  21. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232#file-mini_sequence_labeler-py
  22. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232/raw/76f57c198cb7afdc5122e413c2a3023ed024b643/wsj.pkl
  23. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232#file-wsj-pkl
  24. https://gist.github.com/honnibal
  25. https://gist.github.com/login?return_to=https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232
  26. https://gist.github.com/honnibal
  27. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232#gistcomment-2181864
  28. https://gist.github.com/join?source=comment-gist
  29. https://gist.github.com/login?return_to=https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232
  30. https://github.com/site/terms
  31. https://github.com/site/privacy
  32. https://github.com/security
  33. https://githubstatus.com/
  34. https://help.github.com/
  35. https://github.com/contact
  36. https://github.com/pricing
  37. https://developer.github.com/
  38. https://training.github.com/
  39. https://github.blog/
  40. https://github.com/about
  41. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232
  42. https://gist.github.com/hal3/8c170c4400576eb8d0a8bd94ab231232

   hidden links:
  44. https://gist.github.com/
  45. https://help.github.com/articles/which-remote-url-should-i-use
  46. https://github.com/
