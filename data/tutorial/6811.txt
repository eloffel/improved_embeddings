   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]stats and bots
     * [9]data science
     * [10]analytics
     * [11]startups
     * [12]bots
     * [13]design
     * [14]subscribe
     * [15]     cube.js framework
     __________________________________________________________________

improving real-time id164 with yolo

a new perspective for real-time id164

   [16]go to the profile of varun agrawal
   [17]varun agrawal (button) blockedunblock (button) followfollowing
   oct 19, 2017

   in recent years, the field of id164 has seen tremendous
   progress, aided by the advent of deep learning. id164 is the
   task of identifying objects in an image and drawing bounding boxes
   around them, i.e. localizing them. it   s a very important problem in
   id161 due its numerous applications from self-driving cars to
   security and tracking.

   prior approaches of id164 have generally proposed pipelines
   that are separate stages in a sequence. this causes a disconnect
   between what each stage accomplishes and the final objective, which is
   drawing a tight bounding box around the objects in an image. an
   end-to-end framework that optimizes the detection error in a joint
   fashion would be a better solution, not just to train the model for
   better accuracy but to also improve detection speed.

   this is where the you only look once (or yolo) approach comes into
   play. varun agrawal told the [18]statsbot team why yolo is the better
   option compared to other approaches in id164.
   [1*psfl5og1c9hikxlmijv8-q.png]
   [19]illustration source

   deep learning has proven to be a powerful tool for image
   classification, achieving human level capability on this task. earlier
   detection approaches leveraged this power to transform the problem of
   id164 to one of classification, which is recognizing what
   category of objects the image belonged to.

   the way this was done was via a 2-stage process:
    1. the first stage involved generating tens of thousands of proposals.
       they are nothing but specific rectangular areas on the image also
       known as bounding boxes, of what the system believed to be
       object-like things in the image. the bounding box proposal could
       either be around an actual object in an image or not, and filtering
       this out was the objective of the second stage.
    2. in the second stage, an image classifier would classify the
       sub-image inside the bounding box proposal, and the classifier
       would say if it was of a particular object type or simply a
       non-object or background.

   while immensely accurate, this 2-step process suffered from certain
   flaws such as efficiency, due to the immense number of proposals being
   generated, and a lack of joint optimization over both proposal
   generation and classification. this leads to each stage not truly
   understanding the bigger picture, instead being siloed to their own
   mini-problem and thus limiting their performance.

what yolo is all about

   this is where yolo comes in. yolo, which stands for you only look once,
   is a deep learning based id164 algorithm [20]developed by
   joseph redmon and ali farhadi at the university of washington in 2016.

   the rationale behind calling the system yolo is that rather than pass
   in multiple subimages of potential objects, you only passed in the
   whole image to the deep learning system once. then, you would get all
   the bounding boxes as well as the object category classifications in
   one go. this is the fundamental design decision of yolo and is what
   makes it a refreshing new perspective on the task of id164.

   the way yolo works is that it subdivides the image into an nxn grid, or
   more specifically in the original paper a 7x7 grid. each grid cell,
   also known as an anchor, represents a classifier which is responsible
   for generating k bounding boxes around potential objects whose ground
   truth center falls within that grid cell (k is 2 in the paper) and
   classifying it as the correct object.

     note that the bounding box is not restricted to be within the grid
     cell, it can expand within the boundaries of the image to
     accommodate the object it believes it is responsible to detect. this
     means that in the current version of yolo, the system generates 98
     bounding boxes of varying sizes to accommodate the various objects
     in the scene.

performance and results

   for more dense id164, a user could set k or n to a higher
   number based on their needs. however, with the current configuration,
   we have a system that is able to output a large number of bounding
   boxes around objects as well as classify them into one of various
   object categories, based on the spatial layout of the image.

   this is done in a single pass through the image at id136 time.
   thus, the joint detection and classification leads to better
   optimization of the learning objective (the id168) as well as
   real-time performance.

   indeed, the results of yolo are very promising. on the challenging
   [21]pascal voc detection challenge dataset, yolo manages to achieve a
   mean average precision, or map, of 63.4 (out of 100) while running at
   45 frames per second. in comparison, the state of the art model, faster
   r-id98 vgg 16 achieves an map of 73.2, but only runs at a maximum 7
   frames per second, a 6x decrease in efficiency.

   you can see comparisons of yolo to other detection frameworks in the
   table below.
   [1*rzr8fu2siz2dsijqkbb4ia.png]

     if one lets yolo sacrifice some more accuracy, it can run at 155
     frames per second, though only at an map of 52.7.

   thus, the main selling point for yolo is its promise of good
   performance in id164 at real-time speeds. that allows its
   use in systems such as robots, self-driving cars, and drones, where
   being time critical is of the utmost importance.

yolov2 framework

   recently, the same group of researchers have released the new yolov2
   framework, which leverages recent results in a deep learning network
   design to build a more efficient network, as well as use the anchor
   boxes idea from faster-rid98 to ease the learning problem for the
   network.
   [0*x3s2jcdo6bcgcdyc.]
   [22]illustration source

   the result is a detection system which is even better, achieving
   state-of-the-art performance at 78.6 map on the pascal voc detection
   dataset, while other systems, such as the improved version of
   faster-rid98 (faster-rid98 resnet) and [23]ssd500, only achieve 76.4 map
   and 76.8 map on the same test dataset.

     the key differentiator though is the performance speed. the best
     performing yolov2 model runs at 40 fps compared to 5 fps for
     faster-rid98 resnet.

   although ssd500 runs at 45 fps, a lower resolution version of yolov2
   with map 76.8 (the same as ssd500) runs at 67 fps, thus showing us the
   high performance capabilities of yolov2 as a result of its design
   choices.

final thoughts

   in conclusion, yolo has demonstrated significant performance gains
   while running at real-time performance, an important middle ground in
   the era of resource hungry deep learning algorithms. as we march on
   towards a more automation ready future, systems like yolo and ssd500
   are poised to usher in large strides of progress and enable the big ai
   dream.

important reading through the article

     * [24]you only look once: unified, real-time id164
     * [25]the pascal visual objects challenge: a retrospective
     * [26]ssd: single shot multibox detector

   iframe: [27]/media/02231cd5403151a2a463e36cc3b88462?postid=cd348527b9b7

you   d also like:

   [28]sql queries for funnel analysis
   a template for building sql funnel queriesblog.statsbot.co
   [29]id3 (gans): engine and applications
   how generative adversarial nets are used to make our life
   betterblog.statsbot.co
   [30]how to reduce churn rate by handling stripe failed payments
   how we automated dunning managementblog.statsbot.co

     * [31]machine learning
     * [32]data science
     * [33]data analytics
     * [34]id164
     * [35]yolo

   (button)
   (button)
   (button) 377 claps
   (button) (button) (button) 1 (button) (button)

     (button) blockedunblock (button) followfollowing
   [36]go to the profile of varun agrawal

[37]varun agrawal

   computer scientist | inventor | bibliophile | musician | gastronome.

     (button) follow
   [38]stats and bots

[39]stats and bots

   data stories on machine learning and analytics. from statsbot   s makers.

     * (button)
       (button) 377
     * (button)
     *
     *

   [40]stats and bots
   never miss a story from stats and bots, when you sign up for medium.
   [41]learn more
   never miss a story from stats and bots
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://blog.statsbot.co/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/cd348527b9b7
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://blog.statsbot.co/real-time-object-detection-yolo-cd348527b9b7&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://blog.statsbot.co/real-time-object-detection-yolo-cd348527b9b7&source=--------------------------nav_reg&operation=register
   8. https://blog.statsbot.co/?source=logo-lo_npydgyl0xadm---cfc9f21a543a
   9. https://blog.statsbot.co/datascience/home
  10. https://blog.statsbot.co/analytics/home
  11. https://blog.statsbot.co/startups/home
  12. https://blog.statsbot.co/bots/home
  13. https://blog.statsbot.co/design/home
  14. https://blog.statsbot.co/statsbot-digest-b0d7372f842a
  15. https://cube.dev/
  16. https://blog.statsbot.co/@varagrawal?source=post_header_lockup
  17. https://blog.statsbot.co/@varagrawal
  18. https://statsbot.co/?utm_source=blog&utm_medium=article&utm_campaign=yolo
  19. https://arxiv.org/abs/1506.02640
  20. https://arxiv.org/abs/1506.02640
  21. http://host.robots.ox.ac.uk/pascal/voc/pubs/everingham15.pdf
  22. http://www.pjreddie.com/
  23. https://arxiv.org/pdf/1512.02325.pdf
  24. https://arxiv.org/abs/1506.02640
  25. http://host.robots.ox.ac.uk/pascal/voc/pubs/everingham15.pdf
  26. https://arxiv.org/pdf/1512.02325.pdf
  27. https://blog.statsbot.co/media/02231cd5403151a2a463e36cc3b88462?postid=cd348527b9b7
  28. https://blog.statsbot.co/sql-queries-for-funnel-analysis-35d5e456371d
  29. https://blog.statsbot.co/generative-adversarial-networks-gans-engine-and-applications-f96291965b47
  30. https://blog.statsbot.co/how-to-reduce-churn-rate-by-27-by-handling-stripe-failed-payments-e75892f8956c
  31. https://blog.statsbot.co/tagged/machine-learning?source=post
  32. https://blog.statsbot.co/tagged/data-science?source=post
  33. https://blog.statsbot.co/tagged/data-analytics?source=post
  34. https://blog.statsbot.co/tagged/object-detection?source=post
  35. https://blog.statsbot.co/tagged/yolo?source=post
  36. https://blog.statsbot.co/@varagrawal?source=footer_card
  37. https://blog.statsbot.co/@varagrawal
  38. https://blog.statsbot.co/?source=footer_card
  39. https://blog.statsbot.co/?source=footer_card
  40. https://blog.statsbot.co/
  41. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  43. https://blog.statsbot.co/sql-queries-for-funnel-analysis-35d5e456371d
  44. https://blog.statsbot.co/generative-adversarial-networks-gans-engine-and-applications-f96291965b47
  45. https://blog.statsbot.co/how-to-reduce-churn-rate-by-27-by-handling-stripe-failed-payments-e75892f8956c
  46. https://medium.com/p/cd348527b9b7/share/twitter
  47. https://medium.com/p/cd348527b9b7/share/facebook
  48. https://medium.com/p/cd348527b9b7/share/twitter
  49. https://medium.com/p/cd348527b9b7/share/facebook
