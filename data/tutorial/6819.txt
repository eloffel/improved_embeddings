   #[1]github [2]recent commits to isolation-ai:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]1
     * [35]star [36]3
     * [37]fork [38]2

[39]ryanshrott/[40]isolation-ai

   [41]code [42]issues 0 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   ai agent that plays the board game isolation
     * [47]16 commits
     * [48]1 branch
     * [49]0 releases
     * [50]fetching contributors

    1. [51]python 59.1%
    2. [52]javascript 28.8%
    3. [53]jupyter notebook 7.2%
    4. [54]html 3.4%
    5. [55]css 1.5%

   (button) python javascript jupyter notebook html css
   branch: master (button) new pull request
   [56]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/r
   [57]download zip

downloading...

   want to be notified of new releases in ryanshrott/isolation-ai?
   [58]sign in [59]sign up

launching github desktop...

   if nothing happens, [60]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [61]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [62]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [63]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [64]permalink
   type               name              latest commit message commit time
        failed to load latest commit information.
        [65].udacity-pa
        [66]__pycache__
        [67]isolation
        [68]isoviz
        [69].gitattributes
        [70]alphagosummary.docx
        [71]heuristics analysis.docx
        [72]readme.md
        [73]untitled.ipynb
        [74]_ds_store
        [75]_gitignore
        [76]agent_test.py
        [77]competition_agent.py
        [78]game_agent.py
        [79]genetic.py
        [80]heuristic_analysis.pdf
        [81]isolation-89777.zip
        [82]isolation-result-89777.json
        [83]research_review.pdf
        [84]sample_players.py
        [85]tournament.py
        [86]viz.gif

readme.md

build a game-playing agent

   [87]example game of isolation

synopsis

   in this project, students will develop an adversarial search agent to
   play the game "isolation". isolation is a deterministic, two-player
   game of perfect information in which the players alternate turns moving
   a single piece from one cell to another on a board. whenever either
   player occupies a cell, that cell becomes blocked for the remainder of
   the game. the first player with no remaining legal moves loses, and the
   opponent is declared the winner. these rules are implemented in the
   isolation.board class provided in the repository.

   this project uses a version of isolation where each agent is restricted
   to l-shaped movements (like a knight in chess) on a rectangular grid
   (like a chess or checkerboard). the agents can move to any open cell on
   the board that is 2-rows and 1-column or 2-columns and 1-row away from
   their current position on the board. movements are blocked at the edges
   of the board (the board does not wrap around), however, the player can
   "jump" blocked or occupied spaces (just like a knight in chess).

   additionally, agents will have a fixed time limit each turn to search
   for the best move and respond. if the time limit expires during a
   player's turn, that player forfeits the match, and the opponent wins.

   students only need to modify code in the game_agent.py file to complete
   the project. additional files include example player and evaluation
   functions, the game board class, and a template to develop local unit
   tests.

instructions

   in order to complete the isolation project, students must submit code
   that passes all test cases for the required functions in game_agent.py
   and complete a report as specified in the rubric. students can submit
   using the [88]udacity project assistant command line utility. students
   will receive feedback on test case success/failure after each
   submission.

   students must implement the following functions:
     * minimaxplayer.minimax(): implement minimax search
     * alphabetaplayer.alphabeta(): implement minimax search with
       alpha-beta pruning
     * alphabetaplayer.get_move(): implement iterative deepening search
     * custom_score(): implement your own best position evaluation
       heuristic
     * custom_score_2(): implement your own alternate position evaluation
       heuristic
     * custom_score_3(): implement your own alternate position evaluation
       heuristic

   you may write or modify code within each file (but you must maintain
   compatibility with the function signatures provided). you may add other
   classes, functions, etc., as needed, but it is not required.

   the project assistant sandbox for this project places some restrictions
   on the modules available and blocks calls to some of the standard
   library functions. in general, standard library functions that
   introspect code running in the sandbox are blocked, and the pa only
   allows the following modules random, numpy, scipy, sklearn, itertools,
   math, heapq, collections, array, copy, and operator. (modules within
   these packages are also allowed, e.g., numpy.random.)

quickstart guide

   the following example creates a game and illustrates the basic api. you
   can run this example by activating your aind anaconda environment and
   executing the command python sample_players.py
from isolation import board
from sample_players import randomplayer
from sample_players import greedyplayer

# create an isolation board (by default 7x7)
player1 = randomplayer()
player2 = greedyplayer()
game = board(player1, player2)

# place player 1 on the board at row 2, column 3, then place player 2 on
# the board at row 0, column 5; display the resulting board state.  note
# that the .apply_move() method changes the calling object in-place.
game.apply_move((2, 3))
game.apply_move((0, 5))
print(game.to_string())

# players take turns moving on the board, so player1 should be next to move
assert(player1 == game.active_player)

# get a list of the legal moves available to the active player
print(game.get_legal_moves())

# get a successor of the current state by making a copy of the board and
# applying a move. notice that this does not change the calling object
# (unlike .apply_move()).
new_game = game.forecast_move((1, 1))
assert(new_game.to_string() != game.to_string())
print("\nold state:\n{}".format(game.to_string()))
print("\nnew state:\n{}".format(new_game.to_string()))

# play the remainder of the game automatically -- outcome can be "illegal
# move", "timeout", or "forfeit"
winner, history, outcome = game.play()
print("\nwinner: {}\noutcome: {}".format(winner, outcome))
print(game.to_string())
print("move history:\n{!s}".format(history))

coding

   the steps below outline a suggested process for completing the project
   -- however, this is just a suggestion to help you get started. a stub
   for writing unit tests is provided in the agent_test.py file (no local
   test cases are provided). (see the [89]unittest module for information
   on getting started.)

   the primary mechanism for testing your code will be the udacity project
   assistant command line utility. you can install the udacity-pa tool by
   activating your aind anaconda environment, then running pip install
   udacity-pa. you can submit your code for scoring by running udacity
   submit isolation. the project assistant server has a collection of unit
   tests that it will execute on your code, and it will provide feedback
   on any successes or failures. you must pass all test cases in the
   project assistant before you can complete the project by submitting
   your report for review.
    0. verify that the udacity-pa tool is installed properly by submitting
       the project. run udacity submit isolation. (you should see a list
       of test cases that failed -- that's expected because you haven't
       implemented any code yet.)
    1. modify the minimaxplayer.minimax() method to return any legal move
       for the active player. resubmit your code to the project assistant
       and the minimax interface test should pass.
    2. further modify the minimaxplayer.minimax() method to implement the
       full recursive search procedure described in lecture (ref. [90]aima
       minimax decision). resubmit your code to the project assistant and
       both the minimax interface and functional test cases will pass.
    3. start on the alpha beta test cases. modify the
       alphabetaplayer.alphabeta() method to return any legal move for the
       active player. resubmit your code to the project assistant and the
       alphabeta interface test should pass.
    4. further modify the alphabetaplayer.alphabeta() method to implement
       the full recursive search procedure described in lecture (ref.
       [91]aima alpha-beta search). resubmit your code to the project
       assistant and both the alphabeta interface and functional test
       cases will pass.
    5. you can pass the interface test for the alphabetaplayer.get_move()
       function by copying the code from minimaxplayer.get_move().
       resubmit your code to the project assistant to see that the
       get_move() interface test case passes.
    6. pass the test_get_move test by modifying alphabetaplayer.get_move()
       to implement iterative deepening. see also [92]aima iterative
       deepening search
    7. finally, pass the heuristic tests by implementing any heuristic in
       custom_score(), custom_score_2(), and custom_score_3(). (these test
       cases only validate the return value type -- it does not check for
       "correctness" of your heuristic.) you can see example heuristics in
       the sample_players.py file.

tournament

   the tournament.py script is used to evaluate the effectiveness of your
   custom heuristics. the script measures relative performance of your
   agent (named "student" in the tournament) in a round-robin tournament
   against several other pre-defined agents. the student agent uses
   time-limited iterative deepening along with your custom heuristics.

   the performance of time-limited iterative deepening search is hardware
   dependent (faster hardware is expected to search deeper than slower
   hardware in the same amount of time). the script controls for these
   effects by also measuring the baseline performance of an agent called
   "id_improved" that uses iterative deepening and the improved_score
   heuristic defined in sample_players.py. your goal is to develop a
   heuristic such that student outperforms id_improved. (note: this can be
   very challenging!)

   the tournament opponents are listed below. (see also: sample heuristics
   and players defined in sample_players.py)
     * random: an agent that randomly chooses a move each turn.
     * mm_open: minimaxplayer agent using the open_move_score heuristic
       with search depth 3
     * mm_center: minimaxplayer agent using the center_score heuristic
       with search depth 3
     * mm_improved: minimaxplayer agent using the improved_score heuristic
       with search depth 3
     * ab_open: alphabetaplayer using iterative deepening alpha-beta
       search and the open_move_score heuristic
     * ab_center: alphabetaplayer using iterative deepening alpha-beta
       search and the center_score heuristic
     * ab_improved: alphabetaplayer using iterative deepening alpha-beta
       search and the improved_score heuristic

submission

   before submitting your solution to a reviewer, you are required to
   submit your project to udacity's project assistant, which will provide
   some initial feedback.

   please see the instructions in the [93]aind-sudoku project repository
   for installation and setup instructions.

   to submit your code to the project assistant, run udacity submit
   isolation from within the top-level directory of this project. you will
   be prompted for a username and password. if you login using google or
   facebook, follow the [94]instructions for using a jwt.

   this process will create a zipfile in your top-level directory named
   isolation-<id>.zip. this is the file that you should submit to the
   udacity reviews system.

game visualization

   the isoviz folder contains a modified version of chessboard.js that can
   animate games played on a 7x7 board. in order to use the board, you
   must run a local webserver by running python -m http.server 8000 from
   your project directory (you can replace 8000 with another port number
   if that one is unavailable), then open your browser to
   http://localhost:8000 and navigate to the /isoviz/display.html page.
   enter the move history of an isolation match (i.e., the array returned
   by the board.play() method) into the text area and run the match.
   refresh the page to run a different game. (feel free to submit pull
   requests with improvements to isoviz.)

pvp competition

   once your project has been reviewed and accepted by meeting all
   requirements of the rubric, you are invited to complete the
   competition_agent.py file using any combination of techniques and
   improvements from lectures or online, and then submit it to compete in
   a tournament against other students from your cohort and past cohort
   champions. additional details (official rules, submission deadline,
   etc.) will be provided separately.

   the competition agent can be submitted using the udacity project
   assistant:
udacity submit isolation-pvp

     *    2019 github, inc.
     * [95]terms
     * [96]privacy
     * [97]security
     * [98]status
     * [99]help

     * [100]contact github
     * [101]pricing
     * [102]api
     * [103]training
     * [104]blog
     * [105]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [106]reload to refresh your
   session. you signed out in another tab or window. [107]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/ryanshrott/isolation-ai/commits/master.atom
   3. https://github.com/ryanshrott/isolation-ai#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/ryanshrott/isolation-ai
  32. https://github.com/join
  33. https://github.com/login?return_to=/ryanshrott/isolation-ai
  34. https://github.com/ryanshrott/isolation-ai/watchers
  35. https://github.com/login?return_to=/ryanshrott/isolation-ai
  36. https://github.com/ryanshrott/isolation-ai/stargazers
  37. https://github.com/login?return_to=/ryanshrott/isolation-ai
  38. https://github.com/ryanshrott/isolation-ai/network/members
  39. https://github.com/ryanshrott
  40. https://github.com/ryanshrott/isolation-ai
  41. https://github.com/ryanshrott/isolation-ai
  42. https://github.com/ryanshrott/isolation-ai/issues
  43. https://github.com/ryanshrott/isolation-ai/pulls
  44. https://github.com/ryanshrott/isolation-ai/projects
  45. https://github.com/ryanshrott/isolation-ai/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/ryanshrott/isolation-ai/commits/master
  48. https://github.com/ryanshrott/isolation-ai/branches
  49. https://github.com/ryanshrott/isolation-ai/releases
  50. https://github.com/ryanshrott/isolation-ai/graphs/contributors
  51. https://github.com/ryanshrott/isolation-ai/search?l=python
  52. https://github.com/ryanshrott/isolation-ai/search?l=javascript
  53. https://github.com/ryanshrott/isolation-ai/search?l=jupyter-notebook
  54. https://github.com/ryanshrott/isolation-ai/search?l=html
  55. https://github.com/ryanshrott/isolation-ai/search?l=css
  56. https://github.com/ryanshrott/isolation-ai/find/master
  57. https://github.com/ryanshrott/isolation-ai/archive/master.zip
  58. https://github.com/login?return_to=https://github.com/ryanshrott/isolation-ai
  59. https://github.com/join?return_to=/ryanshrott/isolation-ai
  60. https://desktop.github.com/
  61. https://desktop.github.com/
  62. https://developer.apple.com/xcode/
  63. https://visualstudio.github.com/
  64. https://github.com/ryanshrott/isolation-ai/tree/eef39355a48e6a8f37a6bf1bcc89aa03683c8a19
  65. https://github.com/ryanshrott/isolation-ai/tree/master/.udacity-pa
  66. https://github.com/ryanshrott/isolation-ai/tree/master/__pycache__
  67. https://github.com/ryanshrott/isolation-ai/tree/master/isolation
  68. https://github.com/ryanshrott/isolation-ai/tree/master/isoviz
  69. https://github.com/ryanshrott/isolation-ai/blob/master/.gitattributes
  70. https://github.com/ryanshrott/isolation-ai/blob/master/alphagosummary.docx
  71. https://github.com/ryanshrott/isolation-ai/blob/master/heuristics analysis.docx
  72. https://github.com/ryanshrott/isolation-ai/blob/master/readme.md
  73. https://github.com/ryanshrott/isolation-ai/blob/master/untitled.ipynb
  74. https://github.com/ryanshrott/isolation-ai/blob/master/_ds_store
  75. https://github.com/ryanshrott/isolation-ai/blob/master/_gitignore
  76. https://github.com/ryanshrott/isolation-ai/blob/master/agent_test.py
  77. https://github.com/ryanshrott/isolation-ai/blob/master/competition_agent.py
  78. https://github.com/ryanshrott/isolation-ai/blob/master/game_agent.py
  79. https://github.com/ryanshrott/isolation-ai/blob/master/genetic.py
  80. https://github.com/ryanshrott/isolation-ai/blob/master/heuristic_analysis.pdf
  81. https://github.com/ryanshrott/isolation-ai/blob/master/isolation-89777.zip
  82. https://github.com/ryanshrott/isolation-ai/blob/master/isolation-result-89777.json
  83. https://github.com/ryanshrott/isolation-ai/blob/master/research_review.pdf
  84. https://github.com/ryanshrott/isolation-ai/blob/master/sample_players.py
  85. https://github.com/ryanshrott/isolation-ai/blob/master/tournament.py
  86. https://github.com/ryanshrott/isolation-ai/blob/master/viz.gif
  87. https://github.com/ryanshrott/isolation-ai/blob/master/viz.gif
  88. https://github.com/ryanshrott/isolation-ai/blob/master
  89. https://docs.python.org/3/library/unittest.html#basic-example
  90. https://github.com/aimacode/aima-pseudocode/blob/master/md/minimax-decision.md
  91. https://github.com/aimacode/aima-pseudocode/blob/master/md/alpha-beta-search.md
  92. https://github.com/aimacode/aima-pseudocode/blob/master/md/iterative-deepening-search.md
  93. https://github.com/udacity/aind-sudoku#submission
  94. https://project-assistant.udacity.com/faq
  95. https://github.com/site/terms
  96. https://github.com/site/privacy
  97. https://github.com/security
  98. https://githubstatus.com/
  99. https://help.github.com/
 100. https://github.com/contact
 101. https://github.com/pricing
 102. https://developer.github.com/
 103. https://training.github.com/
 104. https://github.blog/
 105. https://github.com/about
 106. https://github.com/ryanshrott/isolation-ai
 107. https://github.com/ryanshrott/isolation-ai

   hidden links:
 109. https://github.com/
 110. https://github.com/ryanshrott/isolation-ai
 111. https://github.com/ryanshrott/isolation-ai
 112. https://github.com/ryanshrott/isolation-ai
 113. https://help.github.com/articles/which-remote-url-should-i-use
 114. https://github.com/ryanshrott/isolation-ai#build-a-game-playing-agent
 115. https://github.com/ryanshrott/isolation-ai#synopsis
 116. https://github.com/ryanshrott/isolation-ai#instructions
 117. https://github.com/ryanshrott/isolation-ai#quickstart-guide
 118. https://github.com/ryanshrott/isolation-ai#coding
 119. https://github.com/ryanshrott/isolation-ai#tournament
 120. https://github.com/ryanshrott/isolation-ai#submission
 121. https://github.com/ryanshrott/isolation-ai#game-visualization
 122. https://github.com/ryanshrott/isolation-ai#pvp-competition
 123. https://github.com/
