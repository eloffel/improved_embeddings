   #[1]github [2]recent commits to tensorflow-ue4:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]58
     * [35]star [36]409
     * [37]fork [38]77

[39]getnamo/[40]tensorflow-ue4

   [41]code [42]issues 17 [43]pull requests 0 [44]projects 0 [45]wiki
   [46]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [47]sign up
   tensorflow plugin for unreal engine 4
   [48]tensorflow [49]machine-learning [50]unreal-engine [51]python
   [52]blueprint
     * [53]199 commits
     * [54]2 branches
     * [55]22 releases
     * [56]fetching contributors
     * [57]view license

    1. [58]c++ 68.3%
    2. [59]python 17.8%
    3. [60]c# 8.2%
    4. [61]c 5.7%

   (button) c++ python c# c
   branch: master (button) new pull request
   [62]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/g
   [63]download zip

downloading...

   want to be notified of new releases in getnamo/tensorflow-ue4?
   [64]sign in [65]sign up

launching github desktop...

   if nothing happens, [66]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [67]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [68]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [69]download the github extension for visual studio
   and try again.

   (button) go back
   [70]@getnamo
   [71]getnamo [72]update for 4.22
   latest commit [73]ddd4c89 apr 3, 2019
   [74]permalink
   type          name             latest commit message    commit time
        failed to load latest commit information.
        [75]content            [76]update for 4.22        apr 3, 2019
        [77]resources
        [78]source             [79]remove tensorflow libs mar 12, 2019
        [80].gitignore
        [81]license            [82]update license         sep 24, 2017
        [83]readme.md
        [84]tensorflow.uplugin

readme.md

tensorflow-ue4

   [85]github release [86]github all releases

   [87]unreal engine plugin for [88]tensorflow. enables training and
   implementing state of the art [89]machine learning algorithms for your
   unreal projects.

   this plugin contains c++, blueprint and python scripts that encapsulate
   tensorflow operations as an actor component. it depends on an
   [90]unrealenginepython plugin fork and the [91]socketio client plugin;
   these are always included in [92]binary releases so no manual external
   downloading is necessary. see [93]note on dependencies section for
   details on implementation and architecture.

   see [94]unreal forum thread for discussions.

issues and limitations

   there is currently only a working build for the windows platform. be
   careful where you place your project as you may hit [95]240 char
   filepath limit with your python dependencies.

   if you want to use c++ or are just interested in id136 see
   [96]https://github.com/getnamo/tensorflow-native-ue4 which is a wip.

   [97]linux issue#13 tracking

   [98]android issue#11 tracking

   [99]mac os issue#10 tracking

   if you have ideas or fixes, consider contributing! see
   [100]https://github.com/getnamo/tensorflow-ue4/issues for current
   issues.

installation & setup

    1. (gpu only) [101]install cuda and cudnn pre-requisites if you're
       using compatible gpus (nvidia)
    2. [102]download latest release choose cpu or gpu download version if
       supported.
    3. create new or choose project.
    4. browse to your project folder (typically found at documents/unreal
       project/{your project root})

   [103]copy plugins
    5. copy plugins folder into your project root.
    6. launch your project.
    7. (optional) all plugins should be enabled by default, you can
       confirm via edit->plugins. scroll down to project and you should
       see three plugins, tensorflow in computing, socket.io client in
       networking and unrealenginepython in scripting languages. click
       enabled if any is disabled and restart the editor and open your
       project again.
    8. wait for tensorflow dependencies to be automatically installed. it
       will auto-resolve any dependencies listed in
       [104]content/scripts/upymodule.json using pip. note that this step
       may take a few minutes and depends on your internet connection
       speed and you will see nothing in the output log window until it
       has fully completed.

   [105]image
    7. once you see an output similar to this (specific packages will
       change with each version of tensorflow), the plugin is ready to
       use.

note on git cloning

   using full [106]plugin binary releases is recommended, this allows you
   to follow the [107]installation instructions as written and get up to
   speed quickly.

   if you instead wish to git clone and sync to master repository manually
   then it is expected that you [108]download the latest python binary
   dependency release for unrealenginepython. this contains an embedded
   python build; select the binariesonly-.7z file from downloads and drag
   the plugins folder into your project root. with that step complete,
   your clone repository should work as expected, all other dependencies
   will be pulled via pip on first launch.

examples

   [109]mnist spawn samples

   basic mnist softmax classifier trained on begin play with sample
   training inputs streamed to the editor during training. when fully
   trained, utexture2d (1-3) samples are tested for prediction.

   an example project is found at
   [110]https://github.com/getnamo/tensorflow-ue4-examples.

   the repository has basic examples for general tensorflow control and
   different mnist classification examples with ue4 utexture2d input for
   prediction. the repository should expand as more plug and play examples
   are made. consider contributing samples via pull requests!

   it is also the main repository where all development is tracked for all
   dependencies for this plugin.

python api

   you can either train directly or use a trained model inside ue4.

   to start, add your python script file to {project root
   folder}/content/scripts.

   wrap your tensorflow python code by subclassing tfpluginapi.

mysubclass(tfpluginapi)

   import tensorflow, unreal_engine and tfpluginapi in your module file
   and subclass the tfpluginapi class with the following functions.
import tensorflow as tf
import unreal_engine as ue
from tfpluginapi import tfpluginapi

class exampleapi(tfpluginapi):

        #expected optional api: setup your model for training
        def onsetup(self):
                pass

        #expected optional api: parse input object and return a result object, w
hich will be converted to json for ue4
        def onjsoninput(self, jsoninput):
                result = {}
                return result

        #expected optional api: start training your network
        def onbegintraining(self):
                pass

#note: this is a module function, not a class function. change your classname to
 reflect your class
#required function to get our api
def getapi():
        #return classname.getinstance()
        return exampleapi.getinstance()

   note the getapi() module function which needs to return a matching
   instance of your defined class. the rest of the functionality depends
   on what api you wish to use for your use case. at the moment the plugin
   supports input/output from ue4 via json encoding.

   if you wish to train in ue4, implement your logic in onbegintraining()
   and ensure you check for self.shouldstop after each batch/epoch to
   handle early exit requests from the user e.g. when you endplay or
   manually call stoptraining on the tensorflow component. you will also
   receive an optional onstoptraining callback when the user stops your
   training session.

   if you have a trained model, simply setup your model/load it from disk
   and omit the training function, and forward your evaluation/input via
   the onjsoninput(jsonargs) callback. see [111]mnistsaveload.py example
   on how to train a network once, and then save the model, reloading it
   on setup such that you skip retraining it every time.

   note that both onbegintraining() and onsetup() are called
   asynchronously by default. if you use a high level library like e.g.
   keras, may need to store your tf.session and tf.graph separately and
   use it as default with self.session.as_default(): and with
   self.graph.as_default(): to evaluate, since all calls will be generally
   done in separate threads.

   below is a very basic example of using tensorflow to add or subtract
   values passed in as {"a":<float number or array>, "b":<float number or
   array>}.
import tensorflow as tf
import unreal_engine as ue
from tfpluginapi import tfpluginapi

class exampleapi(tfpluginapi):

        #expected optional api: setup your model for training
        def onsetup(self):
                self.sess = tf.interactivesession()

                self.a = tf.placeholder(tf.float32)
                self.b = tf.placeholder(tf.float32)

                #operation
                self.c = self.a + self.b
                pass

        #expected optional api: json input as a python object, get a and b value
s as a feed_dict
        def onjsoninput(self, jsoninput):

                #show our input in the log
                print(jsoninput)

                #map our passed values to our input placeholders
                feed_dict = {self.a: jsoninput['a'], self.b: jsoninput['b']}

                #run the calculation and obtain a result
                rawresult = self.sess.run(self.c,feed_dict)

                #convert to array and embed the answer as 'c' field in a python
object
                return {'c':rawresult.tolist()}

        #custom function to change the operation type
        def changeoperation(self, type):
                if(type == '+'):
                        self.c = self.a + self.b

                elif(type == '-'):
                        self.c = self.a - self.b


        #expected optional api: we don't do any training in this example
        def onbegintraining(self):
                pass

#note: this is a module function, not a class function. change your classname to
 reflect your class
#required function to get our api
def getapi():
        #return classname.getinstance()
        return exampleapi.getinstance()

   a full example using mnist can be seen here:
   [112]https://github.com/getnamo/tensorflow-ue4-examples/blob/master/con
   tent/scripts/mnistsimple.py

   a full example using save/load setup can be seen here:
   [113]https://github.com/getnamo/tensorflow-ue4-examples/blob/master/con
   tent/scripts/mnistsaveload.py

   another full example using keras api can be found here:
   [114]https://github.com/getnamo/tensorflow-ue4-examples/blob/master/con
   tent/scripts/mnistkerasid98.py. note the keras callback used for
   stopping training after current batch completes, this cancels training
   on early gameplay exit e.g. endplay.

asynchronous events to tensorflow component

   if you need to stream some data to blueprint e.g. during training you
   can use the self.callevent() api.

string format

   the format is self.callevent('eventname', 'mystring')

json format

   the format is self.callevent('eventname', pythonobject, true)

   example use case in [115]mnistspawnsamples.py where sample training
   images are emitted to unreal for preview.

blueprint api

load your python module from your tensorflowcomponent

   once you've [116]written your python module, select your
   tensorflowcomponent inside your actor blueprint

   [117]select component

   and change the tensorflowmodule name to reflect your filename without
   .py. e.g. if my python file is exampleapi.py it would look like this

   [118]change module name

   optionally disable the verbose python log and change other toggles such
   as training on beginplay or disabling multithreading (not recommended).

training

   by default the onbegintraining() function will get called on the
   component's begin play call. you can optionally untick this option and
   call begin training manually.

   [119]manual train

sending json inputs to your model for e.g. prediction

   you control what type of data you forward to your python module and the
   only limitation for the current api is that it should be json
   formatted.

basic json string

   in the simplest case you can send e.g. a basic json string
   {"mystring","somevalue"} constructed using siojson like so

   [120]send json string

any ustruct example

   siojson supports completely user defined structs, even ones only
   defined in blueprint. it's highly recommended to use such structs for a
   convenient way to organize your data and to reliably decode it on the
   python side. below is an example where we send a custom bp struct and
   encode it straight to json.

   [121]send custom struct

   with the struct defined in blueprint as

   [122]custom struct definition

   you can also interweave structs, even common unreal types so feel free
   to mix and match both of the above methods. in this particular example
   we interweave a 3d vector in a json object we defined. the sent input
   should now be {"somevector":{"x":1.0,"y":2.3,"z":4.3}}

   [123]send struct

special convenience case: utexture2d

   a convenience function wraps a utexture2d into a json object with
   {"pixels":[<1d array of pixels>], "size":{"x":<image width>,:"y":<image
   height>}} which you can reshape using numpy.

   [124]send texture

   note that this currently will convert an image into full alpha
   greyscale. if you need color texture inputs, use own custom method or
   make a pull request.

custom functions

   if you need to call python functions from blueprint which the current
   api doesn't support, you can do so by using the callcustomfunction
   method on the tensorflowcomponent. you specify the function name and
   pass in a string as arguments. the function runs on the game thread and
   will return immediately with an expected string value. for both
   arguments and returning values, json encoding is recommended, but
   optional.

   [125]custom function call

   example custom function call passing in a string argument to
   [126]changeoperation in [127]addexample.py

handling tensorflow events

   select your tensorflow component from your actor blueprint and then
   click + to subscribe to the chosen event in the event graph.

   [128]events

   current api supports the following events

on input results

   called when onjsoninput() completes in your python module. the returned
   data is a json string of the return data you pass at the end of the
   function.

   [129]onresults

   normally you'd want to convert this string into siojsonobject so you
   can use your results data in blueprint. it is also typical to have a
   prediction field attached to this object for e.g. classification tasks.

   if you have a regular return format, consider making your own custom bp
   struct and fill its value from the json string like this

   [130]fill struct from json

   note that the function will only fill fields that have matching names
   and ignore all other struct fields. this means you can safely fill a
   partial struct from a json string that has more fields than the struct
   defines.

on training complete

   when the onbegintraining() call is complete you receive this event with
   {'elapsed':<time taken>} json, optionally with additional return data
   passed in from your function.

   [131]ontraining

on event

   if you use [132]self.callevent() you will receive this event dispatch.
   you can filter your event types by the event name and then do whatever
   you need to with the data passed in.

   [133]onevent

   for example [134]mnistspawnsamples.py uses self.callevent() to async
   stream training images and we'd filter this via checking for
   'pixelevent'

blueprint utilities

conversion

   a large portion of the plugin capability comes from its ability to
   convert data types. see [135]tensorflowblueprintlibrary.h for full
   declarations and code comments.

utexture2d to float array (grayscale)

   convert a utexture2d as grayscale to a 1d float array; obtains size
   from texture.

   blueprint
tograyscalefloatarray (texture2d)

   c++
static tarray<float> conv_greyscaletexture2dtofloatarray(utexture2d* intexture);

utexture2d to float array

   convert a utexture2d to a 1d float array; obtains size from texture.
   expects 4 1-byte values per pixel e.g. rgba.

   blueprint
tofloatarray (texture2d)

   c++
static tarray<float> conv_texture2dtofloatarray(utexture2d* intexture);

invert float array

   invert values in a given float array (1->0, 0->1) on a 0-1 scale.

   blueprint
invertfloatarray

   c++
static tarray<float> invertfloatarray(const tarray<float>& infloatarray);

float array to utexture2d

   convert a 4 value per pixel float array to a utexture2d with specified
   size, if size is unknown (0,0), it will assume a square array.

   blueprint
totexture2d (float array)

   c++
static utexture2d* conv_floatarraytotexture2d(const tarray<float>& infloatarray,
 const fvector2d size = fvector2d(0,0));

float array (grayscale) to utexture2d

   convert a 1 value per pixel float array to a utexture2d with specified
   size, if size is unknown (0,0), it will assume a square array.

   blueprint
totexture2d (grayscale array)

   c++
static utexture2d* conv_floatarraytotexture2d(const tarray<float>& infloatarray,
 const fvector2d size = fvector2d(0,0));

totexture2d (render target 2d)

   convert a utexturerendertarget2d to a utexture2d

   blueprint
totexture2d (render target 2d)

   c++
static utexture2d* conv_rendertargettexturetotexture2d(utexturerendertarget2d* i
ntexture);

tofloatarray (bytes)

   convert a byte array into a float array, normalized by the passed in
   scale

   blueprint
tofloatarray (bytes)

   c++
static tarray<float> conv_bytetofloatarray(const tarray<uint8>& inbytearray, flo
at scale = 1.f);

tf audio capture component

   a c++ component that uses windows api to capture and stream microphone
   audio without the need of an online subsystem. see
   [136]https://github.com/getnamo/tensorflow-ue4/blob/master/source/tfaud
   iocapture/public/tfaudiocapturecomponent.h for details on api.

   this component is aimed to be used for native id103 when
   tensorflow examples mature.

file utility component

   a simple blueprint wrapper to save and load bytes from file. allows to
   easily flush e.g. audio capture for later use. see
   [137]https://github.com/getnamo/tensorflow-ue4/blob/master/source/coreu
   tility/public/fileutilitycomponent.h for details on api.

use pip to manage your dependencies in the python console

   the plugin uses a pip wrapper script that uses a subproccess to not
   cause blocking behavior. simply import it using

   import upypip as pip

   in your script and then type e.g.

   pip.list() which should very shortly list all your installed python
   modules.
package        version
-------------- ---------
absl-py        0.1.10
astor          0.6.2
bleach         1.5.0
gast           0.2.0
grpcio         1.10.0
html5lib       0.9999999
markdown       2.6.11
numpy          1.14.1
pip            9.0.1
protobuf       3.5.1
setuptools     38.5.1
six            1.11.0
tensorboard    1.6.0
tensorflow     1.6.0
tensorflow-gpu 1.6.0
termcolor      1.1.0
werkzeug       0.14.1
wheel          0.30.0

   if you'd like to add another module call the install function e.g. if
   you wanted to upgrade to gpu version you could simply type

   pip.install('tensorflow-gpu')

   or you can go back to a clean slate with

   pip.uninstallall()

   which should leave you with just the basics
package    version
---------- -------
pip        9.0.1
setuptools 38.5.1
wheel      0.30.0

   see [138]upypip.py for all the available commands.

note on dependencies

   depends on an [139]unrealenginepython plugin fork and the [140]socketio
   client plugin. both of these and an embedded python build are included
   in every [141]release so you don't need to manually include anything,
   just drag and drop the plugins folder into your project from any
   release.

architecture and purpose

   [142]architecture

unrealenginepython

   based on the wonderful work by [143]20tab, the unrealenginepython
   plugin fork contains changes to enable multi-threading, python script
   plugin encapsulation and automatic dependency resolution via pip.
   simply specifying tensorflow as a pythonmodule dependency in
   [144]https://github.com/getnamo/tensorflow-ue4/blob/master/content/scri
   pts/upymodule.json makes the editor auto-resolve the dependency on
   first run. the multi-threading support contains a callback system
   allowing long duration operations to happen on a background thread
   (e.g. training) and then receiving callbacks on your game-thread. this
   enables tensorflow to work without noticeably impacting the game
   thread.

socketio client

   socketio client is used for easy conversion between native engine types
   (bp or c++ structs and variables) and python objects via json. can
   optionally be used to connect to a real-time web service via
   [145]socket.io.

packaging

note on blueprint only projects

   you will need to convert your blueprint only project to mixed (bp and
   c++) before packaging. follow these instructions to do that:
   [146]https://allarsblog.com/2015/11/04/converting-bp-project-to-cpp/

extra step

   since v0.10.0 the plugin should package correctly, but will require to
   run the packaged build once to pull the dependencies. you can
   optionally manually copy them from {project
   root}/plugins/unrealenginepython/binaries/win64/lib/site-packages to
   the packaged folder to {packaged root}/{project
   name}/plugins/unrealenginepython/binaries/win64/lib/site-packages.

   when you first launch your packaged project there may be a black screen
   for a while (2min) as it reinstalls pip and pulls the dependencies for
   the first time. you can then reload the map after a few minutes or just
   restart (check your packaged log to see when it's ready). each time
   after that the project should load quickly. note that you can zip up
   and move the packaged project to another computer with all the
   dependencies, but it will have ~20sec boot up on first run as it
   re-installs pip to the correct location, but it won't have to pull the
   pip dependencies saving most of the waiting and then quick bootup each
   time after that.

troubleshooting / help

i see pip errors from upgrading tensorflow version

   delete plugins\unrealenginepython\binaries\win64\lib\site-packages and
   restart project

no module named 'tensorflow'

   on first run you may see this message in your python console

   [147]no tensorflow

   wait until pip installs your dependencies fully, this may take ~3-5min.
   when the dependencies have installed, it should look something like
   this

   [148]installed

   after you see this, go ahead and close your editor and re-launch the
   project. when the project has launched again this error should not show
   up again.

2-3 sec hitch on first begin play

   this is due to python importing tensorflow on begin play and loading
   all the dlls. currently unavoidable, only happens once per editor
   launch.

issue not listed?

   post your issue to
   [149]https://github.com/getnamo/tensorflow-ue4/issues

[150]license

   plugin - [151]mit

   tensorflow and tensorflow icon - [152]apache 2.0

     *    2019 github, inc.
     * [153]terms
     * [154]privacy
     * [155]security
     * [156]status
     * [157]help

     * [158]contact github
     * [159]pricing
     * [160]api
     * [161]training
     * [162]blog
     * [163]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [164]reload to refresh your
   session. you signed out in another tab or window. [165]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/getnamo/tensorflow-ue4/commits/master.atom
   3. https://github.com/getnamo/tensorflow-ue4#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/getnamo/tensorflow-ue4
  32. https://github.com/join
  33. https://github.com/login?return_to=/getnamo/tensorflow-ue4
  34. https://github.com/getnamo/tensorflow-ue4/watchers
  35. https://github.com/login?return_to=/getnamo/tensorflow-ue4
  36. https://github.com/getnamo/tensorflow-ue4/stargazers
  37. https://github.com/login?return_to=/getnamo/tensorflow-ue4
  38. https://github.com/getnamo/tensorflow-ue4/network/members
  39. https://github.com/getnamo
  40. https://github.com/getnamo/tensorflow-ue4
  41. https://github.com/getnamo/tensorflow-ue4
  42. https://github.com/getnamo/tensorflow-ue4/issues
  43. https://github.com/getnamo/tensorflow-ue4/pulls
  44. https://github.com/getnamo/tensorflow-ue4/projects
  45. https://github.com/getnamo/tensorflow-ue4/wiki
  46. https://github.com/getnamo/tensorflow-ue4/pulse
  47. https://github.com/join?source=prompt-code
  48. https://github.com/topics/tensorflow
  49. https://github.com/topics/machine-learning
  50. https://github.com/topics/unreal-engine
  51. https://github.com/topics/python
  52. https://github.com/topics/blueprint
  53. https://github.com/getnamo/tensorflow-ue4/commits/master
  54. https://github.com/getnamo/tensorflow-ue4/branches
  55. https://github.com/getnamo/tensorflow-ue4/releases
  56. https://github.com/getnamo/tensorflow-ue4/graphs/contributors
  57. https://github.com/getnamo/tensorflow-ue4/blob/master/license
  58. https://github.com/getnamo/tensorflow-ue4/search?l=c++
  59. https://github.com/getnamo/tensorflow-ue4/search?l=python
  60. https://github.com/getnamo/tensorflow-ue4/search?l=c#
  61. https://github.com/getnamo/tensorflow-ue4/search?l=c
  62. https://github.com/getnamo/tensorflow-ue4/find/master
  63. https://github.com/getnamo/tensorflow-ue4/archive/master.zip
  64. https://github.com/login?return_to=https://github.com/getnamo/tensorflow-ue4
  65. https://github.com/join?return_to=/getnamo/tensorflow-ue4
  66. https://desktop.github.com/
  67. https://desktop.github.com/
  68. https://developer.apple.com/xcode/
  69. https://visualstudio.github.com/
  70. https://github.com/getnamo
  71. https://github.com/getnamo/tensorflow-ue4/commits?author=getnamo
  72. https://github.com/getnamo/tensorflow-ue4/commit/ddd4c89f3a316b8e993b630c3911198fee1d9755
  73. https://github.com/getnamo/tensorflow-ue4/commit/ddd4c89f3a316b8e993b630c3911198fee1d9755
  74. https://github.com/getnamo/tensorflow-ue4/tree/ddd4c89f3a316b8e993b630c3911198fee1d9755
  75. https://github.com/getnamo/tensorflow-ue4/tree/master/content
  76. https://github.com/getnamo/tensorflow-ue4/commit/ddd4c89f3a316b8e993b630c3911198fee1d9755
  77. https://github.com/getnamo/tensorflow-ue4/tree/master/resources
  78. https://github.com/getnamo/tensorflow-ue4/tree/master/source
  79. https://github.com/getnamo/tensorflow-ue4/commit/d88608816c1ff0566fcc9ebd470d1fe708b65e28
  80. https://github.com/getnamo/tensorflow-ue4/blob/master/.gitignore
  81. https://github.com/getnamo/tensorflow-ue4/blob/master/license
  82. https://github.com/getnamo/tensorflow-ue4/commit/a8961b52bbc990350ac7ee9879d40701830ae21b
  83. https://github.com/getnamo/tensorflow-ue4/blob/master/readme.md
  84. https://github.com/getnamo/tensorflow-ue4/blob/master/tensorflow.uplugin
  85. https://github.com/getnamo/tensorflow-ue4/releases
  86. https://github.com/getnamo/tensorflow-ue4/releases
  87. https://www.unrealengine.com/
  88. https://www.tensorflow.org/
  89. https://en.wikipedia.org/wiki/machine_learning
  90. https://github.com/getnamo/unrealenginepython
  91. https://github.com/getnamo/socketio-client-ue4
  92. https://github.com/getnamo/tensorflow-ue4/releases
  93. https://github.com/getnamo/tensorflow-ue4#note-on-dependencies
  94. https://forums.unrealengine.com/community/work-in-progress/1357673-tensorflow
  95. https://github.com/getnamo/tensorflow-ue4/issues/36
  96. https://github.com/getnamo/tensorflow-native-ue4
  97. https://github.com/getnamo/tensorflow-ue4/issues/13
  98. https://github.com/getnamo/tensorflow-ue4/issues/11
  99. https://github.com/getnamo/tensorflow-ue4/issues/10
 100. https://github.com/getnamo/tensorflow-ue4/issues
 101. https://www.tensorflow.org/install/gpu#windows_setup
 102. https://github.com/getnamo/tensorflow-ue4/releases
 103. https://camo.githubusercontent.com/2f3495664a5f84484a14192b98044eef528fbce6/687474703a2f2f692e696d6775722e636f6d2f446b7472364a4b2e706e67
 104. https://github.com/getnamo/tensorflow-ue4/blob/master/content/scripts/upymodule.json
 105. https://user-images.githubusercontent.com/542365/36981363-e88aa2ec-2084-11e8-828c-e5a526cda67b.png
 106. https://github.com/getnamo/tensorflow-ue4/releases
 107. https://github.com/getnamo/tensorflow-ue4#installation--setup
 108. https://github.com/getnamo/unrealenginepython/releases
 109. https://github.com/getnamo/tensorflow-ue4-examples
 110. https://github.com/getnamo/tensorflow-ue4-examples
 111. https://github.com/getnamo/tensorflow-ue4-examples/blob/master/content/scripts/mnistsaveload.py
 112. https://github.com/getnamo/tensorflow-ue4-examples/blob/master/content/scripts/mnistsimple.py
 113. https://github.com/getnamo/tensorflow-ue4-examples/blob/master/content/scripts/mnistsaveload.py
 114. https://github.com/getnamo/tensorflow-ue4-examples/blob/master/content/scripts/mnistkerasid98.py
 115. https://github.com/getnamo/tensorflow-ue4-examples/blob/master/content/scripts/mnistspawnsamples.py#l87
 116. https://github.com/getnamo/tensorflow-ue4#mysubclasstfpluginapi
 117. https://camo.githubusercontent.com/107873b0ff02b3c225626a597d6afa16eacff9bd/687474703a2f2f692e696d6775722e636f6d2f66395379716c312e706e67
 118. https://camo.githubusercontent.com/f230629ff289903d25edc14c2a9ef587457e9df6/687474703a2f2f692e696d6775722e636f6d2f6d707a796d67642e706e67
 119. https://camo.githubusercontent.com/ae64c3d33254d0bf5f82cbebe969cbe485d1e022/687474703a2f2f692e696d6775722e636f6d2f594d334b5a77792e706e67
 120. https://camo.githubusercontent.com/f12084a63c60a5937988ffbc73523c4540f0838f/687474703a2f2f692e696d6775722e636f6d2f78697a427270742e706e67
 121. https://camo.githubusercontent.com/77d3c7d8dc642449aeabab9d855bef59c869ec20/687474703a2f2f692e696d6775722e636f6d2f4f766132787a662e706e67
 122. https://camo.githubusercontent.com/7ab92dea3f271232621133d3bd3e3b1196ff011c/687474703a2f2f692e696d6775722e636f6d2f686733716c534b2e706e67
 123. https://camo.githubusercontent.com/ed3b178feddce42dc812ff96fa497a0455f4b555/687474703a2f2f692e696d6775722e636f6d2f4e4a34384d37302e706e67
 124. https://camo.githubusercontent.com/9bce3075166b71bdb8d92f2cc2efd66636633f2c/687474703a2f2f692e696d6775722e636f6d2f765371327865612e706e67
 125. https://camo.githubusercontent.com/02f8e21dde74f0f1bba60a802f221f986a5af887/687474703a2f2f692e696d6775722e636f6d2f656a42733863492e706e67
 126. https://github.com/getnamo/tensorflow-ue4-examples/blob/master/content/scripts/addexample.py#l31
 127. https://github.com/getnamo/tensorflow-ue4-examples/blob/master/content/scripts/addexample.py
 128. https://camo.githubusercontent.com/41784a2858a510e9f7a346c21fb42818039b2a71/687474703a2f2f692e696d6775722e636f6d2f3271373438366b2e706e67
 129. https://camo.githubusercontent.com/61ff96175d1a529d257931e169b9dd2ffd2dca8d/687474703a2f2f692e696d6775722e636f6d2f6c4c62746d56742e706e67
 130. https://camo.githubusercontent.com/771f9c70e32481715fdba3380246d133d8d678de/687474703a2f2f692e696d6775722e636f6d2f494257597a77392e706e67
 131. https://camo.githubusercontent.com/ebf04cc141b8783aa767d33c68edb170803eb2fd/687474703a2f2f692e696d6775722e636f6d2f58695a684830342e706e67
 132. https://github.com/getnamo/tensorflow-ue4#asynchronous-events-to-tensorflow-component
 133. https://camo.githubusercontent.com/7857d674b1367d49ce7797b94448e73b7a46cc20/687474703a2f2f692e696d6775722e636f6d2f6e793061455a762e706e67
 134. https://github.com/getnamo/tensorflow-ue4-examples/blob/master/content/scripts/mnistspawnsamples.py#l121
 135. https://github.com/getnamo/tensorflow-ue4/blob/master/source/tensorflow/public/tensorflowblueprintlibrary.h
 136. https://github.com/getnamo/tensorflow-ue4/blob/master/source/tfaudiocapture/public/tfaudiocapturecomponent.h
 137. https://github.com/getnamo/tensorflow-ue4/blob/master/source/coreutility/public/fileutilitycomponent.h
 138. https://github.com/getnamo/unrealenginepython/blob/master/content/scripts/upypip.py
 139. https://github.com/getnamo/unrealenginepython
 140. https://github.com/getnamo/socketio-client-ue4
 141. https://github.com/getnamo/tensorflow-ue4/releases
 142. https://camo.githubusercontent.com/0132735581760074113615de91d22c0a21a05340/687474703a2f2f692e696d6775722e636f6d2f3862556943624d2e706e67
 143. https://github.com/20tab/unrealenginepython
 144. https://github.com/getnamo/tensorflow-ue4/blob/master/content/scripts/upymodule.json
 145. https://socket.io/
 146. https://allarsblog.com/2015/11/04/converting-bp-project-to-cpp/
 147. https://camo.githubusercontent.com/aa08fbe043246f80de70a4e11b286c2d6acc24ea/687474703a2f2f692e696d6775722e636f6d2f6f6564384868712e706e67
 148. https://camo.githubusercontent.com/711214ab75ba5ddabb0629e1b24fa9913680a1a1/687474703a2f2f692e696d6775722e636f6d2f7338574475374d2e706e67
 149. https://github.com/getnamo/tensorflow-ue4/issues
 150. https://github.com/getnamo/tensorflow-ue4/blob/master/license
 151. https://opensource.org/licenses/mit
 152. http://www.apache.org/licenses/license-2.0
 153. https://github.com/site/terms
 154. https://github.com/site/privacy
 155. https://github.com/security
 156. https://githubstatus.com/
 157. https://help.github.com/
 158. https://github.com/contact
 159. https://github.com/pricing
 160. https://developer.github.com/
 161. https://training.github.com/
 162. https://github.blog/
 163. https://github.com/about
 164. https://github.com/getnamo/tensorflow-ue4
 165. https://github.com/getnamo/tensorflow-ue4

   hidden links:
 167. https://github.com/
 168. https://github.com/getnamo/tensorflow-ue4
 169. https://github.com/getnamo/tensorflow-ue4
 170. https://github.com/getnamo/tensorflow-ue4
 171. https://help.github.com/articles/which-remote-url-should-i-use
 172. https://github.com/getnamo/tensorflow-ue4#tensorflow-ue4
 173. https://github.com/getnamo/tensorflow-ue4#issues-and-limitations
 174. https://github.com/getnamo/tensorflow-ue4#installation--setup
 175. https://github.com/getnamo/tensorflow-ue4#note-on-git-cloning
 176. https://github.com/getnamo/tensorflow-ue4#examples
 177. https://github.com/getnamo/tensorflow-ue4#python-api
 178. https://github.com/getnamo/tensorflow-ue4#mysubclasstfpluginapi
 179. https://github.com/getnamo/tensorflow-ue4#asynchronous-events-to-tensorflow-component
 180. https://github.com/getnamo/tensorflow-ue4#string-format
 181. https://github.com/getnamo/tensorflow-ue4#json-format
 182. https://github.com/getnamo/tensorflow-ue4#blueprint-api
 183. https://github.com/getnamo/tensorflow-ue4#load-your-python-module-from-your-tensorflowcomponent
 184. https://github.com/getnamo/tensorflow-ue4#training
 185. https://github.com/getnamo/tensorflow-ue4#sending-json-inputs-to-your-model-for-eg-prediction
 186. https://github.com/getnamo/tensorflow-ue4#basic-json-string
 187. https://github.com/getnamo/tensorflow-ue4#any-ustruct-example
 188. https://github.com/getnamo/tensorflow-ue4#special-convenience-case-utexture2d
 189. https://github.com/getnamo/tensorflow-ue4#custom-functions
 190. https://github.com/getnamo/tensorflow-ue4#handling-tensorflow-events
 191. https://github.com/getnamo/tensorflow-ue4#on-input-results
 192. https://github.com/getnamo/tensorflow-ue4#on-training-complete
 193. https://github.com/getnamo/tensorflow-ue4#on-event
 194. https://github.com/getnamo/tensorflow-ue4#blueprint-utilities
 195. https://github.com/getnamo/tensorflow-ue4#conversion
 196. https://github.com/getnamo/tensorflow-ue4#utexture2d-to-float-array-grayscale
 197. https://github.com/getnamo/tensorflow-ue4#utexture2d-to-float-array
 198. https://github.com/getnamo/tensorflow-ue4#invert-float-array
 199. https://github.com/getnamo/tensorflow-ue4#float-array-to-utexture2d
 200. https://github.com/getnamo/tensorflow-ue4#float-array-grayscale-to-utexture2d
 201. https://github.com/getnamo/tensorflow-ue4#totexture2d-render-target-2d
 202. https://github.com/getnamo/tensorflow-ue4#tofloatarray-bytes
 203. https://github.com/getnamo/tensorflow-ue4#tf-audio-capture-component
 204. https://github.com/getnamo/tensorflow-ue4#file-utility-component
 205. https://github.com/getnamo/tensorflow-ue4#use-pip-to-manage-your-dependencies-in-the-python-console
 206. https://github.com/getnamo/tensorflow-ue4#note-on-dependencies
 207. https://github.com/getnamo/tensorflow-ue4#architecture-and-purpose
 208. https://github.com/getnamo/tensorflow-ue4#unrealenginepython
 209. https://github.com/getnamo/tensorflow-ue4#socketio-client
 210. https://github.com/getnamo/tensorflow-ue4#packaging
 211. https://github.com/getnamo/tensorflow-ue4#note-on-blueprint-only-projects
 212. https://github.com/getnamo/tensorflow-ue4#extra-step
 213. https://github.com/getnamo/tensorflow-ue4#troubleshooting--help
 214. https://github.com/getnamo/tensorflow-ue4#i-see-pip-errors-from-upgrading-tensorflow-version
 215. https://github.com/getnamo/tensorflow-ue4#no-module-named-tensorflow
 216. https://github.com/getnamo/tensorflow-ue4#2-3-sec-hitch-on-first-begin-play
 217. https://github.com/getnamo/tensorflow-ue4#issue-not-listed
 218. https://github.com/getnamo/tensorflow-ue4#license
 219. https://github.com/
