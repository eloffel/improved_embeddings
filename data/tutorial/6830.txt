   #[1]github [2]recent commits to practnlptools:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]29
     * [35]star [36]156
     * [37]fork [38]50

[39]biplab-iitb/[40]practnlptools

   [41]code [42]issues 10 [43]pull requests 5 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   practical natural language processing tools for humans. dependency
   parsing, syntactic constituent parsing, id14, named
   entity recognisation, shallow chunking, id52, all in
   python.
     * [47]42 commits
     * [48]1 branch
     * [49]0 releases
     * [50]fetching contributors

    1. [51]c 80.0%
    2. [52]html 10.4%
    3. [53]python 8.3%
    4. other 1.3%

   (button) c html python other
   branch: master (button) new pull request
   [54]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/b
   [55]download zip

downloading...

   want to be notified of new releases in biplab-iitb/practnlptools?
   [56]sign in [57]sign up

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [60]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [61]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [62]permalink
   type        name       latest commit message commit time
        failed to load latest commit information.
        [63]bin
        [64]docs
        [65]practnlptools
        [66]manifest
        [67]manifest.in
        [68]manifest.in~
        [69]readme.md
        [70]runner.py
        [71]setup.py
        [72]setup.py~

readme.md

practnlptools

   practical natural language processing tools for humans.
   practnlptools is a pythonic library over senna and stanford dependency
   extractor.

functionality

    1. id14
    2. syntactic parsing
    3. id52 (id52)
    4. named entity recognisation (ner)
    5. id33
    6. shallow chunking

features

    1. fast: senna is written is c. so it is fast.
    2. we use only dependency extractor component of stanford parser,
       which takes in syntactic parse from senna and applies dependency
       extraction. so there is no need to load parsing models for stanford
       parser, which takes time.
    3. easy to use.
    4. platform supported - windows, linux and mac

installation

   requires: a computer with 500mb memory, java runtime environment (1.7
   preferably, works with 1.6 too, but didnt test.) installed and python.

   if you are in linux: run:
sudo python setup.py install

   if you are in windows: run this commands as administrator:
python setup.py install

examples

   chunk and ner use bios tagging scheme. which expands to:
    1. s = tag covers single word.
    2. b = tag begins with the word.
    3. i = word is internal to tag which has begun.
    4. e = tag ends with the word.
    5. 0 = other tags.

   example: ('biplab', 's-np'), ('is', 's-vp'), ('a', 'b-np'), ('good',
   'i-np'), ('boy', 'e-np'), ('.', 'o')

   means:

   [biplab]np [is]vp [a good boy]np [.]o

   annotator is the only class you need. create an annotator object.
>>>from practnlptools.tools import annotator
>>>annotator=annotator()

   using function getannoations(sentence) returns a dictionary of
   annotations.
>>>annotator.getannotations("there are people dying make this world a better pla
ce for you and for me.")
{'dep_parse': '', 'chunk': [('there', 's-np'), ('are', 's-vp'), ('people', 's-np
'), ('dying', 'b-vp'), ('make', 'e-vp'), ('this', 'b-np'), ('world', 'e-np'), ('
a', 'b-np'), ('better', 'i-np'), ('place', 'e-np'), ('for', 's-pp'), ('you', 's-
np'), ('and', 'o'), ('for', 's-pp'), ('me.', 's-np')], 'pos': [('there', 'ex'),
('are', 'vbp'), ('people', 'nns'), ('dying', 'vbg'), ('make', 'vb'), ('this', 'd
t'), ('world', 'nn'), ('a', 'dt'), ('better', 'jjr'), ('place', 'nn'), ('for', '
in'), ('you', 'prp'), ('and', 'cc'), ('for', 'in'), ('me.', '.')], 'srl': [{'a1'
: 'people', 'v': 'dying'}, {'a1': 'people  this world', 'a2': 'a better place fo
r you and for me.', 'v': 'make'}], 'syntax_tree': '(s1(s(np(ex there))(vp(vbp ar
e)(np(np(nns people))(sbar(s(vbg dying)(vp(vb make)(s(np(dt this)(nn world))(np(
dt a)(jjr better)(nn place)))(pp(pp(in for)(np(prp you)))(cc and)(pp(in for)(np(
. me.)))))))))))', 'verbs': ['dying', 'make'], 'words': ['there', 'are', 'people
', 'dying', 'make', 'this', 'world', 'a', 'better', 'place', 'for', 'you', 'and'
, 'for', 'me.'], 'ner': [('there', 'o'), ('are', 'o'), ('people', 'o'), ('dying'
, 'o'), ('make', 'o'), ('this', 'o'), ('world', 'o'), ('a', 'o'), ('better', 'o'
), ('place', 'o'), ('for', 'o'), ('you', 'o'), ('and', 'o'), ('for', 'o'), ('me.
', 'o')]}

   using function getannoations(sentence,dep_parse=true) returns a
   dictionary of annotations with dependency parse, by default it is
   switched off.
>>>annotator.getannotations("there are people dying make this world a better pla
ce for you and for me.",dep_parse=true)
{'dep_parse': 'expl(are-2, there-1)\nroot(root-0, are-2)\nnsubj(are-2, people-3)
\ndep(make-5, dying-4)\nrcmod(people-3, make-5)\ndet(world-7, this-6)\nnsubj(pla
ce-10, world-7)\ndet(place-10, a-8)\namod(place-10, better-9)\nxcomp(make-5, pla
ce-10)\nprep_for(make-5, you-12)\nconj_and(you-12, me.-15)', 'chunk': [('there',
 's-np'), ('are', 's-vp'), ('people', 's-np'), ('dying', 'b-vp'), ('make', 'e-vp
'), ('this', 'b-np'), ('world', 'e-np'), ('a', 'b-np'), ('better', 'i-np'), ('pl
ace', 'e-np'), ('for', 's-pp'), ('you', 's-np'), ('and', 'o'), ('for', 's-pp'),
('me.', 's-np')], 'pos': [('there', 'ex'), ('are', 'vbp'), ('people', 'nns'), ('
dying', 'vbg'), ('make', 'vb'), ('this', 'dt'), ('world', 'nn'), ('a', 'dt'), ('
better', 'jjr'), ('place', 'nn'), ('for', 'in'), ('you', 'prp'), ('and', 'cc'),
('for', 'in'), ('me.', '.')], 'srl': [{'a1': 'people', 'v': 'dying'}, {'a1': 'pe
ople  this world', 'a2': 'a better place for you and for me.', 'v': 'make'}], 's
yntax_tree': '(s1(s(np(ex there))(vp(vbp are)(np(np(nns people))(sbar(s(vbg dyin
g)(vp(vb make)(s(np(dt this)(nn world))(np(dt a)(jjr better)(nn place)))(pp(pp(i
n for)(np(prp you)))(cc and)(pp(in for)(np(. me.)))))))))))', 'verbs': ['dying',
 'make'], 'words': ['there', 'are', 'people', 'dying', 'make', 'this', 'world',
'a', 'better', 'place', 'for', 'you', 'and', 'for', 'me.'], 'ner': [('there', 'o
'), ('are', 'o'), ('people', 'o'), ('dying', 'o'), ('make', 'o'), ('this', 'o'),
 ('world', 'o'), ('a', 'o'), ('better', 'o'), ('place', 'o'), ('for', 'o'), ('yo
u', 'o'), ('and', 'o'), ('for', 'o'), ('me.', 'o')]}

   you can access individual componets as:
>>>annotator.getannotations("biplab is a good boy.")['pos']
[('biplab', 'nnp'), ('is', 'vbz'), ('a', 'dt'), ('good', 'jj'), ('boy', 'nn'), (
'.', '.')]
>>>annotator.getannotations("biplab is a good boy.")['ner']
[('biplab', 's-per'), ('is', 'o'), ('a', 'o'), ('good', 'o'), ('boy', 'o'), ('.'
, 'o')]
>>>annotator.getannotations("biplab is a good boy.")['chunk']
[('biplab', 's-np'), ('is', 's-vp'), ('a', 'b-np'), ('good', 'i-np'), ('boy', 'e
-np'), ('.', 'o')]

   to list the verbs for which semantic roles are found.
>>>annotator.getannotations("he created the robot and broke it after making it."
)['verbs']
['created', 'broke', 'making']

   'srl' returns a list of dictionaries, identifyinging sematic roles for
   various verbs in sentence.
>>>annotator.getannotations("he created the robot and broke it after making it."
)['srl']
[{'a1': 'the robot', 'a0': 'he', 'v': 'created'}, {'a1': 'it', 'a0': 'he', 'am-t
mp': 'after making it.', 'v': 'broke'}, {'a1': 'it.', 'a0': 'he', 'v': 'making'}
]

   'syntax_tree' returns syntax tree in penn tree bank format.
>>>annotator.getannotations("he created the robot and broke it after making it."
)['syntax_tree']
'(s1(s(np(prp he))(vp(vp(vbd created)(np(dt the)(nn robot)))(cc and)(vp(vbd brok
e)(np(prp it))(pp(in after)(s(vp(vbg making)(np(prp it.)))))))))'

   'dep_parse' returns dependency relations as a string. each relation is
   in new line. you may require some post processing on this.
>>>print annotator.getannotations("he created the robot and broke it after makin
g it.",dep_parse=true)['dep_parse']
nsubj(created-2, he-1)
root(root-0, created-2)
det(robot-4, the-3)
dobj(created-2, robot-4)
conj_and(created-2, broke-6)
dobj(broke-6, it-7)
prepc_after(broke-6, making-9)
dobj(making-9, it.-10)

   if there are many sentences to annotate, use batch mode,
   annotator.getbatchannotations(sentences,dep_parse=true/false). returns
   a list of annotation dictionaries.
>>>annotator.getbatchannotations(["he created the robot and broke it after makin
g it.","biplab is a good boy."],dep_parse=true)
[{'dep_parse': 'nsubj(created-2, he-1)\nroot(root-0, created-2)\ndet(robot-4, th
e-3)\ndobj(created-2, robot-4)\nconj_and(created-2, broke-6)\ndobj(broke-6, it-7
)\nprepc_after(broke-6, making-9)\ndobj(making-9, it.-10)', 'chunk': [('he', 's-
np'), ('created', 's-vp'), ('the', 'b-np'), ('robot', 'e-np'), ('and', 'o'), ('b
roke', 's-vp'), ('it', 's-np'), ('after', 's-pp'), ('making', 's-vp'), ('it.', '
s-np')], 'pos': [('he', 'prp'), ('created', 'vbd'), ('the', 'dt'), ('robot', 'nn
'), ('and', 'cc'), ('broke', 'vbd'), ('it', 'prp'), ('after', 'in'), ('making',
'vbg'), ('it.', 'prp')], 'srl': [{'a1': 'the robot', 'a0': 'he', 'v': 'created'}
, {'a1': 'it', 'a0': 'he', 'am-tmp': 'after making it.', 'v': 'broke'}, {'a1': '
it.', 'a0': 'he', 'v': 'making'}], 'syntax_tree': '(s1(s(np(prp he))(vp(vp(vbd c
reated)(np(dt the)(nn robot)))(cc and)(vp(vbd broke)(np(prp it))(pp(in after)(s(
vp(vbg making)(np(prp it.)))))))))', 'verbs': ['created', 'broke', 'making'], 'w
ords': ['he', 'created', 'the', 'robot', 'and', 'broke', 'it', 'after', 'making'
, 'it.'], 'ner': [('he', 'o'), ('created', 'o'), ('the', 'o'), ('robot', 'o'), (
'and', 'o'), ('broke', 'o'), ('it', 'o'), ('after', 'o'), ('making', 'o'), ('it.
', 'o')]}, {'dep_parse': 'nsubj(boy-5, biplab-1)\ncop(boy-5, is-2)\ndet(boy-5, a
-3)\namod(boy-5, good-4)\nroot(root-0, boy-5)', 'chunk': [('biplab', 's-np'), ('
is', 's-vp'), ('a', 'b-np'), ('good', 'i-np'), ('boy', 'e-np'), ('.', 'o')], 'po
s': [('biplab', 'nnp'), ('is', 'vbz'), ('a', 'dt'), ('good', 'jj'), ('boy', 'nn'
), ('.', '.')], 'srl': [], 'syntax_tree': '(s1(s(np(nnp biplab))(vp(vbz is)(np(d
t a)(jj good)(nn boy)))(. .)))', 'verbs': [], 'words': ['biplab', 'is', 'a', 'go
od', 'boy', '.'], 'ner': [('biplab', 's-per'), ('is', 'o'), ('a', 'o'), ('good',
 'o'), ('boy', 'o'), ('.', 'o')]}]

   note: for illustration purposes we have used:
>>>annotator.getannotations("he created the robot and broke it after making it."
,dep_parse=true)['dep_parse']

   better method is:
>>>annotation=annotator.getannotations("he created the robot and broke it after
making it.",dep_parse=true)
>>>ner=annotation['ner']
>>>srl=annotation['srl']

issues

    1. you cannot give sentence with '(' ')', that is left bracket aor
       right bracket. it will end up in returning no result. so please
       clean sentences before sending to annotator.
    2. other issue might be senna executable built for various platforms.
       i have not experienced it, but its highly probable. if you get this
       issuse:

   go to folder practnlptools
cd practnlptools
gcc -o3 -o senna-linux64 *.c  (for linux 64 bit)
gcc -o3 -o senna-linux32 *.c  (for linux 32 bit)
gcc -o3 -o senna-senna-osx *.c (for mac)
*windows: i never compiled c files in windows.*
python setup.py install

    3. any other, you can la la laa la laaaa to biplab12 (a t) cse d0t
       iitb d0t ac d0t in
    4. issues with "pip install practnlptools"

   you might receive following error while running:

 traceback (most recent call last):
 file "test.py", line 3, in
    print a.getannotations("this is a test.")
  file "/usr/local/lib/python2.7/dist-packages/practnlptools/tools.py", line 206
, in getannotations
    senna_tags=self.getsennatag(sentence)
  file "/usr/local/lib/python2.7/dist-packages/practnlptools/tools.py", line 88,
 in getsennatag
    p = subprocess.popen(senna_executable,stdout=subprocess.pipe, stdin=subproce
ss.pipe)
  file "/usr/lib/python2.7/subprocess.py", line 679, in __init__
    errread, errwrite)
  file "/usr/lib/python2.7/subprocess.py", line 1249, in _execute_child
    raise child_exception
oserror: [errno 13] permission denied

   to fix this,you can do: chmod -r +x
   /usr/local/lib/python2.7/dist-packages/practnlptools/

     *    2019 github, inc.
     * [73]terms
     * [74]privacy
     * [75]security
     * [76]status
     * [77]help

     * [78]contact github
     * [79]pricing
     * [80]api
     * [81]training
     * [82]blog
     * [83]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [84]reload to refresh your
   session. you signed out in another tab or window. [85]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/biplab-iitb/practnlptools/commits/master.atom
   3. https://github.com/biplab-iitb/practnlptools#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/biplab-iitb/practnlptools
  32. https://github.com/join
  33. https://github.com/login?return_to=/biplab-iitb/practnlptools
  34. https://github.com/biplab-iitb/practnlptools/watchers
  35. https://github.com/login?return_to=/biplab-iitb/practnlptools
  36. https://github.com/biplab-iitb/practnlptools/stargazers
  37. https://github.com/login?return_to=/biplab-iitb/practnlptools
  38. https://github.com/biplab-iitb/practnlptools/network/members
  39. https://github.com/biplab-iitb
  40. https://github.com/biplab-iitb/practnlptools
  41. https://github.com/biplab-iitb/practnlptools
  42. https://github.com/biplab-iitb/practnlptools/issues
  43. https://github.com/biplab-iitb/practnlptools/pulls
  44. https://github.com/biplab-iitb/practnlptools/projects
  45. https://github.com/biplab-iitb/practnlptools/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/biplab-iitb/practnlptools/commits/master
  48. https://github.com/biplab-iitb/practnlptools/branches
  49. https://github.com/biplab-iitb/practnlptools/releases
  50. https://github.com/biplab-iitb/practnlptools/graphs/contributors
  51. https://github.com/biplab-iitb/practnlptools/search?l=c
  52. https://github.com/biplab-iitb/practnlptools/search?l=html
  53. https://github.com/biplab-iitb/practnlptools/search?l=python
  54. https://github.com/biplab-iitb/practnlptools/find/master
  55. https://github.com/biplab-iitb/practnlptools/archive/master.zip
  56. https://github.com/login?return_to=https://github.com/biplab-iitb/practnlptools
  57. https://github.com/join?return_to=/biplab-iitb/practnlptools
  58. https://desktop.github.com/
  59. https://desktop.github.com/
  60. https://developer.apple.com/xcode/
  61. https://visualstudio.github.com/
  62. https://github.com/biplab-iitb/practnlptools/tree/241bcdb37eb4f9e5b495731c159f869e917d81dd
  63. https://github.com/biplab-iitb/practnlptools/tree/master/bin
  64. https://github.com/biplab-iitb/practnlptools/tree/master/docs
  65. https://github.com/biplab-iitb/practnlptools/tree/master/practnlptools
  66. https://github.com/biplab-iitb/practnlptools/blob/master/manifest
  67. https://github.com/biplab-iitb/practnlptools/blob/master/manifest.in
  68. https://github.com/biplab-iitb/practnlptools/blob/master/manifest.in~
  69. https://github.com/biplab-iitb/practnlptools/blob/master/readme.md
  70. https://github.com/biplab-iitb/practnlptools/blob/master/runner.py
  71. https://github.com/biplab-iitb/practnlptools/blob/master/setup.py
  72. https://github.com/biplab-iitb/practnlptools/blob/master/setup.py~
  73. https://github.com/site/terms
  74. https://github.com/site/privacy
  75. https://github.com/security
  76. https://githubstatus.com/
  77. https://help.github.com/
  78. https://github.com/contact
  79. https://github.com/pricing
  80. https://developer.github.com/
  81. https://training.github.com/
  82. https://github.blog/
  83. https://github.com/about
  84. https://github.com/biplab-iitb/practnlptools
  85. https://github.com/biplab-iitb/practnlptools

   hidden links:
  87. https://github.com/
  88. https://github.com/biplab-iitb/practnlptools
  89. https://github.com/biplab-iitb/practnlptools
  90. https://github.com/biplab-iitb/practnlptools
  91. https://help.github.com/articles/which-remote-url-should-i-use
  92. https://github.com/biplab-iitb/practnlptools#practnlptools
  93. https://github.com/biplab-iitb/practnlptools#functionality
  94. https://github.com/biplab-iitb/practnlptools#features
  95. https://github.com/biplab-iitb/practnlptools#installation
  96. https://github.com/biplab-iitb/practnlptools#examples
  97. https://github.com/biplab-iitb/practnlptools#issues
  98. https://github.com/
