   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]towards data science
     * [9]data science
     * [10]machine learning
     * [11]programming
     * [12]visualization
     * [13]ai
     * [14]data journalism
     * [15]contribute
     __________________________________________________________________

building a real-time object recognition app with tensorflow and opencv

   [16]go to the profile of dat tran
   [17]dat tran (button) blockedunblock (button) followfollowing
   jun 22, 2017

   in this article, i will walk through the steps how you can easily build
   your own real-time object recognition application with [18]tensorflow   s
   (tf) new id164 api and [19]opencv in python 3 (specifically
   3.5). the focus will be on the challenges that i faced when building
   it. you can find the full code on [20]my repo.

   and here is also the app in action:
   [1*oa1lpnxtof6hyia8g9dobg.gif]
   me trying to classify some random stuff on my desk:)

motivation

   [21]google has just released their new tensorflow id164 api.
   the first release contains:
     * some [22]pre-trained models (especially with a focus on
       light-weight models, so that they can run on mobile devices)
     * a [23]jupyter notebook example with one of the released models
     * [24]some very handy scripts that can be used for re-training of the
       models, for example, on your own dataset.

   i wanted to lay my hands on this new cool stuff and had some time to
   build a simple real-time object recognition demo.

id164 demo

   first, i pulled the [25]tensorflow models repo and then had a looked at
   the [26]notebook that they released as well. it basically walked
   through the all steps of using a pre-trained model. in their example,
   they used the [27]   ssd with mobilenet    model but you can also download
   several other pre-trained models on what they call the [28]   tensorflow
   detection model zoo   . those models are, by the way, trained on the
   [29]coco dataset and vary depending on the model speed (slow, medium
   and fast) and model performance (map         mean average precision).

   what i did next was to run the example. the example is actually well
   documented. essentially this is what it does:
    1. import the required packages like tensorflow, pil etc.
    2. define some variables e.g. number of class, name of the model etc.
    3. download the frozen model (.pb         [30]protobuf) and load it into
       memory
    4. loading some helper code e.g. an index to label translator
    5. the detection code itself on two test images

   note: before running the example, be aware to have a look at the
   [31]setup note. in particular, the protobuf compilation section is
   important:
# from tensorflow/models/research/
protoc object_detection/protos/*.proto --python_out=.

   without running this command, the example won   t work.

   i then took their code and modified it accordingly:
     * remove the model download part
     * pil is not needed as the video streams in opencv are already in
       numpy arrays (pil is also a very big overhead specifically when
       using it for reading in the images aka video streams)
     * no    with    statement for the tensorflow session as this is a huge
       overhead especially when every time the session needs to be started
       after each stream

   then, i used opencv to connect it with my webcam. there are many
   examples out there that explain you how you can do it, even the
   [32]official documentation. so, i won   t dig deeper into it. the more
   interesting part is the optimization that i did to increase the
   performance of the application. in my case i looked at good fps         frame
   per seconds.

   generally, plain vanilla/naive implementation of many opencv examples
   are not really optimal, for example some of the functions in opencv are
   heavily i/o bounded. so i had to come up with various solutions to
   encounter this:
     * reading of frames from the web camera causes a lot of i/o. my idea
       was to move this part completely to a different python process with
       the [33]multiprocessing library. this somehow didn   t work. there
       were some explanations on stackoverflow why it wouldn   t work but i
       did   t dig deeper into this. fortunately, i found a very nice
       example from [34]adrian rosebrock on his website    pyimagesearch   
       using [35]threading instead which improved my fps a lot. by the
       way, if you want to know the difference between multiprocessing and
       threading, [36]on stackoverflow there is a good explanation for
       this.
     * loading the frozen model into memory is a big overhead every time
       the application starts. and i already used one tf session for each
       run but still this is very slow. so what did i do to solve this
       problem? the solution is quite simple. in this case, i used the
       multiprocessing library to move the heavy workload of the object
       detection part into multiple processes. the initial start of the
       application will be slow as each of those processes need to load
       the model into memory and start the tf session but after this we
       will benefit from parallelism    

   [37]running the id164 demo with multiple workers.
   recorded by datitranasciinema.org
     * reducing the width and height of the frames in the video stream
       also improved fps a lot.

   note: if you are on mac osx like me and you   re using opencv 3.1, there
   might be a chance that opencv   s videocapture crashes after a while.
   there is already [38]an issue filed. switching back to opencv 3.0
   solved the issue though.

conclusion & outlook

   give me a        if you liked this post:) pull the code and try it out
   yourself. and definitely have a look at the tensorflow id164
   api. it   s pretty neat and simple from the first look so far. the next
   thing i want to try is to train my own dataset with the api and also
   use the pre-trained models for other applications that i have on my
   mind. i   m also not fully satisfied with the performance of the
   application. the fps rate is still not optimal. there are still many
   bottlenecks in opencv that i can   t influence but there are alternatives
   that i can try out like using [39]webrtc. this is however web-based.
   moreover, i   m thinking to use asynchronous method calls (async) to
   improve my fps rate. stay tuned!

   follow me on twitter: [40]@datitran

     * [41]tensorflow
     * [42]machine learning
     * [43]tech
     * [44]data science
     * [45]towards data science

   (button)
   (button)
   (button) 5.3k claps
   (button) (button) (button) 52 (button) (button)

     (button) blockedunblock (button) followfollowing
   [46]go to the profile of dat tran

[47]dat tran

   head of data science @ idealo ([48]https://www.idealo.de/). more on
   [49]@datitran.

     (button) follow
   [50]towards data science

[51]towards data science

   sharing concepts, ideas, and codes.

     * (button)
       (button) 5.3k
     * (button)
     *
     *

   [52]towards data science
   never miss a story from towards data science, when you sign up for
   medium. [53]learn more
   never miss a story from towards data science
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://towardsdatascience.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/b7a2b4ebdc32
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://towardsdatascience.com/building-a-real-time-object-recognition-app-with-tensorflow-and-opencv-b7a2b4ebdc32&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://towardsdatascience.com/building-a-real-time-object-recognition-app-with-tensorflow-and-opencv-b7a2b4ebdc32&source=--------------------------nav_reg&operation=register
   8. https://towardsdatascience.com/?source=logo-lo_gfzok4lbstj2---7f60cf5620c9
   9. https://towardsdatascience.com/data-science/home
  10. https://towardsdatascience.com/machine-learning/home
  11. https://towardsdatascience.com/programming/home
  12. https://towardsdatascience.com/data-visualization/home
  13. https://towardsdatascience.com/artificial-intelligence/home
  14. https://towardsdatascience.com/data-journalism/home
  15. https://towardsdatascience.com/contribute/home
  16. https://towardsdatascience.com/@datitran?source=post_header_lockup
  17. https://towardsdatascience.com/@datitran
  18. https://github.com/tensorflow/models/tree/master/research/object_detection
  19. http://opencv.org/
  20. https://github.com/datitran/object-detector-app
  21. https://research.googleblog.com/2017/06/supercharge-your-computer-vision-models.html
  22. https://github.com/tensorflow/models/blob/477ed41e7e4e8a8443bc633846eb01e2182dc68a/object_detection/g3doc/detection_model_zoo.md
  23. https://github.com/tensorflow/models/blob/master/research/object_detection/object_detection_tutorial.ipynb
  24. https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/running_locally.md
  25. https://github.com/tensorflow/models
  26. https://github.com/tensorflow/models/blob/master/research/object_detection/object_detection_tutorial.ipynb
  27. https://arxiv.org/abs/1512.02325
  28. https://github.com/tensorflow/models/blob/477ed41e7e4e8a8443bc633846eb01e2182dc68a/object_detection/g3doc/detection_model_zoo.md
  29. http://mscoco.org/
  30. https://developers.google.com/protocol-buffers/
  31. https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md
  32. http://docs.opencv.org/3.0-last-rst/doc/py_tutorials/py_gui/py_video_display/py_video_display.html
  33. https://docs.python.org/3.5/library/multiprocessing.html
  34. http://www.pyimagesearch.com/2015/12/21/increasing-webcam-fps-with-python-and-opencv/
  35. https://docs.python.org/3.5/library/threading.html
  36. https://stackoverflow.com/questions/3044580/multiprocessing-vs-threading-python
  37. https://asciinema.org/a/125852
  38. https://github.com/opencv/opencv/issues/5874
  39. https://webrtc.org/
  40. https://twitter.com/datitran
  41. https://towardsdatascience.com/tagged/tensorflow?source=post
  42. https://towardsdatascience.com/tagged/machine-learning?source=post
  43. https://towardsdatascience.com/tagged/tech?source=post
  44. https://towardsdatascience.com/tagged/data-science?source=post
  45. https://towardsdatascience.com/tagged/towards-data-science?source=post
  46. https://towardsdatascience.com/@datitran?source=footer_card
  47. https://towardsdatascience.com/@datitran
  48. https://www.idealo.de/
  49. http://twitter.com/datitran
  50. https://towardsdatascience.com/?source=footer_card
  51. https://towardsdatascience.com/?source=footer_card
  52. https://towardsdatascience.com/
  53. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  55. https://asciinema.org/a/125852
  56. https://medium.com/p/b7a2b4ebdc32/share/twitter
  57. https://medium.com/p/b7a2b4ebdc32/share/facebook
  58. https://medium.com/p/b7a2b4ebdc32/share/twitter
  59. https://medium.com/p/b7a2b4ebdc32/share/facebook
