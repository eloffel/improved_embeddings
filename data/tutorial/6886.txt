   [1]< back to alex krizhevsky's home page
   the cifar-10 and cifar-100 are labeled subsets of the [2]80 million
   tiny images dataset. they were collected by alex krizhevsky, vinod
   nair, and geoffrey hinton.

the cifar-10 dataset

   the cifar-10 dataset consists of 60000 32x32 colour images in 10
   classes, with 6000 images per class. there are 50000 training images
   and 10000 test images.
   the dataset is divided into five training batches and one test batch,
   each with 10000 images. the test batch contains exactly 1000
   randomly-selected images from each class. the training batches contain
   the remaining images in random order, but some training batches may
   contain more images from one class than another. between them, the
   training batches contain exactly 5000 images from each class.
   here are the classes in the dataset, as well as 10 random images from
   each:

   airplane [airplane1.png] [airplane2.png] [airplane3.png]
   [airplane4.png] [airplane5.png] [airplane6.png] [airplane7.png]
   [airplane8.png] [airplane9.png] [airplane10.png]
   automobile [automobile1.png] [automobile2.png] [automobile3.png]
   [automobile4.png] [automobile5.png] [automobile6.png] [automobile7.png]
   [automobile8.png] [automobile9.png] [automobile10.png]
   bird [bird1.png] [bird2.png] [bird3.png] [bird4.png] [bird5.png]
   [bird6.png] [bird7.png] [bird8.png] [bird9.png] [bird10.png]
   cat [cat1.png] [cat2.png] [cat3.png] [cat4.png] [cat5.png] [cat6.png]
   [cat7.png] [cat8.png] [cat9.png] [cat10.png]
   deer [deer1.png] [deer2.png] [deer3.png] [deer4.png] [deer5.png]
   [deer6.png] [deer7.png] [deer8.png] [deer9.png] [deer10.png]
   dog [dog1.png] [dog2.png] [dog3.png] [dog4.png] [dog5.png] [dog6.png]
   [dog7.png] [dog8.png] [dog9.png] [dog10.png]
   frog [frog1.png] [frog2.png] [frog3.png] [frog4.png] [frog5.png]
   [frog6.png] [frog7.png] [frog8.png] [frog9.png] [frog10.png]
   horse [horse1.png] [horse2.png] [horse3.png] [horse4.png] [horse5.png]
   [horse6.png] [horse7.png] [horse8.png] [horse9.png] [horse10.png]
   ship [ship1.png] [ship2.png] [ship3.png] [ship4.png] [ship5.png]
   [ship6.png] [ship7.png] [ship8.png] [ship9.png] [ship10.png]
   truck [truck1.png] [truck2.png] [truck3.png] [truck4.png] [truck5.png]
   [truck6.png] [truck7.png] [truck8.png] [truck9.png] [truck10.png]

   the classes are completely mutually exclusive. there is no overlap
   between automobiles and trucks. "automobile" includes sedans, suvs,
   things of that sort. "truck" includes only big trucks. neither includes
   pickup trucks.

  download

   if you're going to use this dataset, please cite the tech report at the
   bottom of this page.

   version size md5sum
   [3]cifar-10 python version 163 mb c58f30108f718f92721af3b95e74349a
   [4]cifar-10 matlab version 175 mb 70270af85842c9e89bb428ec9976c926
   [5]cifar-10 binary version (suitable for c programs) 162 mb
   c32a1d4ab5d03f1284b67883e8d87530

  baseline results

   you can find some baseline replicable results on this dataset [6]on the
   project page for cuda-convnet. these results were obtained with a
   convolutional neural network. briefly, they are 18% test error without
   data augmentation and 11% with. additionally, [7]jasper snoek has a
   [8]new paper in which he used bayesian hyperparameter optimization to
   find nice settings of the weight decay and other hyperparameters, which
   allowed him to obtain a test error rate of 15% (without data
   augmentation) using the architecture of the net that got 18%.

  other results

   [9]rodrigo benenson has been kind enough to collect results on
   cifar-10/100 and other datasets on his website; [10]click here to view.

  dataset layout

    python / matlab versions

   i will describe the layout of the python version of the dataset. the
   layout of the matlab version is identical.
   the archive contains the files data_batch_1, data_batch_2, ...,
   data_batch_5, as well as test_batch. each of these files is a python
   "pickled" object produced with [11]cpickle. here is a python2 routine
   which will open such a file and return a dictionary:
def unpickle(file):
    import cpickle
    with open(file, 'rb') as fo:
        dict = cpickle.load(fo)
    return dict

   and a python3 version:
def unpickle(file):
    import pickle
    with open(file, 'rb') as fo:
        dict = pickle.load(fo, encoding='bytes')
    return dict

   loaded in this way, each of the batch files contains a dictionary with
   the following elements:
     * data -- a 10000x3072 [12]numpy array of uint8s. each row of the
       array stores a 32x32 colour image. the first 1024 entries contain
       the red channel values, the next 1024 the green, and the final 1024
       the blue. the image is stored in row-major order, so that the first
       32 entries of the array are the red channel values of the first row
       of the image.
     * labels -- a list of 10000 numbers in the range 0-9. the number at
       index i indicates the label of the ith image in the array data.

   the dataset contains another file, called batches.meta. it too contains
   a python dictionary object. it has the following entries:
     * label_names -- a 10-element list which gives meaningful names to
       the numeric labels in the labels array described above. for
       example, label_names[0] == "airplane", label_names[1] ==
       "automobile", etc.

    binary version

   the binary version contains the files data_batch_1.bin,
   data_batch_2.bin, ..., data_batch_5.bin, as well as test_batch.bin.
   each of these files is formatted as follows:
<1 x label><3072 x pixel>
...
<1 x label><3072 x pixel>

   in other words, the first byte is the label of the first image, which
   is a number in the range 0-9. the next 3072 bytes are the values of the
   pixels of the image. the first 1024 bytes are the red channel values,
   the next 1024 the green, and the final 1024 the blue. the values are
   stored in row-major order, so the first 32 bytes are the red channel
   values of the first row of the image.
   each file contains 10000 such 3073-byte "rows" of images, although
   there is nothing delimiting the rows. therefore each file should be
   exactly 30730000 bytes long.
   there is another file, called batches.meta.txt. this is an ascii file
   that maps numeric labels in the range 0-9 to meaningful class names. it
   is merely a list of the 10 class names, one per row. the class name on
   row i corresponds to numeric label i.

the cifar-100 dataset

   this dataset is just like the cifar-10, except it has 100 classes
   containing 600 images each. there are 500 training images and 100
   testing images per class. the 100 classes in the cifar-100 are grouped
   into 20 superclasses. each image comes with a "fine" label (the class
   to which it belongs) and a "coarse" label (the superclass to which it
   belongs).
   here is the list of classes in the cifar-100:

   superclass classes
   aquatic mammals beaver, dolphin, otter, seal, whale
   fish aquarium fish, flatfish, ray, shark, trout
   flowers orchids, poppies, roses, sunflowers, tulips
   food containers bottles, bowls, cans, cups, plates
   fruit and vegetables apples, mushrooms, oranges, pears, sweet peppers
   household electrical devices clock, computer keyboard, lamp, telephone,
   television
   household furniture bed, chair, couch, table, wardrobe
   insects bee, beetle, butterfly, caterpillar, cockroach
   large carnivores bear, leopard, lion, tiger, wolf
   large man-made outdoor things bridge, castle, house, road, skyscraper
   large natural outdoor scenes cloud, forest, mountain, plain, sea
   large omnivores and herbivores camel, cattle, chimpanzee, elephant,
   kangaroo
   medium-sized mammals fox, porcupine, possum, raccoon, skunk
   non-insect invertebrates crab, lobster, snail, spider, worm
   people baby, boy, girl, man, woman
   reptiles crocodile, dinosaur, lizard, snake, turtle
   small mammals hamster, mouse, rabbit, shrew, squirrel
   trees maple, oak, palm, pine, willow
   vehicles 1 bicycle, bus, motorcycle, pickup truck, train
   vehicles 2 lawn-mower, rocket, streetcar, tank, tractor

   yes, i know mushrooms aren't really fruit or vegetables and bears
   aren't really carnivores.

  download

   version size md5sum
   [13]cifar-100 python version 161 mb eb9058c3a382ffc7106e4002c42a8d85
   [14]cifar-100 matlab version 175 mb 6a4bfa1dcd5c9453dda6bb54194911f4
   [15]cifar-100 binary version (suitable for c programs) 161 mb
   03b5dce01913d631647c71ecec9e9cb8

  dataset layout

    python / matlab versions

   the python and matlab versions are identical in layout to the cifar-10,
   so i won't waste space describing them here.

    binary version

   the binary version of the cifar-100 is just like the binary version of
   the cifar-10, except that each image has two label bytes (coarse and
   fine) and 3072 pixel bytes, so the binary files look like this:
<1 x coarse label><1 x fine label><3072 x pixel>
...
<1 x coarse label><1 x fine label><3072 x pixel>

  indices into the original 80 million tiny images dataset

   sivan sabato was kind enough to provide [16]this file, which maps
   cifar-100 images to images in the 80 million tiny images dataset. sivan
   writes:
the file has 60000 rows, each row contains a single index into the tiny db,
where the first image in the tiny db is indexed "1". "0" stands for an image tha
t is not from the tiny db.
the first 50000 lines correspond to the training set, and the last 10000 lines c
orrespond
to the test set.

  reference

   this tech report (chapter 3) describes the dataset and the methodology
   followed when collecting it in much greater detail. please cite it if
   you intend to use this dataset.
     * [17]learning multiple layers of features from tiny images, alex
       krizhevsky, 2009.

references

   1. http://www.cs.toronto.edu/~kriz/index.html
   2. http://people.csail.mit.edu/torralba/tinyimages/
   3. http://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz
   4. http://www.cs.toronto.edu/~kriz/cifar-10-matlab.tar.gz
   5. http://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz
   6. http://code.google.com/p/cuda-convnet/
   7. http://www.cs.toronto.edu/~jasper/
   8. http://hips.seas.harvard.edu/content/practical-bayesian-optimization-machine-learning-algorithms
   9. http://rodrigob.github.com/
  10. http://rodrigob.github.com/are_we_there_yet/build/classification_datasets_results.html
  11. http://www.python.org/doc/2.5/lib/module-cpickle.html
  12. http://numpy.scipy.org/
  13. http://www.cs.toronto.edu/~kriz/cifar-100-python.tar.gz
  14. http://www.cs.toronto.edu/~kriz/cifar-100-matlab.tar.gz
  15. http://www.cs.toronto.edu/~kriz/cifar-100-binary.tar.gz
  16. http://www.cs.toronto.edu/~kriz/cifar_indexes
  17. http://www.cs.toronto.edu/~kriz/learning-features-2009-tr.pdf
