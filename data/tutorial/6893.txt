   #[1]gist [2]atom

   [3]skip to content
   ____________________

     * [4]all gists
     * [5]back to github

   [6]sign up for a github account [7]sign in

   instantly share code, notes, and snippets.

[8]@kastnerkyle [9]kastnerkyle/[10]painless_q.py

   last active jan 8, 2019
     * [11]star [12]51
     * [13]fork [14]18

   [15]code [16]revisions 9 [17]stars 51 [18]forks 18
   embed
   what would you like to do?
   (<script src="https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2.
   js"></script>)
   embed embed this gist in your website.
   (https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2)
   share copy sharable link for this gist.
   (https://gist.github.com/d127197dcfdd8fb888c2.git)
   clone via https clone with git or checkout with svn using the
   repository   s web address.
   learn more about clone urls
   <script src="https:/
   [19]download zip
   painless id24 tutorial implementation in python
   [20]http://mnemstudio.org/path-finding-id24-tutorial.htm
   [21]raw
   [22]painless_q.py
   # author: kyle kastner
   # license: bsd 3-clause
   # implementing
   http://mnemstudio.org/path-finding-id24-tutorial.htm
   # id24 formula from http://sarvagyavaish.github.io/flappybirdrl/
   # visualization based on code from gael varoquaux
   gael.varoquaux@normalesup.org
   #
   http://scikit-learn.org/stable/auto_examples/applications/plot_stock_ma
   rket.html
   import numpy as np
   import matplotlib.pyplot as plt
   from matplotlib.collections import linecollection
   # defines the reward/connection graph
   r = np.array([[-1, -1, -1, -1, 0, -1],
   [-1, -1, -1, 0, -1, 100],
   [-1, -1, -1, 0, -1, -1],
   [-1, 0, 0, -1, 0, -1],
   [ 0, -1, -1, 0, -1, 100],
   [-1, 0, -1, -1, 0, 100]]).astype("float32")
   q = np.zeros_like(r)
   def update_q(state, next_state, action, alpha, gamma):
   rsa = r[state, action]
   qsa = q[state, action]
   new_q = qsa + alpha * (rsa + gamma * max(q[next_state, :]) - qsa)
   q[state, action] = new_q
   # renormalize row to be between 0 and 1
   rn = q[state][q[state] > 0] / np.sum(q[state][q[state] > 0])
   q[state][q[state] > 0] = rn
   return r[state, action]
   def show_traverse():
   # show all the greedy traversals
   for i in range(len(q)):
   current_state = i
   traverse = "%i -> " % current_state
   n_steps = 0
   while current_state != 5 and n_steps < 20:
   next_state = np.argmax(q[current_state])
   current_state = next_state
   traverse += "%i -> " % current_state
   n_steps = n_steps + 1
   # cut off final arrow
   traverse = traverse[:-4]
   print("greedy traversal for starting state %i" % i)
   print(traverse)
   print("")
   def show_q():
   # show all the valid/used transitions
   coords = np.array([[2, 2],
   [4, 2],
   [5, 3],
   [4, 4],
   [2, 4],
   [5, 2]])
   # invert y axis for display
   coords[:, 1] = max(coords[:, 1]) - coords[:, 1]
   plt.figure(1, facecolor='w', figsize=(10, 8))
   plt.clf()
   ax = plt.axes([0., 0., 1., 1.])
   plt.axis('off')
   plt.scatter(coords[:, 0], coords[:, 1], c='r')
   start_idx, end_idx = np.where(q > 0)
   segments = [[coords[start], coords[stop]]
   for start, stop in zip(start_idx, end_idx)]
   values = np.array(q[q > 0])
   # bump up values for viz
   values = values
   lc = linecollection(segments,
   zorder=0, cmap=plt.cm.hot_r)
   lc.set_array(values)
   ax.add_collection(lc)
   verticalalignment = 'top'
   horizontalalignment = 'left'
   for i in range(len(coords)):
   x = coords[i][0]
   y = coords[i][1]
   name = str(i)
   if i == 1:
   y = y - .05
   x = x + .05
   elif i == 3:
   y = y - .05
   x = x + .05
   elif i == 4:
   y = y - .05
   x = x + .05
   else:
   y = y + .05
   x = x + .05
   plt.text(x, y, name, size=10,
   horizontalalignment=horizontalalignment,
   verticalalignment=verticalalignment,
   bbox=dict(facecolor='w',
   edgecolor=plt.cm.spectral(float(len(coords))),
   alpha=.6))
   plt.show()
   # core algorithm
   gamma = 0.8
   alpha = 1.
   n_episodes = 1e3
   n_states = 6
   n_actions = 6
   epsilon = 0.05
   random_state = np.random.randomstate(1999)
   for e in range(int(n_episodes)):
   states = list(range(n_states))
   random_state.shuffle(states)
   current_state = states[0]
   goal = false
   if e % int(n_episodes / 10.) == 0 and e > 0:
   pass
   # uncomment this to see plots each monitoring
   #show_traverse()
   #show_q()
   while not goal:
   # epsilon greedy
   valid_moves = r[current_state] >= 0
   if random_state.rand() < epsilon:
   actions = np.array(list(range(n_actions)))
   actions = actions[valid_moves == true]
   if type(actions) is int:
   actions = [actions]
   random_state.shuffle(actions)
   action = actions[0]
   next_state = action
   else:
   if np.sum(q[current_state]) > 0:
   action = np.argmax(q[current_state])
   else:
   # don't allow invalid moves at the start
   # just take a random move
   actions = np.array(list(range(n_actions)))
   actions = actions[valid_moves == true]
   random_state.shuffle(actions)
   action = actions[0]
   next_state = action
   reward = update_q(current_state, next_state, action,
   alpha=alpha, gamma=gamma)
   # goal state has reward 100
   if reward > 1:
   goal = true
   current_state = next_state
   print(q)
   show_traverse()
   show_q()
   [23]sign up for free to join this conversation on github. already have
   an account? [24]sign in to comment

     *    2019 github, inc.
     * [25]terms
     * [26]privacy
     * [27]security
     * [28]status
     * [29]help

     * [30]contact github
     * [31]pricing
     * [32]api
     * [33]training
     * [34]blog
     * [35]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [36]reload to refresh your
   session. you signed out in another tab or window. [37]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://gist.github.com/opensearch-gist.xml
   2. https://gist.github.com/kastnerkyle.atom
   3. https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2#start-of-content
   4. https://gist.github.com/discover
   5. https://github.com/
   6. https://gist.github.com/join?source=header-gist
   7. https://gist.github.com/auth/github?return_to=https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2
   8. https://gist.github.com/kastnerkyle
   9. https://gist.github.com/kastnerkyle
  10. https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2
  11. https://gist.github.com/login?return_to=https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2
  12. https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2/stargazers
  13. https://gist.github.com/login?return_to=https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2
  14. https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2/forks
  15. https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2
  16. https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2/revisions
  17. https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2/stargazers
  18. https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2/forks
  19. https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2/archive/a6a5b52ef0d6e096a95673fb613f2750eb4dd1ae.zip
  20. http://mnemstudio.org/path-finding-id24-tutorial.htm
  21. https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2/raw/a6a5b52ef0d6e096a95673fb613f2750eb4dd1ae/painless_q.py
  22. https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2#file-painless_q-py
  23. https://gist.github.com/join?source=comment-gist
  24. https://gist.github.com/login?return_to=https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2
  25. https://github.com/site/terms
  26. https://github.com/site/privacy
  27. https://github.com/security
  28. https://githubstatus.com/
  29. https://help.github.com/
  30. https://github.com/contact
  31. https://github.com/pricing
  32. https://developer.github.com/
  33. https://training.github.com/
  34. https://github.blog/
  35. https://github.com/about
  36. https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2
  37. https://gist.github.com/kastnerkyle/d127197dcfdd8fb888c2

   hidden links:
  39. https://gist.github.com/
  40. https://help.github.com/articles/which-remote-url-should-i-use
  41. https://github.com/
