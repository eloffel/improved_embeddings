   #[1]learn opencv    feed [2]learn opencv    comments feed [3]learn opencv
      deep learning using keras     the basics comments feed [4]selective
   search for id164 (c++ / python) [5]high dynamic range (hdr)
   imaging using opencv (c++/python) [6]alternate [7]alternate

   [tr?id=193036094536652&ev=pageview&noscript=1]

     * [8]skip to primary navigation
     * [9]skip to content
     * [10]skip to primary sidebar

   [11]learn opencv

   opencv examples and tutorials ( c++ / python )

     * [12]home
     * [13]about
     * [14]resources
     * [15]ai consulting
     * [16]courses

deep learning using keras     the basics

   september 25, 2017 by [17]vikas gupta [18]20 comments

   [19]import-keras

   this post is part of the series on deep learning for beginners, which
   consists of the following tutorials :
    1. [20]neural networks : a 30,000 feet view for beginners
    2. [21]installation of deep learning frameworks (tensorflow and keras
       with cuda support )
    3. introduction to keras
    4. [22]understanding feedforward neural networks
    5. [23]image classification using feedforward neural networks
    6. [24]image recognition using convolutional neural network
    7. [25]understanding id180
    8. [26]understanding autoencoders using tensorflow
    9. [27]image classification using pre-trained models in keras
   10. [28]id21 using pre-trained models in keras
   11. [29]fine-tuning pre-trained models in keras
   12. more to come . . .

1. deep learning frameworks

   deep learning is a branch of ai which uses neural networks for machine
   learning. in the recent years, it has shown dramatic improvements over
   traditional machine learning methods with applications in computer
   vision, natural language processing, robotics among many others. a very
   light introduction to convolutional neural networks ( a type of neural
   network ) is covered in [30]this article.

   deep learning became a household name for ai engineers since 2012 when
   [31]alex krizhevsky and his team won the id163 challenge.
   [32]id163 is a id161 competition in which the computer is
   required to correctly classify the image of an object into one of 1000
   categories. the objects include different types of animals, plants,
   instruments, furniture, vehicles to name a few.

   this attracted a lot of attention from the id161 community
   and almost everyone started working on neural networks. but at that
   time, there were not many tools available to get you started in this
   new domain. a lot of effort has been put in by the community of
   researchers to create useful libraries making it easy to work in this
   emerging field. some popular deep learning frameworks at present are
   [33]tensorflow, [34]theano, [35]caffe, [36]pytorch, [37]cntk,
   [38]mxnet, [39]torch, [40]deeplearning4j, [41]caffe2 among many others.

   keras is a high-level api, written in python and capable of running on
   top of tensorflow, theano, or cntk. the above deep learning libraries
   are written in a general way with a lot of functionalities. this can be
   overwhelming for a beginner who has limited knowledge in deep learning.
   keras provides a simple and modular api to create and train neural
   networks, hiding most of the complicated details under the hood. this
   makes it easy to get you started on your deep learning journey.

   once you get familiar with the main concepts and want to dig deeper and
   take control of the process, you may choose to work with any of the
   above frameworks.

2. keras installation and configuration

   as mentioned above, keras is a high-level api that uses deep learning
   libraries like theano or tensorflow as the backend. these libraries, in
   turn, talk to the hardware via lower level libraries. for example, if
   you run the program on a cpu, tensorflow or theano use blas libraries.
   on the other hand, when you run on a gpu, they use cuda and cudnn
   libraries.

   if you are setting up a new system, you might want to look at [42]this
   article for installing the most common deep learning frameworks. we
   will mention only the keras specific part here.

   it is advisable to install everything on virtual environments. if
   virtual environment is not installed on the system, then check step 5
   of the above article.

   we will install theano and tensorflow as backend libraries for keras,
   along with some more libraries which are useful for working with data (
   h5py ) and visualization ( pydot, graphviz and matplotlib ).

create virtual environment

   create the virtual environment for either python 2 or python 3,
   whichever you want to use.
mkvirtualenv virtual-py2 -p python2
# activate the virtual environment
workon virtual-py2

   or
mkvirtualenv virtual-py3 -p python3
# activate the virtual environment
workon virtual-py3

install libraries

pip install theano
#if using only cpu
pip install tensorflow
#if using gpu
pip install tensorflow-gpu
pip install keras
pip install h5py pydot matplotlib

   also install graphviz
#for ubuntu
sudo apt-get install graphviz

#for macos
brew install graphviz

configure keras

   by default, keras is configured to use tensorflow as the backend since
   it is the most popular choice. however, if you want to change it to
   theano, open the file ~/.keras/keras.json which looks as shown:
{
    "epsilon": 1e-07,
    "floatx": "float32",
    "image_data_format": "channels_last",
    "backend": "tensorflow"
}

   and change it to
{
    "epsilon": 1e-07,
    "floatx": "float32",
    "image_data_format": "channels_first",
    "backend": "theano"
}

3. keras workflow

   keras provides a very simple workflow for training and evaluating the
   models. it is described with the following diagram
   [43]keras-workflow

   basically, we are creating the model and training it using the training
   data. once the model is trained, we take the model to perform id136
   on test data. let us understand the function of each of the blocks.

3.1. keras layers

   layers can be thought of as the building blocks of a neural network.
   they process the input data and produce different outputs, depending on
   the type of layer, which are then used by the layers which are
   connected to them. we will cover the details of every layer in future
   posts.
   keras provides a number of core layers which include
     * dense layers, also called fully connected layer, since, each node
       in the input is connected to every node in the output,
     * activation layer which includes id180 like relu,
       tanh, sigmoid among others,
     * dropout layer     used for id173 during training,
     * flatten, reshape, etc.

   apart from these core layers, some important layers are
     * convolution layers     used for performing convolution,
     * pooling layers     used for down sampling,
     * recurrent layers,
     * locally-connected, id172, etc.

   we can use the code snippet to import the respective layer
from keras.layers import dense, activation, conv2d, maxpooling2d

3.2. keras models

   keras provides two ways to define a model:
     * [44]sequential, used for stacking up layers     most commonly used.
     * [45]functional api, used for designing complex model architectures
       like models with multiple-outputs, shared layers etc.

from keras.models import sequential

   for creating a sequential model, we can either pass the list of layers
   as an argument to the constructor or add the layers sequentially using
   the model.add() function.
   for example, both the code snippets for creating a model with a single
   dense layer with 10 outputs are equivalent.
from keras.models import sequential
from keras.layers import dense, activation

model = sequential([dense(10, input_shape=(nfeatures,)),
                    activation('linear') ])

from keras.models import sequential
from keras.layers import dense, activation

model = sequential()
model.add(dense(10, input_shape=(nfeatures,)))
model.add(activation('linear'))

   an important thing to note in the model definition is that we need to
   specify the input shape for the first layer. this is done in the above
   snippet using the input_shape parameter passed along with the first
   dense layer. the shapes of other layers are inferred by the compiler.

3.3. configuring the training process

   once the model is ready, we need to configure the learning process.
   this means
     * specify an optimizer which determines how the network weights are
       updated
     * specify the type of cost function or id168.
     * specify the metrics you want to evaluate during training and
       testing.
     * create the model graph using the backend.
     * any other advanced configuration.

   this is done in keras using the model.compile() function. the code
   snippet shows the usage.
model.compile(optimizer='rmsprop', loss='mse', metrics=['mse', 'mae'])

   the mandatory parameters to be specified are the optimizer and the loss
   function.

optimizers

   keras provides a lot of optimizers to choose from, which include
     * stochastic id119 ( sgd ),
     * adam,
     * rmsprop,
     * adagrad,
     * adadelta, etc.

   rmsprop is a good choice of optimizer for most problems.

id168s

   in a supervised learning problem, we have to find the error between the
   actual values and the predicted value. there can be different metrics
   which can be used to evaluate this error. this metric is often called
   id168 or cost function or objective function. there can be more
   than one id168 depending on what you are doing with the error.
   in general, we use
     * binary-cross-id178 for a binary classification problem,
     * categorical-cross-id178 for a multi-class classification problem,
     * mean-squared-error for a regression problem and so on.

3.4. training

   once the model is configured, we can start the training process. this
   can be done using the model.fit() function in keras. the usage is
   described below.
model.fit(trainfeatures, trainlabels, batch_size=4, epochs = 100)

   we just need to specify the training data, batch size and number of
   epochs. keras automatically figures out how to pass the data
   iteratively to the optimizer for the number of epochs specified. the
   rest of the information was already given to the optimizer in the
   previous step.

3.5. evaluating the model

   once the model is trained, we need to check the accuracy on unseen test
   data. this can be done in two ways in keras.
     * model.evaluate()     it finds the loss and metrics specified in the
       model.compile() step. it takes both the test data and labels as
       input and gives a quantitative measure of the accuracy. it can also
       be used to perform cross-validation and further finetune the
       parameters to get the best model.
     * model.predict()     it finds the output for the given test data. it
       is useful for checking the outputs qualitatively.

   now, let   s see how to use keras models and layers to create a simple
   neural network.

4. id75 example

   we will learn how to create a simple network with a single layer to
   perform [46]id75. we will use the [47]boston housing
   dataset available in keras as an example. samples contain 13 attributes
   of houses at different locations around the boston suburbs in the late
   1970s. targets are the median values of the houses at a location (in
   k$). with the 13 features, we have to train the model which would
   predict the price of the house in the test data.

4.1. training

   we use the sequential model to create the network graph. then we add a
   dense layer with the number of inputs equal to the number of features
   in the data and a single output. then we follow the workflow as
   explained in the previous section. we compile the model and train it
   using the fit command. finally, we use the model.summary() function to
   check the configuration of the model. all keras datasets come with a
   load_data() function which returns tuples of training and testing data
   as shown in the code.
from keras.models import sequential
from keras.layers import dense
from keras.datasets import boston_housing

(x_train, y_train), (x_test, y_test) = boston_housing.load_data()

nfeatures = x_train.shape[1]

model = sequential()
model.add(dense(1, input_shape=(nfeatures,), activation='linear'))

model.compile(optimizer='rmsprop', loss='mse', metrics=['mse', 'mae'])

model.fit(x_train, y_train, batch_size=4, epochs=1000)

model.summary()


   the output of model.summary() is given below. it shows 14 parameters    
   13 parameters for the weights and 1 for the bias.
_______________________________________________________
layer (type)           output shape        param #
=======================================================
dense_1 (dense)        (none, 1)             14
=======================================================
total params: 14
trainable params: 14
non-trainable params: 0

4.2. id136

   after the model has been trained, we want to do id136 on the test
   data. we can find the loss on the test data using the model.evaluate()
   function. we get the predictions on test data using the model.predict()
   function. here we compare the ground truth values with the predictions
   from our model for the first 5 test samples.
model.evaluate(x_test, y_test, verbose=true)

y_pred = model.predict(x_test)

print y_test[:5]
print y_pred[:5,0]

   the output is
[  7.2  18.8  19.   27.   22.2]
[  7.2  18.26  21.38  29.28  23.72]

   it can be seen that the predictions follow the ground truth values, but
   there are some errors in the predictions.

references

   [48]https://keras.io

subscribe & download code

   if you liked this article and would like to download code (c++ and
   python) and example images used in all the posts of this blog, please
   [49]subscribe to our newsletter. you will also receive a free
   [50]id161 resource guide. in our newsletter, we share opencv
   tutorials and examples written in c++/python, and id161 and
   machine learning algorithms and news.

   [51]subscribe now

   filed under: [52]deep learning, [53]how-to, [54]install, [55]tutorial
   tagged with: [56]keras, [57]id75
   (button) load comments

   search this website ____________________ search

join course

   [58]id161 for faces

resources

   [59]download code (c++ / python)

disclaimer

   this site is not affiliated with opencv.org

   i am an entrepreneur with a love for id161 and machine
   learning with a dozen years of experience (and a ph.d.) in the field.

   in 2007, right after finishing my ph.d., i co-founded taaz inc. with my
   advisor dr. david kriegman and kevin barnes. the scalability, and
   robustness of our id161 and machine learning algorithms have
   been put to rigorous test by more than 100m users who have tried our
   products. [60]read more   

recent posts

     * [61]image inpainting with opencv (c++/python)
     * [62]hough transform with opencv (c++/python)
     * [63]xeus-cling: run c++ code in jupyter notebook
     * [64]pose detection comparison : wrnchai vs openpose
     * [65]gender & age classification using opencv deep learning (
       c++/python )

   copyright    2019    big vision llc

references

   1. https://www.learnopencv.com/feed/
   2. https://www.learnopencv.com/comments/feed/
   3. https://www.learnopencv.com/deep-learning-using-keras-the-basics/feed/
   4. https://www.learnopencv.com/selective-search-for-object-detection-cpp-python/
   5. https://www.learnopencv.com/high-dynamic-range-hdr-imaging-using-opencv-cpp-python/
   6. https://www.learnopencv.com/wp-json/oembed/1.0/embed?url=https://www.learnopencv.com/deep-learning-using-keras-the-basics/
   7. https://www.learnopencv.com/wp-json/oembed/1.0/embed?url=https://www.learnopencv.com/deep-learning-using-keras-the-basics/&format=xml
   8. https://www.learnopencv.com/deep-learning-using-keras-the-basics/#genesis-nav-primary
   9. https://www.learnopencv.com/deep-learning-using-keras-the-basics/#genesis-content
  10. https://www.learnopencv.com/deep-learning-using-keras-the-basics/#genesis-sidebar-primary
  11. https://www.learnopencv.com/
  12. https://www.learnopencv.com/
  13. https://www.learnopencv.com/about/
  14. https://www.learnopencv.com/computer-vision-resources
  15. https://www.learnopencv.com/computer-vision-machine-learning-artificial-intelligence-consulting/
  16. http://courses.learnopencv.com/
  17. https://www.learnopencv.com/author/vikas/
  18. https://www.learnopencv.com/deep-learning-using-keras-the-basics/#disqus_thread
  19. https://www.learnopencv.com/wp-content/uploads/2017/09/import-keras.png
  20. https://www.learnopencv.com/neural-networks-a-30000-feet-view-for-beginners/
  21. https://www.learnopencv.com/installing-deep-learning-frameworks-on-ubuntu-with-cuda-support/
  22. https://www.learnopencv.com/understanding-feedforward-neural-networks/
  23. https://www.learnopencv.com/image-classification-using-feedforward-neural-network-in-keras/
  24. https://www.learnopencv.com/image-classification-using-convolutional-neural-networks-in-keras/
  25. https://www.learnopencv.com/understanding-activation-functions-in-deep-learning/
  26. https://www.learnopencv.com/understanding-autoencoders-using-tensorflow-python/
  27. https://www.learnopencv.com/keras-tutorial-using-pre-trained-id163-models/
  28. https://www.learnopencv.com/keras-tutorial-transfer-learning-using-pre-trained-models/
  29. https://www.learnopencv.com/keras-tutorial-fine-tuning-using-pre-trained-models
  30. https://www.learnopencv.com/neural-networks-a-30000-feet-view-for-beginners/
  31. https://scholar.google.com/citations?user=xegzhjcaaaaj
  32. http://image-net.org/
  33. https://www.tensorflow.org/
  34. http://deeplearning.net/software/theano/
  35. http://caffe.berkeleyvision.org/
  36. http://pytorch.org/
  37. https://www.microsoft.com/en-us/cognitive-toolkit/
  38. https://mxnet.incubator.apache.org/
  39. http://torch.ch/
  40. https://deeplearning4j.org/
  41. https://caffe2.ai/
  42. https://www.learnopencv.com/installing-deep-learning-frameworks-on-ubuntu-with-cuda-support/
  43. https://www.learnopencv.com/wp-content/uploads/2017/09/keras-workflow.jpg
  44. https://keras.io/getting-started/sequential-model-guide/
  45. https://keras.io/getting-started/functional-api-guide/
  46. https://en.wikipedia.org/wiki/linear_regression
  47. https://keras.io/datasets/
  48. https://keras.io/
  49. https://bigvisionllc.leadpages.net/leadbox/143948b73f72a2:173c9390c346dc/5649050225344512/
  50. https://bigvisionllc.leadpages.net/leadbox/143948b73f72a2:173c9390c346dc/5649050225344512/
  51. https://bigvisionllc.leadpages.net/leadbox/143948b73f72a2:173c9390c346dc/5649050225344512/
  52. https://www.learnopencv.com/category/deep-learning/
  53. https://www.learnopencv.com/category/how-to/
  54. https://www.learnopencv.com/category/install/
  55. https://www.learnopencv.com/category/tutorial/
  56. https://www.learnopencv.com/tag/keras/
  57. https://www.learnopencv.com/tag/linear-regression/
  58. https://courses.learnopencv.com/p/computer-vision-for-faces
  59. https://bigvisionllc.lpages.co/leadbox/143044973f72a2:173c9390c346dc/5720147234914304/
  60. https://www.learnopencv.com/about/
  61. https://www.learnopencv.com/image-inpainting-with-opencv-c-python/
  62. https://www.learnopencv.com/hough-transform-with-opencv-c-python/
  63. https://www.learnopencv.com/xeus-cling-run-c-code-in-jupyter-notebook/
  64. https://www.learnopencv.com/pose-detection-comparison-wrnchai-vs-openpose/
  65. https://www.learnopencv.com/age-gender-classification-using-opencv-deep-learning-c-python/
