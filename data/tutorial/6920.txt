   #[1]ehud reiter's blog    feed [2]ehud reiter's blog    comments feed
   [3]ehud reiter's blog    how do i build an id86 system: requirements and
   corpora comments feed [4]how do i build an id86 system: tools? [5]how do
   i build an id86 system: testing and quality assurance [6]alternate
   [7]alternate [8]ehud reiter's blog [9]wordpress.com

   [10]skip to content

[11]ehud reiter's blog

ehud's thoughts and observations about id86

   (button) menu
     * [12]home
     * [13]blog index
     * [14]about
     * [15]what is id86
     * [16]publications
     * [17]resources
     * [18]university
     * [19]contact

how do i build an id86 system: requirements and corpora

   [20]february 5, 2017february 6, 2017 [21]ehudreiter

   as with other kinds of software development, the single most important
   thing is to get the requirements right. in other words, what does the
   system do (what inputs does it accept,. what outputs does it produce
   from these inputs) and also    non-functional    requirements such as speed
   and concurrency.  the biggest source of failure in software overall is
   getting requirements wrong, and the this is true of id86 as well.

   unfortunately, getting requirements right for an id86 system is often
   harder than getting requirements right for databases, payroll systems,
   patient record systems, etc.  this is  because id86 is a new technology,
   which means that people dont understand what it can and cannot do.
   someone who is commissioning a new payroll system usually has a pretty
   good idea about what payroll systems can and cannot do; but someone
   commissioning an id86 system may be very new to the technology, and not
   have this kind of understanding.

   so how do we decide on the requirements of an id86 system?  of course
   there is a large general literature on [22]requirements engineering in
   software engineering, much of which can be applied to building id86
   systems.  but is there anything unique about gathering requirements for
   id86 systems?

corpus analysis

   i believe that corpus analysis is a very useful technique for
   understanding requirements of id86 systems.  by this, i dont necessarily
   mean gathering a corpus of thousands or millions of example
   input-output pairs, and then using machine learning to build
   input-output models.  although this certainly is a great thing to do if
   there is sufficient data.  but my focus here is more on building a
   collection of 50-100 input-output pairs, where the output texts are
   generally manually written by subject matter experts (sme).  using this
   corpus, the id86 developers and users can discuss in very concrete terms
   what the id86 system should do in specific cases.

   building a corpus is usually an iterative procedure.  the smes write an
   initial version (perhaps by adapting texts written for other purposes),
   and the id86 developers analyse the initial text to identify both stuff
   that cannot be generated (usually because the necessary input data is
   not available) and also conflicts and inconsistencies between sme   s
   (which are pretty much inevitable if more than one sme writes the
   corpus texts).    the id86 developers then discuss these with the sme   s
   and users (although with other questions, such as how specific
   edge/boundary cases should be handled).  hopefully the id86 developers,
   smes, and users will converge and agree on a specific set of 50-100
      target texts    and associated input data; this then forms a key part of
   the requirement specification for of the id86 system.

   i have discussed corpus analysis in many publications, some of which
   are listed below.  these are mostly pretty old papers, but i dont think
   the basics have changed much in the past 20 years.    the best place to
   start would be the corpus analysis section of [23]my book.

rapid prototyping and refinement

   although this is not a pure requirements analysis technique, i have
   often found that the best way to get functionality right is to build
   something fairly quickly, even if it probably has the wrong
   functionality, and then get users and subject matter experts to try out
   the system and see where they think its functionality needs to change.
    of course    rapid prototyping    is very common across the software
   engineering world, and not something i invented!  but i think this is
   especially appropriate for new and poorly understoood technologies such
   as id86.  we acknowledge that you cant get requirements right for a new
   technology which users and smes have little experience with, so we give
   them something to play with, and use their feedback to get the system
   righ

   i have discussed this a but under the name    refinement    in my paper
   on [24]acquiring correct knowledge for id86.
   one limitation of refinement is that it tends to lead to    local
   optimisation    (incremental functionality improvements) rather than
   radically new approaches.

relevant papers

   e. reiter and r. dale (2000). building natural-language generation
   systems. cambridge university press ([25]amazon)

   e. reiter and r. dale (1997).
   building applied natural-language generation systems.
   journal of natural-language engineering, 3:57-87. ([26]doi)

   e reiter, s sripada, and r robertson (2003).
   acquiring correct knowledge for id86.
   journal of artificial intelligence research 18:491-516. ([27]journal
   link)

   s williams and e reiter (2005).
   deriving content selection rules from a corpus of non-naturally
   occurring documents
   for a novel id86 application.
   proceedings of corpus linguistics workshop on using corpora for id86.

share this:

     * [28]twitter
     * [29]facebook
     *

like this:

   like loading...

related

share this:

     * [30]twitter
     * [31]facebook
     *

like this:

   like loading...

   [32]corpus analysis [33]id86 [34]requirements
   [35]system building

post navigation

   [36]previous post how do i build an id86 system: tools?
   [37]next post how do i build an id86 system: testing and
   quality assurance

one thought on    how do i build an id86 system: requirements and corpora   

    1. pingback: [38]use good engineering methodology when building id86
       systems!     ehud reiter's blog

leave a reply [39]cancel reply

   enter your comment here...

   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________

   fill in your details below or click an icon to log in:
     *
     *
     *
     *
     *

   [40]gravatar
   email (required) (address never made public)
   ____________________
   name (required)
   ____________________
   website
   ____________________
   wordpress.com logo

   you are commenting using your wordpress.com account. ( [41]log out /
   [42]change )
   google photo

   you are commenting using your google account. ( [43]log out /
   [44]change )
   twitter picture

   you are commenting using your twitter account. ( [45]log out /
   [46]change )
   facebook photo

   you are commenting using your facebook account. ( [47]log out /
   [48]change )
   [49]cancel

   connecting to %s

   [ ] notify me of new comments via email.

   post comment

     * [50]linkedin
     * [51]twitter

top posts & pages

     * [52]skills required to use different id86 technologies
     * [53]how do i build an id86 system: tools?
     * [54]id86 vs templates: levels of sophistication in generating text
     * [55]how do i learn about id86?
     * [56]why i do not want to be a co-author on your paper
     * [57]bad data means bad output
     * [58]how to do an id86 evaluation: metrics
     * [59]why isnt there more open-source id86 software?
     * [60]publications
     * [61]the story of simpleid86

   [62]blog at wordpress.com.

   iframe: [63]likes-master

   %d bloggers like this:

   iframe: [64]likes-master

   %d bloggers like this:

references

   visible links
   1. https://ehudreiter.com/feed/
   2. https://ehudreiter.com/comments/feed/
   3. https://ehudreiter.com/2017/02/05/id86-system-requirements/feed/
   4. https://ehudreiter.com/2017/01/26/id86-system-tools/
   5. https://ehudreiter.com/2017/02/10/id86-test-qa/
   6. https://public-api.wordpress.com/oembed/?format=json&url=https://ehudreiter.com/2017/02/05/id86-system-requirements/&for=wpcom-auto-discovery
   7. https://public-api.wordpress.com/oembed/?format=xml&url=https://ehudreiter.com/2017/02/05/id86-system-requirements/&for=wpcom-auto-discovery
   8. https://ehudreiter.com/osd.xml
   9. https://s1.wp.com/opensearch.xml
  10. https://ehudreiter.com/2017/02/05/id86-system-requirements/#content
  11. https://ehudreiter.com/
  12. https://ehudreiter.com/
  13. https://ehudreiter.com/blog-index/
  14. https://ehudreiter.com/about/
  15. https://ehudreiter.com/what-is-id86/
  16. https://ehudreiter.com/publications/
  17. https://ehudreiter.com/resources/
  18. https://ehudreiter.com/university/
  19. https://ehudreiter.com/about/contact/
  20. https://ehudreiter.com/2017/02/05/id86-system-requirements/
  21. https://ehudreiter.com/author/ehudreiter/
  22. https://en.wikipedia.org/wiki/requirements_engineering
  23. https://www.amazon.co.uk/dp/b01lzkq2gn
  24. http://www.jair.org/papers/paper1176.html
  25. https://www.amazon.co.uk/dp/b01lzkq2gn
  26. https://doi.org/10.1017/s1351324997001502
  27. http://www.jair.org/papers/paper1176.html
  28. https://ehudreiter.com/2017/02/05/id86-system-requirements/?share=twitter
  29. https://ehudreiter.com/2017/02/05/id86-system-requirements/?share=facebook
  30. https://ehudreiter.com/2017/02/05/id86-system-requirements/?share=twitter
  31. https://ehudreiter.com/2017/02/05/id86-system-requirements/?share=facebook
  32. https://ehudreiter.com/tag/corpus-analysis/
  33. https://ehudreiter.com/tag/natural-language-generation/
  34. https://ehudreiter.com/tag/requirements/
  35. https://ehudreiter.com/tag/system-building/
  36. https://ehudreiter.com/2017/01/26/id86-system-tools/
  37. https://ehudreiter.com/2017/02/10/id86-test-qa/
  38. https://ehudreiter.com/2018/02/08/id86-engineering-methodology/
  39. https://ehudreiter.com/2017/02/05/id86-system-requirements/#respond
  40. https://gravatar.com/site/signup/
  41. javascript:highlandercomments.doexternallogout( 'wordpress' );
  42. https://ehudreiter.com/2017/02/05/id86-system-requirements/
  43. javascript:highlandercomments.doexternallogout( 'googleplus' );
  44. https://ehudreiter.com/2017/02/05/id86-system-requirements/
  45. javascript:highlandercomments.doexternallogout( 'twitter' );
  46. https://ehudreiter.com/2017/02/05/id86-system-requirements/
  47. javascript:highlandercomments.doexternallogout( 'facebook' );
  48. https://ehudreiter.com/2017/02/05/id86-system-requirements/
  49. javascript:highlandercomments.cancelexternalwindow();
  50. https://www.linkedin.com/in/ehud-reiter-331b1747
  51. http://www.twitter.com/ehudreiter
  52. https://ehudreiter.com/2019/04/04/skills-required-id86-technologies/
  53. https://ehudreiter.com/2017/01/26/id86-system-tools/
  54. https://ehudreiter.com/2016/12/18/id86-vs-templates/
  55. https://ehudreiter.com/2018/01/16/learn-about-id86/
  56. https://ehudreiter.com/2018/08/09/i-do-not-want-to-be-coauthor/
  57. https://ehudreiter.com/2019/03/20/bad-data-means-bad-output/
  58. https://ehudreiter.com/2017/05/03/metrics-id86-evaluation/
  59. https://ehudreiter.com/2017/03/17/open-source-id86-software/
  60. https://ehudreiter.com/publications/
  61. https://ehudreiter.com/2016/12/15/the-story-of-simpleid86/
  62. https://wordpress.com/?ref=footer_blog
  63. https://widgets.wp.com/likes/master.html?ver=20190321#ver=20190321
  64. https://widgets.wp.com/likes/master.html?ver=20190321#ver=20190321

   hidden links:
  66. https://ehudreiter.com/2017/02/05/id86-system-requirements/#comment-form-guest
  67. https://ehudreiter.com/2017/02/05/id86-system-requirements/#comment-form-load-service:wordpress.com
  68. https://ehudreiter.com/2017/02/05/id86-system-requirements/#comment-form-load-service:twitter
  69. https://ehudreiter.com/2017/02/05/id86-system-requirements/#comment-form-load-service:facebook
