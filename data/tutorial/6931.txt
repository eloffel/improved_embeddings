   #[1]github [2]recent commits to nl2bash:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]17
     * [35]star [36]225
     * [37]fork [38]30

[39]tellinatool/[40]nl2bash

   [41]code [42]issues 3 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   generating bash command from natural language
   [47]https://arxiv.org/abs/1802.08979
   [48]copynet [49]tensorflow [50]id195
   [51]programming-by-natural-language [52]nl2bash
     * [53]8,619 commits
     * [54]4 branches
     * [55]0 releases
     * [56]fetching contributors
     * [57]gpl-3.0

    1. [58]newlisp 54.6%
    2. [59]python 40.0%
    3. [60]java 5.1%
    4. other 0.3%

   (button) newlisp python java other
   branch: master (button) new pull request
   [61]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/t
   [62]download zip

downloading...

   want to be notified of new releases in tellinatool/nl2bash?
   [63]sign in [64]sign up

launching github desktop...

   if nothing happens, [65]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [66]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [67]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [68]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [69]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [70]bashlint [71]removed spaces mar 3, 2019
   [72]data [73]add new manual judgement input by author jul 16, 2018
   [74]encoder_decoder
   [75]eval
   [76]experiments [77]change shebang in all experiment scripts to
   #!/bin/bash nov 29, 2018
   [78]model [79]"check in model
   /home/xilin/projects/tellina/learning_module/model/se    nov 18, 2017
   [80]nlp_tools
   [81]utils [82]clean up evalution code feb 12, 2018
   [83].gitignore
   [84]license
   [85]makefile
   [86]readme.md
   [87]__init__.py
   [88]manual_eval.md [89]update manual_eval.md jul 19, 2018
   [90]requirements.txt

readme.md

nl2bash

overview

   this repository contains the data and source code release of the paper:
   [91]nl2bash: a corpus and semantic parser for natural language
   interface to the linux operating system.

   specifically, it contains the following components:
    1. a set of ~10,000 bash one-liners collected from websites such as
       stackoverflow paired with their english descriptions written by
       bash programmers.
    2. tensorflow implementations of the following translation models:
          + the standard [92]id195 and [93]copynet models
          + a stage-wise nl   bash model using argument filling heuristics
            (lin et. al. 2017).
    3. a bash command parser which parses a bash command into an
       abstractive syntax tree, developed on top of [94]bashlex.
    4. a set of domain-specific natural language processing tools,
       including a regex-based sentence tokenizer and a domain specific
       named entity recognizer.

   you may visit [95]http://tellina.rocks to interact with our pretrained
   model.

data statistics

   our corpus contain a diverse set of bash utilities and flags: 102
   unique utilities, 206 unique flags and 15 reserved tokens. (browse the
   raw data collection [96]here.)

   in our experiments, the set of ~10,000 nl-bash command pairs are
   splitted into train, dev and test sets such that neither a natural
   language description nor a bash command appears in more than one split.

   the statistics of the data split is tabulated below. (a command
   template is defined as a bash command with all of its arguments
   replaced by their semantic types.)
   split                     train dev test
   # pairs                   8,090 609 606
   # unique nl               7,340 549 547
   # unique command          6,400 599 xx
   # unique command template 4,002 509 xx

   the frequency of the top 50 most frequent bash utilities in the corpus
   is illustrated in the following diagram.

   [97]nl2bash utility distribution

leaderboard

manually evaluated translation accuracy

   top-k full command accuracy and top-k command template accuracy judged
   by human experts. please refer to section 4 of the paper for the exact
   procedures we took to run manual evaluation.
   model                         f-acc-top1 f-acc-top3 t-acc-top1 t-acc-top3
   sub-token copynet (this work) 0.36       0.45       0.49       0.61
   tellina (lin et. al. 2017)    0.27       0.32       0.53       0.62

   please also refer to "notes on manual evaluation" at the end of this
   readme for issues to keep in mind if you plan to run your own manual
   evaluation.

automatic id74

   in addition, we also report id7 and a self-defined template matching
   score as the automatic id74 used to approximate the true
   translation accuracy. please refer to appendix c of the paper for the
   metrics definitions.
   model                         id7-top1 id7-top3 tm-top1 tm-top3
   sub-token copynet (this work) 50.9      58.2      0.574   0.634
   tellina (lin et. al. 2017)    48.6      53.8      0.625   0.698

run experiments

install tensorflow

   to reproduce our experiments, please install tensorflow (>= 1.0). the
   experiments can be reproduced on machines with or without gpus.

   we suggest following the [98]official instructions to install the
   library. specifically, we used the following pip installation command
   copied from the official website on mac os 10.10.5.
sudo pip3 install --upgrade \
 https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.3.0-py3-none-any
.whl

environment variables & dependencies

   once tensorflow is installed, use the following commands to set up the
   python path and main experiment dependencies.
export pythonpath=`pwd`

(sudo) make

change directory

   then enter the [99]experiments directory.
cd experiments

data filtering, split and pre-processing

   run the following command. this will clean the raw nl2bash corpus and
   apply filtering, create the train/dev/test splits and preprocess the
   data into the formats taken by the tensorflow models.
make data

   to change the data-processing workflow, go to [100]data and modify the
   utility scripts.

train the models

make train

generate evaluation table using pre-trained models

   decode the pre-trained models and print the evaluation summary table.
make decode

   skip the decoding step and print the evaluation summary table from the
   predictions saved on disk.
make gen_manual_evaluation_table

   by default, the decoding and evaluation steps will print sanity
   checking messages. you may set verbose to false in the following source
   files to suppress those messages.
encoder_decoder/decode_tools.py
eval/eval_tools.py

notes on manual evaluation

   in our experiment, we conduct manual evaluation as the correctness of a
   bash translation cannot simply be determined by mapping it to a set of
   ground truth. we suggest the following practices for future work to
   generate comparable results and to accelerate the development cycle.
    1. if you plan to run your own manual evaluation, please annotate the
       output of both your system(s) and the baseline systems you compared
       to. this is to ensure that the newly proposed system(s) and the
       baselines are judged by the same group of annotators.
    2. if you run manual evaluation, please release [101]the examples
       annotated with their annotations. this helps others to replicate
       the results and reuse these annotations.
    3. during model development you could annotate a small subset of the
       dev examples (50-100 is likely enough) to estimate the true dev set
       accuracy. we released a script which saves any previous annotations
       and opens a commandline interface for judging any unseen
       predictions ([102]manual_eval.md).

   the motivation for the practices above is detailed in issue [103]#6.

citation

   if you use the data or source code in your work, please cite
@inproceedings{linwze2018:nl2bash,
  author = {xi victoria lin and chenglong wang and luke zettlemoyer and michael
d. ernst},
  title = {nl2bash: a corpus and semantic parser for natural language interface
to the linux operating system},
  booktitle = {proceedings of the eleventh international conference on language
resources
               and evaluation {lrec} 2018, miyazaki (japan), 7-12 may, 2018.},
  year = {2018}
}

   related paper: [104]lin et. al. 2017. program synthesis from natural
   language using recurrent neural networks.

     *    2019 github, inc.
     * [105]terms
     * [106]privacy
     * [107]security
     * [108]status
     * [109]help

     * [110]contact github
     * [111]pricing
     * [112]api
     * [113]training
     * [114]blog
     * [115]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [116]reload to refresh your
   session. you signed out in another tab or window. [117]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/tellinatool/nl2bash/commits/master.atom
   3. https://github.com/tellinatool/nl2bash#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/tellinatool/nl2bash
  32. https://github.com/join
  33. https://github.com/login?return_to=/tellinatool/nl2bash
  34. https://github.com/tellinatool/nl2bash/watchers
  35. https://github.com/login?return_to=/tellinatool/nl2bash
  36. https://github.com/tellinatool/nl2bash/stargazers
  37. https://github.com/login?return_to=/tellinatool/nl2bash
  38. https://github.com/tellinatool/nl2bash/network/members
  39. https://github.com/tellinatool
  40. https://github.com/tellinatool/nl2bash
  41. https://github.com/tellinatool/nl2bash
  42. https://github.com/tellinatool/nl2bash/issues
  43. https://github.com/tellinatool/nl2bash/pulls
  44. https://github.com/tellinatool/nl2bash/projects
  45. https://github.com/tellinatool/nl2bash/pulse
  46. https://github.com/join?source=prompt-code
  47. https://arxiv.org/abs/1802.08979
  48. https://github.com/topics/copynet
  49. https://github.com/topics/tensorflow
  50. https://github.com/topics/id195
  51. https://github.com/topics/programming-by-natural-language
  52. https://github.com/topics/nl2bash
  53. https://github.com/tellinatool/nl2bash/commits/master
  54. https://github.com/tellinatool/nl2bash/branches
  55. https://github.com/tellinatool/nl2bash/releases
  56. https://github.com/tellinatool/nl2bash/graphs/contributors
  57. https://github.com/tellinatool/nl2bash/blob/master/license
  58. https://github.com/tellinatool/nl2bash/search?l=newlisp
  59. https://github.com/tellinatool/nl2bash/search?l=python
  60. https://github.com/tellinatool/nl2bash/search?l=java
  61. https://github.com/tellinatool/nl2bash/find/master
  62. https://github.com/tellinatool/nl2bash/archive/master.zip
  63. https://github.com/login?return_to=https://github.com/tellinatool/nl2bash
  64. https://github.com/join?return_to=/tellinatool/nl2bash
  65. https://desktop.github.com/
  66. https://desktop.github.com/
  67. https://developer.apple.com/xcode/
  68. https://visualstudio.github.com/
  69. https://github.com/tellinatool/nl2bash/tree/dece34997d0f1ea5880cec935ea4243978bcef77
  70. https://github.com/tellinatool/nl2bash/tree/master/bashlint
  71. https://github.com/tellinatool/nl2bash/commit/0a944f348e0238df99daab156fba0c2a1d4336e5
  72. https://github.com/tellinatool/nl2bash/tree/master/data
  73. https://github.com/tellinatool/nl2bash/commit/3fd79f7ebb851ae6cf73cd9c55200d5c94cc7309
  74. https://github.com/tellinatool/nl2bash/tree/master/encoder_decoder
  75. https://github.com/tellinatool/nl2bash/tree/master/eval
  76. https://github.com/tellinatool/nl2bash/tree/master/experiments
  77. https://github.com/tellinatool/nl2bash/commit/ef4c9129fa474b44edb10ecd19ce726e70933fc8
  78. https://github.com/tellinatool/nl2bash/tree/master/model
  79. https://github.com/tellinatool/nl2bash/commit/c792e8cb0e3ed45f280fb64803ccf41f8e7ddd75
  80. https://github.com/tellinatool/nl2bash/tree/master/nlp_tools
  81. https://github.com/tellinatool/nl2bash/tree/master/utils
  82. https://github.com/tellinatool/nl2bash/commit/c225df75d5f33e85f84a7a0c1def491c4321dbef
  83. https://github.com/tellinatool/nl2bash/blob/master/.gitignore
  84. https://github.com/tellinatool/nl2bash/blob/master/license
  85. https://github.com/tellinatool/nl2bash/blob/master/makefile
  86. https://github.com/tellinatool/nl2bash/blob/master/readme.md
  87. https://github.com/tellinatool/nl2bash/blob/master/__init__.py
  88. https://github.com/tellinatool/nl2bash/blob/master/manual_eval.md
  89. https://github.com/tellinatool/nl2bash/commit/9ce35e57e43d1e3c46e68ef1dc91ee95b07236ca
  90. https://github.com/tellinatool/nl2bash/blob/master/requirements.txt
  91. http://victorialin.net/pubs/nl2bash.pdf
  92. https://arxiv.org/abs/1409.0473
  93. https://arxiv.org/abs/1603.06393
  94. https://github.com/idank/bashlex
  95. http://tellina.rocks/
  96. https://github.com/tellinatool/nl2bash/tree/master/data/bash
  97. https://camo.githubusercontent.com/71482a68d43e957fd85359de98aeb5834cb4c467/687474703a2f2f766963746f7269616c696e2e6e65742f696d672f6769746875622f6e6c32626173682d7574696c6974792d64697374322e706e67
  98. https://www.tensorflow.org/install/
  99. https://github.com/tellinatool/nl2bash/blob/master/experiments
 100. https://github.com/tellinatool/nl2bash/blob/master/data
 101. https://github.com/tellinatool/nl2bash/tree/master/data/bash/manual_judgements
 102. https://github.com/tellinatool/nl2bash/blob/master/manual_eval.md
 103. https://github.com/tellinatool/nl2bash/issues/6
 104. http://victorialin.net/pubs/tellina_tr170510.pdf
 105. https://github.com/site/terms
 106. https://github.com/site/privacy
 107. https://github.com/security
 108. https://githubstatus.com/
 109. https://help.github.com/
 110. https://github.com/contact
 111. https://github.com/pricing
 112. https://developer.github.com/
 113. https://training.github.com/
 114. https://github.blog/
 115. https://github.com/about
 116. https://github.com/tellinatool/nl2bash
 117. https://github.com/tellinatool/nl2bash

   hidden links:
 119. https://github.com/
 120. https://github.com/tellinatool/nl2bash
 121. https://github.com/tellinatool/nl2bash
 122. https://github.com/tellinatool/nl2bash
 123. https://help.github.com/articles/which-remote-url-should-i-use
 124. https://github.com/tellinatool/nl2bash#nl2bash
 125. https://github.com/tellinatool/nl2bash#overview
 126. https://github.com/tellinatool/nl2bash#data-statistics
 127. https://github.com/tellinatool/nl2bash#leaderboard
 128. https://github.com/tellinatool/nl2bash#manually-evaluated-translation-accuracy
 129. https://github.com/tellinatool/nl2bash#automatic-evaluation-metrics
 130. https://github.com/tellinatool/nl2bash#run-experiments
 131. https://github.com/tellinatool/nl2bash#install-tensorflow
 132. https://github.com/tellinatool/nl2bash#environment-variables--dependencies
 133. https://github.com/tellinatool/nl2bash#change-directory
 134. https://github.com/tellinatool/nl2bash#data-filtering-split-and-pre-processing
 135. https://github.com/tellinatool/nl2bash#train-the-models
 136. https://github.com/tellinatool/nl2bash#generate-evaluation-table-using-pre-trained-models
 137. https://github.com/tellinatool/nl2bash#notes-on-manual-evaluation
 138. https://github.com/tellinatool/nl2bash#citation
 139. https://github.com/
