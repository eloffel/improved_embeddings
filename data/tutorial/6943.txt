   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]become a member[7]sign in[8]get started
     __________________________________________________________________

neural networks for algorithmic trading: enhancing classic strategies

   go to the profile of alexandr honchar
   [9]alexandr honchar (button) blockedunblock (button) followfollowing
   oct 18, 2017
   [0*63osbtxvdunyioef.png]

   some of the readers have noticed, that i calculated sharpe ratio
   wrongly, which is true. i   ll update the article and the code as soon as
   possible. meanwhile, it doesn   t change the fact of enhancement of a
   basic strategy with a neural network, just take into account the
      scale   .

   hello everyone! in five last tutorials we were discussing financial
   forecasting with id158s where we [10]compared
   different architectures for financial time series forecasting, realized
   [11]how to do this forecasting adequately with correct data
   preprocessing and id173, performed our [12]forecasts based on
   multivariate time series and could produce really nice results for
   [13]volatility forecasting and implemented custom id168s. in
   the last one we have set and experiment with [14]using data from
   different sources and solving two tasks with single neural network and
   optimized hyperparameters for better [15]forecasts.

   today i want to make a sort of conclusion of financial time series with
   a practical forecasting use case: we will enhance a classic moving
   average strategy with neural network and show that it really improves
   the final outcome and review new forecasting objectives you most
   probably would like to play with.

previous posts:

    1. [16]simple time series forecasting (and mistakes done)
    2. [17]correct 1d time series forecasting + backtesting
    3. [18]multivariate time series forecasting
    4. [19]volatility forecasting and custom losses
    5. [20]multitask and multimodal learning
    6. [21]hyperparameters optimization
    7. [22]enhancing classical strategies with neural nets
    8. [23]probabilistic programming and pyro forecasts

   you can check the code for training the neural network on my
   [24]github.

main idea

   we already have seen before, that we can forecast very different
   values         from price changes to volatility. before we were considering
   these forecasts as something kind of abstract and even tried to trade
   just looking on these    up-down    predictions, which wasn   t that good.
   but we also know, that there are a lot of other trading strategies,
   that are based on technical analysis and financial indicators. for
   example, we can build [25]moving averages of different window (one
      long   , let   s say 30 days, and one more    short   , probably, 14 days) and
   we believe that crossing points are the moments where the trend
   changes:
   [0*bt_zf5k1r_ol8nnr.gif]
   example of two moving averages crossing

   but this trading strategy has one main pitfall: on the flat regions we
   will still do the trades on the points where nothing actually changes,
   so we will lose money:
   [0*kvrrm-iogsw9wds4.png]
   example of flat region where moving averages are crossing

   how we can overcome this with use of machine learning?

     let   s check the following strategy hypothesis: on the moments where
     moving averages are crossing we will make the forecast of change of
     some characteristic, and if we really expect a jump, we will believe
     this trading signal. otherwise, we will skip it, because we don   t
     want to lose money on flat regions.

   as a forecast objective i want to try [26]skewness         a measure of
   asymmetry of a distribution. let us assume, that if we forecast a
   change in a distribution it will mean that our current trend (not only
   flat region) will change in the future.
   [0*2kelhkhl4iayhhrg.png]
   skewness of distribution

input data

   here we will use pandas and [27]pyti to generate more indicators to use
   them as input as well. we will use macd, ichimocku cloud, rsi,
   volatility and others. all these values will form multivariate time
   series which will be flatten for later use in mlp or will stay for id98
   or id56.
nine_period_high = pd.rolling_max(pd.dataframe(highp), window= rolling / 2)
nine_period_low = pd.rolling_min(pd.dataframe(lowp), window=  rolling / 2)
ichimoku = (nine_period_high + nine_period_low) /2
ichimoku = ichimoku.replace([np.inf, -np.inf], np.nan)
ichimoku = ichimoku.fillna(0.).values.tolist()
macd_indie = moving_average_convergence(pd.dataframe(closep))
wpr = williams_percent_r(closep)
rsi = relative_strength_index(closep,  rolling / 2)
volatility1 = pd.dataframe(closep).rolling(rolling).std().values#.tolist()
volatility2 = pd.dataframe(closep).rolling(rolling).var().values#.tolist()
volatility = volatility1 / volatility2
volatility = [v[0] for v in volatility]
rolling_skewness = pd.dataframe(closep).rolling(rolling).skew().values
rolling_kurtosis = pd.dataframe(closep).rolling(rolling).kurt().values

   obtained indicator features i concatenate with ohlcv tuples to generate
   final vector.

network architecture

   here i want to show one of the option how to train regularized mlp for
   time series forecasting:
main_input = input(shape=(len(x[0]), ), name='main_input')
x = gaussiannoise(0.05)(main_input)
x = dense(64, activation='relu')(x)
x = gaussiannoise(0.05)(x)
output = dense(1, activation = "linear", name = "out")(x)
final_model = model(inputs=[main_input], outputs=[output])
opt = adam(lr=0.002)
final_model.compile(optimizer=opt, loss='mse')

      novel    point here is adding small noise to the input and to the output
   of the single layer of our neural network. it can work very similar to
   l2 id173, mathematical explanation you can check in this
   [28]amazing book.
   [1*yrwzkgau2cc6fo_ianuzgg.png]
   sample from
   [29]http://www.deeplearningbook.org/contents/id173.html

   neural network is trained in a usual way, let   s check how our forecasts
   of skewness can improve (or no) the moving averages strategy.

   we train our network on aapl prices from 2012 to 2016 and as test on
   2016   2017 as we did in [30]one of previous tutorials.

   after training of a network i have plotted our close prices, moving
   averages and vertical lines on crossing points: red and orange lines
   represent points where we would like to trade and green ones         where we
   better don   t. it doesn   t look perfect, but let   s do backtesting to
   judge it.
   [1*jr9vjbcdlsxyv3ljuyfcxq.png]
   what moving average intersection is useful?

results without neural network

   i used backtesting described in this [31]post, so i will provide just
   key metrics and plots:

   [(   total return   ,    1.66%   ),
    (   sharpe ratio   ,    16.27   ),
    (   max drawdown   ,    2.28%   ),
    (   drawdown duration   ,    204   )]
   signals: 9
   orders: 9
   fills: 9
   [1*xunix8xzj9cobbasgsyv7q.png]
   results of backtesting of a rolling mean strategy

results with neural network

   how we will use only    red    and    orange    trading signals and skip the
   green ones. as we can see, this such a strategy did 2 trades less and
   it helped us to reduce the first drawdown a bit and increase final
   return almost twice!

   [(   total return   ,    3.07%   ),
    (   sharpe ratio   ,    27.99   ),
    (   max drawdown   ,    1.91%   ),
    (   drawdown duration   ,    102   )]
   signals: 7
   orders: 7
   fills: 7
   [1*pucrfznnkpnt3p5s6l7r3g.png]
   results of backtesting of a strategy with use of nn

possible improvements

   seems like this idea at least has some sense! i would like to introduce
   you some possible improvements i highly recommend you to try by your
   own:
     * different indicator strategies: macd, rsi
     * pairs trading strategies can be optimized extremely well with
       approach proposed
     * try to forecast different time series characteristics: hurst
       exponent, autocorrelation coefficient, maybe other statistical
       moments

   with this post i would like to finish (at least for a while) financial
   time series forecasting topic using neural networks. let   s be honest,
   it   s definitely not a holy graal and we can   t use them directly to
   predict if price will go up or down to make a lot of money. we
   considered different data sources and objectives, dealt carefully with
   overfitting and optimized hyperparameters. what conclusions we can do?
     * be careful about overfitting! you will do it in 99% of cases, don   t
       trust values as 80% of accuracy of very nice looking plots         it
       must be a mistake
     * try to forecast something different but close prices or
       returns         volatility, skewness, maybe other characteristics
     * use multimodal learning if you have different data sources
     * don   t forget to find the right hyperparameters!
     * create a strategy that can be a mix of some classical and based on
       machine learning and backtest it!

   i hope that this series of posts was useful to someone, i will come
   back rather soon with news topics    stay tuned! :)

   p.s.
   follow me also in [32]facebook for ai articles that are too short for
   medium, [33]instagram for personal stuff and [34]linkedin!

     * [35]machine learning
     * [36]deep learning
     * [37]finance
     * [38]trading
     * [39]neural networks

   (button)
   (button)
   (button) 1.6k claps
   (button) (button) (button) 5 (button) (button)

     (button) blockedunblock (button) followfollowing
   go to the profile of alexandr honchar

[40]alexandr honchar

   medium member since oct 2018

                     developing ai for biosignal analysis and finance, consulting,
   giving public speeches and blogging. contact me to collaborate
   [41]rachnogstyle@gmail.com

     * (button)
       (button) 1.6k
     * (button)
     *
     *

   go to the profile of alexandr honchar
   never miss a story from alexandr honchar, when you sign up for medium.
   [42]learn more
   never miss a story from alexandr honchar
   (button) blockedunblock (button) followget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/a517f43109bf
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/membership?source=upgrade_membership---nav_full
   7. https://medium.com/m/signin?redirect=https://medium.com/@alexrachnog/neural-networks-for-algorithmic-trading-enhancing-classic-strategies-a517f43109bf&source=--------------------------nav_reg&operation=login
   8. https://medium.com/m/signin?redirect=https://medium.com/@alexrachnog/neural-networks-for-algorithmic-trading-enhancing-classic-strategies-a517f43109bf&source=--------------------------nav_reg&operation=register
   9. https://medium.com/@alexrachnog
  10. https://medium.com/@alexrachnog/neural-networks-for-algorithmic-trading-part-one-simple-time-series-forecasting-f992daa1045a
  11. https://medium.com/@alexrachnog/neural-networks-for-algorithmic-trading-1-2-correct-time-series-forecasting-backtesting-9776bfd9e589
  12. https://medium.com/@alexrachnog/neural-networks-for-algorithmic-trading-2-1-multivariate-time-series-ab016ce70f57
  13. https://codeburst.io/neural-networks-for-algorithmic-trading-volatility-forecasting-and-custom-loss-functions-c030e316ea7e
  14. https://becominghuman.ai/neural-networks-for-algorithmic-trading-multimodal-and-multitask-deep-learning-5498e0098caf
  15. https://medium.com/machine-learning-world/neural-networks-for-algorithmic-trading-hyperparameters-optimization-cb2b4a29b8ee
  16. https://medium.com/@alexrachnog/neural-networks-for-algorithmic-trading-part-one-simple-time-series-forecasting-f992daa1045a
  17. https://medium.com/@alexrachnog/neural-networks-for-algorithmic-trading-1-2-correct-time-series-forecasting-backtesting-9776bfd9e589
  18. https://medium.com/@alexrachnog/neural-networks-for-algorithmic-trading-2-1-multivariate-time-series-ab016ce70f57
  19. https://codeburst.io/neural-networks-for-algorithmic-trading-volatility-forecasting-and-custom-loss-functions-c030e316ea7e
  20. https://becominghuman.ai/neural-networks-for-algorithmic-trading-multimodal-and-multitask-deep-learning-5498e0098caf
  21. https://medium.com/machine-learning-world/neural-networks-for-algorithmic-trading-hyperparameters-optimization-cb2b4a29b8ee
  22. https://medium.com/machine-learning-world/neural-networks-for-algorithmic-trading-enhancing-classic-strategies-a517f43109bf
  23. https://medium.com/@alexrachnog/financial-forecasting-with-probabilistic-programming-and-pyro-db68ab1a1dba
  24. https://github.com/rachnog/deep-trading/blob/master/strategy/skew.py
  25. http://www.investopedia.com/university/movingaverage/movingaverages4.asp
  26. https://en.wikipedia.org/wiki/skewness
  27. https://github.com/kylejusticemagnuson/pyti
  28. http://deeplearningbook.org/
  29. http://www.deeplearningbook.org/contents/id173.html
  30. https://medium.com/machine-learning-world/neural-networks-for-algorithmic-trading-1-2-correct-time-series-forecasting-backtesting-9776bfd9e589
  31. https://medium.com/machine-learning-world/neural-networks-for-algorithmic-trading-1-2-correct-time-series-forecasting-backtesting-9776bfd9e589
  32. https://www.facebook.com/rachnogstyle.blog
  33. http://instagram.com/rachnogstyle
  34. https://www.linkedin.com/in/alexandr-honchar-4423b962/
  35. https://medium.com/tag/machine-learning?source=post
  36. https://medium.com/tag/deep-learning?source=post
  37. https://medium.com/tag/finance?source=post
  38. https://medium.com/tag/trading?source=post
  39. https://medium.com/tag/neural-networks?source=post
  40. https://medium.com/@alexrachnog
  41. mailto:rachnogstyle@gmail.com
  42. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  44. https://medium.com/@alexrachnog?source=post_header_lockup
  45. https://medium.com/p/a517f43109bf/share/twitter
  46. https://medium.com/p/a517f43109bf/share/facebook
  47. https://medium.com/@alexrachnog?source=footer_card
  48. https://medium.com/p/a517f43109bf/share/twitter
  49. https://medium.com/p/a517f43109bf/share/facebook
  50. https://medium.com/@alexrachnog
