   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]stats and bots
     * [9]data science
     * [10]analytics
     * [11]startups
     * [12]bots
     * [13]design
     * [14]subscribe
     * [15]     cube.js framework
     __________________________________________________________________

data structures related to machine learning algorithms

a primer on data structures for data scientists

   [16]go to the profile of peter mills
   [17]peter mills (button) blockedunblock (button) followfollowing
   jul 20, 2017
   [1*-lpwhnprrrkcqaoqhrqmkq.gif]
   [18]illustration source

   if you want to solve some real-world problems and design a cool product
   or algorithm, then having machine learning skills is not enough. you
   would need good working knowledge of data structures. the [19]statsbot
   team has invited peter mills to tell you about data structures for
   machine learning approaches.
     __________________________________________________________________

   so you   ve decided to move beyond canned algorithms and start to code
   your own machine learning methods. maybe you   ve got an idea for a cool
   new way of id91 data, or maybe you are frustrated by the
   limitations in your favorite statistical classification package.

     in either case, the better your knowledge of data structures and
     algorithms, the easier time you   ll have when it comes time to
     code up.

   i don   t think the data structures used in machine learning are
   significantly different than those used in other areas of software
   development. because of the size and difficulty of many of the
   problems, however, having a really solid handle on the basics is
   essential.

   also, because machine learning is a very mathematical field, one should
   have in mind how data structures can be used to solve mathematical
   problems and as mathematical objects in their own right.

     there are two ways to classify data structures: by their
     implementation and by their operation.

   by implementation, i mean the nuts and bolts of how they are programmed
   and the actual storage patterns. how they look on the outside is less
   important than what   s going on under the hood. for data structures
   classed by operation or abstract data types, it is the opposite: their
   external appearance and operation is more important than how they are
   implemented, and in fact they can usually be implemented using a number
   of different internal representations.

array

   i   m not kidding when i say that the basic array is the most important
   data structure in machine learning, and there is more to this
   bread-and-butter type than you might think. arrays are important
   because they are used in id202: the most useful and powerful
   mathematical tool at your disposal.

   therefore, the most common types will be the one- and two-dimensional
   variety, corresponding to vectors and matrices respectively, but you
   will occasionally encounter three- or four-dimensional arrays either
   for higher ranked tensors or to group examples of the former.

   when doing matrix arithmetic, you will have to choose from a dizzying
   variety of libraries, data types, and even languages. many scientific
   programming languages such as matlab, interactive data language (idl),
   and python with the numpy extension are designed primarily for working
   with vectors and matrices.
   [1*0l1wdztdkvb96e2lq8mraa.png]

   but the nice thing about these data structures is that, even in more
   general-purpose programming languages, implementing vectors and
   matrices is straightforward right next to the metal, assuming the
   language has any fortran dna in it at all. consider the translation of
   matrix-vector multiplication:

   into c++:
for (int i=0; i<n; i++) {
  y[i]=0;
  for (int j=0; j<n; j++) y[i]+=a[i][j]*x[j]
}

extensible array

   in most cases, arrays can be allocated to a fixed size at run time, or
   you can calculate a reliable upper bound. in those cases where you need
   your arrays to expand indefinitely, you can use an extensible array
   such as the vector class in the c++ standard template library (stl).
   regular arrays in matlab are similarly extensible, and extensible
   arrays are the basis of the entire python language.
   [0*i8aevs6mp9cc5axo.]

   in this data structure, there are two pieces of    meta-data    stored
   alongside the actual data values. these are the amount of storage space
   allocated to the data structure and the actual size of the array. as
   soon as the size of the array exceeds the storage space, a new space is
   allocated that   s twice the size, the values copied into it, and the old
   array deleted.

   this is an o(n) operation, where n is the size of the array, but since
   it only happens occasionally, time to add a new value onto the end
   actually amortizes to constant time, o(1). it is a very flexible data
   structure with fast average insertions and fast access.

   extensible arrays are excellent for composing other, more complex data
   structures and making them extensible. for example, to store a sparse
   matrix: any number of new elements can be added onto the end and they
   are then sorted by position to make location faster. more on this
   later.

     sparse matrix can be used in [20]text classification problems.

linked list

   a linked list consists of several separately allocated nodes. each node
   contains a data value plus a pointer to the next node in the list.
   insertions, at constant time, are very efficient, but accessing a value
   is slow and often requires scanning through much of the list.

   linked lists are easy to splice together and split apart. there are
   many variations: for instance, insertions can be done at either the
   head or the tail; the list can be doubly-linked and there are many
   similar data structures based on the same principle such as the binary
   tree, below.
   [0*mnype09slovaexly.]

   mainly, i find linked lists useful for parsing lists of indeterminate
   length. afterwards, they can be converted to fixed-length arrays for
   fast access. for this reason, i use a linked list class that includes a
   method for conversion to an array.

binary tree

   a binary tree is similar to a linked list except that each node has two
   pointers to subsequent nodes instead of just one. the value in the left
   child is always less than the value in the parent node, which in turn
   is smaller than that of the right child. thus, data in binary trees is
   automatically sorted. both insertion and access are efficient at o(log
   n) on average. like linked lists, they are easy to transform into
   arrays and this is the basis for a tree-sort.
   [0*jvaczdzjpqmp0zyk.]

balanced tree

   if the data is already already sorted, binary trees are less efficient
   at o(n) worst case since the data will be laid out linearly as if it
   were a linked list. while the ordering in a binary tree is constrained,
   it is by no means unique and the same list can be arranged in many
   different configurations depending on the order in which it is
   inserted.

   there are several transformations that can be applied to a tree in
   order to make it more balanced. self-balancing trees perform these
   operations automatically in order to keep access and insertion at an
   optimal average.
   [0*lxy5eluh4_v63r6v.]

   a widespread problem in machine learning is finding the nearest
   neighbor to a particular point. this problem is needed for nn
   algorithm. kd tree, a type of binary tree, provides an efficient
   solution for that.

heap

   a heap is another hierarchical, ordered data structure similar to a
   tree except instead of a horizontal ordering, it has a vertical
   ordering. this ordering applies along the hierarchy, but not across it:
   the parent is always larger than both its children, but a node of
   higher rank is not necessarily larger than a lower one that   s not
   directly beneath it.
   [0*8t99vi34dxthn92s.]

   both insertion and retrieval are performed by promotion. an element is
   first inserted in the highest available position. then it is compared
   with its parent and promoted until it reaches the right rank. to take
   an element off the heap, the larger of the two children is promoted to
   the missing position, then the larger of those two children is promoted
   and so on until everything has trickled up the ranks.

   typically, the highest ranking value at the top is pulled off the heap
   in order to sort a list. unlike a tree, most heaps are simply stored in
   an array with the relationships between elements only implicit.

stack

   a stack is defined as    first in, last out.    an element is pushed onto
   the top of the stack where it covers the previous element. the top
   element must be popped off before any of the others can be accessed.

     stacks are mainly useful for parsing grammars and implementing
     computer languages.

   there are many machine learning applications for which a domain
   specific language (dsl) is the perfect solution. for instance, the
   [21]libagf library uses a recursive control language to generalize
   binary classification to multi-class. a special character is used to
   repeat a previous option, but because the language is recursive, the
   option must be taken from the same hierarchical level or higher. this
   is implemented by a stack.

queue

   a queue is defined as    first in, first out.    think of the line at the
   bank teller (for those of us still old enough to remember a time before
   internet banking). queues are useful in real time programming so that
   the program can maintain a list of jobs to be processed.

   consider an application to record split times of athletes. you type in
   the bib number and hit enter, except in the time it took you to do that
   the next athlete behind has also passed. so you type in a list of bib
   numbers of the nearest approaching athletes, then hit a separate key to
   register the next in the queue as having passed.

set

   a set consists of an un-ordered list of non-repeating elements. if you
   add an element that   s already in the set, there will be no change.
   since much of the mathematics of machine learning deals with sets, they
   are very useful data structures.

associative arrays

   in an associative array, there are two types of data which are stored
   in pairs: the key and its associated value. the data structure is
   relational in nature: the value is addressed by its key. since much of
   the training data is also relational, this type of data structure would
   seem ideally suited to machine learning problems.

   in practice, it   s not used so much, in part because most associative
   arrays are only one-dimensional, whereas machine learning data is
   typically multi-dimensional.

     associative arrays are good for building dictionaries.

   suppose you are building a dsl, want to store a list of functions and
   variables, and need to distinguish between the two.

        sin        function

        var        variable

        exp        function

        x        variable

        sqrt        function

        a        variable

   querying the array on    sqrt    would return,    function.   

custom data structures

   as you work on more problems, you are sure to encounter those for which
   the standard recipe box does not contain optimal structures. you will
   need to design your own data structure.

   consider a multi-class classifier, which generalizes a binary
   classifier to work with classification problems having more than two
   classes. an obvious solution is bisection: recursively split the
   classes into two groups. you could use something similar to a binary
   tree to organize the binary classifiers, except that a hierarchical
   solution is not the only method of solving for multi-class.

     consider several partitions that are then used to solve for all the
     class probabilities simultaneously.

   the most general solution would combine the two, thus each hierarchical
   partition need not be binary but could be solved by a non-hierarchical
   multi-class classifier. this is the approach taken in the libagf
   library.

   more complex data structures can also be composed of the basic
   structures. consider a sparse matrix class. in a sparse matrix, most of
   the elements are zero and only the non-zero elements are stored. we
   could store the position and value for each element as a triplet and
   have a list of them in an extensible array.

   consider the 3 by 3 identity:
   [0*dsfzsacqucjmklkf.]

conclusions

   data structures are only occasionally interesting in their own right.
   what makes them truly interesting are the kinds of problems you can
   solve with them.

   for most of the work i do, i   m using a lot of basic fixed-length
   arrays. i mostly use more sophisticated data structures to make the
   programs a little smoother in how they run and interface with the
   outside world and a little more user friendly. less like the fortran
   programs of yore where you had to endure a compile cycle of close to
   half an hour just to change the grid sizes (i actually worked on a
   program like this!).

   even if you can   t come up with an application off the top of your head
   i still i think it   s good to know about things like stacks and queues.
   you never know when one might come in handy.

   really sophisticated artificial intelligence applications might use
   things like directed and undirected graphs, which are really just
   generalizations of trees and linked lists. how are you going to build
   things like the former if you can   t cope with the latter?

problems

   if you want to practice and realize data structures for ml algorithm
   yourself, try to solve some of problems below:
    1. encapsulate the matrix-vector multiplication code snippet into a
       subroutine called matrix_times_vector. design the calling syntax
       for the subroutine.
    2. using struct, typedef or class, encapsulate both vectors and
       matrices into a pair of abstract types called vect and matrix,
       respectively. design an api for the types.
    3. find at least three libraries online that do the above.
    4. download and install the libid166 library. consider the method
       kernel::k_function on line 316 of    id166.cpp   . what are the
       advantages and disadvantages of the data structure used to hold
       vectors?
    5. how would you re-factor calculation of id81s in the
       libid166 library?
    6. which data structures described in the text are abstract types?
    7. what internal representation or data structure could you use to
       implement the abstract data types? are there any that are not
       included in the list above?
    8. using a binary tree, design an associative array.
    9. consider the vector type in libid166. how can this be used to
       represent a sparse matrix? contrast this with the sparse matrix
       class described above. look at [22]the complete type. what are the
       advantages and disadvantages of each representation?
   10. implement a treesort and a heapsort. now use the same data
       structures to find the top k elements. what common machine learning
       algorithm is this good for?
   11. implement your favorite data structure in your favourite language.

   iframe: [23]/media/02231cd5403151a2a463e36cc3b88462?postid=5edf77c8bbf4

you   d also like:

   [24]id126 algorithms
   main existing recommendation engines and how they
   workblog.statsbot.co
   [25]text classifier algorithms in machine learning
   key text classification algorithms with use cases and
   tutorialsblog.statsbot.co
   [26]time series anomaly detection algorithms
   the current state of anomaly detection techniques in plain
   languageblog.statsbot.co

     * [27]programming
     * [28]data structures
     * [29]machine learning
     * [30]data science
     * [31]algorithms

   (button)
   (button)
   (button) 453 claps
   (button) (button) (button) 3 (button) (button)

     (button) blockedunblock (button) followfollowing
   [32]go to the profile of peter mills

[33]peter mills

   passionate about science. interested in atmospheric physics, chaos
   theory and machine learning.

     (button) follow
   [34]stats and bots

[35]stats and bots

   data stories on machine learning and analytics. from statsbot   s makers.

     * (button)
       (button) 453
     * (button)
     *
     *

   [36]stats and bots
   never miss a story from stats and bots, when you sign up for medium.
   [37]learn more
   never miss a story from stats and bots
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://blog.statsbot.co/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/5edf77c8bbf4
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://blog.statsbot.co/data-structures-related-to-machine-learning-algorithms-5edf77c8bbf4&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://blog.statsbot.co/data-structures-related-to-machine-learning-algorithms-5edf77c8bbf4&source=--------------------------nav_reg&operation=register
   8. https://blog.statsbot.co/?source=logo-lo_glwt7ycwpsrv---cfc9f21a543a
   9. https://blog.statsbot.co/datascience/home
  10. https://blog.statsbot.co/analytics/home
  11. https://blog.statsbot.co/startups/home
  12. https://blog.statsbot.co/bots/home
  13. https://blog.statsbot.co/design/home
  14. https://blog.statsbot.co/statsbot-digest-b0d7372f842a
  15. https://cube.dev/
  16. https://blog.statsbot.co/@peteymills?source=post_header_lockup
  17. https://blog.statsbot.co/@peteymills
  18. http://gph.is/24jtefv
  19. http://statsbot.co/?utm_source=blog&utm_campaign=structures_ml
  20. https://blog.statsbot.co/text-classifier-algorithms-in-machine-learning-acc115293278
  21. https://github.com/peteysoft/libmsci
  22. http://github.com/peteysoft/libmsci/sparse/sparse.h
  23. https://blog.statsbot.co/media/02231cd5403151a2a463e36cc3b88462?postid=5edf77c8bbf4
  24. https://blog.statsbot.co/recommendation-system-algorithms-ba67f39ac9a3
  25. https://blog.statsbot.co/text-classifier-algorithms-in-machine-learning-acc115293278
  26. https://blog.statsbot.co/time-series-anomaly-detection-algorithms-1cef5519aef2
  27. https://blog.statsbot.co/tagged/programming?source=post
  28. https://blog.statsbot.co/tagged/data-structures?source=post
  29. https://blog.statsbot.co/tagged/machine-learning?source=post
  30. https://blog.statsbot.co/tagged/data-science?source=post
  31. https://blog.statsbot.co/tagged/algorithms?source=post
  32. https://blog.statsbot.co/@peteymills?source=footer_card
  33. https://blog.statsbot.co/@peteymills
  34. https://blog.statsbot.co/?source=footer_card
  35. https://blog.statsbot.co/?source=footer_card
  36. https://blog.statsbot.co/
  37. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  39. https://blog.statsbot.co/recommendation-system-algorithms-ba67f39ac9a3
  40. https://blog.statsbot.co/text-classifier-algorithms-in-machine-learning-acc115293278
  41. https://blog.statsbot.co/time-series-anomaly-detection-algorithms-1cef5519aef2
  42. https://medium.com/p/5edf77c8bbf4/share/twitter
  43. https://medium.com/p/5edf77c8bbf4/share/facebook
  44. https://medium.com/p/5edf77c8bbf4/share/twitter
  45. https://medium.com/p/5edf77c8bbf4/share/facebook
