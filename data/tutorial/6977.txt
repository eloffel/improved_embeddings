   #[1]github [2]recent commits to bounter:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]23
     * [35]star [36]843
     * [37]fork [38]42

[39]rare-technologies/[40]bounter

   [41]code [42]issues 8 [43]pull requests 0 [44]projects 1 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   efficient counter that uses a limited (bounded) amount of memory
   regardless of data size.
     * [47]130 commits
     * [48]1 branch
     * [49]3 releases
     * [50]fetching contributors
     * [51]mit

    1. [52]python 51.3%
    2. [53]c 48.6%
    3. [54]shell 0.1%

   (button) python c shell
   branch: master (button) new pull request
   [55]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/r
   [56]download zip

downloading...

   want to be notified of new releases in rare-technologies/bounter?
   [57]sign in [58]sign up

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [60]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [61]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [62]download the github extension for visual studio
   and try again.

   (button) go back
   [63]@menshikh-iv
   [64]menshikh-iv [65]merge branch 'release-1.1.0'
   latest commit [66]952a70e jan 17, 2019
   [67]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [68]bounter
   [69]cbounter [70]use unsigned integers to address cms table
   ([71]#35[72]) jan 17, 2019
   [73]docs
   [74].gitignore [75]merge pull into cbounter sep 19, 2017
   [76].travis.yml [77]add missed python versions to travis (according to
   pr#15) oct 17, 2017
   [78]changelog.md
   [79]contributing.md
   [80]issue_template.md
   [81]license [82]improve documentation sep 1, 2017
   [83]manifest.in [84]fix manifest for release 1.0.0 oct 17, 2017
   [85]readme.md
   [86]readme.rst
   [87]requirements.txt
   [88]setup.py
   [89]upload.sh

readme.md

bounter -- counter for large datasets

   [90]build status [91]github release [92]mailing list [93]gitter
   [94]follow

   bounter is a python library, written in c, for extremely fast
   probabilistic counting of item frequencies in massive datasets, using
   only a small fixed memory footprint.

why bounter?

   bounter lets you count how many times an item appears, similar to
   python's built-in dict or counter:
from bounter import bounter

counts = bounter(size_mb=1024)  # use at most 1 gb of ram
counts.update([u'a', 'few', u'words', u'a', u'few', u'times'])  # count item fre
quencies

print(counts[u'few'])  # query the counts
2

   however, unlike dict or counter, bounter can process huge collections
   where the items would not even fit in ram. this commonly happens in
   machine learning and nlp, with tasks like dictionary building or
   collocation detection that need to estimate counts of billions of items
   (token ngrams) for their statistical scoring and subsequent filtering.

   bounter implements approximative algorithms using optimized low-level c
   structures, to avoid the overhead of python objects. it lets you
   specify the maximum amount of ram you want to use. in the wikipedia
   example below, bounter uses 31x less memory compared to counter.

   bounter is also marginally faster than the built-in dict and counter,
   so wherever you can represent your items as strings (both byte-strings
   and unicode are fine, and bounter works in both python2 and python3),
   there's no reason not to use bounter instead except:

when not to use bounter?

   beware, bounter is only a probabilistic frequency counter and cannot be
   relied on for exact counting. (you can't expect a data structure with
   finite size to hold infinite data.) example of bounter failing:
from bounter import bounter
bounts = bounter(size_mb=1)
bounts.update(str(i) for i in range(10000000))
bounts['100']
0

   please use counter or dict when such exact counts matter. when they
   don't matter, like in most nlp and ml applications with huge datasets,
   bounter is a very good alternative.

installation

   bounter has no dependencies beyond python >= 2.7 or python >= 3.3 and a
   c compiler:
pip install bounter  # install from pypi

   or, if you prefer to install from the [95]source tar.gz:
python setup.py test  # run unit tests
python setup.py install

how does it work?

   no magic, just some clever use of approximative algorithms and solid
   engineering.

   in particular, bounter implements three different algorithms under the
   hood, depending on what type of "counting" you need:
    1. [96]cardinality estimation: "how many unique items are there?"

from bounter import bounter

counts = bounter(need_counts=false)
counts.update(['a', 'b', 'c', 'a', 'b'])

print(counts.cardinality())  # cardinality estimation
3
print(counts.total())  # efficiently accumulates counts across all items
5

   this is the simplest use case and needs the least amount of memory, by
   using the [97]hyperloglog algorithm (built on top of joshua andersen's
   [98]hll code).
    2. item frequencies: "how many times did this item appear?"

from bounter import bounter

counts = bounter(need_iteration=false, size_mb=200)
counts.update(['a', 'b', 'c', 'a', 'b'])
print(counts.total(), counts.cardinality())  # total and cardinality still work
(5l, 3l)

print(counts['a'])  # supports asking for counts of individual items
2

   this uses the [99]count-min sketch algorithm to estimate item counts
   efficiently, in a fixed amount of memory. see the [100]api docs for
   full details and parameters.

   as a further optimization, count-min sketch optionally support a
   [101]logarithmic probabilistic counter:
     * bounter(need_iteration=false): default option. exact counter, no
       probabilistic counting. occupies 4 bytes (max value 2^32) per
       bucket.
     * bounter(need_iteration=false, log_counting=1024): an integer
       counter that occupies 2 bytes. values up to 2048 are exact; larger
       values are off by +/- 2%. the maximum representable value is around
       2^71.
     * bounter(need_iteration=false, log_counting=8): a more aggressive
       probabilistic counter that fits into just 1 byte. values up to 8
       are exact and larger values can be off by +/- 30%. the maximum
       representable value is about 2^33.

   such memory vs. accuracy tradeoffs are sometimes desirable in nlp,
   where being able to handle very large collections is more important
   than whether an event occurs exactly 55,482x or 55,519x.
    3. full item iteration: "what are the items and their frequencies?"

from bounter import bounter

counts = bounter(size_mb=200)  # default version, unless you specify need_items
or need_counts
counts.update(['a', 'b', 'c', 'a', 'b'])
print(counts.total(), counts.cardinality())  # total and cardinality still work
(5l, 3)
print(counts['a'])  # individual item frequency still works
2

print(list(counts))  # iterator returns keys, just like counter
[u'b', u'a', u'c']
print(list(counts.iteritems()))  # supports iterating over key-count pairs, etc.
[(u'b', 2l), (u'a', 2l), (u'c', 1l)]

   stores the keys (strings) themselves in addition to the total
   cardinality and individual item frequency (8 bytes). uses the most
   memory, but supports the widest range of functionality.

   this option uses a custom c hash table underneath, with optimized
   string storage. it will remove its low-count objects when nearing the
   maximum alotted memory, instead of expanding the table.
     __________________________________________________________________

   for more details, see the [102]api docstrings or read the [103]blog.

example on the english wikipedia

   let's count the frequencies of all bigrams in the english wikipedia
   corpus:
with smart_open('wikipedia_tokens.txt.gz') as wiki:
    for line in wiki:
        words = line.decode().split()
        bigrams = zip(words, words[1:])
        counter.update(u' '.join(pair) for pair in bigrams)

print(counter[u'czech republic'])
42099

   the wikipedia dataset contained 7,661,318 distinct words across
   1,860,927,726 total words, and 179,413,989 distinct bigrams across
   1,857,420,106 total bigrams. storing them in a naive built-in dict
   would consume over 31 gb ram.

   to test the accuracy of bounter, we automatically extracted
   [104]collocations (common multi-word expressions, such as "new york",
   "network license", "supreme court" or "elementary school") from these
   bigram counts.

   we compared the set of collocations extracted from counter (exact
   counts, needs lots of memory) vs bounter (approximate counts, bounded
   memory) and present the precision and recall here:
   algorithm time to build memory precision recall f1 score
   counter (built-in) 32m 26s 31 gb 100% 100% 100%
   bounter(size_mb=128, need_iteration=false, log_counting=8) 19m 53s 128
   mb 95.02% 97.10% 96.04%
   bounter(size_mb=1024) 17m 54s 1 gb 100% 99.27% 99.64%
   bounter(size_mb=1024, need_iteration=false) 19m 58s 1 gb 99.64% 100%
   99.82%
   bounter(size_mb=1024, need_iteration=false, log_counting=1024) 20m 05s
   1 gb 100% 100% 100%
   bounter(size_mb=1024, need_iteration=false, log_counting=8) 19m 59s 1
   gb 97.45% 97.45% 97.45%
   bounter(size_mb=4096) 16m 21s 4 gb 100% 100% 100%
   bounter(size_mb=4096, need_iteration=false) 20m 14s 4 gb 100% 100% 100%
   bounter(size_mb=4096, need_iteration=false, log_counting=1024) 20m 14s
   4 gb 100% 99.64% 99.82%

   bounter achieves a perfect f1 score of 100% at 31x less memory (1gb vs
   31gb), compared to a built-in counter or dict. it is also 61% faster.

   even with just 128 mb (250x less memory), its f1 score is still 96.04%.

support

   use [105]github issues to report bugs, and our [106]mailing list for
   general discussion and feature ideas.
     __________________________________________________________________

   bounter is open source software released under the [107]mit license.

   copyright (c) 2017 [108]rare technologies

     *    2019 github, inc.
     * [109]terms
     * [110]privacy
     * [111]security
     * [112]status
     * [113]help

     * [114]contact github
     * [115]pricing
     * [116]api
     * [117]training
     * [118]blog
     * [119]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [120]reload to refresh your
   session. you signed out in another tab or window. [121]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/rare-technologies/bounter/commits/master.atom
   3. https://github.com/rare-technologies/bounter#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/rare-technologies/bounter
  32. https://github.com/join
  33. https://github.com/login?return_to=/rare-technologies/bounter
  34. https://github.com/rare-technologies/bounter/watchers
  35. https://github.com/login?return_to=/rare-technologies/bounter
  36. https://github.com/rare-technologies/bounter/stargazers
  37. https://github.com/login?return_to=/rare-technologies/bounter
  38. https://github.com/rare-technologies/bounter/network/members
  39. https://github.com/rare-technologies
  40. https://github.com/rare-technologies/bounter
  41. https://github.com/rare-technologies/bounter
  42. https://github.com/rare-technologies/bounter/issues
  43. https://github.com/rare-technologies/bounter/pulls
  44. https://github.com/rare-technologies/bounter/projects
  45. https://github.com/rare-technologies/bounter/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/rare-technologies/bounter/commits/master
  48. https://github.com/rare-technologies/bounter/branches
  49. https://github.com/rare-technologies/bounter/releases
  50. https://github.com/rare-technologies/bounter/graphs/contributors
  51. https://github.com/rare-technologies/bounter/blob/master/license
  52. https://github.com/rare-technologies/bounter/search?l=python
  53. https://github.com/rare-technologies/bounter/search?l=c
  54. https://github.com/rare-technologies/bounter/search?l=shell
  55. https://github.com/rare-technologies/bounter/find/master
  56. https://github.com/rare-technologies/bounter/archive/master.zip
  57. https://github.com/login?return_to=https://github.com/rare-technologies/bounter
  58. https://github.com/join?return_to=/rare-technologies/bounter
  59. https://desktop.github.com/
  60. https://desktop.github.com/
  61. https://developer.apple.com/xcode/
  62. https://visualstudio.github.com/
  63. https://github.com/menshikh-iv
  64. https://github.com/rare-technologies/bounter/commits?author=menshikh-iv
  65. https://github.com/rare-technologies/bounter/commit/952a70ed6557391fc2d161bbf648184fa60e4240
  66. https://github.com/rare-technologies/bounter/commit/952a70ed6557391fc2d161bbf648184fa60e4240
  67. https://github.com/rare-technologies/bounter/tree/952a70ed6557391fc2d161bbf648184fa60e4240
  68. https://github.com/rare-technologies/bounter/tree/master/bounter
  69. https://github.com/rare-technologies/bounter/tree/master/cbounter
  70. https://github.com/rare-technologies/bounter/commit/d59e6f931ec1c278b1f163564a5c6333bcc80e4d
  71. https://github.com/rare-technologies/bounter/pull/35
  72. https://github.com/rare-technologies/bounter/commit/d59e6f931ec1c278b1f163564a5c6333bcc80e4d
  73. https://github.com/rare-technologies/bounter/tree/master/docs
  74. https://github.com/rare-technologies/bounter/blob/master/.gitignore
  75. https://github.com/rare-technologies/bounter/commit/549a36de2a48b845cf8b809abd7a1ecbcc7b1aff
  76. https://github.com/rare-technologies/bounter/blob/master/.travis.yml
  77. https://github.com/rare-technologies/bounter/commit/14f83807123979e3e89003b1dfeb1962444c37a3
  78. https://github.com/rare-technologies/bounter/blob/master/changelog.md
  79. https://github.com/rare-technologies/bounter/blob/master/contributing.md
  80. https://github.com/rare-technologies/bounter/blob/master/issue_template.md
  81. https://github.com/rare-technologies/bounter/blob/master/license
  82. https://github.com/rare-technologies/bounter/commit/483a451678e81d2ff5c0e376e24bd85a43c21616
  83. https://github.com/rare-technologies/bounter/blob/master/manifest.in
  84. https://github.com/rare-technologies/bounter/commit/46c03a48e72004c1a2f72d162165e32f1c7af25d
  85. https://github.com/rare-technologies/bounter/blob/master/readme.md
  86. https://github.com/rare-technologies/bounter/blob/master/readme.rst
  87. https://github.com/rare-technologies/bounter/blob/master/requirements.txt
  88. https://github.com/rare-technologies/bounter/blob/master/setup.py
  89. https://github.com/rare-technologies/bounter/blob/master/upload.sh
  90. https://travis-ci.org/rare-technologies/bounter
  91. https://github.com/rare-technologies/bounter/releases
  92. https://groups.google.com/forum/#!forum/gensim
  93. https://gitter.im/rare-technologies/gensim
  94. https://twitter.com/gensim_py
  95. https://pypi.python.org/pypi/bounter
  96. https://en.wikipedia.org/wiki/count-distinct_problem
  97. http://algo.inria.fr/flajolet/publications/flfugame07.pdf
  98. https://github.com/ascv/hyperloglog
  99. https://en.wikipedia.org/wiki/count   min_sketch
 100. https://github.com/rare-technologies/bounter/blob/master/bounter/bounter.py
 101. https://en.wikipedia.org/wiki/approximate_counting_algorithm
 102. https://github.com/rare-technologies/bounter/blob/master/bounter/bounter.py
 103. https://rare-technologies.com/counting-efficiently-with-bounter-pt-1-hashtable/
 104. https://en.wikipedia.org/wiki/collocation
 105. https://github.com/rare-technologies/bounter/issues
 106. https://groups.google.com/forum/#!forum/gensim
 107. https://github.com/rare-technologies/bounter/blob/master/license
 108. https://rare-technologies.com/
 109. https://github.com/site/terms
 110. https://github.com/site/privacy
 111. https://github.com/security
 112. https://githubstatus.com/
 113. https://help.github.com/
 114. https://github.com/contact
 115. https://github.com/pricing
 116. https://developer.github.com/
 117. https://training.github.com/
 118. https://github.blog/
 119. https://github.com/about
 120. https://github.com/rare-technologies/bounter
 121. https://github.com/rare-technologies/bounter

   hidden links:
 123. https://github.com/
 124. https://github.com/rare-technologies/bounter
 125. https://github.com/rare-technologies/bounter
 126. https://github.com/rare-technologies/bounter
 127. https://help.github.com/articles/which-remote-url-should-i-use
 128. https://github.com/rare-technologies/bounter#bounter----counter-for-large-datasets
 129. https://github.com/rare-technologies/bounter#why-bounter
 130. https://github.com/rare-technologies/bounter#when-not-to-use-bounter
 131. https://github.com/rare-technologies/bounter#installation
 132. https://github.com/rare-technologies/bounter#how-does-it-work
 133. https://github.com/rare-technologies/bounter#example-on-the-english-wikipedia
 134. https://github.com/rare-technologies/bounter#support
 135. https://github.com/
