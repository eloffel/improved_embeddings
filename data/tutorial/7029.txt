   #[1]pyimagesearch    feed [2]pyimagesearch    comments feed
   [3]pyimagesearch    deep learning: how opencv   s blobfromimage works
   comments feed [4]alternate [5]alternate

[6]navigation

   [7]pyimagesearch [8]pyimagesearch be awesome at opencv, python, deep
   learning, and id161

   [9]home

main menu

     * [10]start here
     * [11]practical python and opencv
     * [12]pyimagesearch gurus
     * [13]opencv 3 & 4 tutorials
     * [14]free crash course
     * [15]about
     * [16]contact

   [17]return to content

deep learning: how opencv   s blobfromimage works

   by [18]adrian rosebrock on november 6, 2017 in [19]deep learning,
   [20]opencv 3, [21]tutorials

   [22][blob_from_images_header.png]

   today   s blog post is inspired by a number of pyimagesearch readers who
   have commented on previous deep learning tutorials wanting to
   understand what exactly opencv   s blobfromimage  function is doing under
   the hood.

   you see, to obtain (correct) predictions from deep neural networks you
   first need to preprocess your data.

   in the context of deep learning and image classification, these
   preprocessing tasks normally involve:
    1. mean subtraction
    2. scaling by some factor

   opencv   s new deep neural network ( dnn ) module contains two functions
   that can be used for preprocessing images and preparing them for
   classification via pre-trained deep learning models.

   in today   s blog post we are going to take apart opencv   s
   cv2.dnn.blobfromimage  and cv2.dnn.blobfromimages  preprocessing
   functions and understand how they work.

   to learn more about image preprocessing for deep learning via
   opencv,  just keep reading.

   looking for the source code to this post?
   [23]jump right to the downloads section.

deep learning: how opencv   s blobfromimage works

   opencv provides two functions to facilitate image preprocessing for
   deep learning classification:
     * cv2.dnn.blobfromimage
     * cv2.dnn.blobfromimages

   these two functions perform
    1. mean subtraction
    2. scaling
    3. and optionally channel swapping

   in the remainder of this tutorial we   ll:
    1. explore mean subtraction and scaling
    2. examine the function signature of each deep learning preprocessing
       function
    3. study these methods in detail
    4. and finally, apply opencv   s deep learning functions to a set of
       input images

   let   s go ahead and get started.

deep learning and mean subtraction

   [24][blob_from_images_mean_subtraction.jpg]

   figure 1: a visual representation of mean subtraction where the rgb
   mean (center) has been calculated from a dataset of images and
   subtracted from the original image (left) resulting in the output image
   (right).

   before we dive into an explanation of opencv   s deep learning
   preprocessing functions, we first need to understand mean subtraction.
   mean subtraction is used to help combat illumination changes in the
   input images in our dataset. we can therefore view mean subtraction as
   a technique used to aid our convolutional neural networks.

   before we even begin training our deep neural network, we first compute
   the average pixel intensity across all images in the training set for
   each of the red, green, and blue channels.

   this implies that we end up with three variables:

   \mu_r ,  \mu_g , and \mu_b

   typically the resulting values are a 3-tuple consisting of the mean of
   the red, green, and blue channels, respectively.

   for example, the mean values for the id163 training set are
   r=103.93, g=116.77, and b=123.68 (you may have already encountered
   these values before if you have used a network that was pre-trained on
   id163).

   however, in some cases the mean red, green, and blue values may be
   computed channel-wise rather than pixel-wise, resulting in an mxn
   matrix. in this case the mxn matrix for each channel is then subtracted
   from the input image during training/testing.

   both methods are perfectly valid forms of mean subtraction; however, we
   tend to see the pixel-wise version used more often, especially for
   larger datasets.

   when we are ready to pass an image through our network (whether for
   training or testing), we subtract the mean, \mu , from each input
   channel of the input image:

   r = r - \mu_r

   g = g - \mu_g

   b = b - \mu_b

   we may also have a scaling factor, \sigma , which adds in a
   id172:

   r = (r - \mu_r) / \sigma

   g = (g - \mu_g) / \sigma

   b = (b - \mu_b) / \sigma

   the value of \sigma may be the standard deviation across the training
   set (thereby turning the preprocessing step into a standard
   score/z-score). however, \sigma may also be manually set (versus
   calculated) to scale the input image space into a particular range     it
   really depends on the architecture, how the network was trained, and
   the techniques the implementing author is familiar with.

   it   s important to note that not all deep learning architectures perform
   mean subtraction and scaling! before you preprocess your images, be
   sure to read the relevant publication/documentation for the deep neural
   network you are using.

   as you   ll find on your deep learning journey, some architectures
   perform mean subtraction only (thereby setting \sigma=1 ). other
   architectures perform both mean subtraction and scaling. even other
   architectures choose to perform no mean subtraction or scaling. always
   check the relevant publication you are implementing/using to verify the
   techniques the author is using.

   mean subtraction, scaling, and id172 are covered in more detail
   inside [25]deep learning for id161 with python.

opencv   s blobfromimage and blobfromimages function

   let   s start off by referring to the [26]official opencv documentation
   for cv2.dnn.blobfromimage :

     [blobfromimage] creates 4-dimensional blob from image. optionally
     resizes and crops image from center, subtract mean values, scales
     values by scalefactor, swap blue and red channels.

   informally, a blob is just a (potentially collection) of image(s) with
   the same spatial dimensions (i.e., width and height), same depth
   (number of channels), that have all be preprocessed in the same manner.

   the  cv2.dnn.blobfromimage  and  cv2.dnn.blobfromimages  functions are
   near identical.

   let   s start with examining the  cv2.dnn.blobfromimage  function
   signature below:

   blob = cv2.dnn.blobfromimage(image, scalefactor=1.0, size, mean,
   swaprb=true)

   i   ve provided a discussion of each parameter below:
    1. image : this is the input image we want to preprocess before
       passing it through our deep neural network for classification.
    2. scalefactor : after we perform mean subtraction we can optionally
       scale our images by some factor. this value defaults to 1.0 (i.e.,
       no scaling) but we can supply another value as well. it   s also
       important to note that scalefactor  should be 1 / \sigma as we   re
       actually multiplying the input channels (after mean subtraction) by
       scalefactor .
    3. size : here we supply the spatial size that the convolutional
       neural network expects. for most current state-of-the-art neural
       networks this is either 224  224, 227  227, or 299  299.
    4. mean : these are our mean subtraction values. they can be a 3-tuple
       of the rgb means or they can be a single value in which case the
       supplied value is subtracted from every channel of the image. if
       you   re performing mean subtraction, ensure you supply the 3-tuple
       in (r, g, b) order, especially when utilizing the default behavior
       of swaprb=true .
    5. swaprb : opencv assumes images are in bgr channel order; however,
       the mean value assumes we are using rgb order. to resolve this
       discrepancy we can swap the r and b channels in image  by setting
       this value to true. by default opencv performs this channel
       swapping for us.

   the  cv2.dnn.blobfromimage  function returns a  blob  which is our
   input image after mean subtraction, normalizing, and channel swapping.

   the  cv2.dnn.blobfromimages  function is exactly the same:

   blob = cv2.dnn.blobfromimages(images, scalefactor=1.0, size, mean,
   swaprb=true)

   the only exception is that we can pass in multiple images, enabling us
   to batch process a set of  images .

   if you   re processing multiple images/frames, be sure to use the
   cv2.dnn.blobfromimages  function as there is less function call
   overhead and you   ll be able to batch process the images/frames faster.

deep learning with opencv   s blobfromimage function

   now that we   ve studied both the blobfromimage  and blobfromimages
   functions, let   s apply them to a few example images and then pass them
   through a convolutional neural network for classification.

   as a prerequisite, you need opencv version 3.3.0 at a minimum. numpy is
   a dependency of opencv   s python bindings and [27]imutils is my package
   of convenience functions available on [28]github and in the [29]python
   package index.

   if you haven   t installed opencv, you   ll want to follow the latest
   tutorials available [30]here, and be sure to specify opencv 3.3.0 or
   higher when you clone/download opencv  and opencv_contrib .

   the imutils package can be installed via pip :
   deep learning: how opencv's blobfromimage works
   shell

   $ pip install imutils_______________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ pip install imutils

   assuming your image processing environment is ready to go, let   s open
   up a new file, name it blob_from_images.py , and insert the following
   code:
   deep learning: how opencv's blobfromimage works
   python

   # import the necessary packages_____________________________
   from imutils import paths___________________________________
   import numpy as np__________________________________________
   import cv2__________________________________________________
   ____________________________________________________________
   # load the class labels from disk___________________________
   rows = open("synset_words.txt").read().strip().split("\n")__
   classes = [r[r.find(" ") + 1:].split(",")[0] for r in rows]_
   ____________________________________________________________
   # load our serialized model from disk_______________________
   net = cv2.dnn.readnetfromcaffe("bvlc_googlenet.prototxt",___
   	"bvlc_googlenet.caffemodel")_______________________________
   ____________________________________________________________
   # grab the paths to the input images________________________
   imagepaths = sorted(list(paths.list_images("images/")))_____
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   # import the necessary packages
   from imutils import paths
   import numpy as np
   import cv2

   # load the class labels from disk
   rows = open("synset_words.txt").read().strip().split("\n")
   classes = [r[r.find(" ") + 1:].split(",")[0] for r in rows]

   # load our serialized model from disk
   net = cv2.dnn.readnetfromcaffe("bvlc_googlenet.prototxt",
   "bvlc_googlenet.caffemodel")

   # grab the paths to the input images
   imagepaths = sorted(list(paths.list_images("images/")))

   first we import imutils , numpy , and cv2  (lines 2-4).

   then we read synset_words.txt  (the id163 class labels) and extract
   classes , our class labels, on lines 7 and 8.

   to load our model model from disk we use the dnn function,
   cv2.dnn.readnetfromcaffe , and specify bvlc_googlenet.prototxt  as the
   filename parameter and bvlc_googlenet.caffemodel  as the actual model
   file (lines 11 and 12).

   note: you can grab the pre-trained convolutional neural network, class
   labels text file, source code, and example images to this post using
   the    downloads    section at the bottom of this tutorial.

   finally, we grab the paths to the input images on line 15. if you   re
   using windows you should change the path separator here to ensure you
   can correctly load the image paths.

   next, we   ll load images from disk and pre-process them using
   blobfromimage :
   deep learning: how opencv's blobfromimage works
   python

   # (1) load the first image from disk, (2) pre-process it by 
   # it to 224x224 pixels, and (3) construct a blob that can be
   # through the pre-trained network___________________________
   image = cv2.imread(imagepaths[0])___________________________
   resized = cv2.resize(image, (224, 224))_____________________
   blob = cv2.dnn.blobfromimage(resized, 1, (224, 224), (104, 1
   print("first blob: {}".format(blob.shape))__________________
   17
   18
   19
   20
   21
   22
   23
   # (1) load the first image from disk, (2) pre-process it by resizing
   # it to 224x224 pixels, and (3) construct a blob that can be passed
   # through the pre-trained network
   image = cv2.imread(imagepaths[0])
   resized = cv2.resize(image, (224, 224))
   blob = cv2.dnn.blobfromimage(resized, 1, (224, 224), (104, 117, 123))
   print("first blob: {}".format(blob.shape))

   in this block, we first load the image  (line 20) and then resize it to
   224  224 (line 21), the required input image dimensions for googlenet.

   now we   re to the crux of this post.

   on line 22, we call cv2.dnn.blobfromimage  which, as stated in the
   previous section, will create a 4-dimensional blob  for use in our
   neural net.

   let   s print the shape of our blob so we can analyze it in the terminal
   later (line 23).

   next, we   ll feed blob  through googlenet:
   deep learning: how opencv's blobfromimage works
   python

   # set the input to the pre-trained deep learning network and
   # the output predicted probabilities for each of the 1,000 i
   # classes___________________________________________________
   net.setinput(blob)__________________________________________
   preds = net.forward()_______________________________________
   ____________________________________________________________
   # sort the probabilities (in descending) order, grab the ind
   # top predicted label, and draw it on the input image_______
   idx = np.argsort(preds[0])[::-1][0]_________________________
   text = "label: {}, {:.2f}%".format(classes[idx],____________
   	preds[0][idx] * 100)_______________________________________
   cv2.puttext(image, text, (5, 25),  cv2.font_hershey_simplex,
   	0.7, (0, 0, 255), 2)_______________________________________
   ____________________________________________________________
   # show the output image_____________________________________
   cv2.imshow("image", image)__________________________________
   cv2.waitkey(0)______________________________________________
   25
   26
   27
   28
   29
   30
   31
   32
   33
   34
   35
   36
   37
   38
   39
   40
   41
   # set the input to the pre-trained deep learning network and obtain
   # the output predicted probabilities for each of the 1,000 id163
   # classes
   net.setinput(blob)
   preds = net.forward()

   # sort the probabilities (in descending) order, grab the index of the
   # top predicted label, and draw it on the input image
   idx = np.argsort(preds[0])[::-1][0]
   text = "label: {}, {:.2f}%".format(classes[idx],
   preds[0][idx] * 100)
   cv2.puttext(image, text, (5, 25),  cv2.font_hershey_simplex,
   0.7, (0, 0, 255), 2)

   # show the output image
   cv2.imshow("image", image)
   cv2.waitkey(0)

   if you   re familiar with recent deep learning posts on this blog, the
   above lines should look familiar.

   we feed the blob  through the network (lines 28 and 29) and grab the
   predictions, preds .

   then we sort preds  (line 33) with the most confident predictions at
   the front of the list, and generate a label text to display on the
   image. the label text consists of the class label and the prediction
   percentage value for the top prediction (lines 34 and 35).

   from there,  we write the label text  at the top of the image  (lines
   36 and 37) followed by displaying the image  on the screen and waiting
   for a keypress before moving on (lines 40 and 41).

   now it   s time to use the plural form of the blobfromimage  function.

   here we   ll do (nearly) the same thing, except we   ll instead create and
   populate a list of images  followed by passing the list as a parameter
   to blobfromimages :
   deep learning: how opencv's blobfromimage works
   python

   # initialize the list of images we'll be passing through the
   images = []_________________________________________________
   ____________________________________________________________
   # loop over the input images (excluding the first one since 
   # already classified it), pre-process each image, and update
   # `images` list_____________________________________________
   for p in imagepaths[1:]:____________________________________
   	image = cv2.imread(p)______________________________________
   	image = cv2.resize(image, (224, 224))______________________
   	images.append(image)_______________________________________
   ____________________________________________________________
   # convert the images list into an opencv-compatible blob____
   blob = cv2.dnn.blobfromimages(images, 1, (224, 224), (104, 1
   print("second blob: {}".format(blob.shape))_________________
   43
   44
   45
   46
   47
   48
   49
   50
   51
   52
   53
   54
   55
   56
   # initialize the list of images we'll be passing through the network
   images = []

   # loop over the input images (excluding the first one since we
   # already classified it), pre-process each image, and update the
   # `images` list
   for p in imagepaths[1:]:
   image = cv2.imread(p)
   image = cv2.resize(image, (224, 224))
   images.append(image)

   # convert the images list into an opencv-compatible blob
   blob = cv2.dnn.blobfromimages(images, 1, (224, 224), (104, 117, 123))
   print("second blob: {}".format(blob.shape))

   first we initialize our images  list (line 44), and then, using the
   imagepaths , we read, resize, and append the image  to the list (lines
   49-52).

   using list slicing, we   ve omitted the first image from imagepaths  on
   line 49.

   from there, we pass the images  into cv2.dnn.blobfromimages  as the
   first parameter on line 55. all other parameters to
   cv2.dnn.blobfromimages  are identical to cv2.dnn.blobfromimage  above.

   for analysis later we print blob.shape  on line 56.

   we   ll next pass the blob  through googlenet and write the class label
   and prediction at the top of each image:
   deep learning: how opencv's blobfromimage works
   python

   # set the input to our pre-trained network and obtain the ou
   # class label predictions___________________________________
   net.setinput(blob)__________________________________________
   preds = net.forward()_______________________________________
   ____________________________________________________________
   # loop over the input images________________________________
   for (i, p) in enumerate(imagepaths[1:]):____________________
   	# load the image from disk_________________________________
   	image = cv2.imread(p)______________________________________
   ____________________________________________________________
   	# find the top class label from the `preds` list and draw i
   	# the image________________________________________________
   	idx = np.argsort(preds[i])[::-1][0]________________________
   	text = "label: {}, {:.2f}%".format(classes[idx],___________
   		preds[i][idx] * 100)______________________________________
   	cv2.puttext(image, text, (5, 25),  cv2.font_hershey_simplex
   		0.7, (0, 0, 255), 2)______________________________________
   ____________________________________________________________
   	# display the output image_________________________________
   	cv2.imshow("image", image)_________________________________
   	cv2.waitkey(0)_____________________________________________
   58
   59
   60
   61
   62
   63
   64
   65
   66
   67
   68
   69
   70
   71
   72
   73
   74
   75
   76
   77
   78
   # set the input to our pre-trained network and obtain the output
   # class label predictions
   net.setinput(blob)
   preds = net.forward()

   # loop over the input images
   for (i, p) in enumerate(imagepaths[1:]):
   # load the image from disk
   image = cv2.imread(p)

   # find the top class label from the `preds` list and draw it on
   # the image
   idx = np.argsort(preds[i])[::-1][0]
   text = "label: {}, {:.2f}%".format(classes[idx],
   preds[i][idx] * 100)
   cv2.puttext(image, text, (5, 25),  cv2.font_hershey_simplex,
   0.7, (0, 0, 255), 2)

   # display the output image
   cv2.imshow("image", image)
   cv2.waitkey(0)

   the remaining code is essentially the same as above, only our for  loop
   now handles looping through each of the imagepaths  (again, omitting
   the first one as we have already classified it).

   and that   s it! let   s see the script in action in the next section.

opencv blobfromimage and blobfromimages results

   now we   ve reached the fun part.

   go ahead and use the    downloads    section of this blog post to download
   the source code, example images, and pre-trained neural network. you
   will need the additional files in order to execute the code.

   from there, fire up a terminal and run the following command:
   deep learning: how opencv's blobfromimage works
   shell

   $ python blob_from_images.py________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ python blob_from_images.py

   the first terminal output is with respect to the first image found in
   the images  folder where we apply the cv2.dnn.blobfromimage  function:

   deep learning: how opencv's blobfromimage works
   shell

   first blob: (1, 3, 224, 224)________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   first blob: (1, 3, 224, 224)

   the resulting beer glass image is displayed on the screen:
   [31][blob_from_images_result01-300x207.jpg]

   figure 2: an enticing beer has been labeled and recognized with high
   confidence by googlenet. the blob dimensions resulting from
   blobfromimage are displayed in the terminal.

   that full beer glass makes me thirsty. but before i enjoy a beer
   myself, i   ll explain why the shape of the blob is (1, 3, 224, 224) .

   the resulting tuple has the following format:

   (num_images=1, num_channels=3, width=224, height=224)

   since we   ve only processed one image, we only have one entry in our
   blob . the channel count is three for bgr channels. and finally 224  224
   is the spatial width and height for our input image.

   next, let   s build a blob  from the remaining four input images.

   the second blob   s shape is:
   deep learning: how opencv's blobfromimage works
   shell

   second blob: (4, 3, 224, 224)_______________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   second blob: (4, 3, 224, 224)

   since this blob contains 4 images, the num_images=4  . the remaining
   dimensions are the same as the first, single image, blob.

   i   ve included a sample of correctly classified images below:
   [32][blob_from_images_result02-300x244.jpg]

   figure 3: my keyboard has been correctly identified by googlenet with a
   prediction confidence of 81%.
   [33][blob_from_images_result03-300x244.jpg]

   figure 4: i tested the pre-trained network on my computer monitor as
   well. here we can see the input image is correctly classified using our
   convolutional neural network.
   [34][blob_from_images_result04-300x257.jpg]

   figure 5: a nasa space shuttle is recognized with a prediction value of
   over 99% by our deep neural network.

summary

   in today   s tutorial we examined opencv   s blobfromimage  and
   blobfromimages  deep learning functions.

   these methods are used to prepare input images for classification via
   pre-trained deep learning models.

   both blobfromimage  and blobfromimages  perform mean subtraction and
   scaling. we can also swap the red and blue channels of the image
   depending on channel ordering. nearly all state-of-the-art deep
   learning models perform mean subtraction and scaling     the benefit here
   is that opencv makes these preprocessing tasks dead simple.

   if you   re interested in studying deep learning in more detail, be sure
   to take a look at my brand new book, [35]deep learning for computer
   vision with python.

   inside the book you   ll discover:
     * super practical walkthroughs that present solutions to actual,
       real-world image classification problems, challenges, and
       competitions.
     * detailed, thorough experiments (with highly documented code)
       enabling you to reproduce state-of-the-art results.
     * my favorite    best practices    to improve network accuracy. these
       techniques alone will save you enough time to pay for the book
       multiple times over.
     * ..and much more!

   sound good?

   [36]click here to start your journey to deep learning mastery.

   otherwise, be sure to enter your email address in the form below to be
   notified when future deep learning tutorials are published here on the
   pyimagesearch blog.

   see you next week!

downloads:

   if you would like to download the code and images used in this post,
   please enter your email address in the form below. not only will you
   get a .zip of the code, i   ll also send you a free 17-page resource
   guide on id161, opencv, and deep learning. inside you'll find
   my hand-picked tutorials, books, courses, and libraries to help you
   master cv and dl! sound good? if so, enter your email address and i   ll
   send you the code immediately!

   email address: ____________________

   download the code!

resource guide (it   s totally free).

   get your free 17-page id161 and deep learning resource guide
   pdf
   enter your email address below to get my free 17-page id161,
   opencv, and deep learning resource guide pdf. inside you'll find my
   hand-picked tutorials, books, courses, and python libraries to help you
   master id161 and deep learning!
   ____________________
   download the guide!

   [37]id98, [38]convolutional neural network, [39]deep learning,
   [40]machine learning, [41]opencv 3
   [42]how-to: multi-gpu training with keras, python, and deep learning
   [43]how to install mxnet for deep learning

53 responses to deep learning: how opencv   s blobfromimage works

    1. pure november 6, 2017 at 11:32 am [44]#
       email notification squad, where you at!
       hey adrian, i   m really enjoying your series of articles on deep
       learning. i love the powerful technology we can create by tying in
       id161 and neural networks    it really is the combination
       that allows us to make *magic* software that makes people say
          wow!   
       anyways, this is a bit off topic, but i was wondering if you would
       be so kind as to write an article on making a    people counter    with
       opencv     that is, a program that counts people going in and out of
       a building via a live webcam feed. there are no great resources
       available online for this, so if you would write one i   m sure it
       would drive plenty of traffic to your site. it   s a win win for both
       of us!
       that being said, i love all the content you   re putting out now.
       keep doing your thing     
       take care!
       [45]reply
          + adrian rosebrock november 6, 2017 at 4:22 pm [46]#
            sure, i can absolutely do a blog post on that. i   m right in
            the middle of a deep learning series, but i   ll add it to the
            idea queue. thanks for the suggestion.
            [47]reply
          + sourav gosain june 4, 2018 at 3:23 am [48]#
            hi,
            you can check out the post of adrian where he sets the face
            counter using dlib. your project can be created on the same
            lines. i hope it helps.
            [49]reply
    2. [50]maxim november 6, 2017 at 12:12 pm [51]#
       hi
       thank for a new post. i tried to experiment with dnn modul of
       opencv for semantic segmentation tasks but i had to refuse from it.
       maybe i just didnt find a suitable network. although, later on i
       didnt find a suitable solution and with using original frameworks.
       (or quality is poor or size of pretrained net is too huge). maybe
       you, adrian, have some suggestion what network can be used in
       mobile devices for semantic segmentation tasks?
       [52]reply
          + adrian rosebrock november 6, 2017 at 4:22 pm [53]#
            i would suggest doing some research on mobilenet and then
            trying out [54]mobilenet + semantic segmentation.
            [55]reply
               o [56]maxim november 7, 2017 at 6:08 am [57]#
                 mobilenet is attended for classifications. models which
                 made on base of mobilenet also is not perfect
                 unfortunately. unet is too big. pretrained caffe model
                 what i found is 124mb and it is not suitable for mobile
                 devices. pspnet is about 30mb, it is better, but quality
                 is poor. even their web demo on site is not work well on
                 arbitrary images. it is a common problem of all
                 segmentation networks. they work fine on images on which
                 these were trained (i.e. from cityscapes set) but on any
                 random photo results are too far from desirable. i found
                 only one network what works moreless fine on random
                 images     it is sharpnet by facebook. but their size is
                 more 500mb     
                 ideally, it was needed to combine i.e. enet + sharpnet
                 and make a compact net, but i didnt find this already
                 done. to make it self     this task will require to drop
                 all other tasks and devote all time to studying nn more
                 deeply. and the most defensively is what so kind of
                 already done mobile network will be available 1-2 year
                 later, but not now yet.
                 [58]reply
                    # adrian rosebrock november 9, 2017 at 7:00 am [59]#
                      mobilenet by itself is used for image
                      classification. mobilenet + ssd can become an object
                      detector. mobilenet can also be combined with a
                      segmentation framework as well.
                      you also mentioned    they work fine on images they
                      were trained on    which is actually what all machine
                      learning algorithms do. there is no such thing as a
                         perfect generalizability    to images a network were
                      not trained on, especially if your input images
                      dramatically vary from the training set.
                      deep learning-based segmentation will get better for
                      sure, but that also implies that our datasets need
                      to become more robust as well.
                      [60]reply
                         @ [61]maxim november 9, 2017 at 10:07 am [62]#
                           good advise. i   ll try to find some project with
                           pretrained model on base of mobilenet. (havent
                           yet found)
                           regarding    perfect generalizability        when
                           i   ve becomes acquainted with machinelearning
                           then for task of classification and object
                           detection it looks like a miracle, and usually
                           it works fine on random pictures. and only with
                           a segmentation task i   ve met a disappointment.
                           of course, it is more complicated task than
                           previous two but a faith in a miracle dead
                           last. even monstrous networks like sharpmask
                           doesnt see stable results. they are interested
                           for experiments but not yet applicable for real
                           tasks. during google searching i   ve met several
                           commercial projects what promise a good result
                           and appropriate sizes for mobile solution. but
                           they havent demo versions and i cannot estimate
                           do they say true or it is just advertising
                           promises. but they motivate to continue to
                           experiment with existed open source projects
    3. tuan november 7, 2017 at 1:08 am [63]#
       can you write a post that introduce deep learning feature on opencv
       3.3.0? thank article!
       [64]reply
          + adrian rosebrock november 9, 2017 at 7:05 am [65]#
            hi tuan     i have already done this. please see [66]this post.
            [67]reply
    4. chintan zaveri november 7, 2017 at 2:14 am [68]#
       hey,
       thanks for amazing tutorial. is there any help available for image
       segmentation using dnn module of opencv?
       [69]reply
    5. [70]mustafa qamar-ud-din november 7, 2017 at 6:18 am [71]#
       thank you for the very informative blog & newsletter. i was
       wondering whether you can advise necessary tools for applying these
       techniques in production environment around restful apis     
       [72]reply
          + adrian rosebrock november 9, 2017 at 6:55 am [73]#
            hi mustafa     i   m covering how to build scalable deep learning
            apis inside my book, [74]deep learning for id161
            with python.
            [75]reply
    6. loukas november 7, 2017 at 7:48 am [76]#
       very good job!!! i want to ask if that can work on real time object
       detection??
       [77]reply
          + adrian rosebrock november 9, 2017 at 6:54 am [78]#
            absolutely. please see [79]this blog post.
            [80]reply
               o loukas november 14, 2017 at 3:05 pm [81]#
                 thnx for your answer but on this link you have only 20
                 model. how i can import this model!!! thnx again for your
                 time
                 [82]reply
                    # adrian rosebrock november 15, 2017 at 1:01 pm [83]#
                      the id164 model supports the 20 coco
                      classes. the image classification model was trained
                      on the 1,000 id163 labels. you cannot take a
                      model trained for image classification and use it
                      for id164. you would instead need to
                      train your id164 model from scratch or
                      apply id21 via fine-tuning. for what
                      it   s worth, i   m covering id164 in detail
                      inside [84]deep learning for id161 with
                      python.
                      [85]reply
    7. pbs november 7, 2017 at 11:35 am [86]#
       hey adrian
       for me, a blob is a set of connected pixels, or a connected
       component, usually found in binary images. why did they choose
          blob    for this operation, which seems like has nothing to do with
       traditional blob?
       [87]reply
          + adrian rosebrock november 9, 2017 at 6:53 am [88]#
            calling the output of these functions a    blob    is a decision
            by the opencv developers     i had nothing to do with this
            choice. i   m not sure why they choose the name blob, i suppose
            you would need to ask them.
            [89]reply
    8. tuan november 8, 2017 at 5:00 am [90]#
       hi adrian,
       how to    rectangle    for detected object? based on your code, i could
       not do that! (if i use mobilenet module, it can help me but less
       accurate)
       [91]reply
          + adrian rosebrock november 9, 2017 at 6:37 am [92]#
            i cover how to compute the bounding box rectangle for a given
            object in [93]this blog post. you cannot take a model that was
            trained for image classification and use it for object
            detection. id164 deep learning models follow a
            specific framework and need to be trained in a very specific
            way. i   m covering id164 deep learning models inside
            my book, [94]deep learning for id161 with python.
            [95]reply
               o tuan november 16, 2017 at 11:46 pm [96]#
                 i am interested in your book and your website. but i have
                 no money to buy it. hope you successfully!
                 [97]reply
    9. zz november 9, 2017 at 5:39 am [98]#
       good
       [99]reply
   10. f  bio uechi november 15, 2017 at 10:07 pm [100]#
       hi adrian,
       thanks for the very informative post.
       i have a question regarding mean subtraction.
       i   m trying to load another model published in the caffe model zoo
       ([101]https://github.com/bvlc/caffe/wiki/model-zoo#models-for-age-a
       nd-gender-classification).
       apart from the .prototxt and .caffemodel files it also provides a
       mean.binaryproto file. do you happen to know how can we figure out
       the mean and scalefactor parameters values from this file ?
       [102]reply
          + adrian rosebrock november 18, 2017 at 8:25 am [103]#
            hi f  bio     you   ll need to use the    caffe    python bindings
            (which will require you to install and compile caffe).
            something [104]like this would be a step in the right
            direction.
            [105]reply
   11. afshan december 4, 2017 at 11:52 pm [106]#
       hi adrian
       please tell me is this function only works for opencv3.3 ?? or it
       will work for 3.2 as well?
       [107]reply
          + adrian rosebrock december 5, 2017 at 7:26 am [108]#
            this function is only available in opencv 3.3.0 and greater.
            it is not available in opencv 3.2.
            [109]reply
   12. pandinosaurus february 25, 2018 at 5:50 am [110]#
                
       news
                
       newly added in dnn module : imagesfromblob method
       example of use in c++ ::
       [111]https://github.com/pandinosaurus/visualizednnblobsocv
       [112]reply
   13. sakina february 26, 2018 at 3:32 am [113]#
       hey adrian, thank you so much, i understood blobfromimage() well,
       but i am really confused as to what net.forward() returns.
       what is the structure of the variable    preds   ?
       please help me out.
       [114]reply
          + adrian rosebrock february 26, 2018 at 1:44 pm [115]#
            the exact structure of what is returned depends on the
            network. a classification network will return class labels and
            probabilities. an id164 network will return labels,
            probabilities, and bounding box coordinates. take a look at
            [116]this blog post for more information.
            [117]reply
   14. mayank march 18, 2018 at 12:45 pm [118]#
       as per my knowledge, labels are used during training of the neural
       network, then why do we need labels file while classifying real
       world data?
       [119]reply
          + adrian rosebrock march 19, 2018 at 5:08 pm [120]#
            hey mayank     we train a network on both its data + labels.
            however, we need the names of the labels when deploying the
            model as the names are the    human readable    names of the
            labels.
            [121]reply
   15. jasper may 8, 2018 at 10:33 am [122]#
       hi adrian, thank you so much and now i get a better understanding
       of dnn.
       but there is one question bothering me a lot. i learn that
       scalefactor should be 1/delta, but how to calculate    delta   ? is
       there any direct formula of delta?
       please help me out.
       [123]reply
          + jasper may 8, 2018 at 10:34 am [124]#
            please ignore this question! sorry for asking the same
            question twice!
            [125]reply
               o adrian rosebrock may 9, 2018 at 9:38 am [126]#
                 congrats on resolving the issue, jasper!
                 [127]reply
   16. [128]krisna sudiatmika june 10, 2018 at 6:29 am [129]#
       hy adrian !
       thank you for your great tutorials. i have a question , how to load
       keras model on opencv 3?
       in this tutorial you are using caffe model.
       please help me out.
       [130]reply
          + adrian rosebrock june 13, 2018 at 6:08 am [131]#
            keras models are not yet supported with opencv 3. hopefully in
            the future though!
            that said you can still use keras models to classify input
            images loaded by opencv     it   s something i do in many
            pyimagesearch tutorials. take a look at [132]this post to get
            you started.
            [133]reply
   17. wally kulecz july 3, 2018 at 5:25 pm [134]#
       i   m having a weird issue with net.forward() where it appears to
       return the detection from a previous detection instead of a new
       detection. i   m having the issue on two systems (pi2 and pi3) both
       using v1 5 mpixel pi cameras and getting images via videostream
       from your imutils module. changing frame rate or image resolution
       seems to have no influence. pi temperures seems to not be an issue
       as i   ve seen it when    high    in the 70s and    low    in the 40s
       three sequential images showing the problem can be viewed here:
       [135]https://1drv.ms/f/s!anwiztqq52yzgrq6irvvpwphys1t
       i do not have this issue with the movidius version of the
       mobilenetssd detection which of course gets a much higher frame
       rate, but one frame every 2 seconds is good for    ring doorbell   
       type usages and other than these previous detection error i   m
       seeing a near zero false alarm rate which is what makes push
       notifications so useful.
       i got started on this project when we were having dinner with some
       friends and her ring doorbell kept interrupting us with false
       alarms     the pyimagesearch dnn tutorials i   d been playing with made
       a light go off in my head     
       [136]reply
          + adrian rosebrock july 5, 2018 at 6:45 am [137]#
            hey wally, congrats on the progress on the project, that   s
            awesome! as far as the detections on previous frames go, are
            you using code from a previous pyimagesearch blog post? or did
            you code up the method from scratch?
            [138]reply
               o wally kulecz july 5, 2018 at 11:45 am [139]#
                 sorry for getting confused and posting to two threads,
                 that was not my intention, although i wasn   t sure which
                 would be most appropriate. basically i   ve merged code
                 from two pyimagesearch tutorials and added the mqtt code
                 to interface with node-red for control and notification.
                 my loop to process the ai is:
                 image = vs.read()
                 (h, w) = image.shape[:2]
                 blob = cv2.dnn.blobfromimage(cv2.resize(image,
                 preprocess_dims), 0.007843, preprocess_dims, 127.5)
                 net.setinput(blob)
                 detections = none
                 detections = net.forward()
                 # loop over the detections
                 which is straight from pyimagesearch tutorial code. i
                 added the detections = none in hopes of throwing an error
                 if there was something wrong with the blob that was
                 making net.forward() return without doing anything which
                 could leave the previous detection to be reused. but it
                 didn   t change anything.
                 i   m stumped by this to say the least! however, its now
                 looking like it might be some weird sd card corruption as
                 the sd card showed the same problem run in a third pi2
                 system. but ssh -x and gpicview, etc. and all other
                 raspbian stuff seemed to be working fine     cron job to
                 delete old image files, etc.
                 i have re-cloned the sd card from my master copy using dd
                 and so far its worked fine for 12+ hours. i   m about to
                 disable boot to gui (which is default for my master copy
                 to aid reconfiguration) and put the card back into the
                 dedicated system. i did drill some vent holes in the
                 case, but temp monitoring didn   t seem to show
                 correlations with the issue appearing or not.
                 do you know if net.forward() creates a persistent
                 temporary file?
                 i   ve read that sd cards don   t stand up well to this,
                 which is why i write the images to a usb stick. but
                 re-writing the same sd card and so far not having the
                 issue argues against this unless the sd card is doing
                 some kind of bad-block substitution when dd writes it
                 again.
                 i   ve had usb sticks and sd cards    die    in the past and
                 they   ve never recovered with a reformat, being cheap and
                 wanting to learn things i always try     
                 its particularly curious that two systems developed the
                 issue after approximately the same running time with one
                    premium    brand-name sd card and one microcenter    house
                 brand   .
                 thanks again for being such a great resource.
                 this system has worked well enough that a couple of
                 friends and neighbors who   ve seen it in action want one,
                 which has made me discover the issues while testing the
                 systems i   d setup for them.
                 the movidius version that uses images transferred by ftp
                 from my flir lorex hd security dvr has been running 24/7
                 for over a month now without issues.
                 i   ll followup when i learn more, but it took over 36
                 hours of continuous running for the issue to appear
                 initially and it seems to happen more frequently with
                 more running time. if it turns out to be sd card    wear
                 out    issues, this could be very important to all your
                 raspberry pi using readers.
                 [140]reply
   18. domenick poster july 17, 2018 at 5:13 pm [141]#
       hi adrian. your tutorial has been very helpful. i think i found one
       issue: you are subtracting the means from the wrong channels. see
       [142]https://github.com/opencv/opencv/blob/4560909a5e5cb284cdfd5619
       cdf4cf3622410388/modules/dnn/misc/face_detector_accuracy.py#l148
       from opencv   s own face detection benchmarking program:
       net.setinput(cv.dnn.blobfromimage(img, 1.0, (300, 300), (104.,
       177., 123.), false, false))
       by default, blobfromimage is going to assume the given mean values
       are in rgb order and will reorder them. however, it seems the 104,
       177, 123 values are already in bgr order, so we don   t want opencv
       to reorder them. thus, opencv we see the parameters set to false in
       opencv   s code.
       [143]reply
   19. parth agarwal september 20, 2018 at 1:36 pm [144]#
       thanks for the great post sir.
       will you please take a look at this-
          however, in some cases the mean red, green, and blue values may be
       computed channel-wise rather than pixel-wise, resulting in an mxn
       matrix. in this case the mxn matrix for each channel is then
       subtracted from the input image during training/testing.   
       i think it should be    may be computed pixel-wise rather than
       channel-wise    instead of    may be computed channel-wise rather than
       pixel-wise   . because we generally do channel-wise mean subtraction
       generally and mxn matrix would be useful for pixel-wise means i
       think.
       [145]reply
   20. sk september 30, 2018 at 1:07 am [146]#
       hello
       thanks for awesome post!
       i have one doubt though   .how did you calculate mean rgb values
       (104., 177., 123.) to be passed to function ?
       do these values always same?
       cv2.dnn.blobfromimage(cv2.resize(image, (300, 300)), 1.0, (300,
       300), (104.0, 177.0, 123.0))
       [147]reply
          + adrian rosebrock october 8, 2018 at 12:09 pm [148]#
            the mean rgb values are the means for each individual rgb
            channel across all images in your training set. since the
            networks we are using here are pre-trained we just supply the
            mean values for the training set which most authors will
            provide.
            [149]reply
   21. akshay borse november 1, 2018 at 1:11 pm [150]#
       hi adrian,
       can you please tell me what exactly a blob is? and why it   s 4
       dimensional and what does all the 4 dimensions contain.
       i read your bolg
       [151]https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs
       -blobfromimage-works/ and understood mean subtraction, scaling and
       all, but am not able to understand what exactly a blob is in
       blobfromimage().
       thanks
       [152]reply
          + adrian rosebrock november 2, 2018 at 7:16 am [153]#
            the first dimension is your batch size (# of images). the
            second dimension is the number of channels in the image. the
            third dimension is the height. and the fourth dimension is the
            width. having the second dimension contain the channels is
               channels first    ordering. having the channels as the last
            dimension is called    channels last    ordering.
            [154]reply
   22. horacce november 12, 2018 at 2:48 am [155]#
       hi adrian,
       thank you for your share, a very useful articles! but i still have
       a question about    cv.dnn.blobfromimages   ,
       see, now i use opencv dnn module to output my tiny-yolo model
       result. and i found that if i just input 1 image, the output shape
       is (3072, 6). but if i input 3 images, the output shape is still
       the same. i just want to know why. also, since my model is only one
       class, so the output channel will be [xmin, ymin, xmax, ymax,
       total_confidence, class_confidence], right? but i cannot find a
       channel to distinguish results from different images. would you
       tell me how can i figure it out?
       btw, seems the time of batch process is the same as the time to
       process single image.
       thanks
       [156]reply
          + adrian rosebrock november 13, 2018 at 4:46 pm [157]#
            take a look at my latest blog post, [158]yolo id164
            with opencv, where i discuss the volume size. working with
            yolo and opencv is much harder than some other architectures
            as you need to explicitly supply your output layers.
            [159]reply
   23. benjamin hill november 26, 2018 at 1:52 pm [160]#
       i   m a bit fuzzy on the width/height parameters: does it scale down
       the image to a square of this size? for a large input image (eg hd
       video frame), this seems very small, and would lead to a lot of
       lost data, especially if trying to detect distant faces in the
       video frame.
       or am i misunderstanding what it means by    input width and height   ?
       [161]reply
          + adrian rosebrock november 26, 2018 at 2:18 pm [162]#
            it depends if you set crop to either true or false. a value of
            true will crop the center of an image based on the input width
            and height. otherwise the entire image is used.
            [163]reply
          + [164]steve hess december 30, 2018 at 9:49 am [165]#
            i   m using this to detect faces in classroom recordings. the
            size of faces is too small to use the entire frame, so i split
            the image into two pieces and run them as a batch. after some
            testing i found that the best aspect ratio to use for the
            cropped images is 1.376:1. my cropped images are 750  545. i
            don   t need to detect faces in the entire frame, but if you
            need to do it over the whole image you may need to split it
            into 4 pieces. you will also need to overlap the cropped
            images slightly to detect faces that are right between them.
            i   m also doing object tracking for when they turn around, so
            the overlap is not critical for my application.
            [166]reply
   24. [167]luis november 29, 2018 at 4:28 pm [168]#
       excellent post, everything well explained! thanks     
       [169]reply
          + adrian rosebrock november 30, 2018 at 8:50 am [170]#
            thanks so much, luis!
            [171]reply

leave a reply [172]click here to cancel reply.

   comment
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________

   ______________________________name (required)

   ______________________________email (will not be published) (required)

   ______________________________website

   submit comment

   search...___________ (search)

resource guide (it   s totally free).

   [173]get your free 17-page id161 and deep learning resource
   guide pdf

   get your free 17 page id161, opencv, and deep learning
   resource guide pdf. inside you'll find my hand-picked tutorials, books,
   courses, and libraries to help you master cv and dl.

                           [174]download for free!

deep learning for id161 with python book     out now!

   [175]deep learning with id161 and python kickstarter

   you're interested in deep learning and id161, but you don't
   know how to get started. let me help. [176]my new book will teach you
   all you need to know about deep learning.

   click here to master deep learning

you can detect faces in images & video.

   [177]learn how to detect faces in images and video

   are you interested in detecting faces in images & video? but tired of
   googling for tutorials that never work? then let me help! i guarantee
   that my new book will turn you into a face detection ninja by the end
   of this weekend. [178]click here to give it a shot yourself.

   click here to master face detection

pyimagesearch gurus: now enrolling!

   the pyimagesearch gurus course is now enrolling! inside the course
   you'll learn how to perform:
     * automatic license plate recognition (anpr)
     * deep learning
     * face recognition
     * and much more!

   click the button below to learn more about the course, take a tour, and
   get 10 (free) sample lessons.

   take a tour & get 10 (free) lessons

hello! i   m adrian rosebrock.

   i'm an entrepreneur and ph.d who has launched two successful image
   search engines, [179]id my pill and [180]chic engine. i'm here to share
   my tips, tricks, and hacks i've learned along the way.

learn id161 in a single weekend.

   [181]become an opencv guru

   want to learn id161 & opencv? i can teach you in a single
   weekend. i know. it sounds crazy, but it   s no joke. my new book is your
   guaranteed, quick-start guide to becoming an opencv ninja. so why not
   give it a try? [182]click here to become a id161 ninja.

   click here to become an opencv ninja

subscribe via rss

   [183]pyimagesearch rss feed

   never miss a post! subscribe to the pyimagesearch rss feed and keep up
   to date with my image search engine tutorials, tips, and tricks
     * [184]popular

     * [185]raspbian stretch: install opencv 3 + python on your raspberry
       pi september 4, 2017
     * [186]install guide: raspberry pi 3 + raspbian jessie + opencv 3
       april 18, 2016
     * [187]home surveillance and motion detection with the raspberry pi,
       python, opencv, and dropbox june 1, 2015
     * [188]install opencv and python on your raspberry pi 2 and b+
       february 23, 2015
     * [189]ubuntu 16.04: how to install opencv october 24, 2016
     * [190]real-time id164 with deep learning and opencv
       september 18, 2017
     * [191]basic motion detection and tracking with python and opencv may
       25, 2015

   find me on [192]twitter, [193]facebook, and [194]linkedin.

      2019 pyimagesearch. all rights reserved.

   [tr?id=1465896023527386&ev=pageview&noscript=1]

   [email]
   [email]

references

   1. http://feeds.feedburner.com/pyimagesearch
   2. https://www.pyimagesearch.com/comments/feed/
   3. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/feed/
   4. https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/
   5. https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/&format=xml
   6. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#navigation
   7. https://www.pyimagesearch.com/
   8. https://www.pyimagesearch.com/
   9. https://www.pyimagesearch.com/
  10. https://www.pyimagesearch.com/start-here-learn-computer-vision-opencv/
  11. https://www.pyimagesearch.com/practical-python-opencv/
  12. https://www.pyimagesearch.com/pyimagesearch-gurus/
  13. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
  14. https://www.pyimagesearch.com/free-opencv-computer-vision-deep-learning-crash-course/
  15. https://www.pyimagesearch.com/about/
  16. https://www.pyimagesearch.com/contact/
  17. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#top
  18. https://www.pyimagesearch.com/author/adrian/
  19. https://www.pyimagesearch.com/category/deep-learning-2/
  20. https://www.pyimagesearch.com/category/opencv-3/
  21. https://www.pyimagesearch.com/category/tutorials/
  22. https://www.pyimagesearch.com/wp-content/uploads/2017/11/blob_from_images_header.png
  23. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/
  24. https://www.pyimagesearch.com/wp-content/uploads/2017/11/blob_from_images_mean_subtraction.jpg
  25. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  26. https://docs.opencv.org/trunk/d6/d0f/group__dnn.html#ga33d1b39b53a891e98a654fdeabba22eb
  27. https://www.pyimagesearch.com/2015/02/02/just-open-sourced-personal-imutils-package-series-opencv-convenience-functions/
  28. https://github.com/jrosebr1/imutils
  29. https://pypi.python.org/pypi/imutils
  30. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
  31. https://www.pyimagesearch.com/wp-content/uploads/2017/11/blob_from_images_result01.jpg
  32. https://www.pyimagesearch.com/wp-content/uploads/2017/11/blob_from_images_result02.jpg
  33. https://www.pyimagesearch.com/wp-content/uploads/2017/11/blob_from_images_result03.jpg
  34. https://www.pyimagesearch.com/wp-content/uploads/2017/11/blob_from_images_result04.jpg
  35. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  36. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  37. https://www.pyimagesearch.com/tag/id98/
  38. https://www.pyimagesearch.com/tag/convolutional-neural-network/
  39. https://www.pyimagesearch.com/tag/deep-learning/
  40. https://www.pyimagesearch.com/tag/machine-learning/
  41. https://www.pyimagesearch.com/tag/opencv-3/
  42. https://www.pyimagesearch.com/2017/10/30/how-to-multi-gpu-training-with-keras-python-and-deep-learning/
  43. https://www.pyimagesearch.com/2017/11/13/how-to-install-mxnet-for-deep-learning/
  44. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439823
  45. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439823
  46. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439839
  47. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439839
  48. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-466812
  49. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-466812
  50. http://www.alphaplugins.com/
  51. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439825
  52. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439825
  53. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439838
  54. https://github.com/akirasosa/mobile-semantic-segmentation
  55. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439838
  56. http://www.alphaplugins.com/
  57. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439880
  58. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439880
  59. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440095
  60. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440095
  61. http://www.alphaplugins.com/
  62. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440117
  63. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439867
  64. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439867
  65. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440100
  66. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/
  67. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440100
  68. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439869
  69. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439869
  70. http://mqubits.com/
  71. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439882
  72. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439882
  73. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440092
  74. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  75. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440092
  76. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439886
  77. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439886
  78. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440091
  79. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
  80. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440091
  81. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440595
  82. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440595
  83. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440682
  84. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  85. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440682
  86. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439901
  87. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439901
  88. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440089
  89. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440089
  90. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439967
  91. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-439967
  92. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440078
  93. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
  94. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  95. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440078
  96. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440810
  97. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440810
  98. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440054
  99. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440054
 100. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440722
 101. https://github.com/bvlc/caffe/wiki/model-zoo#models-for-age-and-gender-classification
 102. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440722
 103. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440939
 104. https://github.com/bvlc/caffe/issues/290#issuecomment-62846228
 105. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-440939
 106. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-442377
 107. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-442377
 108. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-442420
 109. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-442420
 110. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-451254
 111. https://github.com/pandinosaurus/visualizednnblobsocv
 112. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-451254
 113. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-451318
 114. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-451318
 115. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-451370
 116. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
 117. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-451370
 118. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-453466
 119. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-453466
 120. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-453570
 121. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-453570
 122. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-460481
 123. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-460481
 124. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-460482
 125. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-460482
 126. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-460651
 127. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-460651
 128. http://ramniya.com/
 129. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-467632
 130. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-467632
 131. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-468002
 132. https://www.pyimagesearch.com/2018/06/04/keras-multiple-outputs-and-multiple-losses/
 133. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-468002
 134. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-469907
 135. https://1drv.ms/f/s!anwiztqq52yzgrq6irvvpwphys1t
 136. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-469907
 137. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-470100
 138. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-470100
 139. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-470133
 140. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-470133
 141. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-471319
 142. https://github.com/opencv/opencv/blob/4560909a5e5cb284cdfd5619cdf4cf3622410388/modules/dnn/misc/face_detector_accuracy.py#l148
 143. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-471319
 144. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-479139
 145. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-479139
 146. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-480255
 147. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-480255
 148. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-481271
 149. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-481271
 150. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-484922
 151. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/
 152. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-484922
 153. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-485005
 154. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-485005
 155. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-486685
 156. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-486685
 157. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-486995
 158. https://www.pyimagesearch.com/2018/11/12/yolo-object-detection-with-opencv/
 159. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-486995
 160. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-489234
 161. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-489234
 162. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-489238
 163. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-489238
 164. http://illinois.edu/
 165. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-494183
 166. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-494183
 167. http://this-mysterious-world.blogspot.com/
 168. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-489838
 169. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-489838
 170. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-489986
 171. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#comment-489986
 172. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#respond
 173. https://app.monstercampaigns.com/c/mdoijtrmex7bpm0rp2hn/
 174. https://app.monstercampaigns.com/c/mdoijtrmex7bpm0rp2hn/
 175. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 176. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 177. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection
 178. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection
 179. http://www.idmypill.com/
 180. http://www.chicengine.com/
 181. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend
 182. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend
 183. http://feeds.feedburner.com/pyimagesearch
 184. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/#tab-pop
 185. https://www.pyimagesearch.com/2017/09/04/raspbian-stretch-install-opencv-3-python-on-your-raspberry-pi/
 186. https://www.pyimagesearch.com/2016/04/18/install-guide-raspberry-pi-3-raspbian-jessie-opencv-3/
 187. https://www.pyimagesearch.com/2015/06/01/home-surveillance-and-motion-detection-with-the-raspberry-pi-python-and-opencv/
 188. https://www.pyimagesearch.com/2015/02/23/install-opencv-and-python-on-your-raspberry-pi-2-and-b/
 189. https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/
 190. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/
 191. https://www.pyimagesearch.com/2015/05/25/basic-motion-detection-and-tracking-with-python-and-opencv/
 192. https://twitter.com/pyimagesearch
 193. https://www.facebook.com/pyimagesearch
 194. http://www.linkedin.com/pub/adrian-rosebrock/2a/873/59b
