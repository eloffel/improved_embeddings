   #[1]github [2]recent commits to lang-emerge-parlai:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]4
     * [35]star [36]98
     * [37]fork [38]7

[39]kdexd/[40]lang-emerge-parlai

   [41]code [42]issues 0 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   implementation of emnlp 2017 paper "natural language does not emerge
   'naturally' in multi-agent dialog" using pytorch and parlai
   [47]pytorch [48]parlai [49]emnlp [50]language-grounding
   [51]reinforcement-learning
     * [52]30 commits
     * [53]1 branch
     * [54]1 release
     * [55]fetching contributors

    1. [56]python 100.0%

   (button) python
   branch: master (button) new pull request
   [57]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/k
   [58]download zip

downloading...

   want to be notified of new releases in kdexd/lang-emerge-parlai?
   [59]sign in [60]sign up

launching github desktop...

   if nothing happens, [61]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [62]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [63]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [64]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [65]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [66]data
   [67].gitignore [68]save world checkpoints at specified epoch intervals.
   nov 6, 2017
   [69]readme.md
   [70]bots.py
   [71]dataloader.py
   [72]evaluate.py
   [73]options.py [74]make minor changes in names of policy networks of
   bots. nov 10, 2017
   [75]train.py
   [76]world.py

readme.md

language emergence in multi agent dialog

   code for the paper

   [77]natural language does not emerge 'naturally' in multi-agent dialog
   satwik kottur, jos   m. f. moura, stefan lee, dhruv batra [78]emnlp 2017
   (best short paper)

   if you find this code useful, please consider citing the original work
   by authors:
@inproceedings{visdial,
  title = {{n}atural {l}anguage {d}oes {n}ot {e}merge '{n}aturally' in {m}ulti-{
a}gent {d}ialog},
  author = {satwik kottur and jos\'e m.f. moura and stefan lee and dhruv batra},
  journal = {corr},
  volume = {abs/1706.08502},
  year = {2017}
}

introduction

   this paper focuses on proving that the emergence of language by
   agent-dialogs is not necessarily compositional and human interpretable.
   to demonstrate this fact, the paper uses a image guessing game "task
   and talk" as a testbed. the game comprises of two bots, a questioner
   and answerer.

   answerer has an image attributes, as shown in figure. questioner cannot
   see the image, and has a task of finding two attributes of the image
   (color, shape, style). answerer does not know the task. multiple rounds
   of q/a dialogs occur, after which the questioner has to guess the
   attributes. reward to both bots is given on basis of prediction of
   questioner.

   [79]task and talk

   further, the paper discusses the ways to make the grounded language
   more compositional and human interpretable by restrictions on how two
   agents may communicate.

setup

   this repository is only compatible with python3, as parlai imposes this
   restriction; it requires python3.
    1. follow instructions under installing parlai section from [80]parlai
       site.
    2. follow instructions outlined on [81]pytorch homepage for installing
       pytorch (python3).
    3. [82]tqdm is used for providing progress bars, which can be
       downloaded via pip3.

dataset generation

   described in section 2 and figure 1 of paper. synthetic dataset of
   shape attributes is generated using data/generate_data.py script. to
   generate the dataset, simply execute:
cd data
python3 generate_data.py
cd ..

   this will create data/synthetic_dataset.json, with 80% training data
   (312 samples) and rest validation data (72 samples). save path, size of
   dataset and split ratio can be changed through command line. for more
   information:
python3 generate_data.py --help

dataset schema

{
    "attributes": ["color", "shape", "style"],
    "properties": {
        "color": ["red", "green", "blue", "purple"],
        "shape": ["square", "triangle", "circle", "star"],
        "style": ["dotted", "solid", "filled", "dashed"]
    },
    "split_data": {
        "train": [ ["red", "square", "solid"], ["color2", "shape2", "style2"] ],
        "val": [ ["green", "star", "dashed"], ["color2", "shape2", "style2"] ]
    },
    "task_defn": [ [0, 1], [1, 0], [0, 2], [2, 0], [1, 2], [2, 1] ]
}

   a custom pytorch dataset class is written in dataloader.py which
   ingests this dataset and provides random batch / complete data while
   training and validation.

training

   training happens through train.py, which iteratively carries out
   multiple rounds of dialog in each episode, between our parlai agents -
   qbot and abot, both placed in a parlai world. the dialog is completely
   cooperative - both bots receive same reward after each episode.

   this script prints the cumulative reward, training accuracy and
   validation accuracy after fixed number of iterations. world checkpoints
   are saved after regular intervals as well.

   training is controlled by various options, which can be passed through
   command line. all of them have suitable default values set in
   options.py, although they can be tinkered easily. they can also be
   viewed as:
python3 train.py --help   # view command line args (you need not change "main pa
rlai arguments")

   questioner and answerer bot classes are defined in bots.py and world is
   defined in world.py. paper describes three configurations for training:

overcomplete vocabulary

   described in section 4.1 of paper. both qbot and abot will have
   vocabulary size equal to number of possible objects (64).
python3 train.py --data-path /path/to/json --q-out-vocab 64 --a-out-vocab 64

attribute-value vocabulary

   described in section 4.2 of paper. both qbot will have vocab size 3
   (color, shape, style) and abot will have vocabulary size equal to
   number of possible attribute values (4 * 3).
python3 train.py --data-path /path/to/json --q-out-vocab 3 --a-out-vocab 12

memoryless abot, minimal vocabulary (best)

   described in section 4.3 of paper. both qbot will have vocab size 3
   (color, shape, style) and abot will have vocabulary size equal to
   number of possible values per attribute (4).
python3 train.py --q-out-vocab 3 --a-out-vocab 4 --data-path /path/to/json --mem
oryless-abot

   checkpoints would be saved by default in checkpoints directory every
   100 epochs. be default, cpu is used for training. include --use-gpu in
   command-line to train using gpu.

   refer script docstring and inline comments in train.py for
   understanding of execution.

evaluation

   saved world checkpoints can be evaluated using the evaluate.py script.
   besides evaluation, the dialog between qbot and abot for all examples
   can be saved in json format. for evaluation:
python3 evaluate.py --load-path /path/to/pth/checkpoint

   save the conversation of bots by providing --save-conv-path argument.
   for more information:
python3 evaluate.py --help

   evaluation script reports training and validation accuracies of the
   world. separate accuracies for first attribute match, second attribute
   match, both match and atleast one match are reported.

sample conversation

im: ['purple', 'triangle', 'filled'] -  task: ['shape', 'color']
    q1: x    a1: 2
    q2: y    a2: 0
    gt: ['triangle', 'purple']  pred: ['triangle', 'purple']

pretrained world checkpoint

   best performing world checkpoint has been released [83]here, along with
   details to reconstruct the world object using this checkpoint.

   reported metrics:
overall accuracy [train]: 96.47 (first: 97.76, second: 98.72, atleast_one: 100.0
0)
overall accuracy [val]: 98.61 (first: 98.61, second: 100.00, atleast_one: 100.00
)

   todo: visualizing evolution chart - showing emergence of grounded
   language.

references

    1. satwik kottur, jos   m.f.moura, stefan lee, dhruv batra. natural
       language does not emerge naturally in multi-agent dialog. emnlp
       2017. [[84]arxiv]
    2. alexander h. miller, will feng, adam fisch, jiasen lu, dhruv batra,
       antoine bordes, devi parikh, jason weston. parlai: a dialog
       research software platform. 2017. [[85]arxiv]
    3. abhishek das, satwik kottur, khushi gupta, avi singh, deshraj
       yadav, jos   m.f. moura, devi parikh and dhruv batra. visual dialog.
       cvpr 2017. [[86]arxiv]
    4. abhishek das, satwik kottur, jos   m.f. moura, stefan lee, and dhruv
       batra. learning cooperative visual dialog agents with deep
       id23. iccv 2017. [[87]arxiv]
    5. parlai docs. [[88]http://parl.ai/static/docs/index.html]
    6. pytorch docs. [[89]http://pytorch.org/docs/master]

standing on the shoulders of giants

   the ease of implementing this paper using parlai framework is heavy
   accredited to the original source code released by authors of this
   paper. [[90]batra-mlp-lab/lang-emerge]

license

   bsd

     *    2019 github, inc.
     * [91]terms
     * [92]privacy
     * [93]security
     * [94]status
     * [95]help

     * [96]contact github
     * [97]pricing
     * [98]api
     * [99]training
     * [100]blog
     * [101]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [102]reload to refresh your
   session. you signed out in another tab or window. [103]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/kdexd/lang-emerge-parlai/commits/master.atom
   3. https://github.com/kdexd/lang-emerge-parlai#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/kdexd/lang-emerge-parlai
  32. https://github.com/join
  33. https://github.com/login?return_to=/kdexd/lang-emerge-parlai
  34. https://github.com/kdexd/lang-emerge-parlai/watchers
  35. https://github.com/login?return_to=/kdexd/lang-emerge-parlai
  36. https://github.com/kdexd/lang-emerge-parlai/stargazers
  37. https://github.com/login?return_to=/kdexd/lang-emerge-parlai
  38. https://github.com/kdexd/lang-emerge-parlai/network/members
  39. https://github.com/kdexd
  40. https://github.com/kdexd/lang-emerge-parlai
  41. https://github.com/kdexd/lang-emerge-parlai
  42. https://github.com/kdexd/lang-emerge-parlai/issues
  43. https://github.com/kdexd/lang-emerge-parlai/pulls
  44. https://github.com/kdexd/lang-emerge-parlai/projects
  45. https://github.com/kdexd/lang-emerge-parlai/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/topics/pytorch
  48. https://github.com/topics/parlai
  49. https://github.com/topics/emnlp
  50. https://github.com/topics/language-grounding
  51. https://github.com/topics/reinforcement-learning
  52. https://github.com/kdexd/lang-emerge-parlai/commits/master
  53. https://github.com/kdexd/lang-emerge-parlai/branches
  54. https://github.com/kdexd/lang-emerge-parlai/releases
  55. https://github.com/kdexd/lang-emerge-parlai/graphs/contributors
  56. https://github.com/kdexd/lang-emerge-parlai/search?l=python
  57. https://github.com/kdexd/lang-emerge-parlai/find/master
  58. https://github.com/kdexd/lang-emerge-parlai/archive/master.zip
  59. https://github.com/login?return_to=https://github.com/kdexd/lang-emerge-parlai
  60. https://github.com/join?return_to=/kdexd/lang-emerge-parlai
  61. https://desktop.github.com/
  62. https://desktop.github.com/
  63. https://developer.apple.com/xcode/
  64. https://visualstudio.github.com/
  65. https://github.com/kdexd/lang-emerge-parlai/tree/e1ce860c4f7c98a7f4cf6e1273f102f32af408e3
  66. https://github.com/kdexd/lang-emerge-parlai/tree/master/data
  67. https://github.com/kdexd/lang-emerge-parlai/blob/master/.gitignore
  68. https://github.com/kdexd/lang-emerge-parlai/commit/d953d15c7742aaeb02ca0ca5c76eb4fe18c12c47
  69. https://github.com/kdexd/lang-emerge-parlai/blob/master/readme.md
  70. https://github.com/kdexd/lang-emerge-parlai/blob/master/bots.py
  71. https://github.com/kdexd/lang-emerge-parlai/blob/master/dataloader.py
  72. https://github.com/kdexd/lang-emerge-parlai/blob/master/evaluate.py
  73. https://github.com/kdexd/lang-emerge-parlai/blob/master/options.py
  74. https://github.com/kdexd/lang-emerge-parlai/commit/bd6b94daa09d523c6d3d270acc084dd8ca965ce2
  75. https://github.com/kdexd/lang-emerge-parlai/blob/master/train.py
  76. https://github.com/kdexd/lang-emerge-parlai/blob/master/world.py
  77. https://arxiv.org/abs/1706.08502
  78. https://www.facebook.com/emnlp2017/posts/1935449656693734
  79. https://camo.githubusercontent.com/f4f2c5db2698b7a73dfd3528be8d73d54fc6dbf6/68747470733a2f2f692e696d6775722e636f6d2f3959434d3347702e706e67
  80. https://parl.ai/about
  81. https://pytorch.org/
  82. https://pypi.python.org/pypi/tqdm
  83. https://github.com/karandesai-96/lang-emerge-parlai/releases/tag/v1.0
  84. https://arxiv.org/abs/1706.08502
  85. https://arxiv.org/abs/1705.06476
  86. https://arxiv.org/abs/1611.08669
  87. https://arxiv.org/abs/1703.06585
  88. http://parl.ai/static/docs/index.html
  89. http://pytorch.org/docs/master
  90. https://www.github.com/batra-mlp-lab/lang-emerge
  91. https://github.com/site/terms
  92. https://github.com/site/privacy
  93. https://github.com/security
  94. https://githubstatus.com/
  95. https://help.github.com/
  96. https://github.com/contact
  97. https://github.com/pricing
  98. https://developer.github.com/
  99. https://training.github.com/
 100. https://github.blog/
 101. https://github.com/about
 102. https://github.com/kdexd/lang-emerge-parlai
 103. https://github.com/kdexd/lang-emerge-parlai

   hidden links:
 105. https://github.com/
 106. https://github.com/kdexd/lang-emerge-parlai
 107. https://github.com/kdexd/lang-emerge-parlai
 108. https://github.com/kdexd/lang-emerge-parlai
 109. https://help.github.com/articles/which-remote-url-should-i-use
 110. https://github.com/kdexd/lang-emerge-parlai#language-emergence-in-multi-agent-dialog
 111. https://github.com/kdexd/lang-emerge-parlai#introduction
 112. https://github.com/kdexd/lang-emerge-parlai#setup
 113. https://github.com/kdexd/lang-emerge-parlai#dataset-generation
 114. https://github.com/kdexd/lang-emerge-parlai#dataset-schema
 115. https://github.com/kdexd/lang-emerge-parlai#training
 116. https://github.com/kdexd/lang-emerge-parlai#overcomplete-vocabulary
 117. https://github.com/kdexd/lang-emerge-parlai#attribute-value-vocabulary
 118. https://github.com/kdexd/lang-emerge-parlai#memoryless-abot-minimal-vocabulary-best
 119. https://github.com/kdexd/lang-emerge-parlai#evaluation
 120. https://github.com/kdexd/lang-emerge-parlai#sample-conversation
 121. https://github.com/kdexd/lang-emerge-parlai#pretrained-world-checkpoint
 122. https://github.com/kdexd/lang-emerge-parlai#references
 123. https://github.com/kdexd/lang-emerge-parlai#standing-on-the-shoulders-of-giants
 124. https://github.com/kdexd/lang-emerge-parlai#license
 125. https://github.com/
