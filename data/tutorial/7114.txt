   #[1]github [2]recent commits to pynlp:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]6
     * [35]star [36]104
     * [37]fork [38]7

[39]sina-al/[40]pynlp

   [41]code [42]issues 6 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   a pythonic wrapper for stanford corenlp.
   [47]nlp [48]natural-language-processing [49]core-nlp [50]corenlp
   [51]stanford [52]stanford-corenlp [53]wrapper [54]sentiment-analysis
   [55]coreference-resolution [56]parser [57]dependency-parser
   [58]lemmatizer [59]tokenize [60]ssplit [61]part-of-speech-tagger
   [62]named-entity-recognition
     * [63]71 commits
     * [64]2 branches
     * [65]0 releases
     * [66]fetching contributors
     * [67]mit

    1. [68]python 100.0%

   (button) python
   branch: master (button) new pull request
   [69]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/s
   [70]download zip

downloading...

   want to be notified of new releases in sina-al/pynlp?
   [71]sign in [72]sign up

launching github desktop...

   if nothing happens, [73]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [74]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [75]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [76]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [77]permalink
   type       name      latest commit message commit time
        failed to load latest commit information.
        [78]pynlp
        [79]test
        [80].gitignore
        [81].travis.yml
        [82]license.txt
        [83]readme.md
        [84]setup.id18
        [85]setup.py

readme.md

pynlp

   [86]build status [87]pypi version

   a pythonic wrapper for stanford corenlp.

   [88][68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f6c3251
              444e764f6e494b364832435267592f67697068792e676966]

description

   this library provides a python interface to [89]stanford corenlp built
   over [90]corenlp_protobuf.

installation

    1. download stanford corenlp from the official [91]download page.
    2. unzip the file and set your core_nlp environment variable to point
       to the directory.
    3. install pynlp from pip

pip3 install pynlp

quick start

launch the server

   lauch the stanfordcorenlpserver using the instruction given [92]here.
   alternatively, simply run the module.
python3 -m pynlp

   by default, this lauches the server on localhost using port 9000 and
   4gb ram for the jvm. use the --help option for instruction on custom
   configurations.

example

   let's start off with an excerpt from a id98 article.
text = ('gop sen. rand paul was assaulted in his home in bowling green, kentucky
, on friday, '
        'according to kentucky state police. state troopers responded to a call
to the senator\'s '
        'residence at 3:21 p.m. friday. police arrested a man named rene albert
boucher, who they '
        'allege "intentionally assaulted" paul, causing him "minor injury". bouc
her, 59, of bowling '
        'green was charged with one count of fourth-degree assault. as of saturd
ay afternoon, he '
        'was being held in the warren county regional jail on a $5,000 bond.')

instantiate annotator

   here we demonstrate the following annotators:
     * annotoators: tokenize, ssplit, pos, lemma, ner, entitymentions,
       coref, sentiment, quote, openie
     * options: openie.resolve_coref

from pynlp import stanfordcorenlp

annotators = 'tokenize, ssplit, pos, lemma, ner, entitymentions, coref, sentimen
t, quote, openie'
options = {'openie.resolve_coref': true}

nlp = stanfordcorenlp(annotators=annotators, options=options)

annotate text

   the nlp instance is callable. use it to annotate the text and return a
   document object.
document = nlp(text)

print(document) # prints 'text'

sentence splitting

   let's test the ssplit annotator. a document object iterates over its
   sentence objects.
for index, sentence in enumerate(document):
    print(index, sentence, sep=' )')

   output:
0) gop sen. rand paul was assaulted in his home in bowling green, kentucky, on f
riday, according to kentucky state police.
1) state troopers responded to a call to the senator's residence at 3:21 p.m. fr
iday.
2) police arrested a man named rene albert boucher, who they allege "intentional
ly assaulted" paul, causing him "minor injury".
3) boucher, 59, of bowling green was charged with one count of fourth-degree ass
ault.
4) as of saturday afternoon, he was being held in the warren county regional jai
l on a $5,000 bond.

id39

   how about finding all the people mentioned in the document?
[str(entity) for entity in document.entities if entity.type == 'person']

   output:
out[2]: ['rand paul', 'rene albert boucher', 'paul', 'boucher']

   we may use named entities on a sentence level too.
first_sentence = document[0]
for entity in first_sentence.entities:
    print(entity, '({})'.format(entity.type))

   output:
gop (organization)
rand paul (person)
bowling green (location)
kentucky (location)
friday (date)
kentucky state police (organization)

part-of-speech tagging

   let's find all the 'vb' tags in the first sentence. a sentence object
   iterates over token objects.
for token in first_sentence:
    if 'vb' in token.pos:
        print(token, token.pos)

   output:
was vbd
assaulted vbn
according vbg

lemmatization

   using the same words, lets see the lemmas.
for token in first_sentence:
    if 'vb' in token.pos:
       print(token, '->', token.lemma)

   output:
was -> be
assaulted -> assault
according -> accord

coreference resultion

   let's use pynlp to find the first corefchain in the text.
chain = document.coref_chains[0]
print(chain)

   output:
((gop sen. rand paul))-[id=4] was assaulted in (his)-[id=5] home in bowling gree
n, kentucky, on friday, according to kentucky state police.
state troopers responded to a call to (the senator's)-[id=10] residence at 3:21
p.m. friday.
police arrested a man named rene albert boucher, who they allege "(intentionally
 assaulted" paul)-[id=16], causing him "minor injury.

   in the string representation, coreferences are marked with parenthesis
   and the referent with double parenthesis. each is also labelled with a
   coref_id. let's have a closer look at the referent.
ref = chain.referent
print('coreference: {}\n'.format(ref))

for attr in 'type', 'number', 'animacy', 'gender':
    print(attr,  getattr(ref, attr), sep=': ')

# note that we can also index coreferences by id
assert chain[4].is_referent

   output:
coreference: police

type: proper
number: singular
animacy: animate
gender: unknown

quotes

   extracting quotes from the text is simple.
print(document.quotes)

   output:
[<quote: "intentionally assaulted">, <quote: "minor injury">]

todo (annotation wrappers):

     * [x] ssplit
     * [ ] ner
     * [x] pos
     * [x] lemma
     * [x] coref
     * [x] quote
     * [ ] quote.attribution
     * [ ] parse
     * [ ] depparse
     * [x] entitymentions
     * [ ] openie
     * [ ] sentiment
     * [ ] relation
     * [ ] kbp
     * [ ] entitylink
     * [ ] 'options' examples i.e openie.resolve_coref

saving annotations

write

   a pynlp document can be saved as a byte string.
with open('annotation.dat', 'wb') as file:
    file.write(document.to_bytes())

read

   to load a pynlp document, instantiate a document with the from_bytes
   class method.
from pynlp import document

with open('annotation.dat', 'rb') as file:
    document = document.from_bytes(file.read())

     *    2019 github, inc.
     * [93]terms
     * [94]privacy
     * [95]security
     * [96]status
     * [97]help

     * [98]contact github
     * [99]pricing
     * [100]api
     * [101]training
     * [102]blog
     * [103]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [104]reload to refresh your
   session. you signed out in another tab or window. [105]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/sina-al/pynlp/commits/master.atom
   3. https://github.com/sina-al/pynlp#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/sina-al/pynlp
  32. https://github.com/join
  33. https://github.com/login?return_to=/sina-al/pynlp
  34. https://github.com/sina-al/pynlp/watchers
  35. https://github.com/login?return_to=/sina-al/pynlp
  36. https://github.com/sina-al/pynlp/stargazers
  37. https://github.com/login?return_to=/sina-al/pynlp
  38. https://github.com/sina-al/pynlp/network/members
  39. https://github.com/sina-al
  40. https://github.com/sina-al/pynlp
  41. https://github.com/sina-al/pynlp
  42. https://github.com/sina-al/pynlp/issues
  43. https://github.com/sina-al/pynlp/pulls
  44. https://github.com/sina-al/pynlp/projects
  45. https://github.com/sina-al/pynlp/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/topics/nlp
  48. https://github.com/topics/natural-language-processing
  49. https://github.com/topics/core-nlp
  50. https://github.com/topics/corenlp
  51. https://github.com/topics/stanford
  52. https://github.com/topics/stanford-corenlp
  53. https://github.com/topics/wrapper
  54. https://github.com/topics/sentiment-analysis
  55. https://github.com/topics/coreference-resolution
  56. https://github.com/topics/parser
  57. https://github.com/topics/dependency-parser
  58. https://github.com/topics/lemmatizer
  59. https://github.com/topics/tokenize
  60. https://github.com/topics/ssplit
  61. https://github.com/topics/part-of-speech-tagger
  62. https://github.com/topics/named-entity-recognition
  63. https://github.com/sina-al/pynlp/commits/master
  64. https://github.com/sina-al/pynlp/branches
  65. https://github.com/sina-al/pynlp/releases
  66. https://github.com/sina-al/pynlp/graphs/contributors
  67. https://github.com/sina-al/pynlp/blob/master/license.txt
  68. https://github.com/sina-al/pynlp/search?l=python
  69. https://github.com/sina-al/pynlp/find/master
  70. https://github.com/sina-al/pynlp/archive/master.zip
  71. https://github.com/login?return_to=https://github.com/sina-al/pynlp
  72. https://github.com/join?return_to=/sina-al/pynlp
  73. https://desktop.github.com/
  74. https://desktop.github.com/
  75. https://developer.apple.com/xcode/
  76. https://visualstudio.github.com/
  77. https://github.com/sina-al/pynlp/tree/93401429b6781d4e56985972b09fdd5622c0e8cb
  78. https://github.com/sina-al/pynlp/tree/master/pynlp
  79. https://github.com/sina-al/pynlp/tree/master/test
  80. https://github.com/sina-al/pynlp/blob/master/.gitignore
  81. https://github.com/sina-al/pynlp/blob/master/.travis.yml
  82. https://github.com/sina-al/pynlp/blob/master/license.txt
  83. https://github.com/sina-al/pynlp/blob/master/readme.md
  84. https://github.com/sina-al/pynlp/blob/master/setup.id18
  85. https://github.com/sina-al/pynlp/blob/master/setup.py
  86. https://travis-ci.org/sina-al/pynlp
  87. https://badge.fury.io/py/pynlp
  88. https://camo.githubusercontent.com/cb7213309b38d7c3b4f07310b46e0a4e671c60e2/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f6c3251444e764f6e494b364832435267592f67697068792e676966
  89. https://stanfordnlp.github.io/corenlp/
  90. https://github.com/stanfordnlp/python-corenlp-protobuf
  91. https://stanfordnlp.github.io/corenlp/download.html
  92. https://stanfordnlp.github.io/corenlp/corenlp-server.html
  93. https://github.com/site/terms
  94. https://github.com/site/privacy
  95. https://github.com/security
  96. https://githubstatus.com/
  97. https://help.github.com/
  98. https://github.com/contact
  99. https://github.com/pricing
 100. https://developer.github.com/
 101. https://training.github.com/
 102. https://github.blog/
 103. https://github.com/about
 104. https://github.com/sina-al/pynlp
 105. https://github.com/sina-al/pynlp

   hidden links:
 107. https://github.com/
 108. https://github.com/sina-al/pynlp
 109. https://github.com/sina-al/pynlp
 110. https://github.com/sina-al/pynlp
 111. https://help.github.com/articles/which-remote-url-should-i-use
 112. https://github.com/sina-al/pynlp#pynlp
 113. https://github.com/sina-al/pynlp#description
 114. https://github.com/sina-al/pynlp#installation
 115. https://github.com/sina-al/pynlp#quick-start
 116. https://github.com/sina-al/pynlp#launch-the-server
 117. https://github.com/sina-al/pynlp#example
 118. https://github.com/sina-al/pynlp#instantiate-annotator
 119. https://github.com/sina-al/pynlp#annotate-text
 120. https://github.com/sina-al/pynlp#sentence-splitting
 121. https://github.com/sina-al/pynlp#named-entity-recognition
 122. https://github.com/sina-al/pynlp#part-of-speech-tagging
 123. https://github.com/sina-al/pynlp#lemmatization
 124. https://github.com/sina-al/pynlp#coreference-resultion
 125. https://github.com/sina-al/pynlp#quotes
 126. https://github.com/sina-al/pynlp#todo-annotation-wrappers
 127. https://github.com/sina-al/pynlp#saving-annotations
 128. https://github.com/sina-al/pynlp#write
 129. https://github.com/sina-al/pynlp#read
 130. https://github.com/
