   #[1]machine learning with chris

   [tr?id=267215900457044&ev=pageview&noscript=1]

   (button) toggle navigation [2]machine learning with chris
     * [3]home
     * [4]about
     * [5]contact

starcraft ii rl tutorial 2

deepmind's pysc2: observations

   posted by chris hoyean song on november 6, 2017

   hello- this is chris. from november 3rd to 4th, i had attended deepmind
   & blizzard   s ai workshop in anaheim. this article has written in the
   workshop session.

   on this article, i   m not going to cover the id23
   directly. i   m going to share you about the pysc starcraft ii learning
   environment variables. if you are interested in deepmind   s starcraft ii
   id23 environment, you need to understand pysc2   s
   environment variables first. it   s quite complex.

   don   t worry. i   m here for you. let   s first understand the observation
   variables of the pysc2.

prerequisites

     * intellij ( or pycharm)
     * python3
     * starcraft ii
     * git
     * the tutorial is on mac environment.

tutorial outline

     * starcraft ii observation space
     * pysc2-examples star & fork
     * pysc2-examples git clone
     * run pysc2 application in debug mode to check out observation
       variables.

   on this posting, i   ll cover just one subject. starcraft ii
   id23 consists of observations and actions.
   observation is the variable that illustrates the current state of
   starcraft ii. the action is the command that can give some orders.

   on this posting, we will cover observation features.

observation

   observation space contains many different state information about the
   game environment. for example, it includes unit locations and unit
   health values and mineral locations.

   of course, there was some observation space in atari games. in atari
   games, the primary observation spaces are rgb pixels of the game. if
   you see the rgb pixels in tensors, you   ll find it quite complicated.
   however, starcraft ii learning environment offers you even complicated
   information that cannot be compared with atari games.

spatial/visual information

rgb pixels

   currently, pysc2 does not support rgb pixels.

feature layers

   starcraft ii pysc2 learning environment does not directly deliver rgb
   pixels; they provide the information with high-level features.
   high-level features are beneficial when it comes to reinforcement
   learning since you can skip implementing convolution neural network to
   figure out the features out of the rgb pixels. it helps us to reduce a
   lot of computations. if they only provided the rgb pixels, then we
   could not find our unit locations easily.

   currently, they provide observation space with 20 number of feature
   layers.

minimap

   pysc2 is providing minimap information into several feature layers.

   height_map : show the terrain levels.

   visibility : it shows which part of the map is hidden, have been seen,
   or currently visible.

   creep : it show which part of the minimap is covered by creeps.

   camera : it shows which part of the minimap are visible in the screen
   layers.

   player_id : it shows which units are

   player_relative : it illustrates which units are friendly, neutral,
   hostile. 0 means background, 1 is self, 2 is ally, 3 is neutral, 4 is
   hostile.

   selected : it contains currently selected units. if some units are
   selected, then the value of that pixel should be 1.

screen

   screen layer provides higher resolution information on the current
   screen.

   height_map : show the terrain levels.

   visibility : it shows which part of the map is hidden, have been seen,
   or currently visible.

   creep : it show which part of the minimap is covered by creeps.

   power : which parts have protoss power, only shows your power.

   player_id : who owns the units, with absolute ids.

   player_relative : which units are friendly vs hostile. takes values in
   [0, 4], denoting [background, self, ally, neutral, enemy] units
   respectively.

   unit_type : a unit type id

   selected : which units are selected.

   hit_points : how many hit points the unit has.

   energy : how much energy the unit has.

   shields : how much shields the unit has. only for protoss units.

   unit_density : how many units are in this pixel.

   unit_density_aa : an anti-aliased version of unit_density with a
   maximum of 16 per unit per pixel. this gives you sub-pixel unit
   location and size.

   you can check out detailed observation features on this github page.

   https://github.com/deepmind/pysc2/blob/master/docs/environment.md

practice

   i think you are not getting it with those documents. so, i prepared a
   simple practice to understand the internal observation data structures.

1. pysc2-examples star & fork

   first of all, let   s go to the pysc2-examples github repo.

   https://github.com/chris-chris/pysc2-examples

   star it! :)

   alt text

   fork it! :)

   alt text

2. pysc2-examples git clone or git pull

   please clone my github project or update the project using git pull :)

   git clone https://github.com/chris-chris/pysc2-examples

   if you already cloned it, please type git pull to update it to the
   latest code.

   git pull

3. check out the observation feature values using debug mode

   as we covered in tutorial 1, we are going to check the observations
   values using intellij(or pycharm) with debug mode.

   let   s open the project with intellij, and open the file
   tests/scripted_test.py

   alt text

   after opening scripted_test.py, click the area left to the line 39
   below # break point!! comment.

   alt text

   if you click that red box right after the line 39, you will see the red
   circle appear.

   alt text

   okay, we are now ready to see the internal feature data using debug
   mode.

   right-click the scripted_test.py file and click [debug 'unittests in
   scripte...]

   alt text

   yes! starcraft ii executed!

   after waiting a moment, you will see that the starcraft ii is stopped
   as soon as it started. this is because of the break point we set.

   alt text

   then we can freely check out the observation feature values. let check
   it out on the debug console below.

   alt text

   first, let   s check out the screen field of the feature layers. inside
   the screen feature layer, we   ll check the player_relative layer which
   tells us the hostile, friendly, neutral unit locations.

   using the debug mode, you can check out the internal values by clicking
   the triangle like below. let   s click the triangle on the left side of
   obs variable.

   alt text

   again, let   s get into deeper. click the triangle on the left side of 0
   and observation. okay, then we are in this state.

   alt text

   obs[0].observation

   and then, let   s click the triangle on the left side of the screen and
   [0:13]. alright, we are at this stage.

   alt text

   obs[0].observation["screen"]

   currently, we have 13 number of screen feature layers. among the 13
   screen feature layers, we are going to access the 6th layer which is
   the player_relative layer. the index of the player_relative layer is 5.
   so, let   s dig down into the player_relative layer by clicking the
   triangle. also, let   s click triangle of [0:64].

   alt text

   player_relative : which units are friendly vs hostile. takes values in
   [0, 4], denoting [background, self, ally, neutral, enemy] units
   respectively.

   obs[0].observation["screen"][5]

   finally, we got the feature layer what i want to show you. you can
   check out the marines inside of 64 x 64 layer.

   alt text

   also, you can see the hostile enemies marked as four on the right side.

   the essence of today   s tutorial is clear.

tip: use debug mode to understand the observation variables.

   okay, guys. you did a good job. on the next tutorial, i   ll cover the
   action spaces of the pysc2 environment.
     __________________________________________________________________

     * [6]    previous post
     * [7]next post    
     __________________________________________________________________

     *
     *
     *
     *
     *

   copyright    chris hoyean song 2019

references

   visible links
   1. http://chris-chris.ai/http://chris-chris.ai/feed.xml
   2. http://chris-chris.ai/
   3. http://chris-chris.ai/
   4. http://chris-chris.ai/about/
   5. http://chris-chris.ai/contact/
   6. http://chris-chris.ai/2017/10/10/lstm-layernorm-breakdown-eng/
   7. http://chris-chris.ai/2017/11/26/conv-in-numpy/

   hidden links:
   9. http://chris-chris.ai/feed.xml
  10. https://twitter.com/chrislovesai
  11. https://www.facebook.com/ai.chris.chris
  12. https://github.com/chris-chris
  13. mailto:sjhshy@gmail.com
