contents

1 markov chains

2
3
1.1 stationary distribution . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4
1.2 electrical networks and id93 . . . . . . . . . . . . . . . . . . . .
8
1.3 id93 on undirected graphs . . . . . . . . . . . . . . . . . . . . .
1.4 id93 in euclidean space . . . . . . . . . . . . . . . . . . . . . . 15
1.5 id93 on directed graphs . . . . . . . . . . . . . . . . . . . . . . 18
1.6 finite markov processes . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
1.7 id115 . . . . . . . . . . . . . . . . . . . . . . . . . . 23
1.7.1 time reversibility . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
1.7.2 metropolis-hasting algorithm . . . . . . . . . . . . . . . . . . . . . 25
1.7.3 id150 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
1.8 convergence to steady state . . . . . . . . . . . . . . . . . . . . . . . . . . 27
1.8.1 using minimum escape id203 to prove convergence . . . . . 33
1.9 bibliographic notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
1.10 exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36

1

1 markov chains

the study of markov chains is a classical subject with many applications such as
id115 techniques for integrating multivariate id203 distribu-
tions over complex volumes. an important recent application is in de   ning the id95
of pages on the world wide web by their stationary probabilities.

is a id203 pxy of going from state x to state y where for each x, (cid:80)

a markov chain has a    nite set of states. for each pair x and y of states, there
y pxy = 1. a
random walk in the markov chain consists of a sequence of states starting at some state
x0. in state x, the next state y is selected randomly with id203 pxy. the starting
id203 distribution puts a mass of one on the start state x0 and zero on every other
state. more generally, one could start with any id203 distribution p, where p is a
row vector with non-negative components summing to one, with pi being the id203
of starting in state i. the id203 of being at state j at time t + 1 is the sum over
each state i of being at i at time t and taking the transition from i to j. let p(t) be a
row vector with a component for each state specifying the id203 mass of the state at
time t and let p(t+1) be the row vector of probabilities at time t + 1. in matrix notation

p(t)p = p(t+1).

many real-world situations can be modeled as markov chains. at any time, the only
information about the chain is the current state, not how the chain got there. at the
next unit of time the state is a random variable whose distribution depends only on the
current state. a gambler   s assets can be modeled as a markov chain where the current
state is the amount of money the gambler has on hand. the model would only be valid
if the next state does not depend on past states, only on the current one. human speech
has been modeled as a markov chain, where the state represents either the last syllable
(or the last several syllables) uttered. the reader may consult sources on markov chains
for other examples; our discussion here focuses on the theory behind them.

a markov chain can be represented by a directed graph with a vertex representing
each state and an edge labeled pij from vertex i to vertex j if pij > 0. we say that the
markov chain is strongly connected if there is a directed path from each vertex to every
other vertex. the matrix p of the pij is called the transition id203 matrix of the chain.

a fundamental property of a markov chain is that in the limit the long-term average
id203 of being in a particular state is independent of the start state or an initial
id203 distribution over states provided that the directed graph is strongly connected.
this is the fundamental theorem of markov chains which we now prove.

2

1.1 stationary distribution

suppose after t steps of the random walk, the id203 distribution is p(t). de   ne

the long-term id203 distribution a(t) by

(cid:0)p(0) + p(1) +        + p(t   1)(cid:1) .

a(t) =

1
t

the next theorem proves that the long-term id203 distribution of a strongly
connected markov chain converges to a unique id203 vector. this does not mean
that the id203 distribution of the random walk converges. this would require an
additional condition called aperiodic.

theorem 1.1 (fundamental theorem of markov chains) if the markov chain is
strongly connected, there is a unique id203 vector    satisfying   p =   . moreover,
for any starting distribution, lim

t       a(t) exists and equals   .

proof:

a(t)p     a(t) =

=

=

1
t
1
t
1
t

(cid:2)p(0)p + p(1)p +        + p(t   1)p(cid:3)     1
(cid:2)p(1) + p(2) +        + p(t)(cid:3)     1
(cid:0)p(t)     p(0)(cid:1) .

t

(cid:2)p(0) + p(1) +        + p(t   1)(cid:3)

(cid:2)p(0) + p(1) +        + p(t   1)(cid:3)

t

(cid:19)

(cid:18) 1

thus, b(t) = a(t)p     a(t) satis   es |b(t)|     2
t     0, as t        . letting a be the n    (n + 1)
matrix [p     i , 1] obtained by augmenting the matrix p     i with an additional column
of ones. then a(t)a = [b(t) , 1]. the matrix a has rank n since each row sum in p is
1 and hence row sums in p     i are all 0. thus a
= 0. if the rank of a is less
than n, there is a vector w perpendicular to 1 and scalar    so that (p     i)w =   1 or
p w       1 = w. if    > 0, then for the i with maximum value of wi, wwi is a convex
combination of some wj, all at most wi minus   , a contradiction. similarly for    < 0.
so assume    = 0. for the i with maximum wi, if for some j, pij > 0, then wj = wi.
otherwise, (p w)i would be less than wi. now suppose s is the set of k with wk equal to
k wk = 0. connectedness implies that there
exist k     s, l       s with pkl > 0, which is a contradiction. so a has rank n and the n    n
submatrix b of a consisting of all its columns except the    rst is invertible. let c(t) be
obtained from b(t) by removing the    rst entry. then, a(t) = [c(t) , 1]b   1     [0 , 1]b   1.
we have the theorem with    = [0 , 1]b   1.

the maximum value.   s is not empty since(cid:80)

0

the vector    is called the stationary id203 distribution of the markov chain. the

equations   p =    expanded say that for every i,

(cid:88)

  jpji =   i.

j

3

thus, executing one step of the markov chain starting with the distribution    results
in the same distribution. of course the same conclusion holds for any number of steps.
hence the name stationary distribution, sometimes called the steady state distribution.

1.2 electrical networks and id93

in the next few sections, we study a special class of markov chains derived from electri-
cal networks. these include markov chains on undirected graphs where one of the edges
incident to the current vertex is chosen uniformly at random and the walk proceeds to
the vertex at the other end of the edge. there are nice analogies between such markov
chains and certain electrical quantities.

an electrical network is a connected, undirected graph in which each edge xy has a
resistance rxy > 0. in what follows, it is easier to deal with conductance de   ned as the
reciprocal of resistance, cxy = 1
, rather then resistance. associated with an electrical
rxy
network is a markov chain on the underlying graph de   ned by assigning a id203
pxy = cxy
to the edge (x, y) incident to a vertex, where the normalizing constant cx equals
cy
cxy. note that although cxy equals cyx, the probabilities pxy and pyx may not be equal

(cid:80)

y
due to the required id172 so that the probabilities at each vertex sum to one.
thus, the matrix p may not be symmetric. we shall soon see that there is a relationship
between current    owing in an electrical network and a random walk on the underlying
graph.

denote by p the matrix whose xyth entry pxy is the id203 of a transition from
x to y. the matrix p is called the transition id203 matrix . suppose a random walk
starts at a vertex x0. at the start, the id203 mass is one at x0 and zero at all other
vertices. at time one, for each vertex y, the id203 of being at y is the id203,
px0y, of going from x0 to y.

c where c =(cid:80)
(cid:88)

x

cy
c

cyx
cy

(cid:88)

if the underlying electrical network is connected, then the markov chain is strongly
connected and has a stationary id203 distribution. we claim that the stationary
id203 is given by fx = cx
cx. by theorem 1.1, it su   ces to check that

f p = f :

note that if each edge has resistance one, then the value of cx = (cid:80)

(f p )x =

= fx.

=

=

y

y

cxy
c

cx
c

in this case, c = (cid:80)

is the degree of x.

cx equals 2m where m is the total number of

y

cxy is dx where dx

x
edges and the stationary id203 is 1
2m (d1, d2, . . . , dn). this means that for undirected
graphs, the stationary id203 of each vertex is proportional to its degree and if the
walk starts with the stationary distribution, every edge is traversed in each direction with

4

the same id203 of

1
2m.

a random walk associated with an electrical network has the important property that
given the stationary id203 f , the id203 fxpxy of traversing the edge xy from
vertex x to vertex y is the same as the id203 fypyx of traversing the edge in the reverse
direction from vertex y to vertex x. this follows from the manner in which probabilities
were assigned and the fact that the conductance cxy equals cyx.

fxpxy =

cx
c

cxy
cx

=

cxy
c

=

cyx
c

=

cy
c

cyx
cy

= fypyx.

id94

id94 are useful in developing the relationship between electrical net-
works and id93 on undirected graphs. given an undirected graph, designate
a nonempty set of vertices as boundary vertices and the remaining vertices as interior
vertices. a harmonic function g on the vertices is one in which the value of the function
at the boundary vertices is    xed to some boundary condition and the value of g at any
interior vertex x is a weighted average of the values at all the adjacent vertices y, where
gypxy at every interior vertex x,

the weights pxy sum to one over all y. thus, if gx =(cid:80)
(cid:80)
=(cid:80)

=(cid:80)

fypyx = 1
cx

gx = fx
cx

(cid:80)

(cid:80)

= 1
cx

fy

then g is harmonic. from the fact that f p = f , it follows that the function gx = fx
cx
harmonic:

cyx
cy

is

y

y

y

gypxy.

fy

= 1
cx

y

cxy
cy

fy
cy

cxy
cx

y

y

a harmonic function on a connected graph takes on its maximum and minimum on
the boundary. suppose not. let s be the set of interior vertices at which the maximum
value is attained. since s contains no boundary vertices,   s is nonempty. connectedness
implies that there is at least one edge (x, y) with x     s and y       s. but then the value of
the function at x is the average of the value at its neighbors, all of which are less than or
equal to the value at x and the value at y is strictly less, a contradiction. the proof for
the minimum value is identical.

there is at most one harmonic function satisfying a given set of equations and bound-
ary conditions. for suppose there were two solutions f (x) and g(x). the di   erence of two
solutions is itself harmonic. since h(x) = f (x)     g(x) is harmonic and has value zero on
the boundary, by the maximum principle it has value zero everywhere. thus f (x) = g(x).

the analogy between electrical networks and id93

there are important connections between id93 on undirected graphs and
electrical networks. choose two vertices a and b. for reference purposes let the voltage

5

vb equal zero. attach a current source between a and b so that the voltage va equals
one. fixing the voltages at va and vb induces voltages at all other vertices along with a
current    ow through the edges of the network. the analogy between electrical networks
and id93 is the following. having    xed the voltages at the vertices a and b, the
voltage at an arbitrary vertex x equals the id203 of a random walk starting at x
reaching a before reaching b. if the voltage va is adjusted so that the current    owing into
vertex a is one, then the current    owing through an edge is the net frequency in which a
random walk from a to b traverses the edge.

probabilistic interpretation of voltages

before showing that the voltage at an arbitrary vertex x equals the id203 of a
random walk from x reaching a before reaching b, we    rst show that the voltages form
a harmonic function. let x and y be adjacent vertices and let ixy be the current    owing
through the edge from x to y. by ohm   s law,

ixy =

vx     vy
rxy

= (vx     vy)cxy.

by kircho      s law the currents    owing out of each vertex sum to zero.

(cid:88)

y

ixy = 0

replacing currents in the above sum by the voltage di   erence times the conductance
yields

or

observing that (cid:80)
vx = (cid:80)

y

vx

cxy =

y

y

cxy = cx and that pxy = cxy
cx

vycxy.

, yields vxcx = (cid:80)

y

vypxycx. hence,

vypxy. thus, the voltage at each vertex x is a weighted average of the volt-

y

ages at the adjacent vertices. hence the voltages are harmonic.

now let px be the id203 that a random walk starting at vertex x reaches a before
b. clearly pa = 1 and pb = 0. since va = 1 and vb = 0, it follows that pa = va and pb = vb.
furthermore, the id203 of the walk reaching a from x before reaching b is the sum
over all y adjacent to x of the id203 of the walk going from x to y and then reaching
a from y before reaching b. that is

px =

pxypy.

(cid:88)

y

6

(cid:88)
(cid:88)

y

(vx     vy)cxy = 0

(cid:88)

hence, px is the same harmonic function as the voltage function vx and v and p satisfy the
same boundary conditions (a and b form the boundary). thus, they are identical func-
tions. the id203 of a walk starting at x reaching a before reaching b is the voltage vx.

probabilistic interpretation of current

=(cid:80)

y

in a moment we will set the current into the network at a to have some value which
we will equate with one random walk. we will then show that the current ixy is the
net frequency with which a random walk from a to b goes through the edge xy before
reaching b. let ux be the expected number of visits to vertex x on a walk from a to b
before reaching b. clearly ub = 0. since every time the walk visits x, x not equal to a,
it must come to x from some vertex y, the number of visits to x before reaching b is the
sum over all y of the number of visits uy to y before reaching b times the id203 pyx
of going from y to x. thus

(cid:88)

(cid:88)

ux =

uypyx =

y

y

uy

cxpxy

cy

and hence ux
cx

uy
cy

pxy. it follows that ux
cx

is harmonic (with a and b as the boundary).

now, ub
= 0. setting the current into a to one,    xed the value of va. adjust the current
cb
into a so that va equals ua
and vx satisfy the same harmonic conditions, they
ca
are the same harmonic function. let the current into a correspond to one walk. note
that if our walk starts at a and ends at b, the expected value of the di   erence between
the number of times the walk leaves a and enters a must be one and thus the amount of
current into a corresponds to one walk.

. since ux
cx

next we need to show that the current ixy is the net frequency with which a random

walk traverses edge xy.

ixy = (vx     vy)cxy =

(cid:19)

(cid:18) ux

cx

    uy
cy

cxy = ux

cxy
cx

    uy

cxy
cy

= uxpxy     uypyx

the quantity uxpxy is the expected number of times the edge xy is traversed from x to y
and the quantity uypyx is the expected number of times the edge xy is traversed from y to
x. thus, the current ixy is the expected net number of traversals of the edge xy from x to y.

e   ective resistance and escape id203

set va = 1 and vb = 0. let ia be the current    owing into the network at vertex a and
out at vertex b. de   ne the e   ective resistance ref f between a and b to be ref f = va
and
ia
the e   ective conductance cef f to be cef f = 1
. de   ne the escape id203, pescape, to
ref f
be the id203 that a random walk starting at a reaches b before returning to a. we
now show that the escape id203 is cef f
ca

(cid:88)

.
(va     vy)cay

ia =

y

7

since va = 1,

ia =

y

(1     vy)

(cid:88)
(cid:34)(cid:88)
(cid:34)
1    (cid:88)

cay
ca

y

= ca

= ca

y

(cid:35)

cay
ca

ca

cay
ca

   (cid:88)
(cid:35)

y

vy

payvy

.

for each y adjacent to the vertex a, pay is the id203 of the walk going from vertex
a to vertex y. vy is the id203 of a walk starting at y going to a before reaching b,
payvy is the id203 of a walk starting at a returning to

as was just argued. thus,(cid:80)
a before reaching b and 1    (cid:80)

y

payvy is the id203 of a walk starting at a reaching b

before returning to a. thus ia = capescape. since va = 1 and cef f = ia
va
cef f = ia . thus cef f = capescape and hence pescape = cef f
ca

.

, it follows that

y

for a    nite graph the escape id203 will always be nonzero. now consider an
in   nite graph such as a lattice and a random walk starting at some vertex a. form a
series of    nite graphs by merging all vertices at distance d or greater from a into a single
vertex b for larger and larger values of d. the limit of pescape as d goes to in   nity is the
id203 that the random walk will never return to a. if pescape     0, then eventually
any random walk will return to a. if pescape     q where q > 0, then a fraction of the walks
never return. thus, the escape id203 terminology.

1.3 id93 on undirected graphs

we now focus our discussion on id93 on undirected graphs with uniform
edge weights. at each vertex, the random walk is equally likely to take any edge. this
corresponds to an electrical network in which all edge resistances are one. assume the
graph is connected.
if it is not, the analysis below can be applied to each connected
component separately. we consider questions such as what is the expected time for a
random walk starting at a vertex x to reach a target vertex y, what is the expected time
until the random walk returns to the vertex it started at, and what is the expected time
to reach every vertex?

hitting time

the hitting time hxy, sometimes called discovery time, is the expected time of a ran-
dom walk starting at vertex x to reach vertex y. sometimes a more general de   nition is
given where the hitting time is the expected time to reach a vertex y from a start vertex

8

selected at random from some given id203 distribution.

one interesting fact is that adding edges to a graph may either increase or decrease
hxy depending on the particular situation. an edge can shorten the distance from x to
y thereby decreasing hxy or the edge could increase the id203 of a random walk
going to some far o    portion of the graph thereby increasing hxy. another interesting
fact is that hitting time is not symmetric. the expected time to reach a vertex y from a
vertex x in an undirected graph may be radically di   erent from the time to reach x from y.

we start with two technical lemmas. the    rst lemma states that the expected time

to traverse a chain of n vertices is    (n2).

lemma 1.2 the expected time for a random walk starting at one end of a chain of n
vertices to reach the other end is    (n2).

proof: consider walking from vertex 1 to vertex n in a graph consisting of a single path
of n vertices. let hij, i < j, be the hitting time of reaching j starting from i. now h12 = 1
and

hi,i+1 = 1

2    1 + 1

2 (1 + hi   1,i + hi,i+1)

2     i     n     1.

solving for hi,i+1 yields the recurrence

hi,i+1 = 2 + hi   1,i.

solving the recurrence yields

hi,i+1 = 2i     1.
to get from 1 to n, go from 1 to 2, 2 to 3, etc. thus

h1,n =

n   1(cid:88)
n   1(cid:88)

i=1

hi,i+1 =

n   1(cid:88)
i     n   1(cid:88)

i=1

1

= 2

(2i     1)

i=1

i=1

n (n     1)

= 2
= (n     1)2 .

2

    (n     1)

the next lemma shows that the expected time spent at vertex i by a random walk

from vertex 1 to vertex n in a chain of n vertices is 2(i     1) for 2     i     n     1.
lemma 1.3 consider a random walk from vertex 1 to vertex n in a chain of n vertices.
let t(i) be the expected time spent at vertex i. then

t (i) =

i = 1

2 (n     i) 2     i     n     1
1

i = n.

          n     1

9

proof: now t (n) = 1 since the walk stops when it reaches vertex n. half of the time when
the walk is at vertex n     1 it goes to vertex n. thus t (n     1) = 2. for 3     i     n     1,
t (i) = 1
2t (2) + 1 and t (2) =
t (1) + 1

2 [t (i     1) + t (i + 1)] and t (1) and t (2) satisfy t (1) = 1
2t (3). solving for t(i + 1) for 3     i     n     1 yields
t(i + 1) = 2t(i)     t(i     1)

which has solution t(i) = 2(n     i) for 3     i     n     1. then solving for t(2) and t(1) yields
t (2) = 2 (n     2) and t (1) = n     1. thus, the total time spent at vertices is

n     1 + 2 (1 + 2 +        + n     2) + 1 = n     1 + (n     1)(n     2) + 1 = (n     1)2 + 1

which is one more than h1n and thus is correct.

next we show that adding edges to a graph might either increase or decrease the
hitting time hxy. consider the graph consisting of a single path of n vertices. add edges
to this graph to get the graph in figure 1.1 consisting of a clique of size n/2 connected
to a path of n/2 vertices. then add still more edges to get a clique of size n. let x be
the vertex at the midpoint of the original path and let y be the other endpoint of the
path consisting of n/2 vertices as shown in figure 1.1. in the    rst graph consisting of a
single path of length n, hxy =    (n2). in the second graph consisting of a clique of size
n/2 along with a path of length n/2, hxy =    (n3). to see this latter statement, note
that starting at x, the walk will go down the chain towards y and return to x n times on
average before reaching y for the    rst time. each time the walk in the chain returns to
x, with id203 (n     1)/n it enters the clique and thus on average enters the clique
  (n) times before starting down the chain again. each time it enters the clique, it spends
  (n) time in the clique before returning to x. thus, each time the path returns to x from
the chain it spends   (n2) time in the clique before starting down the chain towards y for
a total expected time that is   (n3) before reaching y. in the third graph, which is the
clique of size n, hxy =    (n). thus, adding edges    rst increased hxy from n2 to n3 and
then decreased it to n.

hitting time is not symmetric even in the case of undirected graphs. in the graph of
figure 1.1, the expected time, hxy, of a random walk from x to y, where x is the vertex of
attachment and y is the other end vertex of the chain, is   (n3). however, hyx is   (n2).

next we ask what is the maximum that the hitting time could be. we    rst show that
if vertices x and y are connected by an edge, then the expected time, hxy, of a random
walk from x to y plus the expected time, hyx, from y to x is at most twice the number of
edges.
lemma 1.4 if vertices x and y are connected by an edge, then hxy + hyx     2m where m
is the number of edges in the graph.

10

clique of
size n/2

x

(cid:124)

(cid:123)(cid:122)

n/2

y

(cid:125)

figure 1.1: illustration that adding edges to a graph can either increase or decrease hitting
time.

proof: in a random walk on an undirected graph starting in the steady state, the prob-
ability of traversing any edge in either direction is 1/(2m). this is because for any edge
(u, v), the id203 of being at u (in the steady state) is du/(2m) and the id203
of selecting the edge (u, v) is 1/du. hence, the id203 of traversing the edge (u, v)
is 1/(2m) implying that the expected time between traversals of the edge (x, y) from x
to y is 2m. thus, if we traverse edge (x, y), the expected time to traverse a path from
y back to x and then traverse the edge (x, y) again is 2m. but since a random walk is
a memory less process, we can drop the condition that we started by traversing the edge
(x, y). hence the expected time from y to x and back to y is at most 2m. note that
the path went from y to x and then may have returned to x several times before going
through the edge (x, y). thus, the less than or equal sign in the statement of the lemma
since the path have gone from y to x to y without going through the edge (x, y).

notice that the proof relied on the fact that there was an edge from x to y and thus
the theorem is not necessarily true for arbitrary x and y. when x and y are not con-
nected by an edge consider a path from x to y. the path is of length at most n. consider
the time it takes to reach each vertex on the path in the order they appear. since the
vertices on the path are connected by edges, the expected time to reach the next vertex
on the path is at most twice the number of edges in the graph by the above theorem.
thus, the total expected time is    (n3). this result is asymptotically tight since the bound
is met by the graph of figure 1.1 consisting of a clique of size n/2 and a path of length n/2.

commute time

the commute time, commute(x, y), is the expected time of a random walk starting at
x reaching y and then returning to x. think of going from home to o   ce and returning
home.

theorem 1.5 given an undirected graph, consider the electrical network where each edge
of the graph is replaced by a one ohm resistor. given vertices x and y, the commute time,

11

commute(x, y), equals 2mrxy where rxy is the e   ective resistance from x to y and m is the
number of edges in the graph.

proof: insert at each vertex i a current equal to the degree di of vertex i. the total
current inserted is 2m where m is the number of edges. extract from a speci   c vertex j
all of this 2m current. let vij be the voltage di   erence from i to j. the current into i
divides into the di resistors at node i. the current in each resistor is proportional to the
voltage across it. let k be a vertex adjacent to i. then the current through the resistor
between i and k is vij     vkj, the voltage drop across the resister. the sum of the currents
out of i through the resisters must equal di, the current injected into i.

(cid:88)

k adj
to i

di =

(vij     vkj)

di = divij    (cid:88)

vkj.

noting that vij does not depend on k, write

solving for vij

k adj
to i

(cid:88)

k adj
to i

(cid:88)

k adj
to i

1
di

vkj =

vij = 1 +

1
di

(1 + vkj).

(1.1)

now the expected time from i to j is the average time over all paths from i to k

adjacent to i and then on from k to j. this is given by

(cid:88)
subtracting (1.2) from (1.1), gives vij   hij = (cid:80)

hij =

k adj
to i

1
di

(1 + hkj).

(vkj     hkj). thus, the function vij   hij
is harmonic. designate vertex j as the only exterior vertex. the value of vij     hij at j,
namely vjj     hjj, is zero, since both vjj and hjj are zero. so the function vij     hij must
be zero everywhere. thus, the voltage vij equals the expected time hij from i to j.

k adj
to i

1
di

(1.2)

to complete the proof, note that hij = vij is the voltage from i to j when currents
are inserted at all nodes in the graph and extracted at node j. if the current is extracted
from i instead of j, then the voltages change and vji = hji in the new setup. finally,
reverse all currents in this latter step. the voltages change again and for the new voltages
   vji = hji. since    vji = vij, we get hji = vij.

12

thus, when a current is inserted at each node equal to the degree of the node and the
current is extracted from j, the voltage vij in this set up equals hij. when we extract the
current from i instead of j and then reverse all currents, the voltage vij in this new set
up equals hji. now, superpose both situations (i.e., add all the currents and voltages).
by linearity, for the resulting vij, vij = hij + hji. all currents cancel except the 2m amps
injected at i and withdrawn at j. thus, 2mrij = vij = hij + hji = commute(i, j). thus,
commute(i, j) = 2mrij.

note that lemma 1.4 also follows from theorem 1.5 since the e   ective resistance ruv

is less than or equal to 1 when u and v are connected by an edge.

corollary 1.6 for any n vertex graph and for any vertices x and y, the commute time,
commute(x, y), is less than or equal to n3.

proof: by theorem 1.5 the commute time is given by the formula commute(x, y) =
2mrxy where m is the number of edges. in an n vertex graph there exists a path from
x to y of length at most n. this implies rxy     n since the resistance can not be greater

than that of any path from x to y. since the number of edges is at most(cid:0)n
(cid:1)

2

commute(x, y) = 2mrxy     2

(cid:18)n

(cid:19)
n    = n3.

2

again adding edges to a graph may increase or decrease the commute time. to see this,
consider the graph consisting of a chain of n vertices, the graph of figure 1.1, and the
clique on n vertices.

cover times

the cover time cover(x, g) is the expected time of a random walk starting at vertex x
in the graph g to reach each vertex at least once. we write cover(x) when g is understood.
the cover time of an undirected graph g, denoted cover(g), is

cover(g) = max

x

cover(x, g).

for cover time of an undirected graph, increasing the number of edges in the graph
may increase or decrease the cover time depending on the situation. again consider three
graphs, a chain of length n which has cover time   (n2), the graph in figure 1.1 which has
cover time   (n3), and the complete graph on n vertices which has cover time   (n log n).
adding edges to the chain of length n to create the graph in figure 1.1 increases the
cover time from n2 to n3 and then adding even more edges to obtain the complete graph
reduces the cover time to n log n.

13

note: the cover time of a clique is n log n since that is the time to select every in-
teger out of n integers with high id203, drawing integers at random. this is called
the coupon collector problem. the cover time for a straight line is   (n2) since it is the
same as the hitting time. for the graph in figure 1.1, the cover time is   (n3) since one
takes the maximum over all start states and cover(x, g) =    (n3).

theorem 1.7 let g be a connected graph with n vertices and m edges. the time for a
random walk to cover all vertices of the graph g is bounded above by 2m(n     1).

proof: consider a depth    rst search (dfs) of the graph g starting from vertex z and
let t be the resulting dfs spanning tree of g. the dfs covers every vertex. consider the
expected time to cover every vertex in the order visited by the depth    rst search. clearly
this bounds the cover time of g starting from vertex z.

cover (z, g)     (cid:88)

hxy.

(x,y)   t

if (x, y) is an edge in t , then x and y are adjacent and thus lemma 1.4 implies hxy     2m.
since there are n     1 edges in the dfs tree and each edge is traversed twice, once
in each direction, cover(z)     2m(n     1). since this holds for all starting vertices z,
cover(g)     2m(n     1)

the theorem gives the correct answer of n3 for the n/2 clique with the n/2 tail. it

gives an upper bound of n3 for the n-clique where the actual cover time is n log n.

let rxy be the e   ective resistance from x to y. de   ne the resistance r(g) of a graph

g by r(g) = max
x,y

(rxy).

theorem 1.8 let g be an undirected graph with m edges. then the cover time for g is
bounded by the following inequality

mr(g)     cover(g)     2e3mr(g) ln n + n

where e=2.71 is euler   s constant and r(g) is the resistance of g.

proof: by de   nition r(g) = max
x,y

(rxy). let u and v be the vertices of g for which

rxy is maximum. then r(g) = ruv. by theorem 1.5, commute(u, v) = 2mruv. hence
mruv = 1
2commute(u, v). clearly the commute time from u to v and back to u is less
than twice the max(huv, hvu) and max(huv, hvu) is clearly less than the cover time of g.
putting these facts together

mr(g) = mruv = 1

2commute(u, v)     max(huv, hvu)     cover(g).

for the second inequality in the theorem, by theorem 1.5, for any x and y commute(x, y)
equals 2mrxy implying hxy     2mr(g). by the markov inequality, since the expected value

14

ln n = 1

of hxy is less than 2mr(g), the id203 that y is not reached from x in 2mr(g)e3 steps
is at most 1
e3 . thus, the id203 that a vertex y has not been reached in 2e3mr(g) log n
steps is at most 1
n3 because a random walk of length 2e3mr(g) log n is a sequence
e3
of log n independent id93, each of length 2e3mr(g). suppose after a walk of
2e3mr(g) log n steps, vertices v1, v2, . . . , vl where not reached. walk until v1 is reached,
then v2, etc. by corollary 1.6 the expected time for each of these is n3, but since each
happens only with id203 1/n3, we e   ectively take o(1) time per vi, for a total time
of at most n.

return time

the return time is the expected time of a walk starting at x returning to x. we explore

this quantity later.

1.4 id93 in euclidean space

many physical processes such as brownian motion are modeled by id93.

id93 in euclidean d-space consisting of    xed length steps parallel to the coor-
dinate axes are really id93 on a d-dimensional lattice and are a special case of
id93 on graphs. in a random walk on a graph, at each time unit an edge from
the current vertex is selected at random and the walk proceeds to the adjacent vertex.
we begin by studying id93 on lattices.

id93 on lattices

we now apply the analogy between id93 and current to lattices. consider
a random walk on a    nite segment    n, . . . ,   1, 0, 1, 2, . . . , n of a one dimensional lattice
starting from the origin. is the walk certain to return to the origin or is there some prob-
ability that it will escape, i.e., reach the boundary before returning? the id203 of
reaching the boundary before returning to the origin is called the escape id203. we
shall be interested in this quantity as n goes to in   nity.

convert the lattice to an electrical network by replacing each edge with a one ohm
resister. then the id203 of a walk starting at the origin reaching n or    n before
returning to the origin is the escape id203 given by

pescape =

cef f
ca

where cef f is the e   ective conductance between the origin and the boundary points and ca
is the sum of the conductance   s at the origin. in a d-dimensional lattice, ca = 2d assuming
that the resistors have value one. for the d-dimensional lattice

pescape =

1

2d ref f

15

0

1

2

3

12

4
20
number of resistors

in parallel

(a)

(b)

figure 1.2: 2-dimensional lattice along with the linear network resulting from shorting
resistors on the concentric squares about the origin.

in one dimension, the electrical network is just two series connections of n one ohm re-
sistors connected in parallel. so, ref f goes to in   nity and the escape id203 goes to
zero as n goes to in   nity. thus, the walk in the unbounded one dimensional lattice will
return to the origin with id203 one.

two dimensions

for the 2-dimensional lattice, consider a larger and larger square about the origin for
the boundary as shown in figure 1.2a and consider the limit of ref f as the squares get
larger. shorting the resistors on each square can only reduce ref f . shorting the resistors
results in the linear network shown in figure 1.2b. as the paths get longer, the number of
resistors in parallel also increases. so the resistor between node i and i + 1 is really made
up of o(i) unit resistors in parallel. the e   ective resistance of o(i) resistors in parallel is
1/o(i). thus,

ref f     1

4 + 1

12 + 1

20 +        = 1

4(1 + 1

3 + 1

5 +        ) =   (ln n).

since the lower bound on the e   ective resistance goes to in   nity, the escape id203
goes to zero for the 2-dimensional lattice.

three dimensions

in three dimensions, the resistance along any path to in   nity grows to in   nity but the
number of paths in parallel also grows to in   nity. it turns out that ref f remains    nite
and thus there is a nonzero escape id203.

16

figure 1.3: paths in a 2-dimensional lattice obtained from the 3-dimensional construction
applied in 2-dimensions.

the construction used in three dimensions is easier to explain    rst in two dimensions.
draw dotted diagonal lines at x + y = 2n     1. consider two paths that start at the origin.
one goes up and the other goes to the right. each time a path encounters a dotted
diagonal line, split the path into two, one which goes right and the other up. where
two paths cross, split the vertex into two, keeping the paths separate. by a symmetry
argument, splitting the vertex does not change the resistance of the network. remove
all resistors except those on these paths. the resistance of the original network is less
than that of the tree produced by this process since removing a resistor is equivalent to
increasing its resistance to in   nity.

the distances between splits increase and are 1, 2, 4, etc. at each split the number of
paths in parallel doubles. thus, the resistance to in   nity in this two dimensional example
is

1
2

+

2 +

1
4

4 +        =

1
8

1
2

+

+

1
2

1
2

+        =    .

in the analogous three dimensional construction, paths go up, to the right, and out of
the plane of the paper. the paths split three ways at planes given by x + y + z = 2n     1.

17

each time the paths split the number of parallel segments triple. segments of the paths
between splits are of length 1, 2, 4, etc. and the resistance of the segments are equal to
the lengths. the resistance out to in   nity for the tree is

1

3 + 1

92 + 1

274 +        = 1

3

(cid:0)1 + 2

9 +       (cid:1) = 1

3

3 + 4

= 1

1
1    2
3

the resistance of the three dimensional lattice is less. thus, in three dimensions the
escape id203 is nonzero. the upper bound on ref f gives the lower bound

pescape = 1
2d

1

ref f

    1
6.

a lower bound on ref f gives an upper bound on pescape. to get the upper bound on pescape,
short all resistors on surfaces of boxes at distances 1, 2, 3,, etc. then

(cid:2)1 + 1

25 +       (cid:3)     1.23

9 + 1

6     0.2

ref f     1

6

this gives

pescape = 1
2d

1

ref f

    5
6.

1.5 id93 on directed graphs

a major application of id93 on directed graphs comes from trying to establish
the importance of pages on the world wide web. one way to do this would be to take
a random walk on the web and rank pages according to their stationary id203.
however, several situations occur in id93 on directed graphs that did not arise
with undirected graphs. one di   culty occurs if there is a node with no out edges. in this
case, the directed graph is not strongly connected and so markov chain is not strongly
connected either even though the underlying undirected graph may be connected. when
the walk encounters this node the walk disappears. another di   culty is that a node or
a strongly connected component with no in edges is never reached. one way to resolve
these di   culties is to introduce a random restart condition. at each step, with some
id203 r, jump to a node selected uniformly at random and with id203 1     r
select an edge at random and follow it. if a node has no out edges, the value of r for that
node is set to one. this has the e   ect of converting the graph to a strongly connected
graph so that the stationary probabilities exist.

1.6 finite markov processes

a markov process is a random process in which the id203 distribution for the
future behavior depends only on the current state, not on how the process arrived at
the current state. markov processes are equivalent mathematically to id93 on
directed graphs but the literature on the two topics developed separately with di   erent
terminology. since much of the terminology of markov processes appears in the literature
on id93, we introduce the terminology here to acquaint the reader with it.

18

a

a

b

(a)

b

(b)

c

c

figure 1.4: (a) a directed graph with nodes with no out out edges and a strongly con-
nected component a with no in edges.
(b) a directed graph with three strongly connected components.

in a markov process, nodes of the underlying graph are referred to as states. a state
is persistent if it has the property that should the state ever be reached, the random
process will return to it with id203 one. this means that the state is in a strongly
connected component with no out edges. consider the directed graph in figure 1.4b with
three strongly connected components a, b, and c. starting from any node in a there
is a nonzero id203 of eventually reaching any node in a. however, the id203
of returning to a node in a is less than one and thus nodes in a and similarly nodes in
b are not persistent. from any node in c, the walk will return with id203 one to
that node eventually since there is no way of leaving component c. thus, nodes in c are
persistent.

a state is periodic if it is contained only in cycles in which the greatest common divisor
(gcd) of the cycle lengths is greater than one. a markov process is irreducible if it consists
of a single strongly connected component. an ergodic state is one that is aperiodic and
persistent. a markov process is ergodic if all states are ergodic. in id207 this
corresponds to a single strongly connected component that is aperiodic.

page rank and hitting time

the page rank of a node in a directed graph is the stationary id203 of the node.
we assume some restart value, say r = 0.15, is used. the restart ensures that the graph
is strongly connected. the page rank of a page is the fractional frequency with which the

19

1
20.85  i

pji

j

i

1
20.85  i

0.15  i

  i =   jpji + 0.85

2   i

  i = 1.74(  jpji)

figure 1.5: impact on page rank of adding a self loop

page will be visited over a long period of time. if the page rank is p, then the expected
time between visits or return time is 1/p. notice that one can increase the id95 of a
page by reducing the return time and this can be done by creating short cycles.

consider a node i with a single edge in from node j and a single edge out. the

stationary id203    satis   es   p =   , and thus

adding a self-loop at i, results in a new equation

  i =   jpji.

or

= pii =   jpji +

1
2

  i

  i = 2   jpji.

of course,   j would have changed too, but ignoring this for now, id95 is doubled by
the addition of a self-loop. adding k self loops, results in the equation

  i =   jpji +

k

k + 1

  i,

and again ignoring the change in   j, we now have   i = (k + 1)  jpji. what prevents
one from increasing the page rank of a page arbitrarily? the answer is the restart. we
neglected the 0.15 id203 that is taken o    for the random restart. with the restart
taken into account, the equation for   i when there is no self-loop is

whereas, with k self-loops, the equation is

  i = 0.85  jpji

  i = 0.85  jpji + 0.85

k

k + 1

  i.

adding a single loop only increases id95 by a factor of 1.74 and adding k loops in-
creases it by at most a factor of 6.67 for arbitrarily large k.

20

hitting time

related to page rank is a quantity called hitting time. hitting time is closely related
to return time and thus to the reciprocal of page rank. one way to return to a node
v is by a path in the graph from v back to v. another way is to start on a path that
encounters a restart, followed by a path from the random restart node to v. the time
to reach v after a restart is the hitting time. thus, return time is clearly less than the
expected time until a restart plus hitting time. the fastest one could return would be if
there were only paths of length two since self loops are ignored in calculating page rank. if
r is the restart value, then the loop would be traversed with at most id203 (1     r)2.
with id203 r + (1     r) r = (2     r) r one restarts and then hits v. thus, the return
time is at least (1     r)2 + (2     r) r    (hitting time). combining these two bounds yields

(1     r)2 + (2     r) re (hitting time)     e (return time)     e (hitting time)

the relationship between return time and hitting time can be used to see if a node has
unusually high id203 of short loops. however, there is no e   cient way to compute
hitting time for all nodes as there is for return time. for a single node v, one can compute
hitting time by removing the edges out of the node v for which one is computing hitting
time and then run the page rank algorithm for the new graph. the hitting time for v
is the reciprocal of the page rank in the graph with the edges out of v removed. since
computing hitting time for each node requires removal of a di   erent set of edges, the
algorithm only gives the hitting time for one node at a time. since one is probably only
interested in the hitting time of nodes with low hitting time, an alternative would be to
use a random walk to estimate the hitting time of low hitting time nodes.

spam

suppose one has a web page and would like to increase its page rank by creating some
other web pages with pointers to the original page. the abstract problem is the following.
we are given a directed graph g and a node v whose page rank we want to increase. we
may add new nodes to the graph and add edges from v or from the new nodes to any
nodes we want. we cannot add edges out of other nodes. we can also delete edges from v.

the page rank of v is the stationary id203 for node v with random restarts. if
we delete all existing edges out of v, create a new node u and edges (v, u) and (u, v),
then the page rank will be increased since any time the random walk reaches v it will
be captured in the loop v     u     v. a search engine can counter this strategy by more
frequent random restarts.

a second method to increase page rank would be to create a star consisting of the
node v at its center along with a large set of new nodes each with a directed edge to v.
these new nodes will sometimes be chosen as the target of the random restart and hence

21

the nodes increase the id203 of the random walk reaching v. this second method is
countered by reducing the frequency of random restarts.

notice that the    rst technique of capturing the random walk increases page rank but
does not e   ect hitting time. one can negate the impact of someone capturing the random
walk on page rank by increasing the frequency of random restarts. the second technique
of creating a star increases page rank due to random restarts and decreases hitting time.
one can check if the page rank is high and hitting time is low in which case the page
rank is likely to have been arti   cially in   ated by the page capturing the walk with short
cycles.

personalized page rank

in computing page rank, one uses a restart id203, typically 0.15, in which at each
step, instead of taking a step in the graph, the walk goes to a node selected uniformly at
random. in personalized page rank, instead of selecting a node uniformly at random, one
selects a node according to a personalized id203 distribution. often the distribution
has id203 one for a single node and whenever the walk restarts it restarts at that
node.

algorithm for computing personalized page rank

first, consider the normal page rank. let    be the restart id203 with which
the random walk jumps to an arbitrary node. with id203 1        the random walk
selects a node uniformly at random from the set of adjacent nodes. let p be a row vector
denoting the page rank and let g be the adjacency matrix with rows normalized to sum
to one. then

p =   

n (1, 1, . . . , 1) + (1       ) pg

p[i     (1       )g] =

  
n

(1, 1, . . . , 1)

or

p =   

n (1, 1, . . . , 1) [i     (1       ) g]   1.

thus, in principle, p can be found by computing the inverse of [i     (1       )g]   1. but
this is far from practical since for the whole web one would be dealing with matrices with
billions of rows and columns. a more practical procedure is to run the random walk and
observe using the basics of the power method in chapter ?? that the process converges
to the solution p.

for the personalized page rank, instead of restarting at an arbitrary vertex, the walk
restarts at a designated vertex. more generally, it may restart in some speci   ed neighbor-
hood. suppose the restart selects a vertex using the id203 distribution s. then, in

22

the above calculation replace the vector 1
n (1, 1, . . . , 1) by the vector s. again, the compu-
tation could be done by a random walk. but, we wish to do the random walk calculation
for personalized id95 quickly since it is to be performed repeatedly. with more care
this can be done, though we do not describe it here.

1.7 id115

the id115 method is a technique for sampling a multivariate
id203 distribution p(x), where x = (x1, x2, . . . , xd) is the set of variables. given the
id203 distribution p (x), one might wish to calculate the marginal distribution

p (x1) =

p (x1, . . . , xd)

(cid:88)

x2,...,xd

(cid:88)

or the expectation of some functionf (x)

e (f ) =

f (x1, . . . , xd) p (x1, . . . , xd).

x1,...,xd

the di   culty is that both computations require a summation over an exponential number
of values. if each xi can take on a value from the set {1, 2, . . . , n} of values, then there
are nd possible values for x. one could compute an approximate answer by generating
a sample set of values for x = (x1, . . . , xd) according to the distribution p (x1, . . . , xd).
this is done by designing a markov chain whose stationary probabilities are exactly
p(x1, x2, . . . , xd) and running the chain for a su   ciently large number of steps and aver-
aging f over the states seen in the run. the number of steps must be large enough that
we are close to the limit which is the stationary distribution. in the rest of this section,
we will show that under some mild conditions, the number of steps needed grows only
polynomially, though the total number of states grows exponentially with d.

for ease of explanation, assume that the variables take on values from some    nite
set. create a directed graph with one node corresponding to each possible value of x. a
random walk on the the graph is designed so that the stationary id203 of the walk is
p(x). the walk is designed by specifying the id203 of the transition from one node
to another in such a way as to achieve the desired stationary distribution. two common
techniques for designing the walks are the metropolis-hasting algorithm and gibbs sam-
pling. we will see that the sequence of nodes after a su   cient number of steps of the walk
provides a good sample of the distribution. the number of steps the walk needs to take
depends on its convergence rate to its stationary distribution. we will show that this rate
is related to a natural quantity called the minimum escape id203 (mep).

we used x     rd to emphasize that our distributions are multi-variate. from a markov
chain perspective, each value x can take on is a state, i.e., a node of the graph on which

23

the random walk takes place. henceforth, we will use the subscripts i, j, k, . . . to denote
states and will use pi instead of p(x1, x2, . . . , xd) to denote the id203 of the state
corresponding to a given set of values for the variables. recall that in the markov chain
terminology, nodes of the graph are called states.

recall the notation that p(t) is the row vector of probabilities of the random walk
being at each state (node of the graph) at time t. so, p(t) has as many components as
there are states and its ith component, p(t)
, is the id203 of being in state i at time
i
t. recall the long-term (t-step) average is

(cid:2)p(0) + p(1) +        + p(t   1)(cid:3) .

a(t) =

1
t

(1.3)

the expected value of the function f under the id203 distribution p is e(f ) =
i fipi. our estimate of this quantity will be the average value of f at the states seen in

a t step run. call this estimate a. clearly, the expected value of a is

(cid:80)

(cid:88)

i

e(a) =

fia(t)
i

.

the expectation here is with respect to the    coin tosses    of the algorithm, not with respect
to the underlying distribution p. letting fmax denote the maximum absolute value of f .
it is easy to see that

(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)e(a)    (cid:88)

i

(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)     fmax

(cid:88)

i

fipi

|pi     a(t)

i

| = fmax|p     a(t)|1

(1.4)

where the quantity |p     a(t)|1 is the l1 distance between the id203 distributions p
and a(t) and is often called the    total variation distance    between the distributions. we
will build tools to upper bound |p     a(t)|1. since p is the steady state distribution, the t
for which |p   a(t)|1 becomes small is determined by the rate of convergence of the markov
chain to its steady state.

the following proposition is often useful.

proposition 1.9 for two id203 distributions p and q, |p     q|1 = 2(cid:80)
2(cid:80)

i(qi     pi)+.
the proof is left as an exercise (exercise 1.34).

i(pi     qi)+ =

1.7.1 time reversibility

de   nition: a markov chain is said to be time-reversible if for the steady state proba-
bilities   ,   ipij =   jpji for all i and j.

24

the phrase    time-reversible    comes from the following fact. for a time-reversible markov
chain started in the steady state, the id203 of a path (sequence of states) is the same
as its reversal. that is

  i1 pi1,i2pi2,i3        pik   1,ik =   ik pik,ik   1pik   1,ik   2        pi2,i1.

given only the sequence of states seen, one cannot tell if time runs forward or backward,
both having the same id203. more important is the fact that time reversibility
simpli   es the underlying mathematics as illustrated in the following lemma. the lemma
states that if a id203 distribution q has the property that the id203 of traversing
each edge is the same in both directions, then the id203 distribution must be the
steady state distribution of the markov chain. the lemma is used frequently.

lemma 1.10 in a strongly connected markov chain with transition probabilities pij, if a
vector q with non-negative components satis   es

qipij = qjpji

for all i and j, then qi/(cid:80)
vector    satisfying the equations   p =    and(cid:80)
k qk = 1 and for each    xed j,(cid:80)
i qi/(cid:80)
equations since(cid:80)

proof: since the chain is strongly connected, there is a unique stationary id203
k qk satis   es these
i pji = qj.

i qjpji = qj

i   i = 1. now q/(cid:80)
i qipij =(cid:80)

qk is the stationary id203 of node i.

(cid:80)

k

thus q must be the steady state distribution.

1.7.2 metropolis-hasting algorithm

metropolis-hasting algorithm is a general method to design a markov chain whose
stationary distribution is a given target distribution p. start with a connected undirected
graph g on the set of states. for example, if the states are the lattice points (x1, x2, . . . , xd)
in rd with {xi     {0, 1, 2, , . . . , n}}, then g is the lattice graph with 2d coordinate edges
at each interior vertex. in general, let r be the maximum degree of any node of g. the
transitions of the markov chain are de   ned as follows. at state i select neighbor j with
id203 1
r . since the degree of i may be less than r, with some id203 no edge
is selected and the walk remains at i. if a neighbor j is selected and pj     pi, go to j. if
pj < pi, go to j with id203 pj/pi and stay at i with id203 1    pj
. intuitively, this
favors    heavier    states with higher p values. for i and j adjacent in g, pij = 1

(cid:16)

(cid:17)

pi

r min

1, pj
pi

and pii = 1    (cid:80)

pij. then

j(cid:54)=i

pipij =

pi
r

min

1,

(cid:18)

(cid:19)

pj
pi

=

1
r

min(pi, pj) =

pj
d

(cid:18)

min

1,

(cid:19)

pi
pj

= pjpji.

by lemma 1.10, the stationary probabilities are p(x) as desired.

25

2

p(a) = 1
p(b) = 1
p(c) = 1
p(d) = 1

4

8

8

1
2

a

d

1
8

1
4

b

c

1
8

3

1
3
1
3

a     b
a     c
a     d 1
a     a 2
b     a
b     c
b     b

1
3
1
3

3

1
4
1
8
1
8

2

2

6

1 = 1
1 = 1
1 = 1

2

12

12

1
8

6

4

1 = 1
3    1

6 = 1

2

1    1

3
1
3
1
3

c     a 1
c     b
c     d
c     c
d     a 1
d     c
d     d 1    1

1    1

3
1
3

3    1

3    1

3 = 0

3    1

3 = 1

3

p(a) = p(a)p(a     a) + p(b)p(b     a) + p(c)p(c     a) + p (d)p(d     a)

= 1
2

2

3 + 1

4

1

3 + 1

8

1

3 + 1

8

1

3 = 1

2

p(b) = p(a)p(a     b) + p(b)p(b     b) + p(c)p(c     b)

= 1
2

1

6 + 1

4

1

2 + 1

8

1

3 = 1

4

p(c) = p(a)p(a     c) + p(b)p(b     c) + p(c)p(c     c) + p (d)p(d     c)

= 1
2

1

12 + 1

4

1

6 + 1

8 0 + 1

8

1

3 = 1

8

p(d) = p(a)p(a     d) + p(c)p(c     d) + p (d)p(d     d)

= 1
2

1

12 + 1

8

1

3 + 1

8

1

3 = 1

8

figure 1.6: using the metropolis-hasting algorithm to set probabilities for a random walk
so that the stationary id203 will be a desired id203.

2, p(b) = 1

4, p(c) = 1

8, and p(d) = 1

example: consider the graph in figure 1.6. using the metropolis-hasting algorithm,
assign transition probabilities so that the stationary id203 of a random walk is
p(a) = 1
8. the maximum degree of any vertex is three
so at a the id203 of taking the edge (a, b) is 1
6. the id203 of taking the
3
edge (a, c) is 1
1
12. thus the id203
3
3
8
of staying at a is 2
3. the id203
of taking the edge from c to a is 1
3 and the id203 of taking the edge from d to a
is 1
2, which is what is
desired.

1 or 1
3. the id203 of taking the edge from b to a is 1

1 or 1
12 and of taking the edge (a, d) is 1

3. thus the stationary id203 of a is 1

1 or 1

3 = 1

3 + 1

3 + 1

3 + 1

1
4

1
8

2

2

2

4

1

8

1

8

1

2

2

1.7.3 id150

id150 is another id115 method to sample from a
multivariate id203 distribution. let p (x) be the target distribution where x =
(x1, . . . , xd). id150 consists of a random walk on a graph whose vertices corre-
spond to the values of x = (x1, . . . , xd) and in which there is an edge from x to y if x and
y di   er in only one coordinate.

26

to generate samples of x = (x1, . . . , xd) with a target distribution p (x), the gibbs
sampling algorithm repeats the following steps. one of the variables xi is chosen to be
updated. its new value is chosen based on the marginal id203 of xi with the other
variables    xed. there are two commonly used schemes to determine which xi to update.
one scheme is to choose xi randomly, the other is to choose xi by sequentially scanning
from x1 to xd.

suppose that x and y are two states that di   er in only one coordinate xi. then, in
the scheme where a coordinate is randomly chosen to modify, the id203 pxy of going
from x to y is

pxy =

p(yi|x1, x2, . . . , xi   1, xi+1, . . . , xd).

the normalizing constant is 1/d since for a given value i the id203 distribution of
p(yi|x1, x2, . . . , xi   1, xi+1, . . . , xd) sums to one, and thus summing i over the d-dimensions
results in a value of d. similarly,

pyx =

p(xi|x1, x2, . . . , xi   1, xi+1, . . . , xd).

here use was made of the fact that for j (cid:54)= i, xj = yj.

1
d

1
d

it is simple to see that this chain is time reversible with stationary id203 pro-

portional to p (x). rewrite pxy as

pxy =

=

=

1
d
1
d
1
d

p(yi|x1, x2, . . . , xi   1, xi+1, . . . , xd)p(x1, x2, . . . , xi   1, xi+1, . . . , xd)

p(x1, x2, . . . , xi   1, xi+1, . . . , xd)

p(x1, x2, . . . , xi   1, yi, xi+1, . . . , xd)

p(x1, x2, . . . , xi   1, xi+1, . . . , xd)

p(y)

p(x1, x2, . . . , xi   1, xi+1, . . . , xd)

again using xj = yj for j (cid:54)= i. similarly write

pyx =

1
d

p(x)

p(x1, x2, . . . , xi   1, xi+1, . . . , xd)

from which it follows that p(x)pxy = p(y)pyx. by lemma 1.10 the stationary id203
of the random walk is p(x).

1.8 convergence to steady state

the metropolis-hasting algorithm and id150 both involve a random walk.
initial states of the walk are highly dependent on the start state of the walk. an impor-
tant question is how fast does the walk start to re   ect the stationary id203 of the

27

figure 1.7: a constriction.

markov process. if the convergence time was proportional to the number of states the
algorithms would not be very useful, since as we remarked, the number of states can be
exponentially large.

there are clear examples of connected chains that take a long time to converge. a
chain with a constriction (see figure 1.7) takes a long time to converge since the walk is
unlikely to reach the narrow passage between the two halves, which are both reasonably
big. the interesting thing is that a converse is also true. if there is no constriction, then
the chain converges fast. we show this shortly.

a function is unimodal if it has a single maximum, i.e., it increases and then decreases..
a unimodal function like the normal density has no constriction blocking a random walk
from getting out of a large set, whereas a bimodal function can have a constriction.
interestingly, many common multivariate distributions as well as univariate id203
distributions like the normal and exponential are unimodal and sampling according to
these distributions can be done using the methods here.

a natural problem is estimating the id203 of a convex region in d-space according
to a normal distribution. let r be the region de   ned by the inequality x1+x2+      +xd/2    
x(d/2)+1 +       + xd. pick a sample according to the normal distribution and accept the sam-
ple if it satis   es the inequality. if not, reject the sample and retry until one gets a number
of samples satisfying the inequality. then the id203 of the region is approximated
by the fraction of the samples that satis   ed the inequality. however, suppose r was the
region x1 + x2 +        + xd   1     xd. the id203 of this region is exponentially small
in d and so rejection sampling runs into the problem that we need to pick exponentially
many samples before we expect to accept even one sample. this second situation is typ-
ical. imagine computing the id203 of failure of a system. the object of design is to

28

figure 1.8: area enclosed by curve.

make the system reliable, so the failure id203 is likely to be very low and rejection
sampling will take a long time to estimate the failure id203.

a similar problem is one of computing areas and volumes. first consider the problem
of computing the area enclosed by the curve in figure 1.8. one method would be to    nd a
   nicer    enclosing shape. the picture on the right shows a convex polygon whose area we
can compute in closed form by adding up the areas of the triangles. throw darts at the
larger shape, i.e., pick samples uniformly at random from the larger shape, and estimate
the ratio of areas by the proportion of samples that land in the area enclosed by the curve.

such methods fail in higher dimensions. for example, to compute the volume of a
d-dimensional sphere by enclosing the sphere in a cube where the ratio of volume of the
sphere to the cube is exponentially small, requires throwing exponentially many darts
before getting any nonzero answer.

a di   erent way to solve the problem of drawing a uniform random sample from a
d-dimensional region is to put a grid on the region and do a random walk on the grid
points. at each time, pick one of the 2d coordinate neighbors of the current grid point,
each with id203 1/(2d), then go to the neighbor if it is still in the set; otherwise, stay
put and repeat. this can be shown to lead to a polynomial time algorithm for drawing a
uniform random sample from a bounded convex d-dimensional region. it turns out that
this can be used to estimate volumes of such a region by immersing the region in a magni-
   ed copy of itself intersected with a nice object like a cube. we do not give the details here.

in general, there could be constrictions that prevent rapid convergence to the station-
ary id203. however, if the set is convex in any number of dimensions, then there are

29

s

  s

figure 1.9: each grid point in the ellipse is a state. the set of states in the ellipse
is divided into two sets, s and   s, by the curve. the transitions from s to   s, which
contribute to   (s), are marked with arrows.

no constrictions and there is rapid convergence although the proof of this is beyond the
scope of this book.

suppose q is any id203 distribution on the states. execute one step of the markov
chain starting with distribution q. then the amount of id203 that       ows    from i to
j is qipji. if s and t are two possibly intersecting subsets of states, the total    ow from s

qipij. we use the notation

to t is (cid:80)

i   s,j   t

and

   ow(s, t )) =

   ow(i, j) = qipij

(cid:88)

qipij.

i   s,j   t

we de   ne below a combinatorial measure of constriction for a markov chain, called the
minimum escape id203, and relate this quantity to the rate of convergence to the
stationarity id203.1

1in the markov chain literature, the word    conductance    is often used for minimum escape id203.
here, we have reserved the word conductance for the natural electrical quantity which is the reciprocal
of resistance.

30

de   nition: for a subset s of states of a markov chain with stationary probabilities   ,
de   ne   (s), the escape id203 of s, by

  (s) =

   ow(s,   s)

  (s)

.

the escape id203 of s is the id203 of taking a step from s to outside s
conditioned on starting in s where the stationary id203 at state i in s is proportional
to its stationary id203, i.e.,   i/  (s). the minimum escape id203 mep of the
markov chain, denoted   , is de   ned by

   = min

  (s).

s

  (s)   1/2

the restriction to sets with        1/2 in the de   nition of    is natural. one does not need
to escape from big sets. note that a constriction would mean a small   .

de   nition: fix an    > 0. the   -mixing time of a markov chain is the minimum integer
t such that for any starting distribution p(0), the 1-norm distance between the t-step
running average id203 distribution a(t) and the stationary distribution is at most
  .

the theorem below states that if the minimum escape id203    is large, then
there is fast convergence of the running average id203. intuitively, if    is large then
the walk rapidly leaves any subset of states. later we will see examples where the mixing
time is much smaller than the cover time. that is, the number of steps before a random
walk reaches a random state independent of its starting state is much smaller than the
average number of steps needed to reach every state. we assume time reversibility, namely
that   ipij =   jpji.

theorem 1.11 the    mixing time of a time-reversible markov chain is

(cid:18)ln(1/  min)

(cid:19)

  2  3

.

o

proof: recall that a(t) is the long term average id203 distribution. let

t =

c ln(1/  min)

  2  2

,

for a suitable constant c. for convenience, let a = a(t). we need to show that |a       |       .

let vi denote the ratio of the long term average id203 at time t divided by the
. renumber states so that v1     v2            . since

stationary id203. thus vi = ai
  i

31

ap is the id203 vector after executing one step of the markov chain starting with
probabilities a, a     ap is the net loss of id203 due to the step. let k be any integer
with vk > 1. let a = {1, 2, . . . , k}. the net loss of id203 from the set a in one step

i=1(ai     (ap )i)     2

t as in the proof of theorem 1.1.

is(cid:80)k

another way to reckon the net loss of id203 from a is to take the di   erence of
the id203    ow from a to   a and the    ow from   a to a. by time-reversibility, for
i < j,

   ow(i, j)        ow(j, i) =   ipijvi       jpjivj =   jpji(vi     vj)     0,

thus for any l     k, the    ow from a to {k + 1, k + 2, . . . , l} minus the    ow from {k +
1, k + 2, . . . , l} is non-negative. the net loss from a is at least

(cid:88)

  jpji(vi     vj)     (vk     vl+1)

  jpji.

(cid:88)

i   k
j>l

i   k
j>l

thus,

if   ({i|vi     1})       /2, then

(cid:88)

(vk     vl+1)

  jpji     2
t

.

|a       |1 = 2

(1     vi)  i       ,

i   k
j>l

(cid:88)

i

vi   1

l to be the largest integer greater than or equal to k so that(cid:80)l

so we are done. assume   ({i|vi     1}) >   /2 so that   (a)        min(  (a),   (   a))/2. choose
j=k+1   j           (a)/2. since

l(cid:88)

  jpji     l(cid:88)

j=k+1

j=k+1

  j           (a)/2

  jpji        min(  (a),   (   a))           (a).

k(cid:88)
by the de   nition of mep,(cid:88)
thus (cid:80)

i   k<j

i=1

i   k
j>l

  jpji           (a)/2 and substituting into the above inequality gives

vk     vl+1    

8

t      (a)

.

(1.5)

now, divide {1, 2, . . .} into groups as follows. the    rst group g1 is {1}. in general, if the
rth group gr begins with state k, the next group gr+1 begins with state l + 1 where l is

32

as de   ned above. let i0 be the largest integer with vi0 > 1. stop with gm, if gm+1 would
begin with an i > i0. if group gr begins in i, de   ne ur = vi. let    = 1 +     
2 .

i0(cid:88)

  i(vi     1)     m(cid:88)

|a       |1     2

m(cid:88)

  (gr)(ur     1) =

  (g1     g2     . . .     gr)(ur     ur+1),

i=1

r=1

r=1

where the analog of integration by parts (for sums) is used in the last step and used the
convention that um+1 = 1. since ur     ur+1     8/      (g1     . . .     gr), the sum is at most
8m/t    . since   1 +   2 +        +   l+1       (  1 +   2 +        +   k),
m     ln  (1/  1)     ln(1/  1)/(       1).

thus |a       |1     o(ln(1/  min)/t  2  2)        for a suitable choice of c and this completes
the proof.

1.8.1 using minimum escape id203 to prove convergence

we now give some examples where theorem 1.11 is used to bound the minimum
escape id203 and hence show rapid convergence. for the    rst example, consider a
random walk on an undirected graph consisting of an n-vertex path with self-loops at
the both ends. with the self loops, the stationary id203 is a uniform 1
n over all
vertices. the set with minimum escape id203 consists of the    rst n/2 vertices, for
which    ow(s,   s) =   n/2pn/2,1+n/2 =    ( 1

n) and   (s) = 1

2. thus

  (s) =

   ow(s,   s)

  (s)

= 2   n

2

p n

2 +1 =    (1/n).

2 , n

by theorem 1.11, for    a constant such as 1/100, after o(n2 log n) steps, |a(t)       |1    
1/100. for this graph, the hitting time and the cover time are o(n2). in many interesting
cases, the mixing time may be much smaller than the cover time. we will see such an
example later.

for the second example, consider the n    n lattice in the plane where from each
point there is a transition to each of the coordinate neighbors with id203 1/4. at the
boundary there are self-loops with id203 1-(number of neighbors)/4. it is easy to see
that the chain is connected. since pij = pji, the function fi = 1/n2 satis   es fipij = fjpji
and by lemma 1.10 is the stationary id203. consider any subset s consisting of at
most half the states. for at least half the states (x, y) in s, (each state is indexed by its
x and y coordinate), either row x or column y intersects   s (exercise 1.35). each state in
s adjacent to a state in   s contributes    (1/n2) to the    ow(s,   s). thus,

   ow(s,   s) =

  ipij       (s)
2

1
n2

(cid:88)

(cid:88)

i   s

j /   s

33

establishing that

   =

   ow(s,   s)

  (s)

    1
2n

.

by theorem 1.11, after o(n2 ln n/  2) steps, |a(t)       |1     1/100.

next consider the n    n    n          n grid in d-dimensions with a self-loop at each
boundary point with id203 1     (number of neighbors)/2d. the self loops make all
  i equal to n   d. view the grid as an undirected graph and consider the random walk on
this undirected graph. since there are nd states, the cover time is at least nd and thus
exponentially dependent on d. it is possible to show (exercise 1.49) that mep is    (1/dn).
since all   i are equal to n   d, the mixing time is o(d3n2 ln n/  2), which is polynomially
bounded in n and d.

next consider a random walk on a connected n vertex undirected graph where at each
vertex all edges are equally likely. the stationary id203 of a vertex equals the degree
of the vertex divided by the sum of degrees which equals twice the number of edges. the
sum of the vertex degrees is at most n2 and thus, the steady state id203 of each
vertex is at least 1
n2 . since the degree of a vertex is at most n, the id203 of each
edge at a vertex is at least 1

n. for any s,

   ow(s,   s)     1
n2

1
n

=

1
n3 .

thus the minimum escape id203 is at least 1
thus, the mixing time is o(n6(ln n)/  2).

n3 . since   min     1

n2 , ln 1
  min

= o(ln n).

for our    nal example, consider the interval [   1, 1]. let    be a    grid size    speci-
   + 1 vertices {   1,   1 +
   ed later and let g be the graph consisting of a path on the 2
  ,   1 + 2  , . . . , 1       , 1} having self loops at the two ends. let   x = ce     x2 for x    
x   x = 1.

{   1,   1+  ,   1+2  , . . . , 1     , 1} where    > 1 and c has been adjusted so that(cid:80)

we now describe a simple markov chain with the   x as its stationary id203 and
argue its fast convergence. with the metropolis-hastings    construction, the transition
probabilities are

(cid:32)

(cid:33)

px,x+   =

1
2

min

1,

e     (x+  )2
e     x2

and px,x      =

1
2

min

1,

e     (x     )2
e     x2

(cid:32)

(cid:33)

.

let s be any subset of states with   (s)     1

2. consider the case when s is an interval

34

[k  , 1] for k     1. it is easy to see that

(cid:90)    
(cid:90)    
(cid:32)

  (s)    

   

ce     x2 dx

x=(k   1)  

(k   1)  

x

(k     1)  
ce     ((k   1)  )2
  (k     1)  

(cid:33)

.

= o

ce     x2 dx

now there is only one edge from s to   s and

(cid:88)

(cid:88)

i   s

j /   s

   ow(s,   s) =

  ipij =   k  pk  ,(k   1)   = min(ce     k2  2, ce     (k   1)2  2) = ce     k2  2.

using 1     k     1/   and        1, the minimum escape id203 of s is

  (s) =

   ow(s,   s)

  (s)

    ce     k2  2   (k     1)  
ce     ((k   1)  )2

       (  (k     1)  e       2(2k   1))        (  e   o(    )).

  , we have      < 1, so e   o(    ) =    (1), thus,   (s)        (  ). now,   min     ce         

for    < 1
e   1/  , so ln(1/  min)     1/  .

if s is not an interval of the form [k, 1] or [   1, k], then the situation is only better
since there is more than one    boundary    point which contributes to    ow(s,   s). we do
not present this argument here. by theorem 1.11 in    (1/  3  2) steps, a walk gets within
   of the steady state distribution.

in these examples, we have chosen simple id203 distributions. the methods ex-

tend to more complex situations.

1.9 bibliographic notes

the material on the analogy between id93 on undirected graphs and electrical
networks is from [?] as is the material on id93 in euclidean space. additional
material on markov chains can be found in [?], [?], and [?]. for material on markov
chain monte carlo methods see [?] and [?].

the use of minimum escape id203 (also called conductance) to prove conver-
gence of markov chains is by sinclair and jerrum, [?] and alon [?]. a polynomial time
bounded markov chain based method for estimating the volume of convex sets was de-
veloped by dyer, frieze and kannan [?].

35

r1

r3

i1

r2

i2

figure 1.10: an electrical network of resistors.

1.10 exercises

exercise 1.1

a give an example of a graph, with cycles of more than one length, for which the

greatest common divisor of all cycle lengths is three.

b prove that a graph is bipartite if and only if it has no odd length cycle.

c show that for the random walk on a bipartite graph (with any edge weights), the

steady state probabilities do not exist.

exercise 1.2

(a) what is the set of possible id94 on a graph if there are only interior

vertices and no boundary vertices that supply the boundary condition?

(b) let qx be the steady state id203 of vertex x in a random walk on an undirected

graph and let dx be the degree of vertex x. show that qx
dx

is a harmonic function.

(c) if there are multiple id94 when there are no boundary conditions why

is the steady state id203 of a random walk on an undirected graph unique?

(d) what is the steady state id203 of a random walk on an undirected graph?

exercise 1.3 consider the electrical resistive network in figure 1.10 consisting of ver-
tices connected by resistors. kircho       s law states that the currents at each node sum to
zero. ohm   s law states that the voltage across a resistor equals the product of the resis-
tance times the current through it. using these laws calculate the e   ective resistance of
the network.

solution:

(r1+r3)r2
r1+r2+r3

36

a

r=1

r=2

c

d

r=2

r=1

b

r=1

figure 1.11: an electrical network of resistors.

exercise 1.4 given a graph consisting of a single path of    ve vertices numbered 1 to 5,
what is the id203 of reaching vertex 1 before vertex 5 when starting at vertex 4.

exercise 1.5 consider the electrical network of figure 1.11.

(a) set the voltage at a to one and at b to zero. what are the voltages at c and d?

(b) what is the current in the edges a to c, a to d, c to d. c to b and d to b?

(c) what is the e   ective resistance between a and b?

(d) convert the electrical network to a graph. what are the edge probabilities at each

vertex?

(e) what is the id203 of a walk starting at c reaching a before b? a walk starting at

d?

(f ) how frequently does a walk from a to b go through the edge from c to d?

(g) what is the id203 that a random walk starting at a will return to a before reaching

b?

exercise 1.6 prove that the escape id203 pescape = cef f
ca
to one.

must be less than or equal

exercise 1.7 prove that reducing the value of a resistor in a network cannot increase
the e   ective resistance. prove that increasing the value of a resistor cannot decrease the
e   ective resistance.

exercise 1.8 the energy dissipated by the resistance of edge xy in an electrical network is
xyrxy where the 1
i2
given by i2
2

xyrxy. the total energy dissipation in the network is e = 1
2

accounts for the fact that the dissipation in each edge is counted twice in the summation.
show that the actual current distribution is that distribution satisfying ohm   s law that
minimizes energy dissipation.

37

(cid:80)

x,y

u

v

u

v

u

v

figure 1.12: three graphs

u

v

figure 1.13: a graph consisting of a circle of edges along with a path of length m

exercise 1.9 what is the hitting time huv for two adjacent vertices on a cycle of length
n? what is the hitting time if the edge (u, v) is removed?

exercise 1.10 what is the hitting time huv for the three graphs if figure 1.14.

exercise 1.11 consider the n node connected graph shown in figure 1.13 consisting of
an edge (u, v) plus a connected graph on n     1 vertices and some number of edges. prove
that huv = 2m     1 where m is the number of edges in the n     1 vertex subgraph.
exercise 1.12 what is the most general solution to the di   erence equation t(i + 2)    
5t(i + 1) + 6t(i) = 0/ how many boundary conditions do you need to make the solution
unique?
exercise 1.13 given the di   erence equation akt(i + k) + at(i + k     1) +       + a1t(i + 1) +
a0t(i) = 0 the polynomial aktk + ak   itk   1 +        + a1t + a0 = 0 is called the characteristic
polynomial.

(a) if the equation has a set of r distinct roots, what is the most general form of the

solution?

(b) if the roots of the characteristic polynomial are not unique what is the most general

form of the solution?

(c) what is the dimension of the solution spaced?

38

1

1

1

2

2

2

3

3

3

4

4

4

figure 1.14: three graph

(d) if the di   erence equation is not homogeneous and f(i) is a speci   c solution to the non
homogeneous di   erence equation, what is the full set of solutions to the di   erence
equation?

exercise 1.14 consider the set of integers {1, 2, . . . , n}. how many draws d with re-
placement are necessary so that every integer is drawn?

exercise 1.15 consider a random walk on a clique of size n. what is the expected
number of steps before a given vertex is reached?

solution:

1

n + 2 1

n

n) + 3 1

n(1     1
n(1     1
(cid:104)

n(1     1
n)(cid:2)1 + 2(1     1
(cid:105)

= 1

1
n

1   (1    1

n )2

= 1
n

2) +       
n) + 3(1     1
1    1
n
( 1
n )2

= 1
n
n   1

n)2 +       

exercise 1.16 show that adding an edge can either increase or decrease hitting time by
calculating h24 for the three graphs in    gure 1.14.

exercise 1.17 show that adding an edge to a graph can either increase or decrease com-
mute time.

exercise 1.18 prove that two independent id93 on a two dimensional lattice
will hit with id203 one.

exercise 1.19 consider the lattice in 2-dimensions. in each square add the two diagonal
edges. what is the escape id203 for the resulting graph?

39

exercise 1.20 determine by simulation the escape id203 for the 3-dimensional lat-
tice.

exercise 1.21 what is the escape id203 for a random walk starting at the root of a
binary tree?

exercise 1.22 consider a random walk on the positive half line, that is the integers
1, 2, 3, . . .. at the origin, always move right one step. at all other integers move right
with id203 2/3 and left with id203 1/3. what is the escape id203?

exercise 1.23 what is the id203 of returning to the start vertex on a random walk
on an in   nite planar graph?

exercise 1.24 create a model for a graph similar to a 3-dimensional lattice in the way
that a planar graph is similar to a 2-dimensional lattice. what is id203 of returning
to the start vertex in your model?

exercise 1.25 consider a strongly connected directed graph. in the steady state calculate
the    ow through each edge of a random walk.

exercise 1.26 create a random directed graph with 200 nodes and roughly eight edges
per node. add k new nodes and calculate the page rank with and without directed edges
from the k added nodes to node 1. how much does adding the k edges change the page
rank of nodes for various values of k and restart frequency? how much does adding a loop
at node 1 change the page rank? to do the experiment carefully one needs to consider the
page rank of a node to which the star is attached. if it has low page rank its page rank is
likely to increase a lot.

exercise 1.27 repeat the experiment in exercise 1.26 for hitting time.

exercise 1.28 search engines ignore self loops in calculating page rank. thus, to increase
page rank one needs to resort to loops of length two. by how much can you increase the
page rank of a page by adding a number of loops of length two?

exercise 1.29 can one increase the page rank of a node v in a directed graph by doing
something some distance from v? the answer is yes if there is a long narrow chain of
nodes into v with no edges leaving the chain. what if there is no such chain?

exercise 1.30 consider modifying personal page rank as follows. start with the uniform
restart distribution and calculate the steady state probabilities. then run the personalized
page rank algorithm using the steady state distribution calculated instead of the uniform
distribution. keep repeating until the process converges. that is, we get a steady state
id203 distribution such that if we use the steady state id203 distribution for the
restart distribution we will get the steady state id203 distribution back. does this
process converge? what is the resulting distribution? what distribution do we get for the
graph consisting of two vertices u and v with a single edge from u to v?

40

exercise 1.31

(a) what is the hitting time for a vertex in a complete directed graph with self loops?

(b) what is the hitting time for a vertex in a directed cycle with n nodes?

exercise 1.32 using a web browser bring up a web page and look at the source html.
how would you extract the url   s of all hyperlinks on the page if you were doing a crawl
of the web? with internet explorer click on    source    under    view    to access the html
representation of the web page. with firefox click on    page source    under    view   .

exercise 1.33 sketch an algorithm to crawl the world wide web. there is a time delay
between the time you seek a page and the time you get it. thus, you cannot wait until the
page arrives before starting another fetch. there are conventions that must be obeyed if
one were to actually do a search. sites specify information has to how long or which    les
can be searched. do not attempt an actual search without guidance from a knowledgeable
person.
exercise 1.34 prove proposition 1.9 that for two id203 distributions p, q, |p   q|1 =

2(cid:80)

i(pi     qi)+.

exercise 1.35 suppose s is a subset of at most n2/2 points in the n    n lattice. show
that

|{(i, j)     s : row i, col. j     s}|     |s|/2.

exercise 1.36 show that the steady state probabilities of the chain described in the gibbs
sampler is the correct p.

exercise 1.37 a markov chain is said to be symmetric if for all i and j, pij = pji. what
is the steady state distribution of a connected aperiodic symmetric chain? prove your
answer.

exercise 1.38 how would you integrate a multivariate polynomial distribution over some
region?

exercise 1.39 given a time-reversible markov chain, modify the chain as follows. at
the current state, stay put (no move) with id203 1/2. with the other id203 1/2,
move as in the old chain. show that the new chain has the same steady state. what
happens to the convergence time in this modi   cation?

exercise 1.40 using the metropolis-hasting algorithm create a markov chain whose sta-
tionary id203 is that given in the following table.

x1x2
prob

00
1/16

01
1/8

02
1/16

10
1/8

11
1/4

12
1/8

20
1/16

21
1/8

22
1/16

41

exercise 1.41 let p be a id203 vector (nonnegative components adding up to 1) on
the vertices of a connected, aperiodic graph. set pij (the transition id203 from i to j)
to pj for all i (cid:54)= j which are adjacent in the graph. show that the steady state id203
vector for the chain is p. is running this chain an e   cient way to sample according to a
distribution close to p? think, for example, of the graph g being the n    n    n           n
grid.

exercise 1.42 construct the edge id203 for a three state markov chain so that the

steady state id203 is(cid:0) 1
exercise 1.43 consider a three state markov chain with steady state id203(cid:0) 1

(cid:1).

(cid:1).

3, 1

2, 1

6

2, 1

3, 1

6

consider the metropolis-hastings algorithm with g the complete graph on these three
nodes. what is the expected id203 that we would actually make a move along a
selected edge?

exercise 1.44 try id150 on p (x) =

(cid:18) 1

2 0
1
0
2

(cid:19)

.

what happens? how does the metropolis hasting algorithm do?

exercise 1.45 consider p(x), where, x = (x1, . . . , x100) and p (0) = 1
0. how does id150 behave?

2, p (x) = 1
2100

x (cid:54)=

exercise 1.46 construct an algorithm and compute the volume of a unit radius sphere
in 20 dimensions by carrying out a random walk on a 20    20 grid with 0.1 spacing.

exercise 1.47 given a graph g and an integer k how would you generate a sequence
of connected subgraphs s1, s2, . . . of g of size k where si is generated with id203
proportional to 2|ei| where ei is the set of edges in si?

exercise 1.48 what is the mixing time for

(a) a clique?

(b) two cliques connected by a single edge?
exercise 1.49 show that for the n    n              n grid in d space, mep is    (1/dn).
hint: the argument is a generalization of the argument in exercise 1.35. argue that for
any subset s containing at most 1/2 the grid points, for at least 1/2 the grid points in s,
among the d coordinate lines through the point, at least one intersects   s.

42

