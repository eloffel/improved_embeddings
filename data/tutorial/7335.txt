matrix and tensor factorization tutorial taught by  

prof. dr. panagiotis symeonidis 

 
 

a. system   s components and other material 

 

1. install r (https://cran.r-project.org/) 
 
2. install rstudio (https://www.rstudio.com/products/rstudio/download/) 
 
3. you have to download the rrecsys package (downloadable from cran with the 
command install.package(   rrecsys   ) on the r console). 
 
4. you have also to install 3 more packages i.e, for non-negative matrix 
factorization, for cur decomposition, and for tensor decomposition by using the 
following commands, respectively. 
 

 install.packages("nmf")  
 library("nmf") 
 
 install.packages("rcur") 
 library("rcur") 
 
 install.packages("rtensor") 
 library("rtensor") 

 
5. download my book   matrix and tensor decomposition in recommender 
systems   
 

a.  you can download it from the following springerlink website: 

 
             http://link.springer.com/book/10.1007%2f978-3-319-41357-0 
 

b.   moreover, you can download the slides that accompany the book and can 

be used for lecturing purposes from the following link: 

 
              http://www.inf.unibz.it/~symeonidis/slidesforbook.pdf 
 
 
 

commands for matrix and tensor factorization in 

r (tutorial) 

 
 
 
getwd() 
 
setwd("/users/psymeonidis/desktop/summer school 2017") 
 
 (in my book, toy example data,  figure 1.2 page 5) 
 

mymatrix <- matrix(scan('toyexample.txt'), nrow=3, byrow=true) 

 
mymatrix2 <- matrix(scan('toyexample2.txt', na.strings = "na"), 
nrow=4, byrow=true) 

 
 
non-negative id105 
 
(in my book the solution can be found in figure 2.2 page 24) 
 
install.packages("nmf") 
 
library("nmf") 
 
 
myfactors <- nmf(mymatrix, 2) 
 
w <- myfactors@fit@w 

 

h <- myfactors@fit@h 

 
approximation_matrix_nmf <- w %*% h 
 
 
 
 
 
 

 
singular value decomposition 
 
(in my book the solution can be found in figure 3.2 page 37) 
 
mymodel <- svd(mymatrix) 
 
 original_matrix_svd <- mymodel$u %*% diag(mymodel$d) %*% t(mymodel$v) 
 
variance.explained = prop.table(svd(mymatrix)$d^2) 
 
approximation_matrix_svd <- mymodel$u[, 1:2] %*% diag(mymodel$d[1:2]) %*% 
t(mymodel$v[, 1:2])   
   
 
cur matrix decomposition 
 
(my book, solution figure 2.3 page 29) 
 
mymodel <- cur(mymatrix, 2, 2 ) 
 
approximation_matrix_cur <- mymodel@c %*% mymodel@u %*% mymodel@r 
 
 
rrecsys package 
 
 
install.packages("rrecsys") 
 
library(rrecsys) 
  
data("ml100k") 
 
 
 
d <- definedata(ml100k) 
 
d 
summary(d) 
datachart(d) 
histogram(d) 

 
e <- evalmodel(d, folds = 2) 
 
e 
 
 
evaluating user-based knn and item-based knn 
 
evalpred(e, "ubknn", simfunct = "cos", neigh = 10) 
evalpred(e, "ibknn", simfunct = "cos", neigh = 10) 
 
resub <- evalrec(e, "ubknn", simfunct = "cos", neigh = 10, positivethreshold = 3, 
topn = 10, topngen = "mf") 
 
resib <- evalrec(e, "ibknn", simfunct = "cos", neigh = 10, positivethreshold = 3, 
topn = 10, topngen = "mf") 
 
 
 
evaluating id105 (simon funk svd) 
 
 
evalpred(e, "funk", k = 10, steps = 100, regcoef = 0.0001, learningrate = 0.001, 
biases = f) 
 
evalpred(e, "funk", k = 20, steps = 100, regcoef = 0.0001, learningrate = 0.001, 
biases = f) 
 
evalpred(e, "funk", k = 100, steps = 100, regcoef = 0.0001, learningrate = 0.001, 
biases = f) 
 
 
resfunk10 <- evalrec(e, "funk", k = 10, steps = 100, regcoef = 0.001, 
learningrate = 0.01, biases = f, positivethreshold = 3, topn = 10) 
 
resfunk100 <- evalrec(e, "funk", k = 100, steps = 100, regcoef = 0.001, 
learningrate = 0.01, biases = f, positivethreshold = 3, topn = 10) 
 
resfunk300 <- evalrec(e, "funk", k = 300, steps = 100, regcoef = 0.001, 
learningrate = 0.01, biases = f, positivethreshold = 3, topn = 10) 
 
 

visualizing user-based knn and item-based knn behaviour 
 
evalchart(resub, x = "items", y = "num_of_recommendations", y_lim = 60) 
evalchart(resib, x = "items", y = "num_of_recommendations", y_lim = 60) 
 
 
evalchart(resub, x = "items", y = "tp", y_label = "tp", y_lim = 60) 
evalchart(resib, x = "items", y = "tp", y_label = "tp", y_lim = 60) 
 
 
evalchart(resub, x = "topn", y = "num_of_ratings", y_lim = 200) 
evalchart(resib, x = "topn", y = "num_of_ratings", y_lim = 200) 
 
 
 
visualizing id105 behaviour 
 
 
evalchart(resfunk10, x = "items", y = "num_of_recommendations", y_lim = 160) 
evalchart(resfunk100, x = "items", y = "num_of_recommendations", y_lim = 160) 
evalchart(resfun300, x = "items", y = "num_of_recommendations", y_lim = 160) 
 
evalchart(resfunk10, x = "items", y = "tp", y_lim = 60) 
evalchart(resfunk100, x = "items", y = "tp", y_lim = 60) 
evalchart(resfun300, x = "items", y = "tp", y_lim = 60) 
 
evalchart(resfunk10, x = "topn", y = "num_of_ratings") 
evalchart(resfunk100, x = "topn", y = "num_of_ratings") 
evalchart(resfunk300, x = "topn", y = "num_of_ratings") 
 
 
 
tensor hosvd decomposition  
 
(my book, figure 6.2 page 83) 
 
vector1 <- c(1,1,0,0,0,0,0,0,0) 

vector2 <- c(0,0,0,0,1,0,0,0,0) 

vector3 <- c(0,0,0,0,0,0,0,0,1) 

 

b <- array(c(vector1,vector2, vector3),dim = c(3,3,3)) 

print(b) 
 
b<- as.tensor(b) 
 

approximation_tensor_hosvd <- hosvd(b, c(2,3,3)) 

 
print(approximation_tensor_hosvd$est@data) 
 
 
 
results 
 
, , 1 
 
          [,1] [,2] [,3] 
[1,] 0.7236068    0    0 
[2,] 1.1708204    0    0 
[3,] 0.0000000    0    0 
 
, , 2 
 
     [,1]  [,2] [,3] 
[1,]    0 0.4472136    0 
[2,]    0 0.7236068    0 
[3,]    0 0.0000000    0 
 
, , 3 
 
     [,1] [,2] [,3] 
[1,]    0    0    0 
[2,]    0    0    0 
[3,]    0    0    1 
 
 
step by step execution of tensor decomposition algorithm 
 
(mode1$u %*% diag(mode1$d) %*% t(mode1$v)) 
 
vector1 <- c(1,1,0,0,0,0,0,0,0) 

vector2 <- c(0,0,0,0,1,0,0,0,0) 

vector3 <- c(0,0,0,0,0,0,0,0,1) 

 
b <- array(c(vector1,vector2, vector3),dim = c(3,3,3)) 

print(b) 
 
b<- as.tensor(b) 
 

a <- unfold(b, row_idx=1,col_idx=c(2,3)) 

a<-matrix(vec(a),3) 
mode1 <- svd(a) 
 
 
b <- unfold(b, row_idx=2,col_idx=c(1,3)) 

b<-matrix(vec(b),3) 
mode2 <- svd(b) 
 
 
c <- unfold(b, row_idx=3,col_idx=c(1,2)) 

c<-matrix(vec(c),3) 
mode3 <- svd(c) 
 
n1 <- ttm(b, t(mode1$u[,1:2]),1); 

n2 <- ttm(n1,t(mode2$u[,1:3]),2); 

n3 <- ttm(n2,t(mode3$u[,1:3]),3); 

 

s <- unfold(n3,row_idx=1,col_idx=c(3,2)); 
 

q1 <- ttm(n3, mode1$u[,1:2], 1); 
q2 <- ttm(q1, mode2$u[,1:3], 2); 
q3 <- ttm(q2, mode3$u[,1:3], 3); 
 

q3@data 

 
 
results  
 
, , 1 
 
          [,1] [,2] [,3] 
[1,] 0.7236068    0    0 

[2,] 1.1708204    0    0 
[3,] 0.0000000    0    0 
 
, , 2 
 
     [,1]  [,2] [,3] 
[1,]    0 0.4472136    0 
[2,]    0 0.7236068    0 
[3,]    0 0.0000000    0 
 
, , 3 
 
     [,1] [,2] [,3] 
[1,]    0    0    0 
[2,]    0    0    0 
[3,]    0    0    1 
 
 

