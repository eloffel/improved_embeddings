minimum id153

definition of minimum id153

how similar are two strings?
spell correction
the user typed    graffe   
which is closest? 
graf
graft
grail
giraffe



computational biology
align two sequences of nucleotides


resulting alignment:
also for machine translation, information extraction, id103
aggctatcacctgacctccaggid35atgccc
tagctatcacgaid35cggtcgatttgcid35ac
-aggctatcacctgacctccaggid35a--tgccc---
tag-ctatcac--gaid35c--ggtcgatttgcid35ac
id153
the minimum id153 between two strings
is the minimum number of editing operations
insertion
deletion
substitution
needed to transform one into the other
minimum id153
two strings and their alignment:
minimum id153
if each operation has cost of 1
distance between these is 5
if substitutions cost 2 (levenshtein)
distance between them is 8
alignment in computational biology
given a sequence of bases


an alignment:


given two sequences, align each letter to a letter or gap
-aggctatcacctgacctccaggid35a--tgccc---
tag-ctatcac--gaid35c--ggtcgatttgcid35ac
aggctatcacctgacctccaggid35atgccc
tagctatcacgaid35cggtcgatttgcid35ac
other uses of id153 in nlp
evaluating machine translation and id103
r spokesman confirms    senior government adviser was shot
h spokesman said    the senior            adviser was shot dead
              s      i              d                        i
named entity extraction and entity coreference
ibm inc. announced today
ibm profits
stanford president john hennessy announced yesterday
for stanford university president john hennessy


how to find the min id153?
searching for a path (sequence of edits) from the start string to the final string:
initial state: the word we   re transforming
operators: insert, delete, substitute
goal state:  the word we   re trying to get to
path cost: what we want to minimize: the number of edits

8
minimum edit as search
but the space of all edit sequences is huge!
we can   t afford to navigate na  vely
lots of distinct paths wind up at the same state.
we don   t have to keep track of all of them
just the shortest path to each of those revisted states.

9
defining min id153
for two strings
x of length n 
y of length m
we define d(i,j)
the id153 between x[1..i] and y[1..j] 
i.e., the first i characters of x and the first j characters of y
the id153 between x and y is thus d(n,m)
minimum id153

definition of minimum id153

minimum id153

computing minimum id153

id145 for
minimum id153
id145: a tabular computation of d(n,m)
solving problems by combining solutions to subproblems.
bottom-up
we compute d(i,j) for small i,j 
and compute larger d(i,j) based on previously computed smaller values
i.e., compute d(i,j) for all i (0 < i < n)  and j (0 < j < m)



defining min id153 (levenshtein)
initialization
d(i,0) = i
d(0,j) = j
recurrence relation:
for each  i = 1   m
	  for each  j = 1   n
                       d(i-1,j) + 1
          d(i,j)= min  d(i,j-1) + 1
                       d(i-1,j-1) +   2; if x(i)     y(j)   
                                      0; if x(i) = y(j)
termination:
d(n,m) is distance 



the id153 table

the id153 table
id153
the id153 table
minimum id153

computing minimum id153

minimum id153

backtrace for computing alignments

computing alignments
id153 isn   t sufficient
we often need to align each character of the two strings to each other
we do this by keeping a    backtrace   
every time we enter a cell, remember where we came from
when we reach the end, 
trace back the path from the upper right corner to read off the alignment
id153
minedit with backtrace
adding backtrace to minimum id153
base conditions:                                                        termination:
d(i,0) = i         d(0,j) = j         d(n,m) is distance 
recurrence relation:
for each  i = 1   m
	 for each  j = 1   n
                      d(i-1,j) + 1
         d(i,j)= min  d(i,j-1) + 1
                      d(i-1,j-1) +  2; if x(i)     y(j)   
                                    0; if x(i) = y(j)
                     left
         ptr(i,j)=   down
                     diag




insertion
deletion
substitution
insertion
deletion
substitution
the distance matrix
slide adapted from serafim batzoglou
















































































y0                                       ym
x0                           xn
every non-decreasing path 

from (0,0) to (m, n) 

corresponds to 
an alignment 
of the two sequences

an optimal alignment is composed of optimal subalignments
result of backtrace
two strings and their alignment:
performance
time:
				o(nm)
space:
				o(nm)
backtrace
				o(n+m)
minimum id153

backtrace for computing alignments

minimum id153

weighted minimum id153

weighted id153
why would we add weights to the computation?
spell correction: some letters are more likely to be mistyped than others
biology: certain kinds of deletions or insertions are more likely than others
confusion matrix for spelling errors

weighted min id153
initialization:
d(0,0) = 0
d(i,0) = d(i-1,0) + del[x(i)];    1 < i     n
d(0,j) = d(0,j-1) + ins[y(j)];    1 < j     m
recurrence relation:
             d(i-1,j)   + del[x(i)]
d(i,j)= min  d(i,j-1)   + ins[y(j)]
             d(i-1,j-1) + sub[x(i),y(j)]
termination:
d(n,m) is distance 


where did the name, id145, come from? 
   the 1950s were not good years for mathematical research. [the] secretary of defense    had a pathological fear and hatred of the word, research   

 i decided therefore to use the word,    programming   .

 i wanted to get across the idea that this was dynamic, this was multistage    i thought, let   s     take a word that has an absolutely precise meaning, namely dynamic    it   s impossible to use the word, dynamic, in a pejorative sense. try thinking of some combination that will possibly give it a pejorative meaning. it   s impossible. 

thus, i thought id145 was a good name. it was something not even a congressman could object to.     

		richard bellman,    eye of the hurricane: an autobiography    1984.
minimum id153

weighted minimum id153

minimum id153

minimum id153 in computational biology

sequence alignment
-aggctatcacctgacctccaggid35a--tgccc---
tag-ctatcac--gaid35c--ggtcgatttgcid35ac
aggctatcacctgacctccaggid35atgccc
tagctatcacgaid35cggtcgatttgcid35ac
why sequence alignment?
comparing genes or regions from different species
to find important regions
determine function
uncover evolutionary forces
assembling fragments to sequence dna
compare individuals to looking for mutations
alignments in two fields
in natural language processing
we generally talk about distance (minimized)
and weights
in computational biology
we generally talk about similarity (maximized)
and scores
the needleman-wunsch algorithm
initialization:
d(i,0) = -i * d
d(0,j) = -j * d
recurrence relation:
             d(i-1,j)   - d
d(i,j)= min  d(i,j-1)   - d
             d(i-1,j-1) + s[x(i),y(j)]
termination:
d(n,m) is distance 


the needleman-wunsch matrix
slide adapted from serafim batzoglou
















































































x1                                       xm
y1                           yn
(note that the origin is at the upper left.)
a variant of the basic algorithm:
maybe it is ok to have an unlimited # of gaps in the beginning and end:
slide from serafim batzoglou
----------ctatcacctgacctccaggid35atgccccttid35gc
gcgagttcatctatcac--gaid35c--ggtcg--------------
if so, we don   t want to penalize gaps at the ends




different types of overlaps
slide from serafim batzoglou








example:
2 overlapping   reads    from a 
sequencing project 
example:
search for a mouse gene
within a human chromosome
the overlap detection variant
changes:

initialization
for all i, j,
	f(i, 0) = 0
	f(0, j) = 0

termination
	       maxi f(i, n)
fopt = max
	       maxj f(m, j)
slide from serafim batzoglou
















































































x1                                       xm
y1                           yn

given two strings 		x = x1      xm, 
					y = y1      yn

find substrings x   , y    whose similarity 
	(optimal global alignment value)
	is maximum

		x = aaaacccid35gggtta
		y = ttcid35ggaaccaacc
slide from serafim batzoglou


















































































the local alignment problem
the smith-waterman algorithm
idea: ignore badly aligning regions

modifications to needleman-wunsch:

initialization:	f(0, j) = 0
			f(i, 0) = 0
					
				                     0	
iteration:           f(i, j) = max    f(i     1, j)     d
				        f(i, j     1)     d
				        f(i     1, j     1) + s(xi, yj)  
slide from serafim batzoglou




















































































the smith-waterman algorithm
termination:
if we want the best local alignment   
	
			fopt = maxi,j f(i, j)
	
	find fopt and trace back

if we want all local alignments scoring > t 

??		for all i, j find f(i, j) > t, and trace back?

complicated by overlapping local alignments


slide from serafim batzoglou






local alignment example
x = atcat
y = attatc

let:
 m = 1 (1 point for match)
 d = 1 (-1 point for del/ins/sub)
local alignment example








x = atcat
y = attatc

local alignment example








x = atcat
y = attatc


local alignment example








x =    atcat
y = attatc


minimum id153

minimum id153 in computational biology

