
introduction to id165s


id38
probabilistic language models
today   s goal: assign a id203 to a sentence
machine translation:
p(high winds tonite) > p(large winds tonite)
spell correction
the office is about fifteen minuets from my house
p(about fifteen minutes from) > p(about fifteen minuets from)
id103
p(i saw a van) >> p(eyes awe of an)
+ summarization, question-answering, etc., etc.!!
why?
probabilistic id38
goal: compute the id203 of a sentence or sequence of words:
     p(w) = p(w1,w2,w3,w4,w5   wn)
related task: id203 of an upcoming word:
      p(w5|w1,w2,w3,w4)
a model that computes either of these:
          p(w)     or     p(wn|w1,w2   wn-1)          is called a language model.
better: the grammar       but language model or lm is standard
how to compute p(w)
how to compute this joint id203:

p(its, water, is, so, transparent, that)

intuition: let   s rely on the chain rule of id203
reminder: the chain rule
recall the definition of conditional probabilities
p(b|a) = p(a,b)/p(a)	rewriting:   p(a,b) = p(a)p(b|a)

more variables:
 p(a,b,c,d) = p(a)p(b|a)p(c|a,b)p(d|a,b,c)
the chain rule in general
  p(x1,x2,x3,   ,xn) = p(x1)p(x2|x1)p(x3|x1,x2)   p(xn|x1,   ,xn-1)

the chain rule applied to compute joint id203 of words in sentence




p(   its water is so transparent   ) =
	p(its)    p(water|its)     p(is|its water) 
             p(so|its water is)     p(transparent|its water is so)
how to estimate these probabilities
could we just count and divide?





no!  too many possible sentences!
we   ll never see enough data for estimating these


markov assumption
simplifying assumption:


or maybe


andrei markov
markov assumption


in other words, we approximate each component in the product








simplest case: unigram model
fifth, an, of, futures, the, an, incorporated, a, a, the, inflation, most, dollars, quarter, in, is, mass

thrift, did, eighty, said, hard, 'm, july, bullish

that, or, limited, the
some automatically generated sentences from a unigram model
condition on the previous word:





bigram model
texaco, rose, one, in, this, issue, is, pursuing, growth, in, a, boiler, house, said, mr., gurria, mexico, 's, motion, control, proposal, without, permission, from, five, hundred, fifty, five, yen

outside, new, car, parking, lot, of, the, agreement, reached

this, would, be, a, record, november
id165 models
we can extend to trigrams, 4-grams, 5-grams
in general this is an insufficient model of language
because language has long-distance dependencies:

   the computer(s) which i had just put into the machine room on the fifth floor is (are) crashing.   

but we can often get away with id165 models

introduction to id165s


id38

estimating id165 probabilities


id38
estimating bigram probabilities
the maximum likelihood estimate
an example
<s> i am sam </s>
<s> sam i am </s>
<s> i do not like green eggs and ham </s>







more examples: 
berkeley restaurant project sentences
can you tell me about any good cantonese restaurants close by
mid priced thai food is what i   m looking for
tell me about chez panisse
can you give me a listing of the kinds of food that are available
i   m looking for a good place to eat breakfast
when is caffe venezia open during the day
raw bigram counts
out of 9222 sentences
raw bigram probabilities
normalize by unigrams:

result:
bigram estimates of sentence probabilities
p(<s> i want english food </s>) =
	p(i|<s>)   
 	    p(want|i)  
	    p(english|want)   
	    p(food|english)   
	    p(</s>|food)
       =  .000031
what kinds of knowledge?
p(english|want)  = .0011
p(chinese|want) =  .0065
p(to|want) = .66
p(eat | to) = .28
p(food | to) = 0
p(want | spend) = 0
p (i | <s>) = .25
practical issues
we do everything in log space
avoid underflow
(also adding is faster than multiplying)
id38 toolkits
srilm
http://www.speech.sri.com/projects/srilm/
kenlm
https://kheafield.com/code/kenlm/
google id165 release, august 2006
   
google id165 release
serve as the incoming 92
serve as the incubator 99
serve as the independent 794
serve as the index 223
serve as the indication 72
serve as the indicator 120
serve as the indicators 45
serve as the indispensable 111
serve as the indispensible 40
serve as the individual 234
http://googleresearch.blogspot.com/2006/08/all-our-id165-are-belong-to-you.html
google book id165s
http://ngrams.googlelabs.com/

estimating id165 probabilities


id38

evaluation and perplexity


id38
evaluation: how good is our model?
does our language model prefer good sentences to bad ones?
assign higher id203 to    real    or    frequently observed    sentences 
than    ungrammatical    or    rarely observed    sentences?
we train parameters of our model on a training set.
we test the model   s performance on data we haven   t seen.
a test set is an unseen dataset that is different from our training set, totally unused.
an evaluation metric tells us how well our model does on the test set.
training on the test set
we can   t allow test sentences into the training set
we will assign it an artificially high id203 when we set it in the test set
   training on the test set   
bad science!
and violates the honor code

30
extrinsic evaluation of id165 models
best evaluation for comparing models a and b
put each model in a task
 spelling corrector, speech recognizer, mt system
run the task, get an accuracy for a and for b
how many misspelled words corrected properly
how many words translated correctly
compare accuracy for a and b
difficulty of extrinsic (in-vivo) evaluation of  id165 models
extrinsic evaluation
time-consuming; can take days or weeks
so
sometimes use intrinsic evaluation: perplexity
bad approximation 
unless the test data looks just like the training data
so generally only useful in pilot experiments
but is helpful to think about.
intuition of perplexity
the shannon game:
how well can we predict the next word?




unigrams are terrible at this game.  (why?)
a better model of a text
 is one which assigns a higher id203 to the word that actually occurs

i always order pizza with cheese and ____
the 33rd president of the us was ____
i saw a ____
mushrooms 0.1
pepperoni 0.1
anchovies 0.01
   .
fried rice 0.0001
   .
and 1e-100

perplexity
perplexity is the inverse id203 of the test set, normalized by the number of words:

                                               chain rule:

                                              for bigrams:
minimizing perplexity is the same as maximizing id203
the best language model is one that best predicts an unseen test set
gives the highest p(sentence)
perplexity as branching factor
let   s suppose a sentence consisting of random digits
what is the perplexity of this sentence according to a model that assign p=1/10 to each digit?
lower perplexity = better model

training 38 million words, test 1.5 million words, wsj

evaluation and perplexity


id38

generalization and zeros


id38
the shannon visualization method
choose a random bigram 
     (<s>, w) according to its id203
now choose a random bigram        (w, x) according to its id203
and so on until we choose </s>
then string the words together
<s> i
    i want
      want to
           to eat
              eat chinese
                  chinese food
                          food  </s>
i want to eat chinese food

approximating shakespeare
 
shakespeare as corpus
n=884,647 tokens, v=29,066
shakespeare produced 300,000 bigram types out of v2= 844 million possible bigrams.
so 99.96% of the possible bigrams were never seen (have zero entries in the table)
quadrigrams worse:   what's coming out looks like shakespeare because it is shakespeare

the wall street journal is not shakespeare (no offense)
can you guess the author of these random 3-gram sentences?
they also point to ninety nine point six billion dollars from two hundred four oh six three percent of the rates of interest stores as mexico and gram brazil on market conditions 
this shall forbid it should be branded, if renown made it empty. 
   you are uniformly charming!    cried he, with a smile of associating and now and then i bowed and they perceived a chaise and four to wish for. 



43
the perils of overfitting
id165s only work well for word prediction if the test corpus looks like the training corpus
in real life, it often doesn   t
we need to train robust models that generalize!
one kind of generalization: zeros!
things that don   t ever occur in the training set
but occur in the test set
zeros
training set:
    denied the allegations
    denied the reports
    denied the claims
    denied the request

p(   offer    | denied the) = 0

















test set
    denied the offer
    denied the loan
zero id203 bigrams
bigrams with zero id203
mean that we will assign 0 id203 to the test set!
and hence we cannot compute perplexity (can   t divide by 0)!

generalization and zeros


id38

smoothing: add-one (laplace) smoothing


id38
the intuition of smoothing (from dan klein)
when we have sparse statistics:









steal id203 mass to generalize better









p(w | denied the)
  3 allegations
  2 reports
  1 claims
  1 request

  7 total
p(w | denied the)
  2.5 allegations
  1.5 reports
  0.5 claims
  0.5 request
  2 other

  7 total

allegations
reports
claims
attack
request
man
outcome
   

allegations


attack

man
outcome
   
allegations
reports
claims
request



add-one estimation
also called laplace smoothing
pretend we saw each word one more time than we did
just add one to all the counts!

id113 estimate:

add-1 estimate:

maximum likelihood estimates
the maximum likelihood estimate
of some parameter of a model m from a training set t
maximizes the likelihood of the training set t given the model m
suppose the word    bagel    occurs 400 times in a corpus of a million words
what is the id203 that a random word from some other text will be    bagel   ?
id113 estimate is 400/1,000,000 = .0004
this may be a bad estimate for some other corpus
but it is the estimate that makes it most likely that    bagel    will occur 400 times in a million word corpus.
berkeley restaurant corpus: laplace smoothed bigram counts

laplace-smoothed bigrams

reconstituted counts

compare with raw bigram counts
add-1 estimation is a blunt instrument
so add-1 isn   t used for id165s: 
we   ll see better methods
but add-1 is used to smooth other nlp models
for text classification 
in domains where the number of zeros isn   t so huge.

smoothing: add-one (laplace) smoothing


id38

interpolation, backoff, and web-scale lms


id38
backoff and interpolation
sometimes it helps to use less context
condition on less context for contexts you haven   t learned much about 
backoff: 
use trigram if you have good evidence,
otherwise bigram, otherwise unigram
interpolation: 
mix unigram, bigram, trigram

interpolation works better
linear interpolation
simple interpolation


lambdas conditional on context:
how to set the lambdas?
use a held-out corpus


choose   s to maximize the id203 of held-out data:
fix the id165 probabilities (on the training data)
then search for   s that give largest id203 to held-out set:

training data
held-out data
test 
data
unknown words: open versus closed vocabulary tasks
if we know all the words in advanced
vocabulary v is fixed
closed vocabulary task
often we don   t know this
out of vocabulary = oov words
open vocabulary task
instead: create an unknown word token <unk>
training of <unk> probabilities
create a fixed lexicon l of size v
at text id172 phase, any training word not in l changed to  <unk>
now we train its probabilities like a normal word
at decoding time
if text input: use unk probabilities for any word not in training
huge web-scale id165s
how to deal with, e.g., google id165 corpus
pruning
only store id165s with count > threshold.
remove singletons of higher-order id165s
id178-based pruning
efficiency
efficient data structures like tries
bloom filters: approximate language models
store words as indexes, not strings
use huffman coding to fit large numbers of words into two bytes
quantize probabilities (4-8 bits instead of 8-byte float)

smoothing for web-scale id165s
   stupid backoff    (brants et al. 2007)
no discounting, just use relative frequencies 

64
id165 smoothing summary
add-1 smoothing:
ok for text categorization, not for id38
the most commonly used method:
extended interpolated kneser-ney
for very large id165s like the web:
stupid backoff

65
advanced id38
discriminative models:
 choose id165 weights to improve a task, not to fit the  training set
parsing-based models
caching models
recently used words are more likely to appear


these perform very poorly for id103 (why?)


interpolation, backoff, and web-scale lms


id38
id38
advanced: 
kneser-ney smoothing
absolute discounting: just subtract a little from each count
suppose we wanted to subtract a little from a count of 4 to save id203 mass for the zeros
how much to subtract ?

church and gale (1991)   s clever idea
divide up 22 million words of ap newswire
training and held-out set
for each bigram in the training set
see the actual count in the held-out set!






it sure looks like c* = (c - .75)




absolute discounting interpolation
save ourselves some time and just subtract 0.75 (or some d)!




(maybe keeping a couple extra values of d for counts 1 and 2)
but should we really just use the regular unigram p(w)?

70
discounted bigram
unigram
interpolation weight
better estimate for probabilities of lower-order unigrams!
shannon game:  i can   t see without my reading___________?
   francisco    is more common than    glasses   
    but    francisco    always follows    san   
the unigram is useful exactly when we haven   t seen this bigram!
instead of  p(w):    how likely is w   
pcontinuation(w):     how likely is w to appear as a novel continuation?
for each word, count the number of bigram types it completes
every bigram type was a novel continuation the first time it was seen
francisco
kneser-ney smoothing i
glasses
kneser-ney smoothing ii
how many times does w appear as a novel continuation:


normalized by the total number of word bigram types






kneser-ney smoothing iii
alternative metaphor: the number of  # of word types seen to precede w


normalized by the # of words preceding all words:




a frequent word (francisco) occurring in only one context (san) will have a low continuation id203



kneser-ney smoothing iv








74
   is a normalizing constant; the id203 mass we   ve discounted
the normalized discount
the number of word types that can follow wi-1 
= # of word types we discounted
= # of times we applied normalized discount
kneser-ney smoothing: recursive formulation








75
continuation count = number of unique single word contexts for    
id38
advanced: 
kneser-ney smoothing
