constraint 

satisfaction and 

scheduling

andrew w. moore

professor

school of computer science
carnegie mellon university

www.cs.cmu.edu/~awm

awm@cs.cmu.edu

412-268-7599

note to other teachers and users of these slides. andrew would be delighted if you found this source 
material useful in giving your own lectures. feel free to use these slides verbatim, or to modify them to fit 
your own needs. powerpoint originals are available. if you make use of a significant portion of these 
slides in your own lecture, please include this message, or the following link to the source repository of 
andrew   s tutorials: http://www.cs.cmu.edu/~awm/tutorials . comments and corrections gratefully received. 

slide 1

overview

    csps defined
    using standard search for csps
    blindingly obvious improvements

(cid:131) backtracking search
(cid:131) forward checking
(cid:131) constraint propagation

    some example csp applications

(cid:131) overview
(cid:131) waltz algorithm
(cid:131) job shop scheduling

    variable ordering
    value ordering
    tedious discussion

slide 2

1

a id124 problem

v3

v4

v2

v6

v5

g

v1

r

inside each circle marked v1 .. v6 we must assign: r, g or b.
no two connected circles may be assigned the same symbol.
notice that two circles have already been given an assignment.

slide 3

formal id124 

problem

a csp is a triplet { v , d , c }.  a csp has a finite set of variables v = { v1 , v2
.. vn }.
each variable may be assigned a value from a domain d of values.
each member of c is a pair.  the first member of each pair is a set of variables.  
the second element is a set of legal values which that set may take.
example:
v = { v1 , v2 , v3 , v4 , v5 , v6 }
d = { r , g , b }
c = { (v1,v2) : { (r,g), (r,b), (g,r), (g,b), (b,r) (b,g)},

{ (v1,v3) : { (r,g), (r,b), (g,r), (g,b), (b,r) (b,g)},

:
: }

obvious point: usually c isn   t represented explicitly, but by a function.

slide 4

2

how to solve our csp?

v3

v4

v2

v6

v5

g

v1

r

   how about using a search algorithm?
   define: a search state has variables 1     k assigned. values k+1     n, 
as yet unassigned.
   start state: all unassigned.
   goal state: all assigned, and all constraints satisfied.
   successors of a stated with v1     vk assigned and rest unassigned are 
all states (with v1     vk the same) with vk+1 assigned a value from d.
   cost on transitions: 0 is fine. we don   t care. we just want any solution.
slide 5

how to solve our csp?

v3

v4

v2

v6

v5

g

v1

r

start =(v1=? v2=? v3=? v4=? v5=? v6=?)

succs(start) =

(v1=r v2=? v3=? v4=? v5=? v6=?)
(v1=g v2=? v3=? v4=? v5=? v6=?)
(v1=b v2=? v3=? v4=? v5=? v6=?)

what search algorithms could we use?
it turns out bfs is not a popular choice.  why not?

slide 6

3

dfs for csps

v3

v2

v5

v1

r

v6

g

v4
what about dfs?
much more popular.  at least it has a chance of finding an easy answer 
quickly.
what happens if we do dfs with the order of assignments as b tried 
first, then g then r?
this makes dfs look very, very stupid!
example: http://www.cs.cmu.edu/~awm/animations/constraint/9d.html

slide 7

blindingly obvious improvement    

consistency checking:    backtracking search   

v3

v4

v2

v6

v5

g

v1

r

don   t ever try successor which causes inconsistency with its neighbors.

    again, what happens if we do dfs with the order of assignments as b

tried first, then g then r?

    what   s the computational overhead for this?
    backtracking still looks a little stupid!
    examples: http://www.cs.cmu.edu/~awm/animations/constraint/9b.html

and http://www.cs.cmu.edu/~awm/animations/constraint/27b.html

slide 8

4

obvious improvement     forward checking

v3

v4

v2

v6

v5

g

v1

r

at start, for each variable, record the current set of possible legal 
values for it.
when you assign a value in the search, update set of legal values 
for all variables.  backtrack immediately if you empty a variable   s 
constraint set.

    again, what happens if we do dfs with the order of 

assignments as b tried first, then g then r?

    example: http://www.cs.cmu.edu/~awm/animations/constraint/27f.html
    what   s the computational overhead?

slide 9

constraint propagation
v3
v1

v5

v2

v6

g

r

v4

forward checking computes the domain of each variable independently at the 
start, and then only updates these domains when assignments are made in the 
dfs that are directly relevant to the current variable.
constraint propagation carries this further.  when you delete a value from your 
domain, check all variables connected to you.  if any of them change, delete all 
inconsistent values connected to them, etc   
in the above example it is useless 
web example: http://www.cs.cmu.edu/~awm/animations/constraint/27p.html
slide 10

5

constraint propagation being non-useless

v3

v4

v2

v6

v5

g

v1

r

extra arc

    in this example, constraint propagation solves the problem 

without search     not always that lucky!

    constraint propagation can be done as a preprocessing 

step.  (cheap).

    or it can be maintained dynamically during the search.  
expensive: when you backtrack, you must undo some of 
your additional constraints.

slide 11

graph-coloring-specific constraint 

propagation

in the case of graph coloring, cp looks simple: 
after we   ve made a search step (instantiated a 
node with a color), propagate the color at that 
node.

propagatecoloratnode(node,color)
1. remove color from all of    available lists    of our 

2.

uninstantiated neighbors.
if any of these neighbors gets the empty set,  it   s time to 
backtrack.

3. foreach n in these neighbors: if n previously had two or 
more available colors but now has only one color c, run 
propagatecoloratnode(n,c)

slide 12

6

graph-coloring-specific constraint 

propagation

in the case of graph coloring, cp looks simple: 
after we   ve made a search step (instantiated a 
node with a color), propagate the color at that 
node.

propagatecoloratnode(node,color)
1. remove color from all of    available lists    of our 

 

2.

f o r   g e n e r a l

uninstantiated neighbors.
if any of these neighbors gets the empty set,  it   s time to 
backtrack.
b u t
p r o p a g a t
3. foreach n in these neighbors: if n previously had two or 
more available colors but now has only one color c, run 
p r o p a g a t
propagatecoloratnode(n,c)
v a l u e    

 
  c o n s t r a i n t
  c s p   p r o b l e m s ,
t h a n   o n l y  
i o n   c a n   d o   m u c h   m o r e  
i n g   w h e n   a   n o d e   g e t s   a   u n i q u e  

slide 13

a new csp (where fancier 

propagation is possible)

    the semi magic square
    each variable can have value 1, 2 or 3

v1
v4
v7

v2
v5
v8

v3
v6
v9

this column 
must sum to 6

this column 
must sum to 6

this column 
must sum to 6

this row must
sum to 6
this row must
sum to 6
this row must
sum to 6

this diagonal
must sum to 6

slide 14

7

general constraint propagation

propagate(a1, a2 ,    an)

finished = false
while not finished

finished = true
foreach constraint c

specification: takes a set of availability-lists 
for each and every node and uses all the 
constraints to filter out impossible values that 
are currently in availability lists

assume c concerns variables v1, v2 ,    vk
set newav1 = {} , newav2 = {} ,     newavk = {}  
foreach assignment (v1=x1, v2=x2,     vk=xk) in c

if x1 in av1 and x2 in av2 and     xk in avk

add x1 to newav1 , x2 to newav2 ,    xk to newavk

for i = 1 , 2     k

avi := avi intersection newavi
if avi was made smaller by that intersection

finished = false

if avi

is empty, we   re toast. break out with    backtrack    signal.

details on next slide

slide 15

propagate(a1, a2 ,    an)

general constraint propagation
ai denotes the current set of possible values for 
variable i. this is call-by-reference. some of the ai 
sets may be changed by this call (they   ll have one 
or more elements removed)

finished = false
while not finished

finished = true
foreach constraint c

assume c concerns variables v1, v2 ,    vk
set newav1 = {} , newav2 = {} ,     newavk = {}  
foreach assignment (v1=x1, v2=x2,     vk=xk) in c

if x1 in av1 and x2 in av2 and     xk in avk

add x1 to newav1 , x2 to newav2 ,    xk to newavk

for i = 1 , 2     k

avi := avi intersection newavi
if avi was made smaller by that intersection

we   ll keep iterating until we do a 
full iteration in which none of the 
availability lists change. the 
   finished    flag is just to record 
whether a change took place.

if avi

finished = false

is empty, we   re toast. break out with    backtrack    signal.

slide 16

8

general constraint propagation

newai is going to be filled up 
with the possible values for 
variable vi taking into account 
the effects of constraint c

propagate(a1, a2 ,    an)

finished = false
while not finished

finished = true
foreach constraint c

assume c concerns variables v1, v2 ,    vk
set newav1 = {} , newav2 = {} ,     newavk = {}  
foreach assignment (v1=x1, v2=x2,     vk=xk) in c

if x1 in av1 and x2 in av2 and     xk in avk

add x1 to newav1 , x2 to newav2 ,    xk to newavk

for i = 1 , 2     k

avi := avi intersection newavi
if avi was made smaller by that intersection

finished = false

after we   ve finished all the 
iterations of the foreach
loop, newai contains the 
full set of possible values of 
variable vi taking into 
account the effects of 
constraint c.

slide 17

if avi

is empty, we   re toast. break out with    backtrack    signal.

general constraint propagation

if this test is satisfied that means that there   s at least one 
value q such that we originally thought q was an 
available value for vi  but we now know q is impossible.

propagate(a1, a2 ,    an)

finished = false
while not finished

finished = true
foreach constraint c

assume c concerns variables v1, v2 ,    vk
set newav1 = {} , newav2 = {} ,     newavk = {}  
foreach assignment (v1=x1, v2=x2,     vk=xk) in c

if x1 in av1 and x2 in av2 and     xk in avk

add x1 to newav1 , x2 to newav2 ,    xk to newavk

for i = 1 , 2     k

avi := avi intersection newavi
if avi was made smaller by that intersection

finished = false

if avi

is empty, we   re toast. break out with    backtrack    signal.

is empty we   ve proved that there are no solutions for the 

if avi
availability-lists that we originally entered the function with

slide 18

9

propagate on semi-magic square

    the semi magic square
    each variable can have value 1, 2 or 3

1
123
123

123
123
123

123
123
123

this column 
must sum to 6

this column 
must sum to 6

this column 
must sum to 6

this row must
sum to 6
this row must
sum to 6
this row must
sum to 6

this diagonal
must sum to 6

slide 19

propagate on semi-magic square

(v1,v2,v3) must be one of

    the semi magic square
    each variable can have value 1, 2 or 3

(1,2,3)
(1,3,2)
(2,1,3)
(2,2,2)
(2,3,1)
(3,1,2)
(3,2,1)

1
123
123

123
123
123

123
123
123

this column 
must sum to 6

this column 
must sum to 6

this column 
must sum to 6

this row must
sum to 6
this row must
sum to 6
this row must
sum to 6

this diagonal
must sum to 6

slide 20

10

propagate on semi-magic square

(v1,v2,v3) must be one of

    newalv1 = { 1 }
    newalv2 = { 2 , 3 }
    the semi magic square
    newalv3 = { 2 , 3 }
    each variable can have value 1, 2 or 3

(1,2,3)
(1,3,2)
(2,1,3)
(2,2,2)
(2,3,1)
(3,1,2)
(3,2,1)

1
123
123

123
123
123

123
123
123

this column 
must sum to 6

this column 
must sum to 6

this column 
must sum to 6

this row must
sum to 6
this row must
sum to 6
this row must
sum to 6

this diagonal
must sum to 6

slide 21

after doing first row constraint   

1
123
123

23
123
123

23
123
123

this column 
must sum to 6

this column 
must sum to 6

this column 
must sum to 6

this row must
sum to 6
this row must
sum to 6
this row must
sum to 6

this diagonal
must sum to 6

slide 22

11

after doing all row constraints and 

column constraints   

1
23
23

23
123
123

23
123
123

this column 
must sum to 6

this column 
must sum to 6

this column 
must sum to 6

this row must
sum to 6
this row must
sum to 6
this row must
sum to 6

this diagonal
must sum to 6

slide 23

and after doing diagonal 

constraint   

1
23
23

23
23
123

23
123
23

this column 
must sum to 6

this column 
must sum to 6

this column 
must sum to 6

this row must
sum to 6
this row must
sum to 6
this row must
sum to 6

this diagonal
must sum to 6

cp has now iterated through all constraints once. 
but does it make further progress when it tries 
iterating through them again?

slide 24

12

and after doing another round of 

constraints   

1
23
23

23
23
12

23
12
23

this column 
must sum to 6

this column 
must sum to 6

this column 
must sum to 6

yes! and this showed a case of a 
constraint applying even when none of 
the variables involved was down to a 
unique value.

this row must
sum to 6
this row must
sum to 6
this row must
sum to 6

this diagonal
must sum to 6

  a n y   m o r e   c h a n g e s   o n  
s o .
t h e   n e x t

i t e r a t i o n ?

.

slide 25

csp search with constraint propagation

cpsearch(a1, a2 ,    an)

let i = lowest index such that ai has more than one value
foreach available value x in ai

foreach k in 1, 2.. n
define  a   k := ak

a   i := { x }
call propagate(a   1, a   2 ,    a   n)
if no    backtrack    signal

if a   1, a   2 ,    a   n are all unique we   re done!
recursively call cpsearch(a   1, a   2 ,    a   n)

etails o n n e xt slid e

d

slide 26

13

csp search with constraint propagation

specification: find out if there   s 
any combination of values in the 
combination of the given 
availability lists that satisifes all 
constraints.

cpsearch(a1, a2 ,    an)

let i = lowest index such that ai has more than one value
foreach available value x in ai

foreach k in 1, 2.. n
define  a   k := ak

a   i := { x }
call propagate(a   1, a   2 ,    a   n)
if no    backtrack    signal

at this point the a-primes are a copy 
of the original availability lists except 
a   i has committed to value x.

this call may prune away 
some values in some of 
the copied availability lists

if a   1, a   2 ,    a   n are all unique we   re done!
recursively call cpsearch(a   1, a   2 ,    a   n)

assuming that we terminate deep in the recursion if we find a 
solution, the cpseach function only terminates normally if no 
solution is found.

slide 27

csp search with constraint propagation

cpsearch(a1, a2 ,    an)

let i = lowest index such that ai has more than one value
foreach available value x in ai

foreach k in 1, 2.. n
define  a   k := ak

a   i := { x }
call propagate(a   1, a   2 ,    a   n)
if no    backtrack    signal

if a   1, a   2 ,    a   n are all unique we   re done!
recursively call cpsearch(a   1, a   2 ,    a   n)

what   s the top-level call?
call with that ai = complete set of possible values for vi . 

slide 28

14

csp search with constraint propagation

cpsearch(a1, a2 ,    an)

let i = lowest index such that ai has more than one value
foreach available value x in ai

foreach k in 1, 2.. n
define  a   k := ak

a   i := { x }
call propagate(a   1, a   2 ,    a   n)
if no    backtrack    signal

if a   1, a   2 ,    a   n are all unique we   re done!
recursively call cpsearch(a   1, a   2 ,    a   n)

what   s the top-level call?
call with that ai = complete set of possible values for vi . 

slide 29

semi-magic square 

cpsearch tree

1
23
23

23
23
12

23
12
23

123
123
123

2
123
123

123
123
123

123
123
123

123
123
123

123
123
123

1
2
3

2
3
1

3
1
2

1
3
2

3
2
1

2
1
3

3
12
12

12
12
23

12
23
12

slide 30

15

semi-magic square 

cpsearch tree

1
23
23

23
23
12

23
12
23

123
123
123

2
123
123

123
123
123

123
123
123

1
2
3

2
3
1

3
1
2

1
3
2

3
2
1

2
1
3

123
123
123

123
123
123

i n   f a
e
v
e
e
b
fi r

3
12
12

12
12
23

12
23
12

v

e
t ,   w e   n
c
e
s i d
n
o
c
n  
e   w e  
s
u
a
s
e
c
c
u
s
t  

c
s

e  
s
e
p   a t  

r  
e
r   t h
t o
s

s

slide 31

some real csps

    graph coloring is a real, and useful, csp.  applied to 
problems with many hundreds of thousands of nodes.  
not very ai-esque.

    vlsi or pcb board layout.
    selecting a move in the game of    minesweeper   .

0
0
0
1

0
0
0
1

1
1
1
2

which squares have a bomb?  squares with numbers don   t.  other squares 
might.  numbers tell how many of the eight adjacent squares have bombs.  we 
want to find out if a given square can possibly have a bomb   .

slide 32

16

   minesweeper    csp

0
0
0
1
v8

0
0
0
1
v7

1
1
1
2
v6

v1
v2
v3
v4
v5

v = { v1 , v2 , v3 , v4 , v5 , v6 , v7 , v8 }, d = { b (bomb) , s (space) }
c = { (v1, v2) : { (b,s) , (s,b) }, (v1, v2, v3,) : { (b,s,s) , (s,b,s) , (s,s,b)},   }

v8

v7

v6

v5

v1

v2

v3

v4

slide 33

the waltz algorithm

one of the earliest examples of a computation posed as a csp.
the waltz algorithm is for interpreting line drawings of solid polyhedra.

look at all intersections.

what kind of intersection could this be? a  
concave intersection of three faces? or 
an external convex intersection?

adjacent intersections impose constraints on each other.  use csp to 
find a unique set of labelings.  important step to    understanding    the 
image.

slide 34

17

waltz alg. on simple scenes

assume all objects:

    have no shadows or cracks
    three-faced vertices
   

   general position   : no junctions change with small movements of the 
eye.

then each line on image is one of the following:

    boundary line (edge of an object) (<) with right hand of arrow denoting 

   solid    and left hand denoting    space   
interior convex edge (+)
interior concave edge (-)

   
   

slide 35

18 legal kinds of junctions

given a representation of the diagram, label each junction in one of the above 
manners.
the junctions must be labeled so that lines are labeled consistently at both 
ends.
can you formulate that as a csp?  fun fact: constraint propagation always 
works perfectly.
slide 36

18

waltz examples

slide 37

slide 38

19

scheduling

a very big, important use of csp methods.

    used in many industries.  makes many multi-million dollar decisions.
    used extensively for space mission planning.
    military uses.

people really care about improving scheduling algorithms!
problems with phenomenally huge state spaces.  but for which 
solutions are needed very quickly.
many kinds of scheduling problems e.g.:
(cid:153) job shop:  discrete time; weird ordering of operations possible; set 

of separate jobs.

(cid:153) batch shop:  discrete or continuous time; restricted operation of 

ordering; grouping is important.

(cid:153) manufacturing cell:  discrete, automated version of open job shop.

slide 39

job shop scheduling

at a job-shop you make various products.  each product is a    job    to be done.  
e.g.

job1 = make a polished-thing-with-a-hole
job2 = paint and drill a hole in a widget

each job requires several operations.  e.g.

operations for job1: polish, drill
operations for job2: paint, drill

each operation needs several resources.  e.g.
polishing needs the polishing machine
polishing needs pat (a polishing expert)
drilling needs the drill
drilling needs pat (also a drilling expert)
or drilling can be done by chris

some operations need to be done in a particular order (e.g. paint after you   ve 
drilled)

slide 40

20

job shop formalized

a job shop problem is a pair ( j , res )
j is a set of jobs j = {j1 , j2 ,     jn}
res is a set of resources res = {r1 .. rm}

each job ji is specified by:

    a set of operations oi = {oi
    and must be carried out between release-date rdi and due-date ddi.
    and a partial order of operations: (oi

2     oi

n(i) }

1 oi

i    before oi

i before oi

j), (oi

j   ), etc   

each operation oi
requires a set of resources.  e.g.: oi

i has a variable start time sti

i requires { ri

i1 , ri

i2     }.

i and a fixed duration dui

i and 

each resource can be accomplished by one of several possible physical 
resources, e.g. ri
of the ri

i1 might be accomplished by any one of {ri

ijks are a member of res.

ij1 , ri

ij2 ,    }.  each 

slide 41

job shop example

j1 = polished-hole-thing = { o1
j2 = painted-hole-widget = { o2
res = { pat,chris,drill,paint,drill,polisher }
o1

1 = polish-thing: need resources   

1 , o1
2 }
2 }
1 , o2

{ r1

11 = pat , r1

12 = polisher }

o1

2 = drill-thing: need resources   

o2

1 = paint-widget: need resources   

{ r2

11 = paint }

o2

2 = drill-widget : need resources   

{ r1

21 = (r1

211=pat or r1

212=chris), r1

22 = drill }

{ r2

21 = (r2

211=pat or r2

212=chris), r2

22 = drill }

precedence constraints : o2
= 1 forall i,i.  both jobs have release-date rdi = 0 and due-date ddi = 1.

1.  all operations take one time unit dui

2 before o2

i

slide 42

21

job-shop: the variables and 

constraints

variables
    the operation state times sti
i
    the resources ri

ij (usually these are obvious from the definition of 

i.  only need to be assigned values when there are alternative 

oi
physical resources available, e.g. pat or chris for operating the drill).

constraints:
    precedence constraints.  (some oi

oi

js).

is must be before some other 

    capacity constraints.  there must never be a pair of operations with 

overlapping periods of operation that use the same resources.

non-challenging question.  can you schedule our job-shop?

slide 43

a slightly bigger example
1 r1

3 r3

2 r2

before

before

o1

o1

o1

o2

1 r1

before

o2

2 r2

o3

1 r3

before

o3

2 r1

before

o3

3 r2

o4

1 r4

before

o4

2 r2

example from [sadeh and fox, 96]: norman m. sadeh and mark s. fox, variable and 
value ordering heuristics for the job shop scheduling id124 problem, 
artificial intelligence journal, number vol 86, no1, pages 1-41, 1996.  available from 
citeseer.nj.nec.com/sadeh96variable.html

4 jobs.  each 3 units long.  all jobs have release date 0 and due date 
15.  all operations use only one resource each.

slide 44

22

further csp techniques

let   s look at some other important csp methods.  keep the 
job-shop example in mind.
here   s another graph-coloring example (you   re now 
allowed r, g, b and y)

v3

v4

v2

v6

v7

v5

g

y

v1

r

b

slide 45

general purpose variable ordering heuristics
1. most constrained variable.
2. most constraining variable.

v3

v4

v2

v6

v7

v5

g

y

v1

r

b

slide 46

23

general purpose value ordering heuristics

v3

v4

v2

v6

v7

v5

g

y

v1

r

b

a good general purpose one is    least-
constrained-value   .  choose the value which 
causes the smallest reduction in number of 
available values for neighboring variables

slide 47

general purpose csp algorithm

(from sadeh+fox)
1.

if all values have been successfully assigned then stop, else go
on to 2.
apply the consistency enforcing procedure (e.g. forward-checking 
if feeling computationally mean, or constraint propagation if 
extravagant.  there are other possibilities, too.)
if a deadend is detected then backtrack (simplest case: dfs-type 
backtrack.  other options can be tried, too).  else go on to step 4.
select the next variable to be assigned (using your variable 
ordering heuristic).
select a promising value (using your value ordering heuristic).
create a new search state.  cache the info you need for 
backtracking.  and go back to 1.

2.

3.

4.

5.
6.

slide 48

24

job-shop example. consistency 

enforcement

sadeh claims that generally forward-checking is 
better, computationally, than full constraint 
propagation.  but it can be supplemented with a 
job-shop specific trick.

the precedence constraints (i.e. the available 
times for the operations to start due to the ordering 
of operations) can be computed exactly, given a 
partial schedule, very efficiently.

slide 49

reactive csp solutions

    say you have built a large schedule.  
    disaster!  halfway through execution, one of the 
resources breaks down.  we have to reschedule!

    bad to have to wait 15 minutes for the scheduler to 

make a new suggestion.

important area of research: efficient 

schedule repair algorithms.
    question:  if you expect that resources may 

sometimes break, what could a scheduling program 
do to take that into account?

    unrelated question:  why has none of this lecture 
slide 50

used a*?

25

other approaches.  and what you 

should know

other approaches:
(cid:190) hill-climbing, tabu-search, simulated annealing, genetic 

algorithms.  (to be discussed later)

what you should know:
(cid:57) how to formalize problems as csps
(cid:57) backtracking search, forward checking, constraint propagation
(cid:57) the waltz algorithm
(cid:57) you should understand and appreciate the way job-shop scheduling 

is formalized.  it is an excellent representative example of how
important well-studied id124 problems are 
represented.

(cid:57) understand examples of variable ordering and value ordering 

heuristics

in those cases where your lecturer or these handouts are too incomprehensible, 
consult chap 5 of the russell handout. winston   s    artificial intelligence    book has 
good discussion of id124 and waltz algorithm.

slide 51

26

