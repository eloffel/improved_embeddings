very highly recommended book to buy if you   re even only half interested in 
geometry-meets-search-meets-ai-meets-robotics: robot motion planning by 
jean claude latombe (kluwer, 1990)

robot motion 

planning

andrew w. moore

professor

school of computer science
carnegie mellon university

www.cs.cmu.edu/~awm

awm@cs.cmu.edu

412-268-7599

note to other teachers and users of these slides. andrew would be delighted if you found this source 
material useful in giving your own lectures. feel free to use these slides verbatim, or to modify them to fit 
your own needs. powerpoint originals are available. if you make use of a significant portion of these 
slides in your own lecture, please include this message, or the following link to the source repository of 
andrew   s tutorials: http://www.cs.cmu.edu/~awm/tutorials . comments and corrections gratefully received. 

slide 1

let   s think about automating 

reasoning

    we   ve already seen

(cid:131) reasoning with constraints
(cid:131) state space search in discrete spaces
(cid:131) reasoning with multiple agents
    later (in this course) we   ll see 

(cid:131) probabilistic reasoning with markov decision 

processes, id23 and id48s

    but now let   s think about

spatial reasoning

slide 2

1

spatial reasoning

immovable 
obstacles

start 
configuration

goal configuration

can   t we use our previous methods?

discrete search?     not a discrete problem
csp?     not a natural csp formulation
probabilistic?     nope.

slide 3

robots

for our purposes, a robot is: 

a set of moving rigid objects called links which are connected by 
joints.

typically, joints are 
revolute or prismatic.

such joints each give one 
degree of freedom.

given p dofs, the configuration of the robot can be represented by p
values q = (q1 q2        qp) where qi is the angle or length of the i   th joint

slide 4

2

free-flying polygons

if part of the robot is fixed in the world, the joints are all the dofs 
you   re getting.  but if the robot can be free-flying we get more dofs.

may move in x
direction or y
direction

fixed

0 dofs

2 dofs

may move in x
& y dir and may 
rotate

question: how 
many dofs for a 
polyhedron free 
flying in 3d space?

3 dofs

slide 5

examples

how many dofs?

free flying
how many dofs?

midline           must 
always be horizontal.
how many dofs?

fixed

  

  

  

  

  

  

the configuration q has one real valued entry per dof.

~

slide 6

3

robot motion planning
an important, interesting, spatial reasoning problem.
    let a be a robot with p degrees of freedom, 

living in a 2-d or 3-d world.

    let b be a set of obstacles in this 2-d or 3-d 

world.

    call a configuration legal if it neither intersects 

any obstacles nor self-intersects.

    given an initial configuration qstart and a goal 

config qgoal, generate a continuous path of legal 
configurations between them, or report failure if 
no such path exists.

~

~

slide 7

configuration space

is the set of legal configurations of the robot.  
it also defines the topology of continuous 
motions

for rigid-object robots (no joints) there exists 
a transformation to the robot and obstacles 
that turns the robot into a single point.  the 

c-space transform

slide 8

4

configuration space transform 

examples 2-d world

2 dofs

where can i move 
this robot in the 
vicinity of this 

obstacle?

   is 
equivalent 
to   

where can i move 

this point in the 
vicinity of this 

expanded 
obstacle?

slide 9

configuration space transform 

examples 2-d world

2 dofs

where can i move 
this robot in the 
vicinity of this 

obstacle?

   is 
equivalent 
to   

where can i move 

this point in the 
vicinity of this 

expanded 
obstacle?

assuming you   re 
not allowed to 
rotate

slide 10

5

configuration space transform examples

2-d world
3 dofs

we   ve turned the problem from    twist and turn this 2-d polygon past this 
other 2-d polygon    into    find a path for this point in 3-d space past this weird 
3-d obstacle   .

why   s this transform useful?
because we can plan paths for points instead of polyhedra/polygons
slide 11

warning: topology

if you ever tried implementing these things you   ll quickly start having to 
deal with spaces which aren   t    n.
e.g. the space of directions in 2-d space: so(2).
and  the space of directions and orientations in 3-d space: so(3).
and cartesian products thereof.
not just a case of:    so what? some of my real numbers happen 
to be angles   .

slide 12

6

robot motion planning research
   has produced four kinds of algorithms.  the first is the 
visibility graph.

slide 13

visibility graph

suppose someone gives you a cspace with polygonal obstacles

qstart

qgoal

if there were no blocks, 
shortest path would be 
a straight line.
else it must be a 
sequence of straight 
lines    shaving    corners 
of obstacles.

obvious, but very 
awkward to prove

slide 14

7

visibility graph algorithm

qgoal

i

qstart

1.find all non-blocked 
lines between polygon 
vertices, start and goal.
2.search the graph of 
these lines for the 
shortest path.  (guess 
best search algorithm?)

 

t i c e s ,
v e r
t h e r e   a r e   n
y   a l g o r i t h m   i s  
 
f
t h e   e a s
  s li g h t l y  
  o ( n 2 l o g n )
 
.
)
o ( n 3
t o u g h e r
t h e o r y .
  i n  
)
o ( n 2

.

 

 

slide 15

visibility graph method

c o m p l a i n t
    visibility graph method finds the shortest path.
    bit it does so by skirting along and close to 

obstacles.

    any error in control, or model of obstacle 

locations, and bang!  screech!!

who cares about optimality?
perhaps we want to get a non-stupid path that 
steers as far from the obstacles as it can.

slide 16

8

voronoi diagrams

r

g

b

y

someone gives you some dots.  each dot is a different 
color.
you color in the whole of 2-d space according to this rule:
   the color of any given point equals the color of the 
nearest dot.   

the borders between your different regions are a vornoi 
diagram.

for n point in 2-d space the exact voronoi diagram can be computed in time 
o(n log n).

slide 17

voronoi diagram from polygons 

instead of points

slide 18

9

voronoi diagram methods for c-

space motion planning

    compute the voronoi diagram of c-space.
    compute shortest straightline path from 

start to any point on voronoi diagram.

    compute shortest straightline path from 

goal to any point on voronoi diagram.

    compute shortest path from start to goal 

along voronoi diagram.

slide 19

voronoi diagrams

c o m p l a i n t

    assumes polygons, and very complex above 2-d.

answer: very nifty approximate algorithms (see howie 
choset   s work http://voronoi.sbp.ri.cmu.edu/~choset)

    this    use voronoi to keep clear of obstacles    is just a 

heuristic.  and can be made to look stupid:

can you see 

how?

slide 20

10

voronoi diagrams

c o m p l a i n t

    assumes polygons, and very complex above 2-d.

answer: very nifty approximate algorithms (see howie 
choset   s work http://voronoi.sbp.ri.cmu.edu/~choset)

    this    use voronoi to keep clear of obstacles    is just a 

heuristic.  and can be made to look stupid:

start    

   goal

slide 21

cell decomposition methods

cell decomp method one:  exact decomp
    break free space into convex exact polygons.

   but this is also impractical above 2-d or with non-polygons.

slide 22

11

approximate cell decomposition

.
.
.
.

.

.
.

.
.
.

g

.

.

.
.

.

.

.

.
.

.

  

.

  

.
.

.
.

.
.
.
  

.
.

  

s

lay down a grid

   
    avoid any cell which intersects an obstacle
    plan shortest path through other cells (e.g. with a*)
if no path exists, double the resolution and try again.  keep trying!!

slide 23

variable resolution    approximate and decompose   

slide 24

12

variable resolution    approximate and decompose   

slide 25

approximate cell decomposition

s

t

a i n

l

p

m

o

c

(cid:137) not so many complaints.  this is actually 

used in practical systems.

but
o not exact (no notion of    best    path)
o not complete: doesn   t know if problem 

actually unsolvable

o still hopeless above a small number of 

dimensions?

slide 26

13

potential methods

define

 a 

   
qu
function  
 
   
   
~
      

ions

   
  
   
   

configurat

:

u
    
such that
u
   
u
   

 
huge
   
small
 
   

    
   

 as
 as

you 
you 

move
move

obstacle
an 
 
 towards
 towards
 the
 
goal

write

d
     

          

   

g

   
   
   
   
qd
   
i
   
~

   
distance
 
=   
   

q
~
   
distance
 
=   
   

from 

q
 to 
~

q
  
~

goal

from 

q
 
nearest 
 to 
~

obstacle

 one

definition

u
 of 

   :

preferred
definition
 

   :

( )
qu
=
( )
qu

=

potential 

field 
example

( )
qd
i
1
   
2

( )
qd
   
g
(
)
( )
qd
g

2

+

1
2

  

1
( )
qd
i

2

simple motion 
planner: steepest 
descent on u

slide 27

slide 28

14

b l e m !

  p r o

s

u

v i o

e   o b

o t   t h

s p

solution i:

use special local-minimum-free potential fields (laplace 
equations can do this)     but very expensive to compute

solution ii:

when at a local minimum start doing some searching 
- example soon

slide 29

comparison

potential 
fields

approx 
cell 
decomp

voronoi

visibility

practical above 2 or 3 d?
practical above 8 d?
fast to compute?
usable online?
gives optimal?
spots impossibilities?
easy to implement?

slide 30

15

and now   ..

let   s look at one of the state-of-the-art motion 

planners.

latombe   s numerical potential 

field method

    combines cell decomposition and potential 

fields

    key insight: compute an    optimal    potential field 

in world coordinate space (not config space)
    define a c-space potential field in terms of 

world-space potential field.

slide 31

n.p.f. step i

get given a problem.
you have a world    which is a 2-d or 3-d space.
there are obstacles and a robot.

robot may be fixed or free-flying, may be jointed or 
totally rigid.

you have a start configuration.
goal spec. is more flexible than mere goal configuration:

you can specify between 1 and p points (p = number 
of dofs) in world space, and state that various points on 
the robot should meet those world points.  e.g.

   i want my tip to end 
up here   

or

   i want my tip here, my wrist 
there, and my shoulder way over 
there.   

slide 32

16

n.p.f. step ii

for each given world-goal-point we compute 
an optimal potential field in worldspace.

example:

world-goal-point 
for x joint on 
arm

optimal potential field can simply be 
   shortest distance   .

computed by discretizing 
world-space on a fine grid.
q:  why is fine grid not too 
expensive now?

slide 33

skeletons in the world space

zombie 
dna

    easy to skeletonize with a grid
then what?

1.
2.
3.

extend the skeleton to join to the goal
compute least-cost-to-goal for all points on skeleton
define potential field by traveling downhill to local part of skeleton.

the exact definition of this is unclear. it is not    shortest path to skeleton    and not 
   shortest path to goal    but a kind of combination. defined inductively by first de**** all 
points 1 away from skeleton as 1 + least adjacent skeleton-cell cost. then points next to 
them, etc., etc.

slide 34

17

potential from the skeleton method

remember, we do one of these for each world-
goal-point.

slide 35

n.p.f. iv

compute a potential field for configurations.
remember, for each goal point we have computed a world-
space potential.

. b goal

b

a

. a goal

   b    point contours

   a    point contours

slide 36

18

n.p.f. iv

combining world space potentials into a c-space potential.
if wi(pointi(q) is the potential field for the i   th distinguished 
point on the robot   
we could define

~

ei
..

hed

   
   
   

   
   
   

q
~

w
i

distinguis

   

point

   
  
   
   

   
=   
   

   
   
   
   
   
   
or many other combination methods, e.g.
   
   
   

max
distinguis

   
=   
   

   
  
   
   

point

w
i

q
~

q
~

q
~

   
   
   

hed

ei
..

i

i

   
   
   

   
   
   

empirically, this is preferred

slide 37

npf v

we   re pretty much done!

perform id119 from the start configuration with 
your c-space potential field   

until   

(cid:190) you get to the goal config
(cid:190) you find you   re in a local minimum.

sadly, although the worldspace potentials 
were minimum-free, the combination is not.

what to do in a local minimum??
1. best first search
2. random search

slide 38

19

best first search with npf
    remember all the c-space places you   ve 
visited in the search (search on a fine c-
space grid).
    when you expand a grid point consider all 
its neighbors on the grid.
    always expand gridpoint with lowest c-
space potential value.
    during most of search runs quickly down gradient.
    when in a local minimum, must wait for minimum to 

   fill up   .

slide 39

empirical results

1/10 second to solve on a sparc. 
(in 1992 claimed to be fastest 
algorithm by 2 orders of 
magnitude, and three orders of 
nuns.)

5 seconds to solve.

3 degrees of freedom.

slide 40

20

randomized search with npf
    on each step choose from a random set 

of, say, 100 neighbors on c-space grid.

    if none reduce the potential, current state 

is recorded as being a local minimum.

    if was local minimum, perform a random walk for t

timesteps to escape (one hopes)

    keep doing this, building up a graph of 

   adjacent    local minima.

    continue until one local minimum turns out 

to be the goal.

how?  many details, and a slightly depressingly large 
number of magic parameters are involved.

slide 41

randomized search results

10 secs. (slower than best first)

2 mins.      8 dof
spectacular result.

slide 42

21

randomized search results

10 dof   3 mins.

31 dof manipulator in 3-d workspace        15 mins.

slide 43

what should you know

    how to define configuration space obstacles
    the basic idea behind, and pros and cons of

(cid:190) visibility graph methods
(cid:190) voronoi methods
(cid:190) cell decomposition methods
(cid:190) potential field methods

    latombe   s trick of using optimal world-space 

potentials for good c-space potentials.

see also the book robot motion planning by latombe (klumer 1990).  

russell & norvig has a rather brief chapter on the subject.

slide 44

22

comparison

potential 
fields

approx 
cell 
decomp

voronoi

visibility

practical above 2 or 3 d?
practical above 8 d?
fast to compute?
usable online?
gives optimal?
spots impossibilities?
easy to implement?

?

in 2-d

in 2-d

?

?

slide 45

23

