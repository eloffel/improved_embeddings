recent advances in id33 

qin iris wang 

yue zhang

  

at&t interactive 

cambridge university 

qiniriswang@gmail.com 

frcchang@gmail.com 

naacl tutorial, los angeles 

june 1, 2010  

topic-author clouds of  
naacl-hlt 2010 

quite 

popular 

courtesy: http://www.wordle.net  

1 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

id33 events in 
recent years 

!! conll-x shared task: multi-lingual 

id33 in 2006 
!! http://nextens.uvt.nl/~conll/ 

!! tutorial by joachim nivre and sandra kuebler 

at coling-acl in 2006   
!! http://aclweb.org/mirror/acl2006/program/tutorials/

dependency.html 

!! conll shared task: joint parsing of syntactic 

and semantic dependencies in 2008 
!! http://www.yr-bcn.es/conll2008/ 

2 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

a few notes 

!! this tutorial is focused on recent development in 

id33 
!! after 2006 

!! although this tutorial is on id33, 

most approaches are applicable to other formalisms 
!! e.g., phrase-structure parsing or synchronous 

parsing for mt 

!! the field is really parsing instead of dependency 

parsing 
!! read all the parsing papers if you can! 

3 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

tutorial goals 

!! introduce data-driven id33 

(graph-based,  transition-based and integrated 
models) 

!! improve id33 via statistical 

machine learning approaches 
!! explore more features with better learning 

algorithms 

!! better parsing strategies (efficiency and accuracy) 

!! using extra information sources 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

4 

outline 

!!part a: introduction to dependency 

parsing 

!!part b: graph-based id33 

models 

!!part c: transition-based dependency 

parsing models  

!!part d: the integrated models 
!!part e: other recent trends in dependency 

parsing 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

5 

part a: introduction to 
id33 

qin iris wang 

at&t interactive 
qiniriswang@gmail.com 

naacl tutorial, los angeles 

june 1, 2010  

outline 

!! part a: introduction to id33 

!! dependency syntax 

!! id33 approaches 

!! part b: graph-based id33 models 

!! part c: transition-based id33 

models  

!! part d: the integrated models 

!! part e: other recent trends in dependency 

parsing 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

7 

ambiguities in nlp 

   i saw her duck.    

how about  

   i saw her duck with a telescope.    

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

8 

dependency structure vs.  
constituency structure 

parsing is one way to deal with 

s 

the ambiguity problem in 
natural language.  

subj 

obj 

mike 

ate 

the 

det 

cake 

np 

vp 

v

np 

n 

dt 

n 

mike  ate 

the 

cake 

 dependency structure 

 constituency structure 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

9 

dependency syntax 

!! a dependency structure represents syntactic 

relations (dependencies) between word pairs in 
a sentence 
!! by drawing a link between the two words 

!! for the link:  a   telescope  

the head of a is telescope 

   ! modifier 
   ! dependent 
   ! child 

   ! head 
   ! governor 
   ! parent 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

10 

dependency graphs 

!! a dependency structure is a directed graph g 

with the following constraints: 
!! connected 

!! acyclic 

!! single-head 

!! projective 

no crossing links (a word and its 
dependents form a contiguous substring of 
the sentence) 

11 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

dependency trees 

rt 
subj 

mod 

obj 

gen 

$ 

$ 

i      saw       her         duck         with        a   telescope 

rt 
subj 

obj 

mod 

gen 

i      saw       her         duck         with        a   telescope 

obj 

det 

obj 

det 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

12 

dependency trees 

rt 
subj 

mod 

obj 

gen 

$ 

$ 

i      saw       her         duck         with        a   telescope 

rt 
subj 

obj 

mod 

gen 

i      saw       her         duck         with        a   telescope 

obj 

det 

obj 

det 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

13 

how many trees for a 20-word sentence? 

over one million!!  

dependency trees!

over 100 possible trees for this seven-

word sentence! 

14 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

non-projective dependency trees 

!! with crossing links 

!! not so frequent in english  

   ! long-distance dependencies 
   ! languages with free word order, 
such as german and dutch    

!! all the dependency trees from id32 are 

projective 

!! common in other languages (kuhlmann & satta 09) 

!! 23% sentences are non-projective in the prague 

dependency treebank of czech  

!! percentage in german and dutch are even higher 

15 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

outline 

!! part a: introduction to id33 

!! dependency syntax 

!! id33 approaches 

!! part b: graph-based id33 models 

!! part c: transition-based id33 

models  

!! part d: the integrated models 

!! part e: other recent trends in dependency 

parsing 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

16 

id33  

!! the problem: 

!! input: a sentence 

!! output: a dependency tree (connected, acyclic, 

single-head) 

!! grammar-based parsing 

!! context-free dependency grammar 

!! constraint dependency grammar 

   ! ambiguities 
handling 
   ! incomplete 
search 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

17 

data driven id33  

!! data-driven parsing 

!! no grammar / rules needed; any tree is possible 

!! parsing decisions are made based on learned models 

!! can deal with ambiguities well 

!! three approaches 
!! graph-based models 

!! transition-based models 

!! hybrid models 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

18 

data-driven parsing framework 

training data 

{sentence, tree}  

pairs 

x: sentence 

parser 

learning  
algorithm 

parsing  
model 

parsing 
algorithm 

language 
independent 

y: dependency tree 

19 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

graph-based models!

       

!! score each possible output 

!! search for a tree with the highest score 

!! often use id145 to explore search 

space 

20 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

graph-based models 

!! define a space of candidate dependency trees for 

a sentence 
!! learning: induce a model for scoring an entire tree  

!! parsing: find a tree with the highest score, given the 

induced model 

!! exhaustive search 

!! features are defined over a limited parsing history 

!! represented by eisner 96, mcdonald et al. 05a, 

mcdonald et al. 05b and wang et al. 07 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

21 

transition-based models 

!! define a transition system for mapping a 

sentence to its dependency tree 
!! predefine some transition actions 
!! learning: induce a model for predicting the next 

state transition, given the transition history 

!! parsing: construct the optimal transition sequence, 

given the induced model 

!! greedy search / id125 
!! features are defined over a richer parsing history 
!! represented by yamada & matsumoto 03, nivre & 

scholz 04, zhang & clark 08, huang et al. 09 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

22 

comparison 

!! graph-based models 

!! find the optimal tree from all the possible ones 

!! global, exhaustive 

!! transition-based models 

!! predefine some actions (shift and reduce) 

!! find the optimal action sequence  

!! local, greedy or id125 

!! the two models produce different types of errors 

!! error distribution (mcdonald & nivre 07) 
!! have complementary strengths 

23 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

hybrid models 

!! three integration methods 

!! ensemble approach: parsing time integration (sagae 

& lavie 2006) 

!! feature-based integration (nivre & mcdonald 2008) 
!! single model combination (zhang & clark 2008) 

!! advantages 

!! gain benefits from both models 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

24 

summary     introduction to 
id33 

!! dependency syntax 

!! id33 approaches 

!! graph-based models 

!! transition-based models 

!! hybrid models 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

25 

references 

!! j. eisner. 1996. three new probabilistic models for id33: 

an exploration. in proc. coling. 

!! l. huang, w. jiang, and q. liu. 2009. bilingually-constrained 

(monolingual) id132. in proc. emnlp. 

!! m. kuhlmann and g. satta. 2009. treebank grammar techniques for 

non-projective id33. in proc. eacl. 

!! r. mcdonald, k. crammer, and f. pereira. 2005a. online large-margin 

training of dependency parsers. in proc. acl. 

!! r. mcdonald, f. pereira, k. ribarov and j. hajic. 2005b. non-projective 

id33 using spanning tree algorithms. in proc. hlt-
emnlp. 

!! r. mcdonald and j. nivre. 2007. characterizing the errors of data-driven 

id33 models. in proc. emnlp-conll.  

!! j.nivre and r. mcdonald. 2008. integrating graph-based and transition-

based dependency parsers. in proc. acl-hlt. 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

26 

!! j. nivre and m. scholz. 2004. deterministic id33 of 

english text. in proc. coling. 

!! k. sagae and a. lavie. 2006a. parser combination by reparsing. in proc. 

hlt-naacl.  

!! q. i. wang, d. lin and d. schuurmans. 2007. simple training of 

dependency parsers via structured boosting. in proc. ijcai. 

!! h. yamada and y. matsumoto. 2003. statistical dependency analysis with 

support vector machines. in proc. iwpt. 

!! y. zhang and s. clark. 2008. a tale of two parsers: investigating and 

combining graph- based and transition-based id33 us- ing 
beam-search. in proc. emnlp. 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

27 

recent advances in id33 

qin iris wang 

yue zhang

  

at&t interactive 

cambridge university 

qiniriswang@gmail.com 

frcchang@gmail.com 

naacl tutorial, los angeles 

june 1, 2010  

part b: graph-based 
id33 models 

qin iris wang 

at&t interactive 
qiniriswang@gmail.com 

naacl tutorial, los angeles 

june 1, 2010  

outline 

!! part a: introduction to id33 

!! part b: graph-based id33 models 

!! id33 model 

!! parsing algorithms 

!! features 

!! learning approaches 

!! part c: transition-based models  

!! part d: the combined models 

!! part e: other recent trends in dependency 

parsing 

2 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

id33 model 

    i      saw       her         duck 

!! x: an input sentence     

!! y: a candidate 

dependency tree 

!! xi"xj  : a dependency link 

from word i to word j  

!!          : the set of possible 
dependency trees over x  

! 

edge/link based 
factorization 
(eisner 96) 

y* = argmax
)

y "# x(

score (y | x)

= argmax
)

y "# x(

%

score (x i $ x j )

(xi $x j )"y

!! applicable to both 

probabilistic and non-
probabilistic models 

3 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

edge based factorization 

y* = argmax
)

y "# x(

%

score(x i $ x j )

( xi $x j )"y

standard linear 

classifier 

! 

a vector of features 

a vector of feature weights 

!! the score of a link is dot product between feature 

vector and feature weights 
!! what features we can use? (later) 

!! what learning approaches can lead us to find the best 

tree with the highest score  (later) 

4 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

score of a link 

i      saw       her         duck         with        a   telescope 
!! the score of each link is based on the features 

!! the features for the word pair: (saw, duck)  

!! (saw, duck) = 1 

!! pos (saw, duck): (vbd, nn) = 1 

!! pmi (saw, duck) = 0.27  (pmi: pointwise mutual 

information) 

!! dist (saw, duck) = 2 

 dist2(saw, duck) = 4 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

5 

outline 

!! part a: introduction to id33 

!! part b: graph-based id33 models 

!! id33 model 

!! parsing algorithms 

!! features 

!! learning approaches 

!! part c: transition-based models  

!! part d: the combined models 

!! part e: other recent trends in dependency 

parsing 

6 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

comparison of some popular 
id33 algorithms 

name 

inventor 

projectivity  complexity 

cky-style chart parsing 

cocke   
younger   
kasami  

projective 

o(n5)  

eisner o(n3)  parsing alg.  eisner (96)  projective 

o(n3)  

maximum spanning tree 

shift-reduce style parsing 

chu-liu-
edmonds 
(65, 67) 

yamada, 
nivre 

non-projective  o(n2) 

projective 

o(n) 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

7 

the cky-style algorithm o(n5)  

[ 

mary 

] 

loves 

[ 

[ 

the 

] 

girl 

[ 

outdoors 

] 

] 

slide thanks to jason eisner 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

8 

why cky is o(n5) not o(n3) 

...   advocate 

...   hug 

visiting relatives 
visiting relatives 

b 

c 

i 

h 

j 

j+1 

h    

k 

a 

o(n3 combinations) 

o(n5 combinations) 

i 

h 

k 

9 

slide thanks to jason eisner 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

o(n4) parsing algorithm 
(eisner&satta 99) 

!! combine what b and c? 

b 

c 

!! must try different-width c   s 

(vary k) 

i 

h 

j 

j+1 

h    

k 

!! must try different midpoints j 

a 

i 

h    

k 

!! separate these! 

slide thanks to jason eisner 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

10 

o(n4) parsing algorithm 
(eisner&satta 99) 

step 1: (i, j, h, h   ) 
             o(n4) 

step 2: (i, h, h   , k) 
             o(n4) 

(the old cky way) 

b 

c 

b 

c 

i 

h 

j 

j+1  h    

i 

h 

j 

j+1 

h    

k 

a 

i 

h 

k 

slide thanks to jason eisner 

a 

c 

c 

i 

h 

h    

h    

k 

a 

i 

h 

k 

11 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

we can do better 

(the old cky way) 

b 

step 1: (j, h, h   ) 
             o(n3) 

step 2: (h, h   , k) 
              o(n3) 

step 3: (i, h, k) 
              o(n3) 
c 

b 

c 

h 

j 

j+1  h    

i 

h 

j 

j+1 

h    

k 

a 

a 

c 

c 

h 

h    

h    

k 

i 

h 

k 

b 

a 

slide thanks to jason eisner 

h 
naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

i 

12 

h 

k 

the o(n3) half-tree parsing algorithm 
(eisner 96) 

[ 

mary 

] 

loves 

[ 

[ 

the 

] 

girl 

[ 

outdoors 

] 

] 

slide thanks to jason eisner 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

13 

outline 

!! part a: introduction to id33 

!! part b: graph-based id33 models 

!! id33 model 

!! parsing algorithms 

!! features 

!! learning approaches 

!! part c: transition-based models  

!! part d: the combined models 

!! part e: other recent trends in dependency 

parsing 

14 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

basic features 

i      saw       her         duck         with        a   telescope 
prp   vbd          prp$              nn                   in            dt         nn 

!! uni-gram features 

!! bi-gram features 

!! in between pos features 

!! surrounding word pos 

features 

saw_vbd, saw, vbd 
duck_nn, duck, nn 

saw_vbd_duck_nn, vbd_duck_nn, 
saw_duck_nn, 
saw_vbd_nn, saw_vbd_duck, 
saw_duck, vbd_nn 

vbd_prp$_nn 

vbd_prp$_prp$_nn, prp_vbd_prp$_nn, 
vbd_prp$_nn_in, prp_vbd_nn_in 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

15 

non-local features 

!! also known as dynamic features 

!! take into account the link labels of the 

surrounding word-pairs when predicting the label 
of current pair  
!! commonly used in sequential labeling  (mccallum et 

al. 00, toutanova et al. 03) 

!! a simple but useful idea for improving parsing 

accuracy 
!! wang et al. 05 

!! mcdonald and pereira 06 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

16 

non-local features 

i     saw       her         duck         with        a   telescope 

i      saw       her         duck        with         a        spot 

!! a word   s children are generated first, before it modifies 

another word 
!! define a canonical order  

!!    with telescope/with spot    are the dynamic features for 

deciding whether generating a link between    saw & 
with    or    duck & with    

17 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

features from other resources 

!! cluster-based features (wang et al. 05, koo et al. 08) 

!! subtrees from auto-parsed data (w. chen et al. 09) 

!! alignment features from bilingual data (huang et 

al. 09) 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

18 

outline 

!! part a: introduction to id33 

!! part b: graph-based id33 models 

!! id33 model 

!! parsing algorithms 

!! features 

!! learning approaches 

!! part c: transition-based models  

!! part d: the combined models 

!! part e: other recent trends in dependency 

parsing 

19 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

learning approaches for 
id33 

!! local learning approaches 

word pairs along with 
corresponding features 
extracted from the training data 

!! learn a local link classifier given a set of features 

defined on the local training examples  

!! global learning approaches 

!! unsupervised/semi-supervised learning 

approaches 
!! use both annotated training data and un-annotated 

raw text 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

20 

local training examples 

!! given training data {(x, y)} 

l: left link 

r: right link 

n: no link 

local 

the  boy  skipped 

school 

regularly 

examples 

word-pair     link-label  instance_weight   features 
the-boy  

 1        

 l 

     w1_the,  w2_boy, w1w2_the_boy, t1_dt,  

 

boy-skipped

skipped-school

 

 l  

 r  

 

      t2_nn, t1t2_dt_nn,  dist_1,     

 1        

     w1_boy,  w2_skipped,     

 1        

     w1_skipped,  w2_ school,     

skipped-regularly  r  

 1        

     w1_skipped,  w2_regularly,     

the-skipped

the-school
    

 n 

 n 

 1        

     w1_the,  w2_skipped,     

 1        

     w1_the,  w2_school, 

     

21 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

local training methods 

!! learn a local link classifier given a set of features 

defined on the local examples  

!! for each word pair in a sentence 

!! no link, left link or right link ? 

!! 3-class classification 

!! efficient o(n) local training 

!! any classifier can be used as a link classifier for 

parsing 

22 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

combine local training with 
a parsing algorithm 

training 

 sentences {(x, y)} 

local training 

 examples 

local link model 

h 

link score 

dependency  

parsing algorithm 

standard 

application of ml 

dependency tree 

23 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

parsing with a local link classifier 

!! learn the weight vector       over a set of features 

defined on the local examples  

!
"

!! generative approaches 

!! maximum id178 models (ratnaparkhi 99, charniak 00) 

!! discriminative approaches 

!! support vector machines (yamada & matsumoto 03)  

!! use a richer feature set! 

!! each link is scored separately, instead of being 

computed in coordination with other links in a sentence 

24 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

global training for parsing 

!! directly capture the relations between the links 

of an output tree 

!! incorporate the effects of the parser directly into 

the training algorithm 
!! structured id166s (tsochantaridis et al. 04) 

!! max-margin parsing (taskar et al. 04) 

!! improved large-margin training (wang et al. 06) 

!! online large-margin training (mcdonald et al. 05a) 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

25 

standard large margin training 

!! having been used for parsing 

!! tsochantaridis et al. 04, taskar et al.04 

exponential 
constraints! 

!! state of the art performance in dependency 

parsing 
!! mcdonald et at. 05a 

26 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

online large-margin training 
(mcdonald et al. 05a ) 

!! for each training instance 

!! find current k best trees: 

add o(klogk)
(huang& chiang 05) 

!! create constraints using these k best trees 

!! small number of constraints for each qp 

mira 
(crammer & 
singer 03 

only k constraints 
for each qp 

27 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

structured boosting (wang et al. 07)   

!! a simple approach to training structured 

classifiers by applying a boosting-like procedure 
to standard supervised training methods 
!! a simple variant of standard boosting algorithms 

adaboost m1 (freund & schapire 97) 

!! advantages 

!! global optimization 

!! simple, as efficient as local methods 

!! general, can use any local classifier  

!! besides id33, it can be easily applied 

to other tasks 

28 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

structured boosting for  
id33 

global 

training & 
efficient  

training 

 sentences {(s, t)} 

compare with the gold standard trees 

local training 

 examples 

increase the weight of  
re-weight the mis-parsed examples 
mis-classified examples 

local link classifier 

link score 

h 

dependency  

parsing algorithm 

h1, h2, h3,    ,hk 

dependency trees 

29 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

structured boosting (an example) 

i      saw       her         duck         with        a   telescope 

not feature 

weight!! 

instance_weight of the pair    saw-with    

instance_weight of the pair    duck-with    

       

i

w
e
g
h
t
s
o
f
 

 

l

o
c
a

l
 

e
x
a
m
p
e
s

l

 

iter

   1

            2

       3  

             t 

30 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

from supervised to semi/
unsupervised learning 

!!the id32 

!!raw text data 

!! 4.5 million words  

!! about 200 thousand 

!! news wire 

!! wikipedia 

sentences 

limited &  

!! annotation: 30 
person-minutes/ 
human-labor 
sentence 

expensive! 

!! web resources 

!!     

plentiful & 

free! 

semi/unsupervised learning 

31 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

unsupervised/semi-supervised 
learning approaches 

!! self-training 

!! not very effective 

!! until recently (mcclosky et al. 06a, mcclosky et al. 06b)  

!! generative models (em)   

!! local optima 

!! the disconnection between likelihood and accuracy 

!! same mistakes can be amplified at next iteration 

!!  semi-supervised structured id166 (s3vm) 

!! global optimum 

!! incorporate the effects of the parser directly into the 

32 

training algorithm 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

semi-supervised structured id166 
(s3vm) 

!! the objective of the standard s3vm is a 

combination of 
!! structured loss on labeled data (convex) 

!! structured loss on un-labeled data (non-convex) 

!! convex + non-convex is non-convex  

!! local optima 

!! complex and expensive to solve 

!! too complicated to apply it to parsing 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

33 

semi-supervised convex training 
id33 (wang et al. 08) 

!! the objective is a combination of 

!! structured loss on labeled data (convex) 

convex + convex 

is convex 

!! least square loss on un-labeled data (convex) 

!! using a stochastic id119 approach 

!! parameters are updated locally on each sentence 

!! converge after a few iterations 

!! this convex training approach: 

!! focused on semi-supervised learning instead of feature 

engineering 

!! used only basic features due to the complexity issue 

34 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

semi-supervised convex training 
id33 (wang et al. 08) 

raw text 

annotated 

data 

 optimize both 
feature vector and 
labels on raw text 

feature representation 

semi-supervised  
learning algorithm 

semi-supervised 
 parsing model 

 parameters including: 
   ! feature weights 
   ! labels on raw text 

35 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

simple semi-supervised 
id33 (koo et al. 08) 

!! extract features from unlabeled data 

!! instead of solving the complex s3vm, add features 

derived from a large unannotated corpus 

!! combining word clusters with discriminative 

learning (miller et al. 04) 
!! incorporate word clusters derived from a large 
unannotated corpus via unsupervised learning 

!! using both the baseline and cluster-based features  

!! average id88 learning algorithm (fast) 

!! achieve substantial improvement on dependency 

parsing over competitive baseline 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

36 

simple semi-supervised 
id33 (koo et al. 08) 

raw text 

annotated 

data 

(wang et al. 05) 
generative 
id203 model  

id91 
algorithm 

 average 
id88 

combined features 

standard supervised  
learning algorithm 

semi-supervised 
 parsing model 

   ! baseline features: over a million  
   ! cluster-based features: over a billion! 

37 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

summary     graph-based models 

!! id33 model 

!! id33 algorithms 

!! features 

!! learning algorithms 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

38 

references 

!! e. charniak. 2000. a maximum id178 inspired parser. in proc. naacl. 

!! j. eisner. 1996. three new probabilistic models for id33: 

an exploration. in proc. coling. 

!! y. freund and r. schapire. 1997. a decision-theoretic generalization of 

on-line learning and an application to boosting. computer and system 
sciences.  

!! t. koo, x. carreras and m. collins. 2008. simple semi-supervised 

id33. in proc. acl-hlt. 

!! a. mccallum, d. freitag and f. pereira. 2000. maximum id178 markov 

methods for information extraction and segmentation. in proc. icml. 

!! d. mcclosky, e. charniak and m. johnson. 2006. effective self-training 

for parsing. in proc. hlt-naacl. 

!! d. mcclosky, e. charniak and m. johnson. 2006. reranking and self-

training for parser adaptation. in proc. coling-acl. 

!! r. mcdonald, k. crammer, and f. pereira. 2005a. online large-margin 

training of dependency parsers. in proc. acl. 

39 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

!! r. mcdonald and f. pereira. 2006. online learning of approximate 

id33 algorithms. in proc. eacl. 

!! s. miller, j. guinness and a. zamanian. 2004. name tagging with word 

clusters and discriminative train- ing. in proc. hlt-naacl. 

!! a. ratnaparkhi. 1999. learning to parse natural language with 

maximum id178 models. machine learning. 

!! b. taskar, d. klein, m. collins, d. koller and c.  manning. 2004. 

max-margin parsing. in proc. emnlp. 

!! k. toutanova, d. klein, c. manning and y. singer. 2003.  

feature-rich part-of-speech tagging with a cyclic dependency network. 
in proc. hlt-naacl.  

!! i. tsochantaridis, t. hofmann, t. joachims and y. altun. 2004.  

support vector machine learning for interdependent and structured 
output spaces. in proc. icml. 

!! q. wang, c. cherry, d. lizotte and d. schuurmans. 2006. improved large 

margin id33 via local constraints and laplacian 
id173. in proc. conll.  

!! q. wang, d. schuurmans and d. lin. strictly lexical dependency 

parsing. 2005. in proc. iwpt. 

!! q. wang, d. lin and d. schuurmans. 2007. simple training of 

dependency parsers via structured boosting. in proc. ijcai. 

40 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

!! q. wang, d. lin and d. schuurmans. semi-supervised convex training 

for id33 . in proc. acl. 

!! h. yamada and y. matsumoto. 2003. statistical dependency analysis with 

support vector machines. in proc. iwpt. 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

41 

!"#"$%&   ()*$#"+&,$&-"."$("$#/&0*1+,$2

!"#$%&"   $()#*

23/$45)#*

+,-,$%#./&)0."1/

6)78&"9*/$:#"1/&   ".;

<"#"&"   =)#*>*7)"?@0a7

b&005)#*>*7)"?@0a7

3      45&67%81,*9:&58+&   $2"9"+
;7$"&<:&=><>&

!"#$%&   %(#")*+$+,)-."*/0%1/2/)0/)34%
!"#*+)5%6,0/7*

!"#$%&   ()

*   +,-./)#$0(.1#-2.34

5-66&   ()7)+   .896:+

899&:%(;$,#+"7<%:,*%9)5/7/*
=;)/%><%?@>@%

"#$%&   (

! !"#$%&   %()$#*+,-$(*)%$*%+./.)+.)-0%/"#1()2
! !"#$%3   %2#"/456"1.+%+./.)+.)-0%/"#1()2%7*+.81
! !"#$%9   %$#")1($(*)56"1.+%+./.)+.)-0%/"#1()2%7*+.81

! )*+   ,&$&-   ./+,(012+*,&   312*-4(,,(,
! :.-*+()2%"82*#($471
! ;."#)()2%"82*#($471%")+%<."$,#.%$.7/8"$.1%

! !"#$%:   %$4.%()$.2#"$.+%7*+.81
! !"#$%=   %*$4.#%#.-.)$%$#.)+1%()%+./.)+.)-0%/"#1()2

!

!"#$"%#&

! !"#$%&   #()*+$#"()"(

! ,-./)"#0)+#11+$2((3   1)+4"#$%(
! 562")+)#6%+6#-*3*#0)+#662"*3-4+02+4"#$%&   #()*+7)#0.")(
! 8%22()+0%)+%34%)(0+(62")*+2-)

! 9"#-(3032-&   #()*+$#"()"(

! :.31*+#+6#-*3*#0)+2.0$.0+.(3-4+#+(0#6;+#-*+#+()0+27+#6032-(
! 9%)+(0#6;+.()*+02+%21*+$#"03#11<&   .310+$#"()(
! 9%)+3-$.0+02;)-(+#")+$.0+3-02+#+=.).)

   

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! 4,(5%!16#7/!   (2,$(##)!-8$#,!   (2/&/
! 98&8&!56*,($*/!8*   265&//&7!0627/
! :2(*/$,$6*.(5,$6*/

! ;6*/8<&!$*   8,!0627/
! =8$#7!68,   8,!   (2/&

!

!!!!!!!!!!!!!!!!!!!!!!!!!!!"

#$%&

!   #()$*+

,(-#&.,&**$/ 0$,1

1&2!3!

1

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! 4,(5%!16#7/!   (2,$(##)!-8$#,!   (2/&/
! 98&8&!56*,($*/!8*   265&//&7!0627/
! :2(*/$,$6*.(5,$6*/

! ;6*/8<&!$*   8,!0627/
! =8$#7!68,   8,!   (2/&

!

!!!!!!!!!!" !!!!!!!!!!!!!!!!!#$%& !   #()$*+

,(-#&.,&**$/ 0$,1

1&2!3!

1

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! 4+   5$!06"7.!&   1+#   ""(!,8#"+!&   1.%.
! 98%8%!56)+   #).!8)&165%..%7!/617.
! :1   ).#+#6)-   5+#6).

! ;6).8<%!#)&8+!/617.
! =8#"7!68+&8+!&   1.%
!

!!!!

"#$%

!&"   (#)*

+   ,"%-+%))#. /#+0

0%1!2!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!3

1

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! 4+   5$!06"7.!&   1+#   ""(!,8#"+!&   1.%.
! 98%8%!56)+   #).!8)&165%..%7!/617.
! :1   ).#+#6)-   5+#6).

! ;6).8<%!#)&8+!/617.
! =8#"7!68+&8+!&   1.%
!

!!!!

"#$%

!

!!!!!!!!!!&"   (#)*

+   ,"%-+%))#. /#+0

0%1!2!

!!!!!!!!!!!!!!3

1

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! 4+   5$!06"7.!&   1+#   ""(!,8#"+!&   1.%.
! 98%8%!56)+   #).!8)&165%..%7!/617.
! :1   ).#+#6)-   5+#6).

! ;6).8<%!#)&8+!/617.
! =8#"7!68+&8+!&   1.%
!

!!!!!!!!!!"#$%!&"   (#)*

+   ,"%-+%))#. /#+0

0%1!2!

!!!!!!3

1

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! 4+   5$!06"7.!&   1+#   ""(!,8#"+!&   1.%.
! 98%8%!56)+   #).!8)&165%..%7!/617.
! :1   ).#+#6)-   5+#6).

! ;6).8<%!#)&8+!/617.
! =8#"7!68+&8+!&   1.%
!

!!!!!!!!!!"#$%!&"   (#)*!+   ,"%-+%))#.

/#+0

0%1!2!

!!!!!!3

12

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! 4,   5$!-6"73!&   .,#   ""(!18#",!&   .3%3
! 98%8%!56),   #)3!8)&.65%33%7!+6.73
! :.   )3#,#6)2   5,#6)3

! ;6)38<%!#)&8,!+6.73
! =8#"7!68,&8,!&   .3%
!

!!!!!!!!!!"#$%!&"   (#)*! +#,-

-%.!/!

!!!!!!0!!!!!!!!!!!!!!!!!!,   1"%2,%))#3

11

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! !"#$%&   ()*+&,#-".#))/&01.)"&,#-+2+
! 31212&$(4"#.4+&14,-($2++2*&5(-*+
! 6-#4+.".(47#$".(4+

! 8(4+192&.4,1"&5(-*+
! :1.)*&(1",1"&,#-+2

;;;

12

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! 4,(5%!16#7/!   (2,$(##)!-8$#,!   (2/&/
! 98&8&!56*,($*/!8*   265&//&7!0627/
! :2(*/$,$6*.(5,$6*/

! ;6*/8<&!$*   8,!0627/
! =8$#7!68,   8,!   (2/&

!

"

#$%&

   #()$*+

,(-#&.,&**$/ 0$,1

1&2!3!

12

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   %"()&"*%"(

! !(*+&#,(+-(.-/0()&"+1&/(#&2010&+%*

! !(34%4%(-5(2%6+(12#-712   (8-"0*

! 9-4"(+"&2*1+1-2$&#+1-2*

!(:;<9=>(?@abc@>(!?c$d@9=>(!?c$?<e;=

! @6&7)/%*

!f&/+g&"*%"(hi1j"%(%+(&/k>(lmmno

!p-.&2**-2(&20(i4   4%*(hlmmqo

!r.&2   (&20(c/&",(hlmmso

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   (#)(

,,,

*!+

*!

01$02$03$04$,,,

!"#$+.%   /

!"#$01*2.

*!-. *!/.

01-.

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   &($)#*   &($%

! +,&-   

///

+!.

+!

34)35)36)37)///

!"#$+.%   /

!"#$01*2.

+!01 +!21

3401

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   &($)#*   &($%

! +,&-   

!)./%,0%)%   #*1

222

+!.

+!)

6:)

67)68)69)222

!"#$+.%   /

!"#$01*2.

+!34 +!54

6:34

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   &($)#*   &($%

! +,-.*,

111

/!0

/!

45)46)47)48)111

!"#$+.%   /

!"#$01*2.

/!23 /!+3

4523

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   &($)#*   &($%

! +,-.*,

!)/(0%)%   #*1

333

2!/

!"#$+,%   -

67)68)69)6:)333

!"#$./*0,

6745

2!

2!45 2!+5

12

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   &($)#*   &($%

! +"*,-./   

222

0!1

0!

56)57)58)59)222

!"#$+.%   /

!"#$01*2.

0!-3 0!43

56-3

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   &($)#*   &($%

! +"*,-./   

!)0(1%)%   #*2

!)+33%)4&$2

666

5!0

!7.)+.%   /

89)8:)8;)8<)666

!"#$01*2.

5!

89-=

5!-=

5!>=

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   &($)#*   &($%

! +"*,"&-.   

111

/!0

/!

56)57)58)59)111

!"#$+-%   .

!"#$/0*1-

/!23 /!43

5623

,,

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   &($)#*   &($%

! +"*,"&-.   

!)/0%.1%)%   #*2

!)+33%)4&$2

666

5!/

5!)

:>)

:;):<):=)666

!"#$+.%   /

!"#$01*2.

5!78 5!98

:>78

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   ()$
! *#+#*,-./
! 0#+#0$123$
! !4#+#!534$./
! !0#+#!530-6,/

7$#18$9#-/#,$5$

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   ()$
! *#+#*,-./
! 0#+#0$123$
! !4#+#!534$./
! !0#+#!530-6,/

7$#18$9#-/#,$5$

*

7$#

18$9#-/#,$5$

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   ()$
! *#+#*,-./
! 0#+#0$123$
! !4#+#!534$./
! !0#+#!530-6,/

7$#18$9#-/#,$5$

*

7$#

18$9#-/#,$5$

!4

18$9#-/#,$5$

7$#

,-
,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   ()$
! *#+#*,-./
! 0#+#0$123$
! !4#+#!534$./
! !0#+#!530-6,/

7$#18$9#-/#,$5$

*

7$#

18$9#-/#,$5$

!4

18$9#-/#,$5$

*

18$9

-/#,$5$

7$#

7$#

,-

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   ()$
! *#+#*,-./
! 0#+#0$123$
! !4#+#!534$./
! !0#+#!530-6,/

7$#18$9#-/#,$5$

*

7$#

18$9#-/#,$5$

!4

18$9#-/#,$5$

*

18$9

-/#,$5$

7$#

7$#

!
0

18$9#-/

,$5$

7$#

,-

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   ()$
! *#+#*,-./
! 0#+#0$123$
! !4#+#!534$./
! !0#+#!530-6,/

7$#18$9#-/#,$5$

*

7$#

18$9#-/#,$5$

!4

18$9#-/#,$5$

*

18$9

-/#,$5$

7$#

7$#

!
0

18$9

,$5$

0

18$9#-/

,$5$

7$#

-/

7$#

,-

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   ()$
! *#+#*,-./
! 0#+#0$123$
! !4#+#!534$./
! !0#+#!530-6,/

7$#18$9#-/#,$5$

*

7$#

18$9#-/#,$5$

!4

18$9#-/#,$5$

*

18$9

-/#,$5$

7$#

7$#

!
0

18$9#,$5$

7$#

-/

!0

18$9

,$5$

0

18$9#-/

,$5$

7$#

-/

7$#

,-

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   ()$
! *#+#*,-./
! 0#+#0$123$
! !4#+#!534$./
! !0#+#!530-6,/

7$#18$9#-/#,$5$

*

7$#

18$9#-/#,$5$

!4

18$9#-/#,$5$

*

18$9

-/#,$5$

7$#

7$#

!
0

18$9#

0

18$9#,$5$

!0

18$9

,$5$

0

18$9#-/

,$5$

7$#

-/

,$5$

7$#

-/

7$#

-/

7$#

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   %"()&"*%"(

! +,-%(#.-)/%0,123(/,4%&"

! 56%"2(7."8(,*()9*:%8(.4#%(.41.(1:%(*1&#;

! 56%"2(7."8(%0#%)1(1:%("..1(,*().))%8(.4#%

! <,4;*(&"%(&88%8(=%17%%4(>+(&48(?@

! !*(*..4(&*(1:%2(&"%(,4()/&#%

! a%&   %"a

,-

!"#$%&   (#%)#&$*%&+#&

! !"#$%&   %"()&"*%"(

! +&,%-%.()&"*/0   1

((((((((((((((((((((((((((((((((!"#+%23(*4,5%#3
!"#+%23(((((((((((((((((((!"#+%23(0640(76./2/%"
(((((((((((((((((((((((((((((((888

(((((((((((((((((((((((((((((!"#9/   :3(6,5%#3
!"#9/   :3((((((((((((((!"#9/   :3()"%)(76./2/%"

(((((((((((((((((((((((((((((888

,,

!"#$%&   ()*%+,%&,$-%&)#&

! !"#$%&   ()   ")*+   "%,"*

! -   .,*   %*+",/012%34

!!*%&   #5*&1*613)*+   "&0   3*#   ()0)   &,%

!!*72,2,*18*(,9&*0(#1.0(:*;1")%

! <088,",(&*8"1.*+",/012%34

!="   (%0&01(*   #&01(%>*-?@a=*bca=*d@e?=

! c9   .+3,%

!f   .   )   *   ()*g   &%2.1&1*hijjkl

!?2   (:*,&*   3m*hijjnl

./

!"#$%&   ()*%+,%&,$-%&)#&

! !"#$%&   &($)#*   &($%

! +,&-   

///

+!.

+!

34)3.)35)36)///

!"#$)*%   0

!"#$1+-2*

+!01 +!21

./

!"#$%&   ()*%+,%&,$-%&)#&

! !"#$%&   &($)#*   &($%

! +,&-   

!)./%,0%)%   #*1

333

+!2

+!)

7:)

72)78)79)333

!"#$)*%   0

!"#$1+-2*

+!45 +!65

./

!"#$%&   ()*%+,%&,$-%&)#&

! !"#$%&   &($)#*   &($%

! +,-   

000

.!/

.!

34)3/)35)36)000

!"#$)*%   0

!"#$1+-2*

.!+1 .!21

./

!"#$%&   ()*%+,%&,$-%&)#&

! !"#$%&   &($)#*   &($%

! +,-   

!).(/%)%   #*0

!)122%)3&$0

666

4!

9:)95)9;)9<)666

!"#$)*%   0

!"#$1+-2*

4!5

4!+7 4!87

./

!"#$%&   ()*%+,%&,$-%&)#&

! !"#$%&   &($)#*   &($%

! +&,-   

000

.!/

.!

34)3/)35)36)000

!"#$)*%   0

!"#$1+-2*

.!12 .!+2

./

!"#$%&   ()*%+,%&,$-%&)#&

! !"#$%&   &($)#*   &($%

! +&,-   

!).(/%)%   #*0

!)122%)3&$0

666

4!5

!"#$)*%   0

9:)95)9;)9<)666

!"#$1+-2*

4!

4!78 4!+8

./

!"#$%&   ()*%+,%&,$-%&)#&

! !"#$%&   ()   ")*+   "%,"*

! -./,*#0/+1,2.&34*1.(,   "

! 56,"3*70")*.%*+8%9,)*0(#,*0(&0*&9,*%&   #:

! 56,"3*70")*,2#,+&*&9,*"00&*.%*+0++,)*0(#,

! ;.(:%*   ",*   )),)*<,&7,,(*=-*   ()*=->

! =&   ()   ")*0"*,   ?,"@

! ,/+.".#   1

./

!"#$%&   ()*%+,%&,$-%&)#&

! !"#$%&   ()   ")*+   "%,"*

! -./.0   ".&1*&2*%3.4&$",)5#,*+3"   %,$%&"5#&5",*+   "%.(6

!-   6   ,*   ()*7   8.,*9:;;<=

!>   (6*,&*   0?*9:;;@=

!a3   (6*   ()*b0   "c*9:;;d=

./

!"#$%&"   ()*+,+*-

! !"#$%&   

()   &&*+,-)./0)012&34%&3)5#")*2+0)*#3/67

! 8&+*2&")9/"0&"0)0#%:&0)+*

! ;#"3)#"3&"0)/"&)<&9*

! =+,<0)/33&3)$&*.&&,),&+-2$#"0)>#,)0*/1<?

./

!"#$%&"   ()*+,+*-

! !"#$%&   

()   &&*+,-)./0)012&34%&3)5#")*2+0)*#3/67

! 8,&)9#%4*+#,

()   &&*+,-)5#")*2+0)./0)012&34%&3)*#3/67

..

!"#$%&"   ()*+,+*-

! !"#$"%&   %(   )%   $"*&+,$-   %&.//01

! 2))&3"&%45   3&365$("&5(&57%&83   9%   :&9;38

!&<(89&57%&9%6(")&;(   )&(==&9536>

!&?7%&(57%   &5   3"9$5$("9&3   %&57%&93@%

./

!"#$%&"   ()*+,+*-

! "   !$6%3*!%3*   +&%&2   !*,%&2   

! +)*7

!

!!!!!!!!!!!!!!!!!!!!!!!!!!!"!#$$%&   (!)*+!+,-$./0$.!123!%-&+!%2.*45!

./

!"#$%&"   ()*+,+*-

! "   !$6%3*!%3*   +&%&2   !*,%&2   

! +)*7

!

!!!!!!!!!!"

!!!!!!!!!!!!!!!!!#$$%&   (!)*+!+,-$./0$.!123!%-&+!%2.*45!

./

!"#$%&"   ()*+,+*-

! "   !$6%3*!%3*   +&%&2   !*,%&2   

! +)*7

!

!!"!#$$%&   (!!!!!!!!!!!!!!!!!!)*+!+,-$./0$.!123!%-&+!%2.*45!

./

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! 5&!#6$2)!$2)&*%$%1&!)+$%1&

! *()7

!

!!!!!!!!"##$%&   !!!!!!!!!!!!!!!!!()*!*+,#-./#-!012!$,%*!$1-)34!

!!!!!!!!!!!!!!!!5

12

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! 5&!#6$2)!$2)&*%$%1&!)+$%1&

! *()7

!

"##$%&   !!()*!!!!!!!!!!!!!!!!*+,#-./#-!012!$,%*!$1-)34!

!!!!!!!!!!!!!5

12

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! 5&!#6$2)!$2)&*%$%1&!)+$%1&

! *()7

!

"##$%&   !!()*!!*+,#-./#-!!!!!!!!!!!012!$,%*!$1-)34!

!!!!!!!!!!!!!5

12

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! 5&!#6$2)!$2)&*%$%1&!)+$%1&

! *()7

!

"##$%&   !!()*!!*+,#-./#-!012!!!!!!!!!!!!$,%*!$1-)34!

!!!!!!!!!!!!!5

12

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! 5&!#6$-)!$-)&*%$%,&!).$%,&

!    3%.

!

"##$%&   !!()*! !+,-!!!!!!!!!!!!!!!!!!!!!*./#012#0!$/%*!$,0)34!

!!!!!!!!!!!!!5

12

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! 5&!#6$*,!$*,&-%$%)&!,.$%)&

!    3%.

!

"##$%&   ! !()*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!+,-!-./#012#0!$/%-!$)0,34!

!!!!!!!!!!!!!5

12

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! !"#$%&   (#&   (")*&*+"#(,&*+"

! 23%.

444

11

!"#$%&   (#()&*+%   ,-".%$   (&/".$)0,      

! 5&!#6$*.!$*.&,%$%)&!./$%)&

!    3%.

!

"##$%&   ! !()*!$+%,!!!!!!!!!!!!!!!!!!!!!!!!!-.,!,/+#012#0!$)0.34!

!!!!!!!!!!!!!5

12

!"#$%&"   ()*+,+*-

! !"#$"%&   %(   )%   $"*&+,$-   %&.//01

! 2))&3"&%45   3&365$("&5(&57%&83   9%   :&9;38

! ,(5&#$"%3   &3"<&=(   %

!>3"&?%&,@9ab3   %

!c48%65%)&#$"%3   &5$=%

./

!"#$%&   &($)*#%+,-.#"%&$/-."(0+%%+%

! !"##$%&

!    "()*+,-.+/",0",+"1(23

!4+1,$56

!4+1.,+/7+,%$21(,(/2+$5,(/21

! 8(77.%.2,+,&0.1

!4%59.$3.%

!4%591,$2*$%*

!:/%.;

12

#$%&   ()

! !"#$%&   %()$#*+,-$(*)%$*%+./.)+.)-0%/"#1()2
! !"#$%3   %2#"/456"1.+%+./.)+.)-0%/"#1()2%7*+.81
! !"#$%9   %$#")1($(*)56"1.+%+./.)+.)-0%/"#1()2%7*+.81

! :#")1($(*)56"1.+%/"#1()2%/#*-.11.1
! *)+,-   (./0&.,1   %234
! ;."#)()2%"82*#($471%")+%<."$,#.%$.7/8"$.1%

! !"#$%=   %$4.%()$.2#"$.+%7*+.81
! !"#$%>   %*$4.#%#.-.)$%$#.)+1%()%+./.)+.)-0%/"#1()2

!"

!"#$%&   ()*+($,&-./0

! !"#$

! %&#   ()*+"   *",&*-&./&,(&*"+*0   #,-101",2#(01",*0"*3/1$4*

0)&*5#   -&

! 6",&*37*-("   1,8*0   #,-101",*#(01",*819&,*(",0&:0

! ;"4&$-*0#$<&4*#3"/0*1,*0)&*,&:0*-&(01",

! =">5#   1-",*?10)*8   #5)23#-&4

! %&#   ()*+"   *",&*8   #5)*+   ">*(#,414#0&-

12

!"#$%&   ()*+($,&-./0

! !"#$%$"&   (%&   )(

*+,(-,(./

12

!"#$%&   ()*+($,&-./0

! !"##$%&   ()*   &+#*"),

! &-./0/*   /1#&*&+0*"0&/0#2

34#250%6&!4#250%6&74/.580&+#.0#.)#

! &9#:/.#&*&:/.*   &/0#2

34;"((0<6&!40"##6&74;<

! &=/)>&85&(.#&0"*.+/0/(.?*)0/(.&*0&*&0/2#

@%&+)("#

12

!"##$%&   ()*   &+#*"),

! !"#$%&"   ()   %*+,-   )%)$%"#./%01123

! 4   56)"7)   %$   "8(,$,98(

! :;(<,87%"5$,98(=%>?@ab/%4cd6c@e?b
! :9&&,87%"5$,98(=%id18hdf/%4cd6ifab
! i,8j(%"   )%"kk)k%l,$<%4cd6

! >$"   $%($"$)

! >$"5j%)m&$n/%89%l9   k%<"(%o))8%&   95)(()k%on%89l

! a,8,(<%($"$)

! >$"5j%598$",8(%98#n%   99$/%"##%&   95)(()k

! e   ))k,#n%&,5j(%;&%98)%$   "8(,$,98%"5$,98%"p$)   %"89$<)   %p   9m%

($"   $%$9%p,8,(<

>59   )*"5$,983

-.

!"##$%&   ()*   &+#*"),

! !"#$%&"   ()   

*)%+,)(%-$%.)   )

-.

!"##$%&   ()*   &+#*"),

! !"#$%&"   ()   

*)%+,)(%-$%.)   )

/

*)%

+,)(%-$%.)   )

-.

!"##$%&   ()*   &+#*"),

! !"#$%&"   ()   

*)%+,)(%-$%.)   )

/

*)%

+,)(%-$%.)   )

01

0

2

/

+,)(%-$%.)   )

*)%

*)%+,)(

*)%+,)(

--

!"##$%&   ()*   &+#*"),

! !"#$%&"   ()   

*)%+,)(%-$%.)   )

/

*)%

+,)(%-$%.)   )

01

0

2

/

+,)(%-$%.)   )

*)%

*)%+,)(

*)%+,)(

-.

!"##$%&   ()*   &+#*"),

! !"#$%&"   ()   

*)%+,)(%-$%.)   )

/

*)%

+,)(%-$%.)   )

01

+,)(%-$%.)   )

/

+,)(

-$%.)   )

*)%

*)%

-.

-.

!"##$%&   ()*   &+#*"),

! !"#$%&"   ()   

*)%+,)(%-$%.)   )

/

*)%

+,)(%-$%.)   )

01

+,)(%-$%.)   )

/

+,)(

-$%.)   )

*)%

*)%

0
2

+,)(%-$

.)   )

*)%

-.

-.

!"##$%&   ()*   &+#*"),

! !"#$%&"   ()   

*)%+,)(%-$%.)   )

/

*)%

+,)(%-$%.)   )

01

+,)(%-$%.)   )

/

+,)(

-$%.)   )

*)%

*)%

0
2

+,)(

.)   )

2

+,)(%-$

.)   )

*)%

-$

*)%

-.

-.

!"##$%&   ()*   &+#*"),

! !"#$%&"   ()   

*)%+,)(%-$%.)   )

/

*)%

+,)(%-$%.)   )

01

+,)(%-$%.)   )

/

+,)(

-$%.)   )

*)%

*)%

0
2

+,)(%.)   )

*)%

-$

02

+,)(

.)   )

2

+,)(%-$

.)   )

*)%

-$

*)%

-.

-.

!"##$%&   ()*   &+#*"),

! !"#$%&"   ()   

*)%+,)(%-$%.)   )

/

*)%

+,)(%-$%.)   )

01

+,)(%-$%.)   )

/

+,)(

-$%.)   )

*)%

*)%

0
2

+,)(%

2

+,)(%.)   )

02

+,)(

.)   )

2

+,)(%-$

.)   )

*)%

-$

.)   )

*)%

-$

*)%

-$

*)%

-.

!"#$%&   ()*+($,&-./0

! !"##$%&   ()*   &+#*"),

! &-"(.   #/0&

(1#&#""("&   #*$+&2(&31)(""#)2&4*"+#

12

!"#$%&   ()*+($,&-./0

! !"#$%&"#   ()

! *""+&%,%-.//"   "01%+#   1.#2%&1#1"%.1"$&%.0%#3"0-#4
! 5&"%1)"%161#2%&(6   "%6/%#22%#(1.60&%16%   #07%&1#1"%.1"$&

!"#$%! &   $(%"
#   ")*#+ $ &   $(%

!"#$%!   ")*#+"

8

! 9:6.-%"      6   %+   6+#3#1.60&%/   6$%"#   2;%-"(.&.60&

12

12

!"#$%&"#   ()

! !"#$%&   ()*+,

! -*.#/00*/(#/1(2343   0(567789

! :.#/4(#/1(;&#+,(5677<9

*+

!"#$%&"#   ()

! !"#$%&   ()$

*$#+,$-#./#0$1$

*+

!"#$%&"#   ()

! !"#$%&   ()$

*$#+,$-#./#0$1$

2

*$#

+,$-#./#0$1$

**

!"#$%&"#   ()

! !"#$%&   ()$

*$#+,$-#./#0$1$

2

*$#

+,$-#./#0$1$

!3

!

4

2

+,$-#./#0$1$

*$#

*$#+,$-

./#0$1$

*$#+,$-

./#0$1$

*+

!"#$%&"#   ()

! !"#$%&   ()$

*$#+,$-#./#0$1$

2

*$#

+,$-#./#0$1$

!3

!

4

2

+,$-#./#0$1$

*$#

*$#+,$-

./#0$1$

*$#+,$-

./#0$1$

+,$-

./#0$1$

*$#

*$#+,$-#./

0$1$

*$#+,$-####./

0$1$

2

2

!

4

2

!

4

*+

!"#$%&"#   ()

! !"#$%&   ()$

*$#+,$-#./#0$1$

2

*$#

+,$-#./#0$1$

!3

!

4

2

+,$-#./#0$1$

*$#

*$#+,$-

./#0$1$

*$#+,$-

./#0$1$

+,$-

./#0$1$

*$#

*$#+,$-#./

0$1$

*$#+,$-####./

0$1$

2

2

!

4

2

!

4

+,$-#./

0$1$

*$#

*$#+,$-#./#0$1$

*$#+,$-##

#

0$1$

./*+

!"#$%&"#   ()

! !"#$%&   ()$

*$#+,$-#./#0$1$

2

*$#

+,$-#./#0$1$

!3

!

4

2

+,$-#./#0$1$

*$#

*$#+,$-

./#0$1$

*$#+,$-

./#0$1$

+,$-

./#0$1$

*$#

*$#+,$-#./

0$1$

*$#+,$-####./

0$1$

2

2

!

4

2

!

4

+,$-#./#0$1$

+,$-#./

0$1$

*$#
*$#

+,$-

0$1$

*$#

*$#

./

*$#

+,$-#./#0$1$

*$#

*$#+,$-#./#0$1$

*$#+,$-###
*$#+,$-###

0$1$
0$1$

./
*+

!"#$%&"#   ()

! !"#$%&   ()$

*$#+,$-#./#0$1$

2

*$#

+,$-#./#0$1$

+,$-#0$1$

*$#

./

+,$-#0$1$

*$#

./

+,$-#./#0$1$

!3

!

4

2

+,$-#./#0$1$

*$#

*$#+,$-

./#0$1$

*$#+,$-

./#0$1$

+,$-

./#0$1$

*$#

*$#+,$-#./

0$1$

*$#+,$-####./

0$1$

2

2

!

4

2

!

4

+,$-#./#0$1$

+,$-#./

0$1$

*$#
*$#

+,$-

0$1$

*$#

*$#

./

*$#

+,$-#./#0$1$

*$#

*$#

*$#+,$-#./#0$1$

*$#+,$-###
*$#+,$-###

0$1$
0$1$

./
*+

!"#$%&"#   ()

! !"#$%&   ()$

*$#+,$-#./#0$1$

2

*$#

+,$-#./#0$1$

+,$-#

*$#

./

0$1$

+,$-#./#

+,$-#0$1$

*$#

./

+,$-#0$1$

*$#

./

+,$-#./#0$1$

*$#################0$1$

*$#

*$#

!3

!

4

2

+,$-#./#0$1$

*$#

*$#+,$-

./#0$1$

*$#+,$-

./#0$1$

+,$-

./#0$1$

*$#

*$#+,$-#./

0$1$

*$#+,$-####./

0$1$

2

2

!

4

2

!

4

+,$-#./#0$1$

+,$-#./

0$1$

*$#
*$#

+,$-

0$1$

*$#

*$#

./

*$#

+,$-#./#0$1$

*$#+,$-#./#0$1$

*$#+,$-###
*$#+,$-###

0$1$
0$1$

./
*+

!"#$%&"#   ()

! !"#$%&   ()$

*$#+,$-#./#0$1$

2

*$#

+,$-#./#0$1$

+,$-#

*$#

./

0$1$

+,$-#./#

+,$-#0$1$

*$#

./

+,$-#0$1$

*$#

./

+,$-#./#0$1$

*$#################0$1$

*$#

*$#

!3

!

4

2

+,$-#./#0$1$

*$#

*$#+,$-

./#0$1$

*$#+,$-

./#0$1$

+,$-

./#0$1$

*$#

*$#+,$-#./

0$1$

*$#+,$-####./

0$1$

2

2

!

4

2

!

4

+,$-#./#0$1$

+,$-#./

0$1$

*$#
*$#

+,$-

0$1$

*$#

*$#

./

*$#

+,$-#./#0$1$

*$#+,$-#./#0$1$

*$#+,$-###
*$#+,$-###

0$1$
0$1$

./
*+

!"#$%&   (")   *#%+,-$

! !"#$%&   ()$#)"*+"(

! ,$""-.   /0%#/   ("#$%&

! 1"#2   ("#$%&

! 1"()34+$()

!56#7   ")   #/8   9:;;<=

./

!"#$%&   (")   *#%+,-$

! !"#$%&   ()$#)"*+"(

! ,$""-.   /0%#/   ("#$%&

! 1"#2   ("#$%&

! 1"()34+$()

! 5)&"$   ()$#)"*+"(6

!78#9*   #9-   !#*#"   :;<=<>

./

#$%&   ()

! !"#$%&   %()$#*+,-$(*)%$*%+./.)+.)-0%/"#1()2
! !"#$%3   %2#"/456"1.+%+./.)+.)-0%/"#1()2%7*+.81
! !"#$%9   %$#")1($(*)56"1.+%+./.)+.)-0%/"#1()2%7*+.81

! :#")1($(*)56"1.+%/"#1()2%/#*-.11.1
! ;.-*+()2%"82*#($471
! *)+,(   (-.+&-/,   %012.+(3.4)+%$,).%)15&+%)2.

! !"#$%;   %$4.%()$.2#"$.+%7*+.81
! !"#$%<   %*$4.#%#.-.)$%$#.)+1%()%+./.)+.)-0%/"#1()2

!"

!"#$%&

! !"#$%&   $%#$()*+#$,+&-(.,.*-$&),.*-(

! /.-#&+$0*1#2(

!"#$% !&"   (#)"#$ *%&   +$%% *%&   +$%, -(   . "#)   %/   

*%&   +$%&-%(0.    ! *%&   +$%"

! 3*-42.-#&+$0*1#2(

! $567

$$$$-*-42.-#&+$8#+-#2(

      

!"#$%&%   (#)   *$&+,-.

! !"#$%%&   %($)*   +")   ($#,   -)$*./-/"*   $#-/"*

! 012

;;;

0o7

0o

9>   9s   9=   9t   ;;;

o,(   .-$#r

o,(   /*6c-

0o!p 0oqp

9>!p

! 34$56%(.   

! 2$%-7$).()   89/:)(   (-   $%;<   =>>?@

! a",$*.."*   $*b   9cdc(.   8=>>e@

! fc$*   8=>>e@

! !gh012   8,--6ijjkkk;#./(;*-c;(bc;-kjl#m%/*j%/n.:5j@

/0

!"#$%&%   (#)   *$&+,-.

! !"#$%&"   $"()*#$"+

;;;

./<

./

23   2:   2@   2a   ;;;

/>"   +$#7?

/>"   56)%$

./89 ./=9

2389

! ,-#()*"   $"()*#$"+

! ./01   ./)1   
! 2301   23)1   
! ./   23   45+$#67"1   
! ./8901   ./89)1   
! 2:01   2:)
! ;;;

/0

!"#$%&%   (#)   *$&+,-.

! !"#$%&"   $"()*#$"+

ccc

./b

./

23   2:   2f   2g   ccc

/e"   +$#7?

/e"   56)%$

./89 ./d9

2389

! ,-#()*"   $"()*#$"+

! ./01   ./)1   
! 2301   23)1   
! ./   23   45+$#67"1   
! ./8901   ./89)1   
! 2:01   2:)
! ;

! <   +"7=64   =&4"&   )=*>6=(5#*   ?"&6"*   05**   7=(@56"   5645a54%#*+

/0

!"#$%&%   (#)   *$&+,-.

! !"#$%""&   "(%)*   +,(   $(-+   -(./(*0(   #1   %0+2#*-

! 32*(%)   4#5("   +#   -0#)(   %0+2#*-

! !"#$%""&   -(%)0,   1#)   +,(   $(-+   -(./(*0(   #1   %0+2#*-6   7"#$%""&   

"(%)*

8
8

!"#$%! &   $(%"
#   ")*#+ $ &   $(%
#   ")*#+ $ &   $(% # ,%   )-$%$ ()   )-( ,#$    ")*#+

!"#$%!   ")*#+"

,%   )-$%%.%*/0) ! ,%   )-$%"

/0

!"#$%&%   (#)   *$&+,-.

! !"#$%""&   "(%)*   +,(   $(-+   -(./(*0(   #1   %0+2#*-

! 3,%*4   %*5   6"%)7   89::;<

! =-(   +,(   4(*()%"2>(5   ?()0(?+)#*   "(%)*2*4   %"4#)2+,@   86#""2*-a   

9::9<

/0

!"#$%&%   (#)   *$&+,-.

! !"#$%&"   $"()*#$"+

>>>

./?

./

23   2e   2f   2g   >>>

/c"   +$#7d

/c"   56)%$

./@a ./ba

23@a

! ,-#()*"   $"()*#$"+

! ./01   ./)1   
! 2301   23)1   
! ./   23   45+$#67"1   
! ./0./)1   ./02301   ./0)230)   

!

! 8

! 9#6%#*   7:(;56#$5:6   :<   56<:&(#$5:6=   *56"#&   (:4"*>   

/0

!"#"$"%&"   

!"#$%&   ()   #$*(+   $(,-#.*(/.(!   *(01123(45.6#6"7"89":(;.<=78(>.5(?:9".$@/#8=<(a-"$=8=()=b=$<=$:&(4#58"$%3(c$(
b5.:==<"$%8(.>(da;e(*(b#%=8(ffg@fhh
e"#$%(i   #$%*(j=$6"$(+"#$%*(#$<(k   $(e"   *(011g3(/"7"$%   #77&@a.$895#"$=<(l;.$.7"$%   #7m(n-">9@o=<   :=(4#58"$%3(c$(
45.:==<"$%8(.>(d;pe4(011g3
o":-#5<(+.-#$88.$(#$<(4"=55=(p   %   =83(01123(c$:5=q=$9#7()=b=$<=$:&(4#58"$%(r8"$%(s$7"$=(e=#5$"$%3(c$(45.:==<"$%8(.>(
9-=(a.pee(n-#5=<(t#8u(n=88".$(.>(d;pe4@a.pee*(bb3(vvwxyvvwz*(45#%   =*(+   $=(01123
+.#u"q(p"[5=(#$<(o&#$(;:).$#7<3(011z3(c$9=%5#9"$%(\5#b-@/#8=<(#$<(t5#$8"9".$@/#8=<()=b=$<=$:&(4#58=583(c$(
45.:==<"$%8(.>(?ae@1z](iet*(b#%=8(gf1ygfz*(a.7   q6   8*(rn?3(+   $=3(
+.#u"q(p"[5=*(+.-#$(i#77*(+=$8(p"788.$*(\   78.$(d5&%"9*(#$<(n[=9.87#[(;#5"$.[3(011h3(e#6=7=<(b8=   <.@b5.^=:9"[=(
<=b=$<=$:&(b#58"$%(_"9-(8   bb.59([=:9.5(q#:-"$=83(c$(45.:==<"$%8(.>(9-=(v19-(a.$>=5=$:=(.$(a.qb   9#9".$#7(p#9   5#7(
e#$%   #%=(e=#5$"$%(la.peem*(b#%=8(00vy00f3
+.#u"q(p"[5=3(011g3(p.$@45.^=:9"[=(<=b=$<=$:&(b#58"$%("$(=   b=:9=<(7"$=#5(9"q=3(c$(45.:==<"$%8(.>(9-=(x29-(q==9"$%(.>(9-=(
?ae(#$<(9-=(x9-("$9=5$#9".$#7(:.$>=5=$:=(.$(p#9   5#7(e#$%   #%=(45.:=88"$%(.>(9-=(ape4*(b#%=8(wfv@wfg3
b=$^"(n#%#=(#$<(?7.$(e#["=3(011h3(4#58=5(a.q6"$#9".$(6&(o=b#58"$%3(c$(45.:==<"$%8(.>(9-=(i   q#$(e#$%   #%=(
t=:-$.7.%&(a.$>=5=$:=(.>(9-=(p.59-(?q=5":#$(a-#b9=5(.>(9-=(?ae*(b#%=8(v0gyvw0*(p=_(c.5u*(+   $=(011h3
i"5.&#8   (c#q#<#(#$<(c   ^"(;#98   q.9.3(011w3(n9#9"89":#7(<=b=$<=$:&(#$#7&8"8(_"9-(8   bb.59([=:9.5(q#:-"$=83(c$(
45.:==<"$%8(.>(9-=(z9-(c$9=5$#9".$#7(j.5u8-.b(.$(4#58"$%(t=:-$.7.%"=8(lcj4tm*(b#%=8(vgfy01h3
c   =(,-#$%(#$<(n9=b-=$(a7#5u3(011z3(?(9#7=(.>(9_.(b#58=58](c$[=89"%#9"$%(#$<(:.q6"$"$%(%5#b-@6#8=<(#$<(95#$8"9".$@6#8=<(
<=b=$<=$:&(b#58"$%3(c$(45.:==<"$%8(.>(9-=(a.$>=5=$:=(.$(dqb"5":#7(;=9-.<8("$(p#9   5#7(e#$%   #%=(45.:=88"$%(ld;pe4m*(
b#%=8(fh0yf2v3
c   =(,-#$%(#$<(n9=b-=$(a7#5u3(t5#$8"9".$@/#8=<(4#58"$%(.>(9-=(a-"$=8=(t5==6#$u(   8"$%(#(\7.6#7()"8:5"q"$#9"[=(;.<=73c$(
b5.:==<"$%8(.>(cj4t(011g3(4#5"8*(a5#$:=3(s:9.6=53

()

!"#"$%&   ()*$#"+&,$&-"."$("$#/&0*1+,$2

!"#$%&"   $()#*

23/$45)#*

+,-,$%#./&)0."1/

6)78&"9*/$:#"1/&   ".;

<"#"&"   =)#*>*7)"?@0a7

b&005)#*>*7)"?@0a7

3      45&67%81,*9:&58+&   $2"9"+
;7$"&<:&=><>&

!"#$%&   %()*%+,-./0"$/,0%,1%&/11*#*0$%
2,3*45

!"#$%&   ()

*   +,-./)#$0(.1#-2.34

5-66&   ()7)+   .896:+

677+8%(9$,#/"4:%8,5%70;*4*5
<90*%=:%>?=?%

!"#$%&   ()*#+$   &+#,-

! !"#$%&#$"   

! (&)*+)*,-&.+,/$00+)+   #,-$*#&.+*1,+&23,3&%$   4,&,5&)#$267&),

*#)+   4#3

! !28"   &7/,&   /,9$%)+,:;<<=>

! ?"-@$   +/,5&)*+),7+&/,#",*65+)$"),&226)&2$+*,#3&   ,$   /$%$/6&7,

5&)*+)*,

.

01#,12#3

! !"#$%&   %()$#*+,-$(*)%$*%+./.)+.)-0%/"#1()2

! !"#$%3   %2#"/456"1.+%+./.)+.)-0%/"#1()2%7*+.81

! !"#$%9   %$#")1($(*)56"1.+%+./.)+.)-0%/"#1()2%7*+.81%

! !"#$%:   %$4.%()$.2#"$.+%7*+.81

! !"#$#%&#   ()#$*++,-*."

! ;4.%1$"-<()2%"//#*"-4

! ;4.%1()28.57*+.8%"//#*"-4

! !"#$%=   %*$4.#%#.-.)$%$#.)+1%()%+./.)+.)-0%/"#1()2

/

!"#$#%&#   ()#$   #*"+,

! !"#"$%"&   %(")*$%+,--./

! 0%1"23$23

! 4"56%   *77$2$&8%"&   %82"*&$   %3$1"2"8$9:

-

!"#$#%&#   ()#$   #*"+,

! !"#"$%"&   %(")*$%+,--./

! 0%1"23$23

! 4"56%   *77$2$&8%"&   %82"*&$   %3$1"2"8$9:

! 0%1"23$3%7;2%"%3*&#9$%*&1<8

! =;0>*&$%"99%1"23$3

! ="95<9"8$%9*&?%@$*#683%"55;2   *&#%8;%$"56%1"23$

! a      %0%&<0>$23

! (*&?3%72;0%   *77$2$&8%1"23$2%;<81<83%@$*#68$   %$b<"99:%;2%   *77$2$&89:%

"55;2   *&#%8;%)"2*;<3%5;&7*#<2"8*;&3

-

!"#$#%&#   ()#$   #*"+,

! !"#"$%"&   %(")*$%+,--./

! 0%1"23$23

! 4"56%   *77$2$&8%"&   %82"*&$   %3$1"2"8$9:

! 0%1"23$3%7;2%"%3*&#9$%*&1<8

! =;0>*&$%"99%1"23$3

! ="95<9"8$%9*&?%@$*#683%"55;2   *&#%8;%$"56%1"23$

! a      %0%&<0>$23

! (*&?3%72;0%   *77$2$&8%1"23$2%;<81<83%@$*#68$   %$b<"99:%;2%   *77$2$&89:%

"55;2   *&#%8;%)"2*;<3%5;&7*#<2"8*;&3

! c*&   %86$%d!e%"55;2   *&#%8;%86$3$%@$*#683

-

!"#$#%&#   ()#$   #*"+,

! !"#"$%"&   %(")*$%+,--./

! 0%1"23$23

! 4"56%   *77$2$&8%"&   %82"*&$   %3$1"2"8$9:

! 0%1"23$3%7;2%"%3*&#9$%*&1<8

-

!"#$#%&#   ()#$   #*"+,

! !"#"$%"&   %(")*$%+,--./

! 0%1"23$23

! 4"56%   *77$2$&8%"&   %82"*&$   %3$1"2"8$9:

! 0%1"23$3%7;2%"%3*&#9$%*&1<8

! =;0>*&$%"99%1"23$3%

? ?

@

? ?

@

?

?

a

, ,?

?

-

!"#$#%&#   ()#$   #*"+,

! !"#"$%"&   %(")*$%+,--./

! 0%1"23$23

! 4"56%   *77$2$&8%"&   %82"*&$   %3$1"2"8$9:

! 0%1"23$3%7;2%"%3*&#9$%*&1<8

! =*&   %>!?

@ @

a

@ @

a

@

@

b

, ,@

@

@ ,

-.

!"#$#%&#   ()#$   #*"+,

! !"#"$%"&   %(")*$%+,--./

! 0%1"23$23

! 4"56%   *77$2$&8%"&   %82"*&$   %3$1"2"8$9:

! 0%1"23$3%7;2%"%3*&#9$%*&1<8

--

!"#$#%&#   ()#$   #*"+,

! !"#"$%"&   %(")*$%+,--./

! 0%1"23$23

! 4"56%   *77$2$&8%"&   %82"*&$   %3$1"2"8$9:

! 0%1"23$3%7;2%"%3*&#9$%*&1<8

! =;0>*&$%"99%1"23$3%>:%?$*#68$   %3<0%;7%86$0

c

@ @

d

,

@ @

d

@

@

e

a bc

@

-.

!"#$#%&#   ()#$   #*"+,

! !"#"$%"&   %(")*$%+,--./

! 0%1"23$23

! 4"56%   *77$2$&8%"&   %82"*&$   %3$1"2"8$9:

! 0%1"23$3%7;2%"%3*&#9$%*&1<8

! =*&   %86$%;<81<8

a

> >

b

,

> >

b

>

>

c

? @a

>

a @

-.

23#.3*#4

! !"#$%&   %()$#*+,-$(*)%$*%+./.)+.)-0%/"#1()2

! !"#$%3   %2#"/456"1.+%+./.)+.)-0%/"#1()2%7*+.81

! !"#$%9   %$#")1($(*)56"1.+%+./.)+.)-0%/"#1()2%7*+.81%

! !"#$%:   %$4.%()$.2#"$.+%7*+.81

! ;4.%.)1.768.%"//#*"-4

! !"#$%&   ()*+,$   --./   ("

! ;4.%1()28.57*+.8%"//#*"-4

! !"#$%<   %*$4.#%#.-.)$%$#.)+1%()%+./.)+.)-0%/"#1()2

01

!"#$%&   ()*+,$-#&"./

! !"#$%&   ()&*+,-(   .)&/01123

! 4-56"(   7"-(&-8&&

! 9$   :;<6   =%)&*>?@   $=%$

! ?$   (="7"-(<6   =%)&*   .7@   $=%$

! >7   +a"(b

01

!"#$%&   ()*+,$-#&"./

! !"#$%&   ()&*+,-(   .)&/01123

! 4$   "(&-(%&5   $6%$&7"$68

! 9   $6%$:

! ;%8&8<%&-8<%$&5   $6%$&/"=%=&5   $6%$03&+-(6>.8&5   $6%$:&?<%(&"8&)-%6&

5   $6"(@

! 4?-&$%6>.8"(@&5   $6%$6&/*   .8a*b4c&   ()&*b4a*   .83

01

!"#$%&   ()*+,$-#&"./

! !"#$%&   ()&*+,-(   .)&/01123

! ,4$"(5&6%76

! 87%&9   $7%$:&6-&9   $7%&"(946

! ;   $7%$0&%<6$   +6&=%   64$%7&=$->&9   $7%$:&-46946

! ?   @%&9   $7%$0&-46946&   7&6a%&$%74.6

01

!"#$%&   ()*+,$-#&"./

! !"#$%&   ()&*+,-(   .)&/01123

! ,4$"(5&6$   "("(5

! 78%&9   $8%$:&6-&9   $8%&6$   "("(5&)   6   

! ;   $8%$0&%<6$   +6&=%   64$%8&=$->&9   $8%$:&-46946

! ?$   "(&9   $8%$0&@"6a&6a%&   ))"6"-(   .&=%   64$%8

01

!"#$%&   ()*+,$-#&"./

! !"#$%&   ()&*+,-(   .)&/01123

! ,4$"(5&6$   "("(5

! !"#$%&   "#   ($)*$%&   "#$)   &+,+,-$.&)&

! 7   $8%$0&%96$   +6&:%   64$%8&:$-;&<   $8%$=&-46<46

! >$   "(&<   $8%$0&?"6@&6@%&   ))"6"-(   .&:%   64$%8

01

!"#$%&   ()*+,$-#&"./

! !"#$%&   ()&*+,-(   .)&/01123

! ,4$"(5&6$   "("(5

! !"#$%&   "#   ($)*$%&   "#$)   &+,+,-$.&)&

! 7   (86&6$   "(&9   $:%$;&-(&6<%&6$   "("(5&)   6   &/:   =%&:%63

! >-.46"-(

! ;1?@-.)&+$-::?#   .")   6"-(

! a   b%&   &6%(6<&-@&6<%&6$   "("(5&)   6   &   :&6<%&c6%:6d&)   6   

! e:%&6<%&-6<%$&("(%&6%(6<:&6-&6$   "(&9   $:%$;

! f%(%$   6%&9   $:%$;&-46946&@-$&6<%&c6%:6d&:%(6

! g%9%   6&;1&6"=%:&6-&5%6&9   $:%$;&-46946&@-$&   ..&6$   "("(5&:%(6%(+%:

! h   $:%$0&%i6$   +6&@%   64$%:&@$-=&9   $:%$;&-46946

! a$   "(&9   $:%$0&j"6<&6<%&   ))"6"-(   .&@%   64$%:

01

45#05&#6

! !"#$%&   %()$#*+,-$(*)%$*%+./.)+.)-0%/"#1()2

! !"#$%3   %2#"/456"1.+%+./.)+.)-0%/"#1()2%7*+.81

! !"#$%9   %$#")1($(*)56"1.+%+./.)+.)-0%/"#1()2%7*+.81%

! !"#$%:   %$4.%()$.2#"$.+%7*+.81

! ;4.%.)1.768.%"//#*"-4

! ;4.%1$"-<()2%"//#*"-4

! !"#$%&   ()#*+,-#)$.//0,.1"

! !"#$%=   %*$4.#%#.-.)$%$#.)+1%()%+./.)+.)-0%/"#1()2

23

!"#$%&   ()#*+,-#)$+#.",-

! !"#$%&#$   &()#*+&,-../0

! (1234$5&%*#6"73#85   &#$   &9*#$84941$73#85   &6#*85*8

! :#25&#8&;<89&$1=

! >=1&6#*85*8&#*5&9*5#95   &5?<#))@

! a*#6"73#85   &#$   &9*#$84941$73#85   &4$b1*2#941$&4$&#&84$%)5&21   5)

! >*#4$5   &91%59"5*

! c85   &91%59"5*&b1*&   5d1   4$%

! >"5@&35d125&1$5

! 84$%)5721   5)

//

!"#$%&   ()#*+,-#)$+#.",-

! !"#$%&#$   &()#*+&,-../0

! ("#))1$%123

! 4156   1*&56789$#:96$

! ;*#<"=8#21   &<#*21*2&:><95#))>&:#+1&   >$#795&<*6%*#779$%

! ?*#$29:96$=8#21   &@1#:a*12&"#*   &:6&81&#556776   #:1   &8>&4b&#:&:"1&

2#71&:971

! c6   1)&56789$#:96$

! d6e&:6&a21&86:"&+9$   2&6@&9$@6*7#:96$&9$&#&29$%)1&76   1)f

! ?*#9$9$%&56789$#:96$

/0

!"#$%&   ()#*+,-#)$+#.",-

!"#$%&   (&

)&%*+,-%   (.

/0%123   (%&1+
! 4115&%2(
! 671%839(%25&(   

!%82$%&   (&

#&%:   ;2;7:,-%   (.

)&((.<3=:73   (%&1+>
! 6(      3%115&%2(
! ?7:,871%839(%25&(   

/0

!"#$%&   ()#*+,-#)$+#.",-

!"#$%&   (&

)&%*+,-%   (.

/0%123   (%&1+
! 4115&%2(
! 671%839(%25&(   

3@(%a3   (%&1+
3=%**&70;a%2(>
!33"7a(3   (%&1+
!33?7:,871%839(%25&(   

!%82$%&   (&

#&%:   ;2;7:,-%   (.

)&((.<3=:73   (%&1+>
! 6(      3%115&%2(
! ?7:,871%839(%25&(   

/0

!"#$%&   ()#*+,-#)$+#.",-

!"#$%&   (&

)&%*+,-%   (.

/0%123   (%&1+
! 4115&%2(
! 671%839(%25&(   

@7a-;:(
3b(%a3   (%&1+
3=%**&70;a%2(>
!33"7a(3   (%&1+
!33?7:,871%839(%25&(   

!%82$%&   (&

#&%:   ;2;7:,-%   (.

)&((.<3=:73   (%&1+>
! 6(      3%115&%2(
! ?7:,871%839(%25&(   

/0

!"#$%&   ()#*+,-#)$+#.",-

! !"#$%&#$   &()#*+&,-../0

! 1234   2*&34567$#874$

! 9"2&62#5:;2#*3"&   234   2*&<4*&8"2&8*#$;7874$:6#;2   &=#*;2*

! >*4?7   2;&8*#$;7874$;@

! >*4?7   2;&%*#="&,=#*87#)&=#*;2&7$&3#$   7   #82&7825&abc&dc&ef0@

! 142;&$48&*2;8*738&<2#8g*2;&h&i2&g;2&$4$:)43#)&%*#=":<2#8g*2;&844j

! k4   2)&34567$#874$

! 9*#7$7$%&528"4   ;&4<&8"2&34567$2   &54   2)

/0

!"#$%&   ()#*+,-#)$+#.",-

! !"#$%&#$   &()#*+&,-../0

! 1234   2*&34567$#874$

! 94   2)&34567$#874$&,)7$2#*&54   2):0

!

!

!

&;

&;

!"#$%&   ()*+,- ! ./$0%"#!"#$%12345 ! ./$0%"$!"#$%623+!*6*   + ! ./$0%"
!"#$%12345 ! ./$0%"#% 7%/89$%& ./$0%
!"#$%623+!*6*   + ! ./$0%"
%/"8<#=& ./$0%
%/"8<#=& ./$0% % 7%/89$%&08/890 7#$/"8<#=

7%/89$%   >%<:;8 ! 7%/89$%"

7%/89$%   >%<:;8 ! 7%/89$%"

!"#$%!/"8<#="

!"#$%&   ()*+,- ! ./$0%"#% 7%/89$%& :$/.;$/"8<#=

7%/89$%   >%<:;8 ! 7%/89$%"

! <*#7$7$%&528"4   :&4=&8"2&34567$2   &54   2)

/0

!"#$%&   ()#*+,-#)$+#.",-

! !"#$%&#$   &()#*+&,-../0

! 1234   2*&34567$#874$

! 94   2)&34567$#874$

iii

d:b

d:

g.&gh&g-&gl&iii

:"2&;8#3+

:"2&7$>=8

d:j( d:k(

g.j(

! :*#$;7874$&<2#8=*2&825>)#82;&,?&@&?4*   a&8&@&bcd&8#%0

! /.012$.,3e&d:?8f&d:?f&d:8&

! 4566#   .$7,6-e&g.?8f&g.?f&g.8&

! 8#9.$7,6-e&gh?8f&gh?f&gh8&

! /.012$.,3$0   -$1566#   .$7,6-e&d:?8g.?8f&d:?8g.?f&iii

! :;/$<&(60+e&g.8gh8&

! :;/$.6&(60+%e&g.8gh8g-8f&d:8g.8gh8f&iii

! 8=$7,6-$>$:;/$<&(60+%e&g.?gh8g-8f&d:8g.?gh8f&&iii

! :*#7$7$%&528"4   ;&4<&8"2&34567$2   &54   2)

?@

!"#$%&   ()#*+,-#)$+#.",-

! !"#$%&#$   &()#*+&,-../0

! 1234   2*&34567$#874$

! 94   2)&34567$#874$

! :*#;"&<2#8=*2&825;)#82>

! ?*45&9@ab#*>2*

! /#0-c&d2#   &e4*   f&"2#   &8#%f&"2#   &e4*   &g&8#%

! 1,-&2&#3c&94   7<72*&e4*   f&54   7<72*&8#%f&54   7<72*&e4*   &g&8#%

! /#0-$4$+,-&2&#35&e4*   &h&8#%&34567$#874$>

! 6#.7##   c&i$j&8#%&628e22$&"2#   &#$   &54   7<72*&

! 8933,9   -&   (c&a#%>&4$&8"2&)2<8&h&*7%"8&4<&"2#   &h&54   7<72*

! 8&:)&   (c&e4*   &h&8#%&34567$#874$>

! kl8*#&<2#8=*2>

! !7,$)&   ;%c&a#%>&4<&;#*2$8f&3"7)   &#$   &%*#$   3"7)   

! <3&.=&g&"2#   &e4*   &h&8#%&a*#$>7874$&<2#8=*2&825;)#82>&,e&m&e4*   f&8&m&

>?

bn@&8#%0

! a*#7$7$%&528"4   >&4<&8"2&34567$2   &54   2)

!"#$%&   ()#*+,-#)$+#.",-

! !"#$%&#$   &()#*+&,-../0

! 1234   2*&34567$#874$

! 94   2)&34567$#874$

! :*#;"&<2#8=*2&825;)#82>

! ?*45&9@ab#*>2*

e

)7+2

! cd8*#&<2#8=*2>

a"2

5#$

)7+2

e

78

)7+2

fff

)7+2

! a*#7$7$%&528"4   >&4<&8"2&34567$2   &54   2)

/0

!"#$%&   ()#*+,-#)$+#.",-

! !"#$%&#$   &()#*+&,-../0

! 1234   2*&34567$#874$

! 94   2)&34567$#874$

! :*#7$7$%&528"4   ;&4<&8"2&34567$2   &54   2)

! =2*32>8*4$&?&#))4@2   &6a&8"2&)7$2#*&54   2)

/0

!"#$%&   ()*#+$   &+#,-

! !"#$%&   (")

! *)(+#,-+.#+/0"12.1+3"1   )4./   #+.3"#,   )%/   ")

! 5/%36   )4.#+/0"12.1+3"1   )4.%)1./&%   )   )4./   #+.3"#,   )%/   ")7.

,8/.(+$%&%/+-9

! 5   )4-+.#+/0"12.3"#$-+/+.3"#,   )%/   ")

! :)+.&+3+)/.(/819.%,"8/.+)(+#,-+.;.(/%36   )4

! 58&1+%)8.%)1.<%))   )4.=>?@?a

.

..

!"#"$"%&"   

!"#$%&   ()   #$*(+   $(,-#.*(/.(!   *(01123(45.6#6"7"89":(;.<=78(>.5(?:9".$@/#8=<(a-"$=8=()=b=$<=$:&(4#58"$%3(c$(
b5.:==<"$%8(.>(da;e(*(b#%=8(ffg@fhh
e"#$%(i   #$%*(j=$6"$(+"#$%*(#$<(k   $(e"   *(011g3(/"7"$%   #77&@a.$895#"$=<(l;.$.7"$%   #7m(n-">9@o=<   :=(4#58"$%3(c$(
45.:==<"$%8(.>(d;pe4(011g3
o":-#5<(+.-#$88.$(#$<(4"=55=(p   %   =83(01123(c$:5=q=$9#7()=b=$<=$:&(4#58"$%(r8"$%(s$7"$=(e=#5$"$%3(c$(45.:==<"$%8(.>(
9-=(a.pee(n-#5=<(t#8u(n=88".$(.>(d;pe4@a.pee*(bb3(vvwxyvvwz*(45#%   =*(+   $=(01123
+.#u"q(p"[5=(#$<(o&#$(;:).$#7<3(011z3(c$9=%5#9"$%(\5#b-@/#8=<(#$<(t5#$8"9".$@/#8=<()=b=$<=$:&(4#58=583(c$(
45.:==<"$%8(.>(?ae@1z](iet*(b#%=8(gf1ygfz*(a.7   q6   8*(rn?3(+   $=3(
+.#u"q(p"[5=*(+.-#$(i#77*(+=$8(p"788.$*(\   78.$(d5&%"9*(#$<(n[=9.87#[(;#5"$.[3(011h3(e#6=7=<(b8=   <.@b5.^=:9"[=(
<=b=$<=$:&(b#58"$%(_"9-(8   bb.59([=:9.5(q#:-"$=83(c$(45.:==<"$%8(.>(9-=(v19-(a.$>=5=$:=(.$(a.qb   9#9".$#7(p#9   5#7(
e#$%   #%=(e=#5$"$%(la.peem*(b#%=8(00vy00f3
+.#u"q(p"[5=3(011g3(p.$@45.^=:9"[=(<=b=$<=$:&(b#58"$%("$(=   b=:9=<(7"$=#5(9"q=3(c$(45.:==<"$%8(.>(9-=(x29-(q==9"$%(.>(9-=(
?ae(#$<(9-=(x9-("$9=5$#9".$#7(:.$>=5=$:=(.$(p#9   5#7(e#$%   #%=(45.:=88"$%(.>(9-=(ape4*(b#%=8(wfv@wfg3
b=$^"(n#%#=(#$<(?7.$(e#["=3(011h3(4#58=5(a.q6"$#9".$(6&(o=b#58"$%3(c$(45.:==<"$%8(.>(9-=(i   q#$(e#$%   #%=(
t=:-$.7.%&(a.$>=5=$:=(.>(9-=(p.59-(?q=5":#$(a-#b9=5(.>(9-=(?ae*(b#%=8(v0gyvw0*(p=_(c.5u*(+   $=(011h3
i"5.&#8   (c#q#<#(#$<(c   ^"(;#98   q.9.3(011w3(n9#9"89":#7(<=b=$<=$:&(#$#7&8"8(_"9-(8   bb.59([=:9.5(q#:-"$=83(c$(
45.:==<"$%8(.>(9-=(z9-(c$9=5$#9".$#7(j.5u8-.b(.$(4#58"$%(t=:-$.7.%"=8(lcj4tm*(b#%=8(vgfy01h3
c   =(,-#$%(#$<(n9=b-=$(a7#5u3(011z3(?(9#7=(.>(9_.(b#58=58](c$[=89"%#9"$%(#$<(:.q6"$"$%(%5#b-@6#8=<(#$<(95#$8"9".$@6#8=<(
<=b=$<=$:&(b#58"$%3(c$(45.:==<"$%8(.>(9-=(a.$>=5=$:=(.$(dqb"5":#7(;=9-.<8("$(p#9   5#7(e#$%   #%=(45.:=88"$%(ld;pe4m*(
b#%=8(fh0yf2v3
c   =(,-#$%(#$<(n9=b-=$(a7#5u3(t5#$8"9".$@/#8=<(4#58"$%(.>(9-=(a-"$=8=(t5==6#$u(   8"$%(#(\7.6#7()"8:5"q"$#9"[=(;.<=73c$(
b5.:==<"$%8(.>(cj4t(011g3(4#5"8*(a5#$:=3(s:9.6=53

()

recent advances in id33 

qin iris wang 

yue zhang

  

at&t interactive 

cambridge university 

qiniriswang@gmail.com 

frcchang@gmail.com 

naacl tutorial, los angeles 

june 1, 2010  

part e: other recent trends 
in id33 

qin iris wang 

at&t interactive 
qiniriswang@gmail.com 

naacl tutorial, los angeles 

june 1, 2010  

outline 

!! part a: introduction to id33 

!! part b: graph-based id33 models 

!! part c: transition-based models  

!! part d: the combined models 

!! part e: other recent trends in dependency 

parsing 
!! explore higher order features 

!! use extra information source 

!! better parsing strategies 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

2 

other recent trends in dependency 
parsing 

!! explore higher order features 

!! use extra information sources 

!! raw data 

!! bilingual data 

!! linguistic rules 

!! better parsing strategies 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

3 

explore higher-order features (1) 

!! id33 by belief propagation (smith & 

eisner, 08) 

!! has a first order baseline parser 

!! using a bp network to incorporate higher order features 

into this first order parser approximately 

!! integration of graph-based and transition-based 

models (zhang & clark, 08) 
!! approximation by beam-search 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

4 

explore higher-order features (2) 

!! concise integer id135 formulations 

for id33 (martins et al. 09) 
!! formulate id33 as a polynomial-sized 

integer linear program 

!! integer id135 in nlp tutorial this afternoon 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

5 

use extra information source    raw 
data 

!! improving id33 with subtrees from 

auto-parsed data (w. chen et al. 09) 
!! using a base parser to pare large scale unannotated 

data  

!! extract subtrees from the auto-parsed data  

!! simple semi-supervised id33 (koo 

et al. 08)  

!! semi-supervised convex id33 

(wang et al. 08) 

6 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

use extra information source     
bilingual data 

!! bilingually-constrained monolingual shift-reduce 

parsing (huang et al. 09) 
!! a novel parsing paradigm that is much simpler than 

bi-parsing  

!! enhance a shift-reduce dependency parser with 

alignment features to resolve shift-reduce conflicts 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

7 

use extra information source     
linguistic rules 

!! semi-supervised learning of dependency parsers 
using generalized expectation criteria (druck et 
al. 09) 
!! directly use linguistic prior knowledge as a training 

signal 

!! model parameters are estimated using a generalized 
expectation (ge) objective function that penalizes the 
mismatch between model predictions and linguistic 
expectation constraints. 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

8 

better parsing strategies 

!! non-projective id132 (nivre, 09) 

!! expected linear time 

!! easy-first non-directional id33 

(goldberg and elhadad, 10) 
!! inspired by shen et al. 07 

!! use an easy-first order instead, o(nlogn) complexity 

!! allows using more context at each decision 

!! id145 for incremental parsing (huang 

& sagae, 10) 

!! linear time 

9 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

references 

!! w. chen, j. kazama, k. uchimoto and k. torisawa. 2009. improving 
id33 with subtrees from auto-parsed data. in proc. 
emnlp. 

!! gregory druck; gideon mann; andrew mccallum. 2009. semi-supervised 
learning of dependency parsers using generalized expectation criteria. 
in proc. acl.  

!! y. goldberg and m. elhadad. 2010. an efficient algorithm for easy-first 

non-directional id33. in proc. naacl. 

!! l. huang, w. jiang, and q. liu. 2009. bilingually-constrained 

(monolingual) id132. in proc. emnlp. 

!! l. huang and k. sagae. 2010. id145 for linear-time 

incremental parsing. in proc. acl. 

!! w. jiang and q. liu. 2010. id33 and projection based on 

word-pair classi   cation. in proc. acl. 

!! m. kuhlmann and g. satta. 2009. treebank grammar techniques for 

non-projective id33. in proc. eacl. 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

10 

references 

!! a. martins, n. smith and e. xing. 2009. concise integer linear 

programming formulations for id33. in proc. acl-
ijcnlp. 

!! j. nivre and r. mcdonald. 2008. integrating graph-based and transition-

based dependency parsers. in proc. acl-hlt.  

!! s. riedel and j. clarke. 2006. incremental integer id135 for 

non-projective id33. in proc. emnlp. 

!! l. shen, g. satta and a. k. joshi. 2007. guided learning for bidirectional 

sequence classi   ca- tion. in proc. acl.   

!! d. smith and j. eisner. 2008. id33 by belief propagation. 

in proc. emnlp. 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

11 

naacl 2010 tutorial ------ qin iris wang & yue zhang------june 1, 2010 

12 

